
SpeedyBeeF405V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  20000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .system_isr_vector 00000000  1fff0000  1fff0000  00050004  2**0
                  CONTENTS
  2 .text         00023c0c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001464  0802bc10  0802bc10  0003bc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08000188  08000188  00050004  2**0
                  CONTENTS
  5 .ARM          00000008  0802d074  0802d074  0003d074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802d07c  0802d07c  00050004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802d07c  0802d07c  0003d07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802d080  0802d080  0003d080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .pg_registry  00000140  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000051c  20000188  0802d084  00040188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003830  200006a4  0802d5a0  000506a4  2**2
                  ALLOC
 12 .fastram_data 00000004  10000000  0802d5a0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .fastram_bss  00001318  10000004  0802d5a4  00050004  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  20003ed4  20003ed4  00053ed4  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00050004  2**0
                  CONTENTS, READONLY
 16 .debug_info   0003e901  00000000  00000000  00050034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b483  00000000  00000000  0008e935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ef8  00000000  00000000  00099db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002a78  00000000  00000000  0009ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039324  00000000  00000000  0009f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00057ef8  00000000  00000000  000d8a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f3447  00000000  00000000  00130944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  00223d8b  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d360  00000000  00000000  00223ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200006a4 	.word	0x200006a4
 800801c:	00000000 	.word	0x00000000
 8008020:	0802bbf4 	.word	0x0802bbf4

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200006a8 	.word	0x200006a8
 800803c:	0802bbf4 	.word	0x0802bbf4

08008040 <strcmp>:
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008048:	2a01      	cmp	r2, #1
 800804a:	bf28      	it	cs
 800804c:	429a      	cmpcs	r2, r3
 800804e:	d0f7      	beq.n	8008040 <strcmp>
 8008050:	1ad0      	subs	r0, r2, r3
 8008052:	4770      	bx	lr

08008054 <strlen>:
 8008054:	4603      	mov	r3, r0
 8008056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800805a:	2a00      	cmp	r2, #0
 800805c:	d1fb      	bne.n	8008056 <strlen+0x2>
 800805e:	1a18      	subs	r0, r3, r0
 8008060:	3801      	subs	r0, #1
 8008062:	4770      	bx	lr
	...

08008070 <memchr>:
 8008070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008074:	2a10      	cmp	r2, #16
 8008076:	db2b      	blt.n	80080d0 <memchr+0x60>
 8008078:	f010 0f07 	tst.w	r0, #7
 800807c:	d008      	beq.n	8008090 <memchr+0x20>
 800807e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008082:	3a01      	subs	r2, #1
 8008084:	428b      	cmp	r3, r1
 8008086:	d02d      	beq.n	80080e4 <memchr+0x74>
 8008088:	f010 0f07 	tst.w	r0, #7
 800808c:	b342      	cbz	r2, 80080e0 <memchr+0x70>
 800808e:	d1f6      	bne.n	800807e <memchr+0xe>
 8008090:	b4f0      	push	{r4, r5, r6, r7}
 8008092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800809a:	f022 0407 	bic.w	r4, r2, #7
 800809e:	f07f 0700 	mvns.w	r7, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80080a8:	3c08      	subs	r4, #8
 80080aa:	ea85 0501 	eor.w	r5, r5, r1
 80080ae:	ea86 0601 	eor.w	r6, r6, r1
 80080b2:	fa85 f547 	uadd8	r5, r5, r7
 80080b6:	faa3 f587 	sel	r5, r3, r7
 80080ba:	fa86 f647 	uadd8	r6, r6, r7
 80080be:	faa5 f687 	sel	r6, r5, r7
 80080c2:	b98e      	cbnz	r6, 80080e8 <memchr+0x78>
 80080c4:	d1ee      	bne.n	80080a4 <memchr+0x34>
 80080c6:	bcf0      	pop	{r4, r5, r6, r7}
 80080c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080cc:	f002 0207 	and.w	r2, r2, #7
 80080d0:	b132      	cbz	r2, 80080e0 <memchr+0x70>
 80080d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080d6:	3a01      	subs	r2, #1
 80080d8:	ea83 0301 	eor.w	r3, r3, r1
 80080dc:	b113      	cbz	r3, 80080e4 <memchr+0x74>
 80080de:	d1f8      	bne.n	80080d2 <memchr+0x62>
 80080e0:	2000      	movs	r0, #0
 80080e2:	4770      	bx	lr
 80080e4:	3801      	subs	r0, #1
 80080e6:	4770      	bx	lr
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	bf06      	itte	eq
 80080ec:	4635      	moveq	r5, r6
 80080ee:	3803      	subeq	r0, #3
 80080f0:	3807      	subne	r0, #7
 80080f2:	f015 0f01 	tst.w	r5, #1
 80080f6:	d107      	bne.n	8008108 <memchr+0x98>
 80080f8:	3001      	adds	r0, #1
 80080fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080fe:	bf02      	ittt	eq
 8008100:	3001      	addeq	r0, #1
 8008102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008106:	3001      	addeq	r0, #1
 8008108:	bcf0      	pop	{r4, r5, r6, r7}
 800810a:	3801      	subs	r0, #1
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop

08008110 <__aeabi_drsub>:
 8008110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008114:	e002      	b.n	800811c <__adddf3>
 8008116:	bf00      	nop

08008118 <__aeabi_dsub>:
 8008118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800811c <__adddf3>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008126:	ea94 0f05 	teq	r4, r5
 800812a:	bf08      	it	eq
 800812c:	ea90 0f02 	teqeq	r0, r2
 8008130:	bf1f      	itttt	ne
 8008132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800813a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800813e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008142:	f000 80e2 	beq.w	800830a <__adddf3+0x1ee>
 8008146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800814a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800814e:	bfb8      	it	lt
 8008150:	426d      	neglt	r5, r5
 8008152:	dd0c      	ble.n	800816e <__adddf3+0x52>
 8008154:	442c      	add	r4, r5
 8008156:	ea80 0202 	eor.w	r2, r0, r2
 800815a:	ea81 0303 	eor.w	r3, r1, r3
 800815e:	ea82 0000 	eor.w	r0, r2, r0
 8008162:	ea83 0101 	eor.w	r1, r3, r1
 8008166:	ea80 0202 	eor.w	r2, r0, r2
 800816a:	ea81 0303 	eor.w	r3, r1, r3
 800816e:	2d36      	cmp	r5, #54	; 0x36
 8008170:	bf88      	it	hi
 8008172:	bd30      	pophi	{r4, r5, pc}
 8008174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800817c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008184:	d002      	beq.n	800818c <__adddf3+0x70>
 8008186:	4240      	negs	r0, r0
 8008188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800818c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008198:	d002      	beq.n	80081a0 <__adddf3+0x84>
 800819a:	4252      	negs	r2, r2
 800819c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081a0:	ea94 0f05 	teq	r4, r5
 80081a4:	f000 80a7 	beq.w	80082f6 <__adddf3+0x1da>
 80081a8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80081b0:	db0d      	blt.n	80081ce <__adddf3+0xb2>
 80081b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081b6:	fa22 f205 	lsr.w	r2, r2, r5
 80081ba:	1880      	adds	r0, r0, r2
 80081bc:	f141 0100 	adc.w	r1, r1, #0
 80081c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081c4:	1880      	adds	r0, r0, r2
 80081c6:	fa43 f305 	asr.w	r3, r3, r5
 80081ca:	4159      	adcs	r1, r3
 80081cc:	e00e      	b.n	80081ec <__adddf3+0xd0>
 80081ce:	f1a5 0520 	sub.w	r5, r5, #32
 80081d2:	f10e 0e20 	add.w	lr, lr, #32
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081dc:	bf28      	it	cs
 80081de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081e2:	fa43 f305 	asr.w	r3, r3, r5
 80081e6:	18c0      	adds	r0, r0, r3
 80081e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081f0:	d507      	bpl.n	8008202 <__adddf3+0xe6>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8008202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008206:	d31b      	bcc.n	8008240 <__adddf3+0x124>
 8008208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800820c:	d30c      	bcc.n	8008228 <__adddf3+0x10c>
 800820e:	0849      	lsrs	r1, r1, #1
 8008210:	ea5f 0030 	movs.w	r0, r0, rrx
 8008214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008218:	f104 0401 	add.w	r4, r4, #1
 800821c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008224:	f080 809a 	bcs.w	800835c <__adddf3+0x240>
 8008228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800822c:	bf08      	it	eq
 800822e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008232:	f150 0000 	adcs.w	r0, r0, #0
 8008236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800823a:	ea41 0105 	orr.w	r1, r1, r5
 800823e:	bd30      	pop	{r4, r5, pc}
 8008240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008244:	4140      	adcs	r0, r0
 8008246:	eb41 0101 	adc.w	r1, r1, r1
 800824a:	3c01      	subs	r4, #1
 800824c:	bf28      	it	cs
 800824e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008252:	d2e9      	bcs.n	8008228 <__adddf3+0x10c>
 8008254:	f091 0f00 	teq	r1, #0
 8008258:	bf04      	itt	eq
 800825a:	4601      	moveq	r1, r0
 800825c:	2000      	moveq	r0, #0
 800825e:	fab1 f381 	clz	r3, r1
 8008262:	bf08      	it	eq
 8008264:	3320      	addeq	r3, #32
 8008266:	f1a3 030b 	sub.w	r3, r3, #11
 800826a:	f1b3 0220 	subs.w	r2, r3, #32
 800826e:	da0c      	bge.n	800828a <__adddf3+0x16e>
 8008270:	320c      	adds	r2, #12
 8008272:	dd08      	ble.n	8008286 <__adddf3+0x16a>
 8008274:	f102 0c14 	add.w	ip, r2, #20
 8008278:	f1c2 020c 	rsb	r2, r2, #12
 800827c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008280:	fa21 f102 	lsr.w	r1, r1, r2
 8008284:	e00c      	b.n	80082a0 <__adddf3+0x184>
 8008286:	f102 0214 	add.w	r2, r2, #20
 800828a:	bfd8      	it	le
 800828c:	f1c2 0c20 	rsble	ip, r2, #32
 8008290:	fa01 f102 	lsl.w	r1, r1, r2
 8008294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008298:	bfdc      	itt	le
 800829a:	ea41 010c 	orrle.w	r1, r1, ip
 800829e:	4090      	lslle	r0, r2
 80082a0:	1ae4      	subs	r4, r4, r3
 80082a2:	bfa2      	ittt	ge
 80082a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082a8:	4329      	orrge	r1, r5
 80082aa:	bd30      	popge	{r4, r5, pc}
 80082ac:	ea6f 0404 	mvn.w	r4, r4
 80082b0:	3c1f      	subs	r4, #31
 80082b2:	da1c      	bge.n	80082ee <__adddf3+0x1d2>
 80082b4:	340c      	adds	r4, #12
 80082b6:	dc0e      	bgt.n	80082d6 <__adddf3+0x1ba>
 80082b8:	f104 0414 	add.w	r4, r4, #20
 80082bc:	f1c4 0220 	rsb	r2, r4, #32
 80082c0:	fa20 f004 	lsr.w	r0, r0, r4
 80082c4:	fa01 f302 	lsl.w	r3, r1, r2
 80082c8:	ea40 0003 	orr.w	r0, r0, r3
 80082cc:	fa21 f304 	lsr.w	r3, r1, r4
 80082d0:	ea45 0103 	orr.w	r1, r5, r3
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f1c4 040c 	rsb	r4, r4, #12
 80082da:	f1c4 0220 	rsb	r2, r4, #32
 80082de:	fa20 f002 	lsr.w	r0, r0, r2
 80082e2:	fa01 f304 	lsl.w	r3, r1, r4
 80082e6:	ea40 0003 	orr.w	r0, r0, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	fa21 f004 	lsr.w	r0, r1, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	f094 0f00 	teq	r4, #0
 80082fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082fe:	bf06      	itte	eq
 8008300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008304:	3401      	addeq	r4, #1
 8008306:	3d01      	subne	r5, #1
 8008308:	e74e      	b.n	80081a8 <__adddf3+0x8c>
 800830a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800830e:	bf18      	it	ne
 8008310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008314:	d029      	beq.n	800836a <__adddf3+0x24e>
 8008316:	ea94 0f05 	teq	r4, r5
 800831a:	bf08      	it	eq
 800831c:	ea90 0f02 	teqeq	r0, r2
 8008320:	d005      	beq.n	800832e <__adddf3+0x212>
 8008322:	ea54 0c00 	orrs.w	ip, r4, r0
 8008326:	bf04      	itt	eq
 8008328:	4619      	moveq	r1, r3
 800832a:	4610      	moveq	r0, r2
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	ea91 0f03 	teq	r1, r3
 8008332:	bf1e      	ittt	ne
 8008334:	2100      	movne	r1, #0
 8008336:	2000      	movne	r0, #0
 8008338:	bd30      	popne	{r4, r5, pc}
 800833a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800833e:	d105      	bne.n	800834c <__adddf3+0x230>
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	4149      	adcs	r1, r1
 8008344:	bf28      	it	cs
 8008346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008350:	bf3c      	itt	cc
 8008352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008356:	bd30      	popcc	{r4, r5, pc}
 8008358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800835c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf1a      	itte	ne
 8008370:	4619      	movne	r1, r3
 8008372:	4610      	movne	r0, r2
 8008374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008378:	bf1c      	itt	ne
 800837a:	460b      	movne	r3, r1
 800837c:	4602      	movne	r2, r0
 800837e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008382:	bf06      	itte	eq
 8008384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008388:	ea91 0f03 	teqeq	r1, r3
 800838c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	bf00      	nop

08008394 <__aeabi_ui2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f04f 0500 	mov.w	r5, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	e750      	b.n	8008254 <__adddf3+0x138>
 80083b2:	bf00      	nop

080083b4 <__aeabi_i2d>:
 80083b4:	f090 0f00 	teq	r0, #0
 80083b8:	bf04      	itt	eq
 80083ba:	2100      	moveq	r1, #0
 80083bc:	4770      	bxeq	lr
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083cc:	bf48      	it	mi
 80083ce:	4240      	negmi	r0, r0
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	e73e      	b.n	8008254 <__adddf3+0x138>
 80083d6:	bf00      	nop

080083d8 <__aeabi_f2d>:
 80083d8:	0042      	lsls	r2, r0, #1
 80083da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083de:	ea4f 0131 	mov.w	r1, r1, rrx
 80083e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083e6:	bf1f      	itttt	ne
 80083e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083f4:	4770      	bxne	lr
 80083f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083fa:	bf08      	it	eq
 80083fc:	4770      	bxeq	lr
 80083fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008408:	4770      	bxeq	lr
 800840a:	b530      	push	{r4, r5, lr}
 800840c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008418:	e71c      	b.n	8008254 <__adddf3+0x138>
 800841a:	bf00      	nop

0800841c <__aeabi_ul2d>:
 800841c:	ea50 0201 	orrs.w	r2, r0, r1
 8008420:	bf08      	it	eq
 8008422:	4770      	bxeq	lr
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	f04f 0500 	mov.w	r5, #0
 800842a:	e00a      	b.n	8008442 <__aeabi_l2d+0x16>

0800842c <__aeabi_l2d>:
 800842c:	ea50 0201 	orrs.w	r2, r0, r1
 8008430:	bf08      	it	eq
 8008432:	4770      	bxeq	lr
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800843a:	d502      	bpl.n	8008442 <__aeabi_l2d+0x16>
 800843c:	4240      	negs	r0, r0
 800843e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800844a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800844e:	f43f aed8 	beq.w	8008202 <__adddf3+0xe6>
 8008452:	f04f 0203 	mov.w	r2, #3
 8008456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800845a:	bf18      	it	ne
 800845c:	3203      	addne	r2, #3
 800845e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008462:	bf18      	it	ne
 8008464:	3203      	addne	r2, #3
 8008466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800846a:	f1c2 0320 	rsb	r3, r2, #32
 800846e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008472:	fa20 f002 	lsr.w	r0, r0, r2
 8008476:	fa01 fe03 	lsl.w	lr, r1, r3
 800847a:	ea40 000e 	orr.w	r0, r0, lr
 800847e:	fa21 f102 	lsr.w	r1, r1, r2
 8008482:	4414      	add	r4, r2
 8008484:	e6bd      	b.n	8008202 <__adddf3+0xe6>
 8008486:	bf00      	nop

08008488 <__aeabi_dmul>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800848e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008496:	bf1d      	ittte	ne
 8008498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800849c:	ea94 0f0c 	teqne	r4, ip
 80084a0:	ea95 0f0c 	teqne	r5, ip
 80084a4:	f000 f8de 	bleq	8008664 <__aeabi_dmul+0x1dc>
 80084a8:	442c      	add	r4, r5
 80084aa:	ea81 0603 	eor.w	r6, r1, r3
 80084ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084ba:	bf18      	it	ne
 80084bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084c8:	d038      	beq.n	800853c <__aeabi_dmul+0xb4>
 80084ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ce:	f04f 0500 	mov.w	r5, #0
 80084d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084e6:	f09c 0f00 	teq	ip, #0
 80084ea:	bf18      	it	ne
 80084ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80084f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084fc:	d204      	bcs.n	8008508 <__aeabi_dmul+0x80>
 80084fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008502:	416d      	adcs	r5, r5
 8008504:	eb46 0606 	adc.w	r6, r6, r6
 8008508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800850c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800851c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008520:	bf88      	it	hi
 8008522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008526:	d81e      	bhi.n	8008566 <__aeabi_dmul+0xde>
 8008528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800852c:	bf08      	it	eq
 800852e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008532:	f150 0000 	adcs.w	r0, r0, #0
 8008536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008540:	ea46 0101 	orr.w	r1, r6, r1
 8008544:	ea40 0002 	orr.w	r0, r0, r2
 8008548:	ea81 0103 	eor.w	r1, r1, r3
 800854c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008550:	bfc2      	ittt	gt
 8008552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800855a:	bd70      	popgt	{r4, r5, r6, pc}
 800855c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008560:	f04f 0e00 	mov.w	lr, #0
 8008564:	3c01      	subs	r4, #1
 8008566:	f300 80ab 	bgt.w	80086c0 <__aeabi_dmul+0x238>
 800856a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800856e:	bfde      	ittt	le
 8008570:	2000      	movle	r0, #0
 8008572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008576:	bd70      	pople	{r4, r5, r6, pc}
 8008578:	f1c4 0400 	rsb	r4, r4, #0
 800857c:	3c20      	subs	r4, #32
 800857e:	da35      	bge.n	80085ec <__aeabi_dmul+0x164>
 8008580:	340c      	adds	r4, #12
 8008582:	dc1b      	bgt.n	80085bc <__aeabi_dmul+0x134>
 8008584:	f104 0414 	add.w	r4, r4, #20
 8008588:	f1c4 0520 	rsb	r5, r4, #32
 800858c:	fa00 f305 	lsl.w	r3, r0, r5
 8008590:	fa20 f004 	lsr.w	r0, r0, r4
 8008594:	fa01 f205 	lsl.w	r2, r1, r5
 8008598:	ea40 0002 	orr.w	r0, r0, r2
 800859c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80085a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085a8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ac:	eb42 0106 	adc.w	r1, r2, r6
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 040c 	rsb	r4, r4, #12
 80085c0:	f1c4 0520 	rsb	r5, r4, #32
 80085c4:	fa00 f304 	lsl.w	r3, r0, r4
 80085c8:	fa20 f005 	lsr.w	r0, r0, r5
 80085cc:	fa01 f204 	lsl.w	r2, r1, r4
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085dc:	f141 0100 	adc.w	r1, r1, #0
 80085e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085e4:	bf08      	it	eq
 80085e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f1c4 0520 	rsb	r5, r4, #32
 80085f0:	fa00 f205 	lsl.w	r2, r0, r5
 80085f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085f8:	fa20 f304 	lsr.w	r3, r0, r4
 80085fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008600:	ea43 0302 	orr.w	r3, r3, r2
 8008604:	fa21 f004 	lsr.w	r0, r1, r4
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800860c:	fa21 f204 	lsr.w	r2, r1, r4
 8008610:	ea20 0002 	bic.w	r0, r0, r2
 8008614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800861c:	bf08      	it	eq
 800861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f094 0f00 	teq	r4, #0
 8008628:	d10f      	bne.n	800864a <__aeabi_dmul+0x1c2>
 800862a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800862e:	0040      	lsls	r0, r0, #1
 8008630:	eb41 0101 	adc.w	r1, r1, r1
 8008634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3c01      	subeq	r4, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1a6>
 800863e:	ea41 0106 	orr.w	r1, r1, r6
 8008642:	f095 0f00 	teq	r5, #0
 8008646:	bf18      	it	ne
 8008648:	4770      	bxne	lr
 800864a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	eb43 0303 	adc.w	r3, r3, r3
 8008654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008658:	bf08      	it	eq
 800865a:	3d01      	subeq	r5, #1
 800865c:	d0f7      	beq.n	800864e <__aeabi_dmul+0x1c6>
 800865e:	ea43 0306 	orr.w	r3, r3, r6
 8008662:	4770      	bx	lr
 8008664:	ea94 0f0c 	teq	r4, ip
 8008668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800866c:	bf18      	it	ne
 800866e:	ea95 0f0c 	teqne	r5, ip
 8008672:	d00c      	beq.n	800868e <__aeabi_dmul+0x206>
 8008674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008678:	bf18      	it	ne
 800867a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867e:	d1d1      	bne.n	8008624 <__aeabi_dmul+0x19c>
 8008680:	ea81 0103 	eor.w	r1, r1, r3
 8008684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008688:	f04f 0000 	mov.w	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008692:	bf06      	itte	eq
 8008694:	4610      	moveq	r0, r2
 8008696:	4619      	moveq	r1, r3
 8008698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800869c:	d019      	beq.n	80086d2 <__aeabi_dmul+0x24a>
 800869e:	ea94 0f0c 	teq	r4, ip
 80086a2:	d102      	bne.n	80086aa <__aeabi_dmul+0x222>
 80086a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086a8:	d113      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086aa:	ea95 0f0c 	teq	r5, ip
 80086ae:	d105      	bne.n	80086bc <__aeabi_dmul+0x234>
 80086b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086b4:	bf1c      	itt	ne
 80086b6:	4610      	movne	r0, r2
 80086b8:	4619      	movne	r1, r3
 80086ba:	d10a      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086bc:	ea81 0103 	eor.w	r1, r1, r3
 80086c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__aeabi_ddiv>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ea:	bf1d      	ittte	ne
 80086ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086f0:	ea94 0f0c 	teqne	r4, ip
 80086f4:	ea95 0f0c 	teqne	r5, ip
 80086f8:	f000 f8a7 	bleq	800884a <__aeabi_ddiv+0x16e>
 80086fc:	eba4 0405 	sub.w	r4, r4, r5
 8008700:	ea81 0e03 	eor.w	lr, r1, r3
 8008704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f000 8088 	beq.w	8008820 <__aeabi_ddiv+0x144>
 8008710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800871c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800872c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008734:	429d      	cmp	r5, r3
 8008736:	bf08      	it	eq
 8008738:	4296      	cmpeq	r6, r2
 800873a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800873e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008742:	d202      	bcs.n	800874a <__aeabi_ddiv+0x6e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	ea4f 0232 	mov.w	r2, r2, rrx
 800874a:	1ab6      	subs	r6, r6, r2
 800874c:	eb65 0503 	sbc.w	r5, r5, r3
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800875a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	ea4f 0232 	mov.w	r2, r2, rrx
 800878e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008796:	bf22      	ittt	cs
 8008798:	1ab6      	subcs	r6, r6, r2
 800879a:	4675      	movcs	r5, lr
 800879c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087bc:	d018      	beq.n	80087f0 <__aeabi_ddiv+0x114>
 80087be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087da:	d1c0      	bne.n	800875e <__aeabi_ddiv+0x82>
 80087dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087e0:	d10b      	bne.n	80087fa <__aeabi_ddiv+0x11e>
 80087e2:	ea41 0100 	orr.w	r1, r1, r0
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ee:	e7b6      	b.n	800875e <__aeabi_ddiv+0x82>
 80087f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087f4:	bf04      	itt	eq
 80087f6:	4301      	orreq	r1, r0
 80087f8:	2000      	moveq	r0, #0
 80087fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087fe:	bf88      	it	hi
 8008800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008804:	f63f aeaf 	bhi.w	8008566 <__aeabi_dmul+0xde>
 8008808:	ebb5 0c03 	subs.w	ip, r5, r3
 800880c:	bf04      	itt	eq
 800880e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008816:	f150 0000 	adcs.w	r0, r0, #0
 800881a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800882c:	bfc2      	ittt	gt
 800882e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008836:	bd70      	popgt	{r4, r5, r6, pc}
 8008838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800883c:	f04f 0e00 	mov.w	lr, #0
 8008840:	3c01      	subs	r4, #1
 8008842:	e690      	b.n	8008566 <__aeabi_dmul+0xde>
 8008844:	ea45 0e06 	orr.w	lr, r5, r6
 8008848:	e68d      	b.n	8008566 <__aeabi_dmul+0xde>
 800884a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	bf08      	it	eq
 8008854:	ea95 0f0c 	teqeq	r5, ip
 8008858:	f43f af3b 	beq.w	80086d2 <__aeabi_dmul+0x24a>
 800885c:	ea94 0f0c 	teq	r4, ip
 8008860:	d10a      	bne.n	8008878 <__aeabi_ddiv+0x19c>
 8008862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008866:	f47f af34 	bne.w	80086d2 <__aeabi_dmul+0x24a>
 800886a:	ea95 0f0c 	teq	r5, ip
 800886e:	f47f af25 	bne.w	80086bc <__aeabi_dmul+0x234>
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	e72c      	b.n	80086d2 <__aeabi_dmul+0x24a>
 8008878:	ea95 0f0c 	teq	r5, ip
 800887c:	d106      	bne.n	800888c <__aeabi_ddiv+0x1b0>
 800887e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008882:	f43f aefd 	beq.w	8008680 <__aeabi_dmul+0x1f8>
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e722      	b.n	80086d2 <__aeabi_dmul+0x24a>
 800888c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008890:	bf18      	it	ne
 8008892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008896:	f47f aec5 	bne.w	8008624 <__aeabi_dmul+0x19c>
 800889a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800889e:	f47f af0d 	bne.w	80086bc <__aeabi_dmul+0x234>
 80088a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088a6:	f47f aeeb 	bne.w	8008680 <__aeabi_dmul+0x1f8>
 80088aa:	e712      	b.n	80086d2 <__aeabi_dmul+0x24a>

080088ac <__gedf2>:
 80088ac:	f04f 3cff 	mov.w	ip, #4294967295
 80088b0:	e006      	b.n	80088c0 <__cmpdf2+0x4>
 80088b2:	bf00      	nop

080088b4 <__ledf2>:
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	e002      	b.n	80088c0 <__cmpdf2+0x4>
 80088ba:	bf00      	nop

080088bc <__cmpdf2>:
 80088bc:	f04f 0c01 	mov.w	ip, #1
 80088c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088d6:	d01b      	beq.n	8008910 <__cmpdf2+0x54>
 80088d8:	b001      	add	sp, #4
 80088da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088de:	bf0c      	ite	eq
 80088e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088e4:	ea91 0f03 	teqne	r1, r3
 80088e8:	bf02      	ittt	eq
 80088ea:	ea90 0f02 	teqeq	r0, r2
 80088ee:	2000      	moveq	r0, #0
 80088f0:	4770      	bxeq	lr
 80088f2:	f110 0f00 	cmn.w	r0, #0
 80088f6:	ea91 0f03 	teq	r1, r3
 80088fa:	bf58      	it	pl
 80088fc:	4299      	cmppl	r1, r3
 80088fe:	bf08      	it	eq
 8008900:	4290      	cmpeq	r0, r2
 8008902:	bf2c      	ite	cs
 8008904:	17d8      	asrcs	r0, r3, #31
 8008906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800890a:	f040 0001 	orr.w	r0, r0, #1
 800890e:	4770      	bx	lr
 8008910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008918:	d102      	bne.n	8008920 <__cmpdf2+0x64>
 800891a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800891e:	d107      	bne.n	8008930 <__cmpdf2+0x74>
 8008920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008928:	d1d6      	bne.n	80088d8 <__cmpdf2+0x1c>
 800892a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800892e:	d0d3      	beq.n	80088d8 <__cmpdf2+0x1c>
 8008930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__aeabi_cdrcmple>:
 8008938:	4684      	mov	ip, r0
 800893a:	4610      	mov	r0, r2
 800893c:	4662      	mov	r2, ip
 800893e:	468c      	mov	ip, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4663      	mov	r3, ip
 8008944:	e000      	b.n	8008948 <__aeabi_cdcmpeq>
 8008946:	bf00      	nop

08008948 <__aeabi_cdcmpeq>:
 8008948:	b501      	push	{r0, lr}
 800894a:	f7ff ffb7 	bl	80088bc <__cmpdf2>
 800894e:	2800      	cmp	r0, #0
 8008950:	bf48      	it	mi
 8008952:	f110 0f00 	cmnmi.w	r0, #0
 8008956:	bd01      	pop	{r0, pc}

08008958 <__aeabi_dcmpeq>:
 8008958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800895c:	f7ff fff4 	bl	8008948 <__aeabi_cdcmpeq>
 8008960:	bf0c      	ite	eq
 8008962:	2001      	moveq	r0, #1
 8008964:	2000      	movne	r0, #0
 8008966:	f85d fb08 	ldr.w	pc, [sp], #8
 800896a:	bf00      	nop

0800896c <__aeabi_dcmplt>:
 800896c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008970:	f7ff ffea 	bl	8008948 <__aeabi_cdcmpeq>
 8008974:	bf34      	ite	cc
 8008976:	2001      	movcc	r0, #1
 8008978:	2000      	movcs	r0, #0
 800897a:	f85d fb08 	ldr.w	pc, [sp], #8
 800897e:	bf00      	nop

08008980 <__aeabi_dcmple>:
 8008980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008984:	f7ff ffe0 	bl	8008948 <__aeabi_cdcmpeq>
 8008988:	bf94      	ite	ls
 800898a:	2001      	movls	r0, #1
 800898c:	2000      	movhi	r0, #0
 800898e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008992:	bf00      	nop

08008994 <__aeabi_dcmpge>:
 8008994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008998:	f7ff ffce 	bl	8008938 <__aeabi_cdrcmple>
 800899c:	bf94      	ite	ls
 800899e:	2001      	movls	r0, #1
 80089a0:	2000      	movhi	r0, #0
 80089a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089a6:	bf00      	nop

080089a8 <__aeabi_dcmpgt>:
 80089a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ac:	f7ff ffc4 	bl	8008938 <__aeabi_cdrcmple>
 80089b0:	bf34      	ite	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	2000      	movcs	r0, #0
 80089b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ba:	bf00      	nop

080089bc <__aeabi_dcmpun>:
 80089bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c4:	d102      	bne.n	80089cc <__aeabi_dcmpun+0x10>
 80089c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089ca:	d10a      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	d102      	bne.n	80089dc <__aeabi_dcmpun+0x20>
 80089d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089da:	d102      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	4770      	bx	lr
 80089e2:	f04f 0001 	mov.w	r0, #1
 80089e6:	4770      	bx	lr

080089e8 <__aeabi_d2uiz>:
 80089e8:	004a      	lsls	r2, r1, #1
 80089ea:	d211      	bcs.n	8008a10 <__aeabi_d2uiz+0x28>
 80089ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089f0:	d211      	bcs.n	8008a16 <__aeabi_d2uiz+0x2e>
 80089f2:	d50d      	bpl.n	8008a10 <__aeabi_d2uiz+0x28>
 80089f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089fc:	d40e      	bmi.n	8008a1c <__aeabi_d2uiz+0x34>
 80089fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a0a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a1a:	d102      	bne.n	8008a22 <__aeabi_d2uiz+0x3a>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	4770      	bx	lr
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	4770      	bx	lr

08008a28 <__aeabi_d2f>:
 8008a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a30:	bf24      	itt	cs
 8008a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a3a:	d90d      	bls.n	8008a58 <__aeabi_d2f+0x30>
 8008a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a50:	bf08      	it	eq
 8008a52:	f020 0001 	biceq.w	r0, r0, #1
 8008a56:	4770      	bx	lr
 8008a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a5c:	d121      	bne.n	8008aa2 <__aeabi_d2f+0x7a>
 8008a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a62:	bfbc      	itt	lt
 8008a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a68:	4770      	bxlt	lr
 8008a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a72:	f1c2 0218 	rsb	r2, r2, #24
 8008a76:	f1c2 0c20 	rsb	ip, r2, #32
 8008a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a82:	bf18      	it	ne
 8008a84:	f040 0001 	orrne.w	r0, r0, #1
 8008a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a94:	ea40 000c 	orr.w	r0, r0, ip
 8008a98:	fa23 f302 	lsr.w	r3, r3, r2
 8008a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aa0:	e7cc      	b.n	8008a3c <__aeabi_d2f+0x14>
 8008aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008aa6:	d107      	bne.n	8008ab8 <__aeabi_d2f+0x90>
 8008aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008aac:	bf1e      	ittt	ne
 8008aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ab6:	4770      	bxne	lr
 8008ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop

08008ac8 <__aeabi_uldivmod>:
 8008ac8:	b953      	cbnz	r3, 8008ae0 <__aeabi_uldivmod+0x18>
 8008aca:	b94a      	cbnz	r2, 8008ae0 <__aeabi_uldivmod+0x18>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	bf08      	it	eq
 8008ad0:	2800      	cmpeq	r0, #0
 8008ad2:	bf1c      	itt	ne
 8008ad4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ad8:	f04f 30ff 	movne.w	r0, #4294967295
 8008adc:	f000 bb0a 	b.w	80090f4 <__aeabi_idiv0>
 8008ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ae8:	f000 f99c 	bl	8008e24 <__udivmoddi4>
 8008aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008af4:	b004      	add	sp, #16
 8008af6:	4770      	bx	lr

08008af8 <__mulsc3>:
 8008af8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8008afc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8008b00:	ee20 5a21 	vmul.f32	s10, s0, s3
 8008b04:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8008b08:	ee61 5a20 	vmul.f32	s11, s2, s1
 8008b0c:	eef4 7a67 	vcmp.f32	s15, s15
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	ee35 7a25 	vadd.f32	s14, s10, s11
 8008b18:	d604      	bvs.n	8008b24 <__mulsc3+0x2c>
 8008b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1e:	eef0 0a47 	vmov.f32	s1, s14
 8008b22:	4770      	bx	lr
 8008b24:	eeb4 7a47 	vcmp.f32	s14, s14
 8008b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2c:	d7f5      	bvc.n	8008b1a <__mulsc3+0x22>
 8008b2e:	eddf 4a9e 	vldr	s9, [pc, #632]	; 8008da8 <__mulsc3+0x2b0>
 8008b32:	eeb0 4ac0 	vabs.f32	s8, s0
 8008b36:	eeb4 4a64 	vcmp.f32	s8, s9
 8008b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3e:	bfcc      	ite	gt
 8008b40:	2301      	movgt	r3, #1
 8008b42:	2300      	movle	r3, #0
 8008b44:	eeb0 4ae0 	vabs.f32	s8, s1
 8008b48:	f300 80a0 	bgt.w	8008c8c <__mulsc3+0x194>
 8008b4c:	eeb4 4a64 	vcmp.f32	s8, s9
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	f300 809a 	bgt.w	8008c8c <__mulsc3+0x194>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	eddf 4a93 	vldr	s9, [pc, #588]	; 8008da8 <__mulsc3+0x2b0>
 8008b5e:	eeb0 4ac1 	vabs.f32	s8, s2
 8008b62:	eeb4 4a64 	vcmp.f32	s8, s9
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	eef0 3ae1 	vabs.f32	s7, s3
 8008b6e:	dc48      	bgt.n	8008c02 <__mulsc3+0x10a>
 8008b70:	eef4 3a64 	vcmp.f32	s7, s9
 8008b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b78:	dc43      	bgt.n	8008c02 <__mulsc3+0x10a>
 8008b7a:	bb9b      	cbnz	r3, 8008be4 <__mulsc3+0xec>
 8008b7c:	eef0 6ae6 	vabs.f32	s13, s13
 8008b80:	eef4 6a64 	vcmp.f32	s13, s9
 8008b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b88:	dc14      	bgt.n	8008bb4 <__mulsc3+0xbc>
 8008b8a:	eeb0 6ac6 	vabs.f32	s12, s12
 8008b8e:	eeb4 6a64 	vcmp.f32	s12, s9
 8008b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b96:	dc0d      	bgt.n	8008bb4 <__mulsc3+0xbc>
 8008b98:	eeb0 5ac5 	vabs.f32	s10, s10
 8008b9c:	eeb4 5a64 	vcmp.f32	s10, s9
 8008ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba4:	dc06      	bgt.n	8008bb4 <__mulsc3+0xbc>
 8008ba6:	eef0 5ae5 	vabs.f32	s11, s11
 8008baa:	eef4 5a64 	vcmp.f32	s11, s9
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	ddb2      	ble.n	8008b1a <__mulsc3+0x22>
 8008bb4:	eeb4 0a40 	vcmp.f32	s0, s0
 8008bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbc:	f180 80e7 	bvs.w	8008d8e <__mulsc3+0x296>
 8008bc0:	eef4 0a60 	vcmp.f32	s1, s1
 8008bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc8:	f180 80d4 	bvs.w	8008d74 <__mulsc3+0x27c>
 8008bcc:	eeb4 1a41 	vcmp.f32	s2, s2
 8008bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd4:	f180 80c1 	bvs.w	8008d5a <__mulsc3+0x262>
 8008bd8:	eef4 1a61 	vcmp.f32	s3, s3
 8008bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be0:	f180 80ae 	bvs.w	8008d40 <__mulsc3+0x248>
 8008be4:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8008be8:	ee60 0a81 	vmul.f32	s1, s1, s2
 8008bec:	eee0 7a01 	vfma.f32	s15, s0, s2
 8008bf0:	eee0 0a21 	vfma.f32	s1, s0, s3
 8008bf4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008dac <__mulsc3+0x2b4>
 8008bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bfc:	ee20 7a87 	vmul.f32	s14, s1, s14
 8008c00:	e78b      	b.n	8008b1a <__mulsc3+0x22>
 8008c02:	eddf 7a69 	vldr	s15, [pc, #420]	; 8008da8 <__mulsc3+0x2b0>
 8008c06:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008da8 <__mulsc3+0x2b0>
 8008c0a:	eeb4 4a67 	vcmp.f32	s8, s15
 8008c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c12:	bfcc      	ite	gt
 8008c14:	2301      	movgt	r3, #1
 8008c16:	2300      	movle	r3, #0
 8008c18:	ee07 3a90 	vmov	s15, r3
 8008c1c:	ee11 3a10 	vmov	r3, s2
 8008c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	eef0 7ae7 	vabs.f32	s15, s15
 8008c2a:	eef4 3a47 	vcmp.f32	s7, s14
 8008c2e:	bfb8      	it	lt
 8008c30:	eef1 7a67 	vneglt.f32	s15, s15
 8008c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c38:	bfcc      	ite	gt
 8008c3a:	2301      	movgt	r3, #1
 8008c3c:	2300      	movle	r3, #0
 8008c3e:	eeb0 1a67 	vmov.f32	s2, s15
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	ee11 3a90 	vmov	r3, s3
 8008c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	eef0 7ae7 	vabs.f32	s15, s15
 8008c54:	eeb4 0a40 	vcmp.f32	s0, s0
 8008c58:	bfb8      	it	lt
 8008c5a:	eef1 7a67 	vneglt.f32	s15, s15
 8008c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c62:	eef0 1a67 	vmov.f32	s3, s15
 8008c66:	d651      	bvs.n	8008d0c <__mulsc3+0x214>
 8008c68:	eef4 0a60 	vcmp.f32	s1, s1
 8008c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c70:	d7b8      	bvc.n	8008be4 <__mulsc3+0xec>
 8008c72:	ee10 3a90 	vmov	r3, s1
 8008c76:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008db0 <__mulsc3+0x2b8>
 8008c7a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8008db4 <__mulsc3+0x2bc>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfb4      	ite	lt
 8008c82:	eef0 0a67 	vmovlt.f32	s1, s15
 8008c86:	eef0 0a47 	vmovge.f32	s1, s14
 8008c8a:	e7ab      	b.n	8008be4 <__mulsc3+0xec>
 8008c8c:	ee04 3a90 	vmov	s9, r3
 8008c90:	eddf 3a45 	vldr	s7, [pc, #276]	; 8008da8 <__mulsc3+0x2b0>
 8008c94:	ee10 3a10 	vmov	r3, s0
 8008c98:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	eef0 4ae4 	vabs.f32	s9, s9
 8008ca2:	eeb4 4a63 	vcmp.f32	s8, s7
 8008ca6:	bfb8      	it	lt
 8008ca8:	eef1 4a64 	vneglt.f32	s9, s9
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	bfcc      	ite	gt
 8008cb2:	2301      	movgt	r3, #1
 8008cb4:	2300      	movle	r3, #0
 8008cb6:	eeb0 0a64 	vmov.f32	s0, s9
 8008cba:	ee04 3a90 	vmov	s9, r3
 8008cbe:	ee10 3a90 	vmov	r3, s1
 8008cc2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	eef0 4ae4 	vabs.f32	s9, s9
 8008ccc:	eeb4 1a41 	vcmp.f32	s2, s2
 8008cd0:	bfb8      	it	lt
 8008cd2:	eef1 4a64 	vneglt.f32	s9, s9
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	eef0 0a64 	vmov.f32	s1, s9
 8008cde:	d622      	bvs.n	8008d26 <__mulsc3+0x22e>
 8008ce0:	eef4 1a61 	vcmp.f32	s3, s3
 8008ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce8:	bf78      	it	vc
 8008cea:	2301      	movvc	r3, #1
 8008cec:	f5ff af35 	bvc.w	8008b5a <__mulsc3+0x62>
 8008cf0:	ee11 3a90 	vmov	r3, s3
 8008cf4:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8008db0 <__mulsc3+0x2b8>
 8008cf8:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8008db4 <__mulsc3+0x2bc>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	bfb4      	ite	lt
 8008d00:	eef0 1a64 	vmovlt.f32	s3, s9
 8008d04:	eef0 1a44 	vmovge.f32	s3, s8
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e726      	b.n	8008b5a <__mulsc3+0x62>
 8008d0c:	ee10 3a10 	vmov	r3, s0
 8008d10:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008db0 <__mulsc3+0x2b8>
 8008d14:	eddf 7a27 	vldr	s15, [pc, #156]	; 8008db4 <__mulsc3+0x2bc>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bfb4      	ite	lt
 8008d1c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8008d20:	eeb0 0a47 	vmovge.f32	s0, s14
 8008d24:	e7a0      	b.n	8008c68 <__mulsc3+0x170>
 8008d26:	ee11 3a10 	vmov	r3, s2
 8008d2a:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8008db0 <__mulsc3+0x2b8>
 8008d2e:	eddf 4a21 	vldr	s9, [pc, #132]	; 8008db4 <__mulsc3+0x2bc>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bfb4      	ite	lt
 8008d36:	eeb0 1a64 	vmovlt.f32	s2, s9
 8008d3a:	eeb0 1a44 	vmovge.f32	s2, s8
 8008d3e:	e7cf      	b.n	8008ce0 <__mulsc3+0x1e8>
 8008d40:	ee11 3a90 	vmov	r3, s3
 8008d44:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008db0 <__mulsc3+0x2b8>
 8008d48:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008db4 <__mulsc3+0x2bc>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb4      	ite	lt
 8008d50:	eef0 1a67 	vmovlt.f32	s3, s15
 8008d54:	eef0 1a47 	vmovge.f32	s3, s14
 8008d58:	e744      	b.n	8008be4 <__mulsc3+0xec>
 8008d5a:	ee11 3a10 	vmov	r3, s2
 8008d5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008db0 <__mulsc3+0x2b8>
 8008d62:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008db4 <__mulsc3+0x2bc>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfb4      	ite	lt
 8008d6a:	eeb0 1a67 	vmovlt.f32	s2, s15
 8008d6e:	eeb0 1a47 	vmovge.f32	s2, s14
 8008d72:	e731      	b.n	8008bd8 <__mulsc3+0xe0>
 8008d74:	ee10 3a90 	vmov	r3, s1
 8008d78:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008db0 <__mulsc3+0x2b8>
 8008d7c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008db4 <__mulsc3+0x2bc>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfb4      	ite	lt
 8008d84:	eef0 0a67 	vmovlt.f32	s1, s15
 8008d88:	eef0 0a47 	vmovge.f32	s1, s14
 8008d8c:	e71e      	b.n	8008bcc <__mulsc3+0xd4>
 8008d8e:	ee10 3a10 	vmov	r3, s0
 8008d92:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008db0 <__mulsc3+0x2b8>
 8008d96:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008db4 <__mulsc3+0x2bc>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfb4      	ite	lt
 8008d9e:	eeb0 0a67 	vmovlt.f32	s0, s15
 8008da2:	eeb0 0a47 	vmovge.f32	s0, s14
 8008da6:	e70b      	b.n	8008bc0 <__mulsc3+0xc8>
 8008da8:	7f7fffff 	.word	0x7f7fffff
 8008dac:	7f800000 	.word	0x7f800000
 8008db0:	00000000 	.word	0x00000000
 8008db4:	80000000 	.word	0x80000000

08008db8 <__aeabi_d2lz>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	f7ff fdd3 	bl	800896c <__aeabi_dcmplt>
 8008dc6:	b928      	cbnz	r0, 8008dd4 <__aeabi_d2lz+0x1c>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd0:	f000 b80a 	b.w	8008de8 <__aeabi_d2ulz>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8008dda:	f000 f805 	bl	8008de8 <__aeabi_d2ulz>
 8008dde:	4240      	negs	r0, r0
 8008de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	bf00      	nop

08008de8 <__aeabi_d2ulz>:
 8008de8:	b5d0      	push	{r4, r6, r7, lr}
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <__aeabi_d2ulz+0x34>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	4606      	mov	r6, r0
 8008df0:	460f      	mov	r7, r1
 8008df2:	f7ff fb49 	bl	8008488 <__aeabi_dmul>
 8008df6:	f7ff fdf7 	bl	80089e8 <__aeabi_d2uiz>
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	f7ff faca 	bl	8008394 <__aeabi_ui2d>
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <__aeabi_d2ulz+0x38>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	f7ff fb40 	bl	8008488 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7ff f982 	bl	8008118 <__aeabi_dsub>
 8008e14:	f7ff fde8 	bl	80089e8 <__aeabi_d2uiz>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8008e1c:	3df00000 	.word	0x3df00000
 8008e20:	41f00000 	.word	0x41f00000

08008e24 <__udivmoddi4>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	9d08      	ldr	r5, [sp, #32]
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	468e      	mov	lr, r1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d14d      	bne.n	8008ece <__udivmoddi4+0xaa>
 8008e32:	428a      	cmp	r2, r1
 8008e34:	4694      	mov	ip, r2
 8008e36:	d969      	bls.n	8008f0c <__udivmoddi4+0xe8>
 8008e38:	fab2 f282 	clz	r2, r2
 8008e3c:	b152      	cbz	r2, 8008e54 <__udivmoddi4+0x30>
 8008e3e:	fa01 f302 	lsl.w	r3, r1, r2
 8008e42:	f1c2 0120 	rsb	r1, r2, #32
 8008e46:	fa20 f101 	lsr.w	r1, r0, r1
 8008e4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8008e4e:	ea41 0e03 	orr.w	lr, r1, r3
 8008e52:	4094      	lsls	r4, r2
 8008e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008e58:	0c21      	lsrs	r1, r4, #16
 8008e5a:	fbbe f6f8 	udiv	r6, lr, r8
 8008e5e:	fa1f f78c 	uxth.w	r7, ip
 8008e62:	fb08 e316 	mls	r3, r8, r6, lr
 8008e66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e6a:	fb06 f107 	mul.w	r1, r6, r7
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	d90a      	bls.n	8008e88 <__udivmoddi4+0x64>
 8008e72:	eb1c 0303 	adds.w	r3, ip, r3
 8008e76:	f106 30ff 	add.w	r0, r6, #4294967295
 8008e7a:	f080 811f 	bcs.w	80090bc <__udivmoddi4+0x298>
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	f240 811c 	bls.w	80090bc <__udivmoddi4+0x298>
 8008e84:	3e02      	subs	r6, #2
 8008e86:	4463      	add	r3, ip
 8008e88:	1a5b      	subs	r3, r3, r1
 8008e8a:	b2a4      	uxth	r4, r4
 8008e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008e90:	fb08 3310 	mls	r3, r8, r0, r3
 8008e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e98:	fb00 f707 	mul.w	r7, r0, r7
 8008e9c:	42a7      	cmp	r7, r4
 8008e9e:	d90a      	bls.n	8008eb6 <__udivmoddi4+0x92>
 8008ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8008ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea8:	f080 810a 	bcs.w	80090c0 <__udivmoddi4+0x29c>
 8008eac:	42a7      	cmp	r7, r4
 8008eae:	f240 8107 	bls.w	80090c0 <__udivmoddi4+0x29c>
 8008eb2:	4464      	add	r4, ip
 8008eb4:	3802      	subs	r0, #2
 8008eb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008eba:	1be4      	subs	r4, r4, r7
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	b11d      	cbz	r5, 8008ec8 <__udivmoddi4+0xa4>
 8008ec0:	40d4      	lsrs	r4, r2
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e9c5 4300 	strd	r4, r3, [r5]
 8008ec8:	4631      	mov	r1, r6
 8008eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ece:	428b      	cmp	r3, r1
 8008ed0:	d909      	bls.n	8008ee6 <__udivmoddi4+0xc2>
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	f000 80ef 	beq.w	80090b6 <__udivmoddi4+0x292>
 8008ed8:	2600      	movs	r6, #0
 8008eda:	e9c5 0100 	strd	r0, r1, [r5]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee6:	fab3 f683 	clz	r6, r3
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d14a      	bne.n	8008f84 <__udivmoddi4+0x160>
 8008eee:	428b      	cmp	r3, r1
 8008ef0:	d302      	bcc.n	8008ef8 <__udivmoddi4+0xd4>
 8008ef2:	4282      	cmp	r2, r0
 8008ef4:	f200 80f9 	bhi.w	80090ea <__udivmoddi4+0x2c6>
 8008ef8:	1a84      	subs	r4, r0, r2
 8008efa:	eb61 0303 	sbc.w	r3, r1, r3
 8008efe:	2001      	movs	r0, #1
 8008f00:	469e      	mov	lr, r3
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	d0e0      	beq.n	8008ec8 <__udivmoddi4+0xa4>
 8008f06:	e9c5 4e00 	strd	r4, lr, [r5]
 8008f0a:	e7dd      	b.n	8008ec8 <__udivmoddi4+0xa4>
 8008f0c:	b902      	cbnz	r2, 8008f10 <__udivmoddi4+0xec>
 8008f0e:	deff      	udf	#255	; 0xff
 8008f10:	fab2 f282 	clz	r2, r2
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	f040 8092 	bne.w	800903e <__udivmoddi4+0x21a>
 8008f1a:	eba1 010c 	sub.w	r1, r1, ip
 8008f1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008f22:	fa1f fe8c 	uxth.w	lr, ip
 8008f26:	2601      	movs	r6, #1
 8008f28:	0c20      	lsrs	r0, r4, #16
 8008f2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8008f2e:	fb07 1113 	mls	r1, r7, r3, r1
 8008f32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008f36:	fb0e f003 	mul.w	r0, lr, r3
 8008f3a:	4288      	cmp	r0, r1
 8008f3c:	d908      	bls.n	8008f50 <__udivmoddi4+0x12c>
 8008f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8008f42:	f103 38ff 	add.w	r8, r3, #4294967295
 8008f46:	d202      	bcs.n	8008f4e <__udivmoddi4+0x12a>
 8008f48:	4288      	cmp	r0, r1
 8008f4a:	f200 80cb 	bhi.w	80090e4 <__udivmoddi4+0x2c0>
 8008f4e:	4643      	mov	r3, r8
 8008f50:	1a09      	subs	r1, r1, r0
 8008f52:	b2a4      	uxth	r4, r4
 8008f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8008f58:	fb07 1110 	mls	r1, r7, r0, r1
 8008f5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008f60:	fb0e fe00 	mul.w	lr, lr, r0
 8008f64:	45a6      	cmp	lr, r4
 8008f66:	d908      	bls.n	8008f7a <__udivmoddi4+0x156>
 8008f68:	eb1c 0404 	adds.w	r4, ip, r4
 8008f6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8008f70:	d202      	bcs.n	8008f78 <__udivmoddi4+0x154>
 8008f72:	45a6      	cmp	lr, r4
 8008f74:	f200 80bb 	bhi.w	80090ee <__udivmoddi4+0x2ca>
 8008f78:	4608      	mov	r0, r1
 8008f7a:	eba4 040e 	sub.w	r4, r4, lr
 8008f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008f82:	e79c      	b.n	8008ebe <__udivmoddi4+0x9a>
 8008f84:	f1c6 0720 	rsb	r7, r6, #32
 8008f88:	40b3      	lsls	r3, r6
 8008f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8008f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8008f92:	fa20 f407 	lsr.w	r4, r0, r7
 8008f96:	fa01 f306 	lsl.w	r3, r1, r6
 8008f9a:	431c      	orrs	r4, r3
 8008f9c:	40f9      	lsrs	r1, r7
 8008f9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008fa2:	fa00 f306 	lsl.w	r3, r0, r6
 8008fa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8008faa:	0c20      	lsrs	r0, r4, #16
 8008fac:	fa1f fe8c 	uxth.w	lr, ip
 8008fb0:	fb09 1118 	mls	r1, r9, r8, r1
 8008fb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008fb8:	fb08 f00e 	mul.w	r0, r8, lr
 8008fbc:	4288      	cmp	r0, r1
 8008fbe:	fa02 f206 	lsl.w	r2, r2, r6
 8008fc2:	d90b      	bls.n	8008fdc <__udivmoddi4+0x1b8>
 8008fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8008fc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8008fcc:	f080 8088 	bcs.w	80090e0 <__udivmoddi4+0x2bc>
 8008fd0:	4288      	cmp	r0, r1
 8008fd2:	f240 8085 	bls.w	80090e0 <__udivmoddi4+0x2bc>
 8008fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8008fda:	4461      	add	r1, ip
 8008fdc:	1a09      	subs	r1, r1, r0
 8008fde:	b2a4      	uxth	r4, r4
 8008fe0:	fbb1 f0f9 	udiv	r0, r1, r9
 8008fe4:	fb09 1110 	mls	r1, r9, r0, r1
 8008fe8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008fec:	fb00 fe0e 	mul.w	lr, r0, lr
 8008ff0:	458e      	cmp	lr, r1
 8008ff2:	d908      	bls.n	8009006 <__udivmoddi4+0x1e2>
 8008ff4:	eb1c 0101 	adds.w	r1, ip, r1
 8008ff8:	f100 34ff 	add.w	r4, r0, #4294967295
 8008ffc:	d26c      	bcs.n	80090d8 <__udivmoddi4+0x2b4>
 8008ffe:	458e      	cmp	lr, r1
 8009000:	d96a      	bls.n	80090d8 <__udivmoddi4+0x2b4>
 8009002:	3802      	subs	r0, #2
 8009004:	4461      	add	r1, ip
 8009006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800900a:	fba0 9402 	umull	r9, r4, r0, r2
 800900e:	eba1 010e 	sub.w	r1, r1, lr
 8009012:	42a1      	cmp	r1, r4
 8009014:	46c8      	mov	r8, r9
 8009016:	46a6      	mov	lr, r4
 8009018:	d356      	bcc.n	80090c8 <__udivmoddi4+0x2a4>
 800901a:	d053      	beq.n	80090c4 <__udivmoddi4+0x2a0>
 800901c:	b15d      	cbz	r5, 8009036 <__udivmoddi4+0x212>
 800901e:	ebb3 0208 	subs.w	r2, r3, r8
 8009022:	eb61 010e 	sbc.w	r1, r1, lr
 8009026:	fa01 f707 	lsl.w	r7, r1, r7
 800902a:	fa22 f306 	lsr.w	r3, r2, r6
 800902e:	40f1      	lsrs	r1, r6
 8009030:	431f      	orrs	r7, r3
 8009032:	e9c5 7100 	strd	r7, r1, [r5]
 8009036:	2600      	movs	r6, #0
 8009038:	4631      	mov	r1, r6
 800903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903e:	f1c2 0320 	rsb	r3, r2, #32
 8009042:	40d8      	lsrs	r0, r3
 8009044:	fa0c fc02 	lsl.w	ip, ip, r2
 8009048:	fa21 f303 	lsr.w	r3, r1, r3
 800904c:	4091      	lsls	r1, r2
 800904e:	4301      	orrs	r1, r0
 8009050:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009054:	fa1f fe8c 	uxth.w	lr, ip
 8009058:	fbb3 f0f7 	udiv	r0, r3, r7
 800905c:	fb07 3610 	mls	r6, r7, r0, r3
 8009060:	0c0b      	lsrs	r3, r1, #16
 8009062:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009066:	fb00 f60e 	mul.w	r6, r0, lr
 800906a:	429e      	cmp	r6, r3
 800906c:	fa04 f402 	lsl.w	r4, r4, r2
 8009070:	d908      	bls.n	8009084 <__udivmoddi4+0x260>
 8009072:	eb1c 0303 	adds.w	r3, ip, r3
 8009076:	f100 38ff 	add.w	r8, r0, #4294967295
 800907a:	d22f      	bcs.n	80090dc <__udivmoddi4+0x2b8>
 800907c:	429e      	cmp	r6, r3
 800907e:	d92d      	bls.n	80090dc <__udivmoddi4+0x2b8>
 8009080:	3802      	subs	r0, #2
 8009082:	4463      	add	r3, ip
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	b289      	uxth	r1, r1
 8009088:	fbb3 f6f7 	udiv	r6, r3, r7
 800908c:	fb07 3316 	mls	r3, r7, r6, r3
 8009090:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009094:	fb06 f30e 	mul.w	r3, r6, lr
 8009098:	428b      	cmp	r3, r1
 800909a:	d908      	bls.n	80090ae <__udivmoddi4+0x28a>
 800909c:	eb1c 0101 	adds.w	r1, ip, r1
 80090a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80090a4:	d216      	bcs.n	80090d4 <__udivmoddi4+0x2b0>
 80090a6:	428b      	cmp	r3, r1
 80090a8:	d914      	bls.n	80090d4 <__udivmoddi4+0x2b0>
 80090aa:	3e02      	subs	r6, #2
 80090ac:	4461      	add	r1, ip
 80090ae:	1ac9      	subs	r1, r1, r3
 80090b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80090b4:	e738      	b.n	8008f28 <__udivmoddi4+0x104>
 80090b6:	462e      	mov	r6, r5
 80090b8:	4628      	mov	r0, r5
 80090ba:	e705      	b.n	8008ec8 <__udivmoddi4+0xa4>
 80090bc:	4606      	mov	r6, r0
 80090be:	e6e3      	b.n	8008e88 <__udivmoddi4+0x64>
 80090c0:	4618      	mov	r0, r3
 80090c2:	e6f8      	b.n	8008eb6 <__udivmoddi4+0x92>
 80090c4:	454b      	cmp	r3, r9
 80090c6:	d2a9      	bcs.n	800901c <__udivmoddi4+0x1f8>
 80090c8:	ebb9 0802 	subs.w	r8, r9, r2
 80090cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80090d0:	3801      	subs	r0, #1
 80090d2:	e7a3      	b.n	800901c <__udivmoddi4+0x1f8>
 80090d4:	4646      	mov	r6, r8
 80090d6:	e7ea      	b.n	80090ae <__udivmoddi4+0x28a>
 80090d8:	4620      	mov	r0, r4
 80090da:	e794      	b.n	8009006 <__udivmoddi4+0x1e2>
 80090dc:	4640      	mov	r0, r8
 80090de:	e7d1      	b.n	8009084 <__udivmoddi4+0x260>
 80090e0:	46d0      	mov	r8, sl
 80090e2:	e77b      	b.n	8008fdc <__udivmoddi4+0x1b8>
 80090e4:	3b02      	subs	r3, #2
 80090e6:	4461      	add	r1, ip
 80090e8:	e732      	b.n	8008f50 <__udivmoddi4+0x12c>
 80090ea:	4630      	mov	r0, r6
 80090ec:	e709      	b.n	8008f02 <__udivmoddi4+0xde>
 80090ee:	4464      	add	r4, ip
 80090f0:	3802      	subs	r0, #2
 80090f2:	e742      	b.n	8008f7a <__udivmoddi4+0x156>

080090f4 <__aeabi_idiv0>:
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop

080090f8 <apInit>:
#include "pid_init.h"
#include "sensors.h"

  
void apInit(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
	cliOpen(_DEF_USB, 57600);
 80090fc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8009100:	2000      	movs	r0, #0
 8009102:	f008 fcb9 	bl	8011a78 <cliOpen>
	// Initialize task data as soon as possible. Has to be done before tasksInit(),
    // and any init code that may try to modify task behaviour before tasksInit().
    tasksInitData();
 8009106:	f006 f8ad 	bl	800f264 <tasksInitData>
	Sensor_Init();
 800910a:	f002 fd95 	bl	800bc38 <Sensor_Init>
	Baro_Init();
 800910e:	f006 fbc1 	bl	800f894 <Baro_Init>
	compassInit();
 8009112:	f006 fefb 	bl	800ff0c <compassInit>
	gpsInit();
 8009116:	f00d fcaf 	bl	8016a78 <gpsInit>
	tasksInit();
 800911a:	f006 f8c7 	bl	800f2ac <tasksInit>
	rxInit();
 800911e:	f003 ffbf 	bl	800d0a0 <rxInit>
	// Finally initialize the gyro filtering
    gyroInitFilters();
 8009122:	f007 fea1 	bl	8010e68 <gyroInitFilters>
	pidInit();
 8009126:	f002 f9d5 	bl	800b4d4 <pidInit>
}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}

0800912e <apMain>:

void apMain(void)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	af00      	add	r7, sp, #0

	while(1)
	{
		scheduler();
 8009132:	f005 fc75 	bl	800ea20 <scheduler>
 8009136:	e7fc      	b.n	8009132 <apMain+0x4>

08009138 <HAL_SYSTICK_Callback>:
void SystemClock_Config(void);

static volatile uint32_t msTicks = 0;

void HAL_SYSTICK_Callback(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
	msTicks++;
 800913c:	4b04      	ldr	r3, [pc, #16]	; (8009150 <HAL_SYSTICK_Callback+0x18>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	4a03      	ldr	r2, [pc, #12]	; (8009150 <HAL_SYSTICK_Callback+0x18>)
 8009144:	6013      	str	r3, [r2, #0]
}
 8009146:	bf00      	nop
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	200006c8 	.word	0x200006c8

08009154 <cycleCounterInit>:
    while (1);
}
#endif

void cycleCounterInit(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
  cpuClockFrequency = HAL_RCC_GetSysClockFreq();
 800915a:	f015 f8c7 	bl	801e2ec <HAL_RCC_GetSysClockFreq>
 800915e:	4603      	mov	r3, r0
 8009160:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <cycleCounterInit+0x50>)
 8009162:	6013      	str	r3, [r2, #0]

  usTicks = cpuClockFrequency / 1000000;
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <cycleCounterInit+0x50>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <cycleCounterInit+0x54>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	0c9b      	lsrs	r3, r3, #18
 8009170:	4a0e      	ldr	r2, [pc, #56]	; (80091ac <cycleCounterInit+0x58>)
 8009172:	6013      	str	r3, [r2, #0]

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <cycleCounterInit+0x5c>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	4a0d      	ldr	r2, [pc, #52]	; (80091b0 <cycleCounterInit+0x5c>)
 800917a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800917e:	60d3      	str	r3, [r2, #12]

  __O uint32_t *DWTLAR = (uint32_t *)(DWT_BASE + 0x0FB0);
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <cycleCounterInit+0x60>)
 8009182:	607b      	str	r3, [r7, #4]
  *(DWTLAR) = DWT_LAR_UNLOCK_VALUE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a0c      	ldr	r2, [pc, #48]	; (80091b8 <cycleCounterInit+0x64>)
 8009188:	601a      	str	r2, [r3, #0]

  DWT->CYCCNT = 0;
 800918a:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <cycleCounterInit+0x68>)
 800918c:	2200      	movs	r2, #0
 800918e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009190:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <cycleCounterInit+0x68>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a09      	ldr	r2, [pc, #36]	; (80091bc <cycleCounterInit+0x68>)
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	6013      	str	r3, [r2, #0]
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200006c4 	.word	0x200006c4
 80091a8:	431bde83 	.word	0x431bde83
 80091ac:	200006c0 	.word	0x200006c0
 80091b0:	e000edf0 	.word	0xe000edf0
 80091b4:	e0001fb0 	.word	0xe0001fb0
 80091b8:	c5acce55 	.word	0xc5acce55
 80091bc:	e0001000 	.word	0xe0001000

080091c0 <bspInit>:

void bspInit(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  HAL_Init();
 80091c4:	f00e febe 	bl	8017f44 <HAL_Init>
  SystemClock_Config();
 80091c8:	f000 f878 	bl	80092bc <SystemClock_Config>

  // Init cycle counter
  cycleCounterInit();
 80091cc:	f7ff ffc2 	bl	8009154 <cycleCounterInit>
}
 80091d0:	bf00      	nop
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <getCycleCounter>:

uint32_t getCycleCounter(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 80091d8:	4b03      	ldr	r3, [pc, #12]	; (80091e8 <getCycleCounter+0x14>)
 80091da:	685b      	ldr	r3, [r3, #4]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	e0001000 	.word	0xe0001000

080091ec <clockMicrosToCycles>:
{
    return 10 * clockCycles / (int32_t)usTicks;
}

uint32_t clockMicrosToCycles(uint32_t micros)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
    return micros * usTicks;
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <clockMicrosToCycles+0x20>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	200006c0 	.word	0x200006c0

08009210 <delay>:

void delay(uint32_t ms)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f00e ff05 	bl	8018028 <HAL_Delay>
}
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <millis>:

uint32_t millis(void)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800922a:	f00e fef1 	bl	8018010 <HAL_GetTick>
 800922e:	4603      	mov	r3, r0
}
 8009230:	4618      	mov	r0, r3
 8009232:	bd80      	pop	{r7, pc}

08009234 <micros>:

uint32_t micros(void)
{
 8009234:	b4b0      	push	{r4, r5, r7}
 8009236:	af00      	add	r7, sp, #0
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <micros+0x38>)
 800923a:	681c      	ldr	r4, [r3, #0]
	        cycle_cnt = SysTick->VAL;
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <micros+0x3c>)
 800923e:	689d      	ldr	r5, [r3, #8]
	    } while (ms != msTicks);
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <micros+0x38>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429c      	cmp	r4, r3
 8009246:	d1f7      	bne.n	8009238 <micros+0x4>
	    return (ms * 1000) + (168 * 1000 - cycle_cnt) / 168; //168
 8009248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800924c:	fb03 f204 	mul.w	r2, r3, r4
 8009250:	f5c5 3324 	rsb	r3, r5, #167936	; 0x29000
 8009254:	3340      	adds	r3, #64	; 0x40
 8009256:	08db      	lsrs	r3, r3, #3
 8009258:	4906      	ldr	r1, [pc, #24]	; (8009274 <micros+0x40>)
 800925a:	fba1 1303 	umull	r1, r3, r1, r3
 800925e:	085b      	lsrs	r3, r3, #1
 8009260:	4413      	add	r3, r2
}
 8009262:	4618      	mov	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	bcb0      	pop	{r4, r5, r7}
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	200006c8 	.word	0x200006c8
 8009270:	e000e010 	.word	0xe000e010
 8009274:	18618619 	.word	0x18618619

08009278 <__io_putchar>:
    uint32_t now = micros();
    while (micros() - now < us);
}

int __io_putchar(int ch)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8009280:	1d3b      	adds	r3, r7, #4
 8009282:	2201      	movs	r2, #1
 8009284:	4619      	mov	r1, r3
 8009286:	2001      	movs	r0, #1
 8009288:	f00c fa9e 	bl	80157c8 <uartWrite>
  return 1;
 800928c:	2301      	movs	r3, #1
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <initialiseMemorySections>:

void initialiseMemorySections(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
#ifdef USE_FAST_DATA
    /* Load FAST_DATA variable initializers into DTCM RAM */
    extern uint8_t _sfastram_data;
    extern uint8_t _efastram_data;
    extern uint8_t _sfastram_idata;
    memcpy(&_sfastram_data, &_sfastram_idata, (size_t) (&_efastram_data - &_sfastram_data));
 800929c:	4a04      	ldr	r2, [pc, #16]	; (80092b0 <initialiseMemorySections+0x18>)
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <initialiseMemorySections+0x1c>)
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	4904      	ldr	r1, [pc, #16]	; (80092b8 <initialiseMemorySections+0x20>)
 80092a6:	4803      	ldr	r0, [pc, #12]	; (80092b4 <initialiseMemorySections+0x1c>)
 80092a8:	f01e febc 	bl	8028024 <memcpy>
#endif
}
 80092ac:	bf00      	nop
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	10000004 	.word	0x10000004
 80092b4:	10000000 	.word	0x10000000
 80092b8:	0802d5a0 	.word	0x0802d5a0

080092bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b094      	sub	sp, #80	; 0x50
 80092c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80092c2:	f107 0320 	add.w	r3, r7, #32
 80092c6:	2230      	movs	r2, #48	; 0x30
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f01e fed2 	bl	8028074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80092d0:	f107 030c 	add.w	r3, r7, #12
 80092d4:	2200      	movs	r2, #0
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	609a      	str	r2, [r3, #8]
 80092dc:	60da      	str	r2, [r3, #12]
 80092de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80092e0:	2300      	movs	r3, #0
 80092e2:	60bb      	str	r3, [r7, #8]
 80092e4:	4b29      	ldr	r3, [pc, #164]	; (800938c <SystemClock_Config+0xd0>)
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	4a28      	ldr	r2, [pc, #160]	; (800938c <SystemClock_Config+0xd0>)
 80092ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ee:	6413      	str	r3, [r2, #64]	; 0x40
 80092f0:	4b26      	ldr	r3, [pc, #152]	; (800938c <SystemClock_Config+0xd0>)
 80092f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092f8:	60bb      	str	r3, [r7, #8]
 80092fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80092fc:	2300      	movs	r3, #0
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	4b23      	ldr	r3, [pc, #140]	; (8009390 <SystemClock_Config+0xd4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a22      	ldr	r2, [pc, #136]	; (8009390 <SystemClock_Config+0xd4>)
 8009306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	4b20      	ldr	r3, [pc, #128]	; (8009390 <SystemClock_Config+0xd4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009318:	2309      	movs	r3, #9
 800931a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800931c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009322:	2301      	movs	r3, #1
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009326:	2302      	movs	r3, #2
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800932a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009330:	2304      	movs	r3, #4
 8009332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009334:	23a8      	movs	r3, #168	; 0xa8
 8009336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009338:	2302      	movs	r3, #2
 800933a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800933c:	2307      	movs	r3, #7
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009340:	f107 0320 	add.w	r3, r7, #32
 8009344:	4618      	mov	r0, r3
 8009346:	f014 fc73 	bl	801dc30 <HAL_RCC_OscConfig>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009350:	f000 f820 	bl	8009394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009354:	230f      	movs	r3, #15
 8009356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009358:	2302      	movs	r3, #2
 800935a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009360:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800936a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800936c:	f107 030c 	add.w	r3, r7, #12
 8009370:	2105      	movs	r1, #5
 8009372:	4618      	mov	r0, r3
 8009374:	f014 fed4 	bl	801e120 <HAL_RCC_ClockConfig>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800937e:	f000 f809 	bl	8009394 <Error_Handler>
  }
}
 8009382:	bf00      	nop
 8009384:	3750      	adds	r7, #80	; 0x50
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	40023800 	.word	0x40023800
 8009390:	40007000 	.word	0x40007000

08009394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009398:	b672      	cpsid	i
}
 800939a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800939c:	e7fe      	b.n	800939c <Error_Handler+0x8>
	...

080093a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <HAL_MspInit+0x4c>)
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <HAL_MspInit+0x4c>)
 80093b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093b4:	6453      	str	r3, [r2, #68]	; 0x44
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <HAL_MspInit+0x4c>)
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093be:	607b      	str	r3, [r7, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093c2:	2300      	movs	r3, #0
 80093c4:	603b      	str	r3, [r7, #0]
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <HAL_MspInit+0x4c>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	4a08      	ldr	r2, [pc, #32]	; (80093ec <HAL_MspInit+0x4c>)
 80093cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d0:	6413      	str	r3, [r2, #64]	; 0x40
 80093d2:	4b06      	ldr	r3, [pc, #24]	; (80093ec <HAL_MspInit+0x4c>)
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40023800 	.word	0x40023800

080093f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80093f4:	e7fe      	b.n	80093f4 <NMI_Handler+0x4>

080093f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093f6:	b480      	push	{r7}
 80093f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093fa:	e7fe      	b.n	80093fa <HardFault_Handler+0x4>

080093fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009400:	e7fe      	b.n	8009400 <MemManage_Handler+0x4>

08009402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009402:	b480      	push	{r7}
 8009404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009406:	e7fe      	b.n	8009406 <BusFault_Handler+0x4>

08009408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800940c:	e7fe      	b.n	800940c <UsageFault_Handler+0x4>

0800940e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800940e:	b480      	push	{r7}
 8009410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009412:	bf00      	nop
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800942a:	b480      	push	{r7}
 800942c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800942e:	bf00      	nop
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800943c:	f00e fdd4 	bl	8017fe8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8009440:	f00f fac1 	bl	80189c6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009444:	bf00      	nop
 8009446:	bd80      	pop	{r7, pc}

08009448 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800944c:	2010      	movs	r0, #16
 800944e:	f010 fb91 	bl	8019b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800945c:	4802      	ldr	r0, [pc, #8]	; (8009468 <DMA1_Stream0_IRQHandler+0x10>)
 800945e:	f00f fc51 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009462:	bf00      	nop
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20002224 	.word	0x20002224

0800946c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009470:	4802      	ldr	r0, [pc, #8]	; (800947c <DMA1_Stream1_IRQHandler+0x10>)
 8009472:	f00f fc47 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009476:	bf00      	nop
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20002164 	.word	0x20002164

08009480 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8009484:	4802      	ldr	r0, [pc, #8]	; (8009490 <DMA1_Stream2_IRQHandler+0x10>)
 8009486:	f00f fc3d 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800948a:	bf00      	nop
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	200021c4 	.word	0x200021c4

08009494 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009498:	4802      	ldr	r0, [pc, #8]	; (80094a4 <DMA1_Stream3_IRQHandler+0x10>)
 800949a:	f00f fc33 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	2000195c 	.word	0x2000195c

080094a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80094ac:	4802      	ldr	r0, [pc, #8]	; (80094b8 <DMA1_Stream4_IRQHandler+0x10>)
 80094ae:	f00f fc29 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80094b2:	bf00      	nop
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200018fc 	.word	0x200018fc

080094bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <DMA1_Stream5_IRQHandler+0x10>)
 80094c2:	f00f fc1f 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80094c6:	bf00      	nop
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20002104 	.word	0x20002104

080094d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80094d4:	4802      	ldr	r0, [pc, #8]	; (80094e0 <ADC_IRQHandler+0x10>)
 80094d6:	f00e fe0e 	bl	80180f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20001064 	.word	0x20001064

080094e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80094e8:	4802      	ldr	r0, [pc, #8]	; (80094f4 <I2C2_EV_IRQHandler+0x10>)
 80094ea:	f011 f8ed 	bl	801a6c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200016e4 	.word	0x200016e4

080094f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80094fc:	4802      	ldr	r0, [pc, #8]	; (8009508 <I2C2_ER_IRQHandler+0x10>)
 80094fe:	f011 fa54 	bl	801a9aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8009502:	bf00      	nop
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	200016e4 	.word	0x200016e4

0800950c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009510:	4802      	ldr	r0, [pc, #8]	; (800951c <SPI1_IRQHandler+0x10>)
 8009512:	f015 fc9d 	bl	801ee50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009516:	bf00      	nop
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	2000178c 	.word	0x2000178c

08009520 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8009524:	4802      	ldr	r0, [pc, #8]	; (8009530 <SPI2_IRQHandler+0x10>)
 8009526:	f015 fc93 	bl	801ee50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800952a:	bf00      	nop
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200017e4 	.word	0x200017e4

08009534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009538:	4802      	ldr	r0, [pc, #8]	; (8009544 <USART1_IRQHandler+0x10>)
 800953a:	f015 ffdd 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800953e:	bf00      	nop
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20001f0c 	.word	0x20001f0c

08009548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800954c:	4802      	ldr	r0, [pc, #8]	; (8009558 <USART2_IRQHandler+0x10>)
 800954e:	f015 ffd3 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20001f50 	.word	0x20001f50

0800955c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009560:	4802      	ldr	r0, [pc, #8]	; (800956c <USART3_IRQHandler+0x10>)
 8009562:	f015 ffc9 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009566:	bf00      	nop
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20001f94 	.word	0x20001f94

08009570 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009574:	4802      	ldr	r0, [pc, #8]	; (8009580 <UART4_IRQHandler+0x10>)
 8009576:	f015 ffbf 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800957a:	bf00      	nop
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20001fd8 	.word	0x20001fd8

08009584 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8009588:	4802      	ldr	r0, [pc, #8]	; (8009594 <UART5_IRQHandler+0x10>)
 800958a:	f015 ffb5 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800958e:	bf00      	nop
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	2000201c 	.word	0x2000201c

08009598 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800959c:	4802      	ldr	r0, [pc, #8]	; (80095a8 <DMA2_Stream0_IRQHandler+0x10>)
 800959e:	f00f fbb1 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80095a2:	bf00      	nop
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200010ac 	.word	0x200010ac

080095ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80095b0:	4802      	ldr	r0, [pc, #8]	; (80095bc <DMA2_Stream1_IRQHandler+0x10>)
 80095b2:	f00f fba7 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20002284 	.word	0x20002284

080095c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80095c4:	4802      	ldr	r0, [pc, #8]	; (80095d0 <DMA2_Stream2_IRQHandler+0x10>)
 80095c6:	f00f fb9d 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	2000183c 	.word	0x2000183c

080095d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80095d8:	4802      	ldr	r0, [pc, #8]	; (80095e4 <DMA2_Stream3_IRQHandler+0x10>)
 80095da:	f00f fb93 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2000189c 	.word	0x2000189c

080095e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80095ec:	4802      	ldr	r0, [pc, #8]	; (80095f8 <OTG_FS_IRQHandler+0x10>)
 80095ee:	f013 f9f1 	bl	801c9d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20003750 	.word	0x20003750

080095fc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009600:	4802      	ldr	r0, [pc, #8]	; (800960c <DMA2_Stream5_IRQHandler+0x10>)
 8009602:	f00f fb7f 	bl	8018d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8009606:	bf00      	nop
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	200020a4 	.word	0x200020a4

08009610 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8009614:	4802      	ldr	r0, [pc, #8]	; (8009620 <USART6_IRQHandler+0x10>)
 8009616:	f015 ff6f 	bl	801f4f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20002060 	.word	0x20002060

08009624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
  return 1;
 8009628:	2301      	movs	r3, #1
}
 800962a:	4618      	mov	r0, r3
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <_kill>:

int _kill(int pid, int sig)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800963e:	f01e fcc7 	bl	8027fd0 <__errno>
 8009642:	4603      	mov	r3, r0
 8009644:	2216      	movs	r2, #22
 8009646:	601a      	str	r2, [r3, #0]
  return -1;
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <_exit>:

void _exit (int status)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800965c:	f04f 31ff 	mov.w	r1, #4294967295
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff ffe7 	bl	8009634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009666:	e7fe      	b.n	8009666 <_exit+0x12>

08009668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	e00a      	b.n	8009690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800967a:	f3af 8000 	nop.w
 800967e:	4601      	mov	r1, r0
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	60ba      	str	r2, [r7, #8]
 8009686:	b2ca      	uxtb	r2, r1
 8009688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	3301      	adds	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	dbf0      	blt.n	800967a <_read+0x12>
  }

  return len;
 8009698:	687b      	ldr	r3, [r7, #4]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b086      	sub	sp, #24
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]
 80096b2:	e009      	b.n	80096c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	60ba      	str	r2, [r7, #8]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fddb 	bl	8009278 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	3301      	adds	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dbf1      	blt.n	80096b4 <_write+0x12>
  }
  return len;
 80096d0:	687b      	ldr	r3, [r7, #4]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <_close>:

int _close(int file)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b083      	sub	sp, #12
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009702:	605a      	str	r2, [r3, #4]
  return 0;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <_isatty>:

int _isatty(int file)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800971a:	2301      	movs	r3, #1
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800974c:	4a14      	ldr	r2, [pc, #80]	; (80097a0 <_sbrk+0x5c>)
 800974e:	4b15      	ldr	r3, [pc, #84]	; (80097a4 <_sbrk+0x60>)
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009758:	4b13      	ldr	r3, [pc, #76]	; (80097a8 <_sbrk+0x64>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009760:	4b11      	ldr	r3, [pc, #68]	; (80097a8 <_sbrk+0x64>)
 8009762:	4a12      	ldr	r2, [pc, #72]	; (80097ac <_sbrk+0x68>)
 8009764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009766:	4b10      	ldr	r3, [pc, #64]	; (80097a8 <_sbrk+0x64>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4413      	add	r3, r2
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	429a      	cmp	r2, r3
 8009772:	d207      	bcs.n	8009784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009774:	f01e fc2c 	bl	8027fd0 <__errno>
 8009778:	4603      	mov	r3, r0
 800977a:	220c      	movs	r2, #12
 800977c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800977e:	f04f 33ff 	mov.w	r3, #4294967295
 8009782:	e009      	b.n	8009798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009784:	4b08      	ldr	r3, [pc, #32]	; (80097a8 <_sbrk+0x64>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <_sbrk+0x64>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4413      	add	r3, r2
 8009792:	4a05      	ldr	r2, [pc, #20]	; (80097a8 <_sbrk+0x64>)
 8009794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20020000 	.word	0x20020000
 80097a4:	00000400 	.word	0x00000400
 80097a8:	200006cc 	.word	0x200006cc
 80097ac:	20003ed8 	.word	0x20003ed8

080097b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  initialiseMemorySections();
 80097b4:	f7ff fd70 	bl	8009298 <initialiseMemorySections>
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <SystemInit+0x34>)
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097be:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <SystemInit+0x34>)
 80097c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  extern uint8_t isr_vector_table_flash_base;
  extern uint8_t isr_vector_table_base;
  extern uint8_t isr_vector_table_end;

  memcpy(&isr_vector_table_base, &isr_vector_table_flash_base, &isr_vector_table_end - &isr_vector_table_base);
 80097c8:	4a07      	ldr	r2, [pc, #28]	; (80097e8 <SystemInit+0x38>)
 80097ca:	4b08      	ldr	r3, [pc, #32]	; (80097ec <SystemInit+0x3c>)
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <SystemInit+0x40>)
 80097d2:	4806      	ldr	r0, [pc, #24]	; (80097ec <SystemInit+0x3c>)
 80097d4:	f01e fc26 	bl	8028024 <memcpy>
  SCB->VTOR = (uint32_t)&isr_vector_table_base;
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <SystemInit+0x34>)
 80097da:	4a04      	ldr	r2, [pc, #16]	; (80097ec <SystemInit+0x3c>)
 80097dc:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80097de:	bf00      	nop
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	e000ed00 	.word	0xe000ed00
 80097e8:	20000188 	.word	0x20000188
 80097ec:	20000000 	.word	0x20000000
 80097f0:	08000000 	.word	0x08000000

080097f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80097f4:	f8df d050 	ldr.w	sp, [pc, #80]	; 8009848 <LoopFillZerofastram_bss+0x20>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097fa:	e003      	b.n	8009804 <LoopCopyDataInit>

080097fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097fc:	4b13      	ldr	r3, [pc, #76]	; (800984c <LoopFillZerofastram_bss+0x24>)
  ldr  r3, [r3, r1]
 80097fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009802:	3104      	adds	r1, #4

08009804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009804:	4812      	ldr	r0, [pc, #72]	; (8009850 <LoopFillZerofastram_bss+0x28>)
  ldr  r3, =_edata
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <LoopFillZerofastram_bss+0x2c>)
  adds  r2, r0, r1
 8009808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800980a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800980c:	d3f6      	bcc.n	80097fc <CopyDataInit>
  ldr  r2, =_sbss
 800980e:	4a12      	ldr	r2, [pc, #72]	; (8009858 <LoopFillZerofastram_bss+0x30>)
  b  LoopFillZerobss
 8009810:	e002      	b.n	8009818 <LoopFillZerobss>

08009812 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009812:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009814:	f842 3b04 	str.w	r3, [r2], #4

08009818 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009818:	4b10      	ldr	r3, [pc, #64]	; (800985c <LoopFillZerofastram_bss+0x34>)
  cmp  r2, r3
 800981a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800981c:	d3f9      	bcc.n	8009812 <FillZerobss>

  ldr  r2, =__fastram_bss_start__
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <LoopFillZerofastram_bss+0x38>)
  b  LoopFillZerofastram_bss
 8009820:	e002      	b.n	8009828 <LoopFillZerofastram_bss>

08009822 <FillZerofastram_bss>:
/* Zero fill the fastram_bss segment. */  
FillZerofastram_bss:
  movs  r3, #0
 8009822:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009824:	f842 3b04 	str.w	r3, [r2], #4

08009828 <LoopFillZerofastram_bss>:
    
LoopFillZerofastram_bss:
  ldr  r3, = __fastram_bss_end__
 8009828:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <LoopFillZerofastram_bss+0x3c>)
  cmp  r2, r3
 800982a:	429a      	cmp	r2, r3
  bcc  FillZerofastram_bss
 800982c:	d3f9      	bcc.n	8009822 <FillZerofastram_bss>

/*FPU settings*/
  ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800982e:	480e      	ldr	r0, [pc, #56]	; (8009868 <LoopFillZerofastram_bss+0x40>)
  ldr     r1,[r0]
 8009830:	6801      	ldr	r1, [r0, #0]
  orr     r1,r1,#(0xF << 20)
 8009832:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  str     r1,[r0]
 8009836:	6001      	str	r1, [r0, #0]

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009838:	f7ff ffba 	bl	80097b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800983c:	f01e fbce 	bl	8027fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009840:	f01e fbba 	bl	8027fb8 <main>
  bx  lr    
 8009844:	4770      	bx	lr
 8009846:	0000      	.short	0x0000
  ldr   sp, =_estack     /* set stack pointer */
 8009848:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800984c:	0802d084 	.word	0x0802d084
  ldr  r0, =_sdata
 8009850:	20000188 	.word	0x20000188
  ldr  r3, =_edata
 8009854:	200006a4 	.word	0x200006a4
  ldr  r2, =_sbss
 8009858:	200006a4 	.word	0x200006a4
  ldr  r3, = _ebss
 800985c:	20003ed4 	.word	0x20003ed4
  ldr  r2, =__fastram_bss_start__
 8009860:	10000004 	.word	0x10000004
  ldr  r3, = __fastram_bss_end__
 8009864:	1000131c 	.word	0x1000131c
  ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8009868:	e000ed88 	.word	0xe000ed88

0800986c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800986c:	e7fe      	b.n	800986c <CAN1_RX0_IRQHandler>

0800986e <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	429a      	cmp	r2, r3
 8009880:	da01      	bge.n	8009886 <constrain+0x18>
        return low;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	e006      	b.n	8009894 <constrain+0x26>
    else if (amt > high)
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	dd01      	ble.n	8009892 <constrain+0x24>
        return high;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	e000      	b.n	8009894 <constrain+0x26>
    else
        return amt;
 8009892:	68fb      	ldr	r3, [r7, #12]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <calculateThrottlePercent>:


// calculate the throttle stick percent - integer math is good enough here.
// returns negative values for reversed thrust in 3D mode
int8_t calculateThrottlePercent(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
    uint8_t ret = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	71fb      	strb	r3, [r7, #7]
    int channelData = constrain(rcData[THROTTLE], PWM_RANGE_MIN, PWM_RANGE_MAX);
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <calculateThrottlePercent+0x60>)
 80098ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80098b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80098b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80098bc:	ee17 0a90 	vmov	r0, s15
 80098c0:	f7ff ffd5 	bl	800986e <constrain>
 80098c4:	6038      	str	r0, [r7, #0]
            ret = ((channelData - p_rx_pg->midrc - 0) * 100) / (PWM_RANGE_MAX - p_rx_pg->midrc - 0);
        } else if (channelData < (p_rx_pg->midrc - 0)) {
            ret = -((p_rx_pg->midrc - 0 - channelData) * 100) / (p_rx_pg->midrc - 0 - PWM_RANGE_MIN);
        }
    } else {
        ret = constrain(((channelData - p_rx_pg->mincheck) * 100) / (PWM_RANGE_MAX - p_rx_pg->mincheck), 0, 100);
 80098c6:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <calculateThrottlePercent+0x64>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	8a5b      	ldrh	r3, [r3, #18]
 80098cc:	461a      	mov	r2, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	1a9b      	subs	r3, r3, r2
 80098d2:	2264      	movs	r2, #100	; 0x64
 80098d4:	fb03 f202 	mul.w	r2, r3, r2
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <calculateThrottlePercent+0x64>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	8a5b      	ldrh	r3, [r3, #18]
 80098de:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80098e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80098e6:	2264      	movs	r2, #100	; 0x64
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff ffbf 	bl	800986e <constrain>
 80098f0:	4603      	mov	r3, r0
 80098f2:	71fb      	strb	r3, [r7, #7]
        && false) {//flight3DConfig()->switched_mode3d

            ret = -ret;  // 3D on a switch is active
        }
    }
    return ret;
 80098f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000964 	.word	0x20000964
 8009904:	2000019c 	.word	0x2000019c

08009908 <calculateThrottlePercentAbs>:

uint8_t calculateThrottlePercentAbs(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
    return ABS(calculateThrottlePercent());
 800990e:	f7ff ffc7 	bl	80098a0 <calculateThrottlePercent>
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
 8009916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfb8      	it	lt
 800991e:	425b      	neglt	r3, r3
 8009920:	b2db      	uxtb	r3, r3
 8009922:	b2db      	uxtb	r3, r3
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <subTaskPidController>:
// {
//     return airmodeIsActivated;
// }

static void subTaskPidController(uint32_t currentTimeUs)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
    uint32_t startTime = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
#ifdef USE_PID_AUDIO
    if (isModeActivationConditionPresent(BOXPIDAUDIO)) {
        pidAudioUpdate();
    }
#endif
}
 8009938:	bf00      	nop
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <subTaskPidSubprocesses>:

static void subTaskPidSubprocesses(uint32_t currentTimeUs)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    uint32_t startTime = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]
#else
    UNUSED(currentTimeUs);
#endif

    //DEBUG_SET(DEBUG_PIDLOOP, 3, micros() - startTime);
}
 8009950:	bf00      	nop
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <subTaskMotorUpdate>:
//     }
// }
// #endif

static void subTaskMotorUpdate(uint32_t currentTimeUs)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
    uint32_t startTime = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
        }
    }
#endif

    //DEBUG_SET(DEBUG_PIDLOOP, 2, micros() - startTime);
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <subTaskRcCommand>:

static void subTaskRcCommand(uint32_t currentTimeUs)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
//     ) {
//         resetYawAxis();
//     }

//     processRcCommand();
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <gyroFilterReady>:

bool gyroFilterReady(void)
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
    if (pidUpdateCounter % 2 == 0) {
 800998c:	4b07      	ldr	r3, [pc, #28]	; (80099ac <gyroFilterReady+0x24>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <gyroFilterReady+0x16>
        return true;
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <gyroFilterReady+0x18>
    } else {
        return false;
 800999e:	2300      	movs	r3, #0
    }
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	10000004 	.word	0x10000004

080099b0 <pidLoopReady>:

bool pidLoopReady(void)
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
    if ((pidUpdateCounter % 2) == (2 / 2)) {
 80099b4:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <pidLoopReady+0x24>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <pidLoopReady+0x16>
        return true;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <pidLoopReady+0x18>
    }
    return false;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	10000004 	.word	0x10000004

080099d8 <taskFiltering>:

void taskFiltering(uint32_t currentTimeUs)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    gyroFiltering(currentTimeUs);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f006 ff4f 	bl	8010884 <gyroFiltering>
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <taskMainPidLoop>:

// Function for loop trigger
void taskMainPidLoop(uint32_t currentTimeUs)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
    // 1 - subTaskPidController()
    // 2 - subTaskMotorUpdate()
    // 3 - subTaskPidSubprocesses()
    //DEBUG_SET(DEBUG_PIDLOOP, 0, micros() - currentTimeUs);

    subTaskRcCommand(currentTimeUs);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff ffbc 	bl	8009974 <subTaskRcCommand>
    subTaskPidController(currentTimeUs);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff95 	bl	800992c <subTaskPidController>
    subTaskMotorUpdate(currentTimeUs);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff ffaa 	bl	800995c <subTaskMotorUpdate>
    subTaskPidSubprocesses(currentTimeUs);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff9b 	bl	8009944 <subTaskPidSubprocesses>

    //DEBUG_SET(DEBUG_CYCLETIME, 0, getTaskDeltaTimeUs(TASK_SELF));
    //DEBUG_SET(DEBUG_CYCLETIME, 1, getAverageSystemLoadPercent());
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a20:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a24:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8009a28:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a38:	d501      	bpl.n	8009a3e <constrainf+0x28>
        return low;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	e00b      	b.n	8009a56 <constrainf+0x40>
    else if (amt > high)
 8009a3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4e:	dd01      	ble.n	8009a54 <constrainf+0x3e>
        return high;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	e000      	b.n	8009a56 <constrainf+0x40>
    else
        return amt;
 8009a54:	68fb      	ldr	r3, [r7, #12]
}
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <dynNotchInit>:
static FAST_DATA_ZERO_INIT float   sdftNoiseThreshold;
static FAST_DATA_ZERO_INIT float   pt1LooptimeS;


void dynNotchInit(const dynNotchConfig_t *config, const uint32_t targetLooptimeUs)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
    // always initialise, since the dynamic notch could be activated at any time
    dynNotch.q = config->dyn_notch_q / 100.0f;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	889b      	ldrh	r3, [r3, #4]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a7e:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8009d90 <dynNotchInit+0x328>
 8009a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a86:	4bc3      	ldr	r3, [pc, #780]	; (8009d94 <dynNotchInit+0x32c>)
 8009a88:	edc3 7a00 	vstr	s15, [r3]
    dynNotch.minHz = config->dyn_notch_min_hz;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	ee07 3a90 	vmov	s15, r3
 8009a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a98:	4bbe      	ldr	r3, [pc, #760]	; (8009d94 <dynNotchInit+0x32c>)
 8009a9a:	edc3 7a01 	vstr	s15, [r3, #4]
    dynNotch.maxHz = MAX(2 * dynNotch.minHz, config->dyn_notch_max_hz);
 8009a9e:	4bbd      	ldr	r3, [pc, #756]	; (8009d94 <dynNotchInit+0x32c>)
 8009aa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8009aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009aa8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	885b      	ldrh	r3, [r3, #2]
 8009ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ab2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009abc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac8:	dd02      	ble.n	8009ad0 <dynNotchInit+0x68>
 8009aca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ace:	e004      	b.n	8009ada <dynNotchInit+0x72>
 8009ad0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ada:	4bae      	ldr	r3, [pc, #696]	; (8009d94 <dynNotchInit+0x32c>)
 8009adc:	edc3 7a02 	vstr	s15, [r3, #8]
    dynNotch.count = config->dyn_notch_count;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	799b      	ldrb	r3, [r3, #6]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4bab      	ldr	r3, [pc, #684]	; (8009d94 <dynNotchInit+0x32c>)
 8009ae8:	60da      	str	r2, [r3, #12]
    dynNotch.looptimeUs = targetLooptimeUs;
 8009aea:	4aaa      	ldr	r2, [pc, #680]	; (8009d94 <dynNotchInit+0x32c>)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	6513      	str	r3, [r2, #80]	; 0x50
    dynNotch.maxCenterFreq = 0;
 8009af0:	4ba8      	ldr	r3, [pc, #672]	; (8009d94 <dynNotchInit+0x32c>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	611a      	str	r2, [r3, #16]

    // dynNotchUpdate() is running at looprateHz (which is PID looprate aka. 1e6f / gyro.targetLooptime)
    const float looprateHz = 1.0f / dynNotch.looptimeUs * 1e6f;
 8009af6:	4ba7      	ldr	r3, [pc, #668]	; (8009d94 <dynNotchInit+0x32c>)
 8009af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b0a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8009d98 <dynNotchInit+0x330>
 8009b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b12:	edc7 7a08 	vstr	s15, [r7, #32]

    // Disable dynamic notch if dynNotchUpdate() would run at less than 2kHz
    if (looprateHz < DYN_NOTCH_UPDATE_MIN_HZ) {
 8009b16:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b1a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8009d9c <dynNotchInit+0x334>
 8009b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b26:	d502      	bpl.n	8009b2e <dynNotchInit+0xc6>
        dynNotch.count = 0;
 8009b28:	4b9a      	ldr	r3, [pc, #616]	; (8009d94 <dynNotchInit+0x32c>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	60da      	str	r2, [r3, #12]
    }

    sampleCount = MAX(1, looprateHz / (2 * dynNotch.maxHz)); // 600hz, 8k looptime, 6.00
 8009b2e:	2301      	movs	r3, #1
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	4b98      	ldr	r3, [pc, #608]	; (8009d94 <dynNotchInit+0x32c>)
 8009b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b38:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009b3c:	edd7 6a08 	vldr	s13, [r7, #32]
 8009b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b44:	edc7 7a06 	vstr	s15, [r7, #24]
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b52:	ed97 7a06 	vldr	s14, [r7, #24]
 8009b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5e:	d505      	bpl.n	8009b6c <dynNotchInit+0x104>
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b6a:	e001      	b.n	8009b70 <dynNotchInit+0x108>
 8009b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b74:	ee17 2a90 	vmov	r2, s15
 8009b78:	4b89      	ldr	r3, [pc, #548]	; (8009da0 <dynNotchInit+0x338>)
 8009b7a:	601a      	str	r2, [r3, #0]
    sampleCountRcp = 1.0f / sampleCount;
 8009b7c:	4b88      	ldr	r3, [pc, #544]	; (8009da0 <dynNotchInit+0x338>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	ee07 3a90 	vmov	s15, r3
 8009b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b90:	4b84      	ldr	r3, [pc, #528]	; (8009da4 <dynNotchInit+0x33c>)
 8009b92:	edc3 7a00 	vstr	s15, [r3]

    sdftSampleRateHz = looprateHz / sampleCount;
 8009b96:	4b82      	ldr	r3, [pc, #520]	; (8009da0 <dynNotchInit+0x338>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ba2:	edd7 6a08 	vldr	s13, [r7, #32]
 8009ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009baa:	4b7f      	ldr	r3, [pc, #508]	; (8009da8 <dynNotchInit+0x340>)
 8009bac:	edc3 7a00 	vstr	s15, [r3]
    // eg 2k, user max 600hz, int(2000/1200) = 1 (1.666) sdftSampleRateHz = 2000hz, range 1000Hz
    // eg 2k, user max 400hz, int(2000/800) = 2 (2.5) sdftSampleRateHz = 1000hz, range 500Hz
    // eg 1k, user max 600hz, int(1000/1200) = 1 (max(1,0.8333)) sdftSampleRateHz = 1000hz, range 500Hz
    // the upper limit of DN is always going to be the Nyquist frequency (= sampleRate / 2)

    sdftResolutionHz = sdftSampleRateHz / SDFT_SAMPLE_SIZE; // 18.5hz per bin at 8k and 600Hz maxHz
 8009bb0:	4b7d      	ldr	r3, [pc, #500]	; (8009da8 <dynNotchInit+0x340>)
 8009bb2:	ed93 7a00 	vldr	s14, [r3]
 8009bb6:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8009dac <dynNotchInit+0x344>
 8009bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bbe:	4b7c      	ldr	r3, [pc, #496]	; (8009db0 <dynNotchInit+0x348>)
 8009bc0:	edc3 7a00 	vstr	s15, [r3]
    sdftStartBin = MAX(2, dynNotch.minHz / sdftResolutionHz + 0.5f); // can't use bin 0 because it is DC.
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	4b72      	ldr	r3, [pc, #456]	; (8009d94 <dynNotchInit+0x32c>)
 8009bca:	edd3 6a01 	vldr	s13, [r3, #4]
 8009bce:	4b78      	ldr	r3, [pc, #480]	; (8009db0 <dynNotchInit+0x348>)
 8009bd0:	ed93 7a00 	vldr	s14, [r3]
 8009bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009be0:	edc7 7a04 	vstr	s15, [r7, #16]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bee:	ed97 7a04 	vldr	s14, [r7, #16]
 8009bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfa:	d505      	bpl.n	8009c08 <dynNotchInit+0x1a0>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c06:	e001      	b.n	8009c0c <dynNotchInit+0x1a4>
 8009c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c10:	ee17 2a90 	vmov	r2, s15
 8009c14:	4b67      	ldr	r3, [pc, #412]	; (8009db4 <dynNotchInit+0x34c>)
 8009c16:	601a      	str	r2, [r3, #0]
    sdftEndBin = MIN(SDFT_BIN_COUNT - 1, dynNotch.maxHz / sdftResolutionHz + 0.5f); // can't use more than SDFT_BIN_COUNT bins.
 8009c18:	2323      	movs	r3, #35	; 0x23
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	4b5d      	ldr	r3, [pc, #372]	; (8009d94 <dynNotchInit+0x32c>)
 8009c1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8009c22:	4b63      	ldr	r3, [pc, #396]	; (8009db0 <dynNotchInit+0x348>)
 8009c24:	ed93 7a00 	vldr	s14, [r3]
 8009c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c34:	edc7 7a02 	vstr	s15, [r7, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c42:	ed97 7a02 	vldr	s14, [r7, #8]
 8009c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	dd05      	ble.n	8009c5c <dynNotchInit+0x1f4>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c5a:	e001      	b.n	8009c60 <dynNotchInit+0x1f8>
 8009c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c64:	ee17 2a90 	vmov	r2, s15
 8009c68:	4b53      	ldr	r3, [pc, #332]	; (8009db8 <dynNotchInit+0x350>)
 8009c6a:	601a      	str	r2, [r3, #0]
    pt1LooptimeS = DYN_NOTCH_CALC_TICKS / looprateHz;
 8009c6c:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8009c70:	ed97 7a08 	vldr	s14, [r7, #32]
 8009c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c78:	4b50      	ldr	r3, [pc, #320]	; (8009dbc <dynNotchInit+0x354>)
 8009c7a:	edc3 7a00 	vstr	s15, [r3]

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009c7e:	2300      	movs	r3, #0
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
 8009c82:	e011      	b.n	8009ca8 <dynNotchInit+0x240>
        sdftInit(&sdft[axis], sdftStartBin, sdftEndBin, sampleCount);
 8009c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c86:	f44f 7215 	mov.w	r2, #596	; 0x254
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
 8009c8e:	4a4c      	ldr	r2, [pc, #304]	; (8009dc0 <dynNotchInit+0x358>)
 8009c90:	1898      	adds	r0, r3, r2
 8009c92:	4b48      	ldr	r3, [pc, #288]	; (8009db4 <dynNotchInit+0x34c>)
 8009c94:	6819      	ldr	r1, [r3, #0]
 8009c96:	4b48      	ldr	r3, [pc, #288]	; (8009db8 <dynNotchInit+0x350>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <dynNotchInit+0x338>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f001 fcdb 	bl	800b658 <sdftInit>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	ddea      	ble.n	8009c84 <dynNotchInit+0x21c>
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009cae:	2300      	movs	r3, #0
 8009cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb2:	e064      	b.n	8009d7e <dynNotchInit+0x316>
        for (int p = 0; p < dynNotch.count; p++) {
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb8:	e059      	b.n	8009d6e <dynNotchInit+0x306>
            // any init value is fine, but evenly spreading centerFreqs across frequency range makes notch filters stick to peaks quicker
            dynNotch.centerFreq[axis][p] = (p + 0.5f) * (dynNotch.maxHz - dynNotch.minHz) / (float)dynNotch.count + dynNotch.minHz;
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ccc:	4b31      	ldr	r3, [pc, #196]	; (8009d94 <dynNotchInit+0x32c>)
 8009cce:	edd3 6a02 	vldr	s13, [r3, #8]
 8009cd2:	4b30      	ldr	r3, [pc, #192]	; (8009d94 <dynNotchInit+0x32c>)
 8009cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009cd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009cdc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009ce0:	4b2c      	ldr	r3, [pc, #176]	; (8009d94 <dynNotchInit+0x32c>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf0:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <dynNotchInit+0x32c>)
 8009cf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8009cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cfa:	4926      	ldr	r1, [pc, #152]	; (8009d94 <dynNotchInit+0x32c>)
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d06:	4413      	add	r3, r2
 8009d08:	3304      	adds	r3, #4
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3304      	adds	r3, #4
 8009d10:	edc3 7a00 	vstr	s15, [r3]
            biquadFilterInit(&dynNotch.notch[axis][p], dynNotch.centerFreq[axis][p], dynNotch.looptimeUs, dynNotch.q, FILTER_NOTCH, 1.0f);
 8009d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d20:	21c8      	movs	r1, #200	; 0xc8
 8009d22:	fb01 f202 	mul.w	r2, r1, r2
 8009d26:	4413      	add	r3, r2
 8009d28:	3350      	adds	r3, #80	; 0x50
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	; (8009d94 <dynNotchInit+0x32c>)
 8009d2c:	4413      	add	r3, r2
 8009d2e:	1d18      	adds	r0, r3, #4
 8009d30:	4918      	ldr	r1, [pc, #96]	; (8009d94 <dynNotchInit+0x32c>)
 8009d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3304      	adds	r3, #4
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	440b      	add	r3, r1
 8009d44:	3304      	adds	r3, #4
 8009d46:	edd3 7a00 	vldr	s15, [r3]
 8009d4a:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <dynNotchInit+0x32c>)
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	4a11      	ldr	r2, [pc, #68]	; (8009d94 <dynNotchInit+0x32c>)
 8009d50:	ed92 7a00 	vldr	s14, [r2]
 8009d54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009d58:	2201      	movs	r2, #1
 8009d5a:	eef0 0a47 	vmov.f32	s1, s14
 8009d5e:	4619      	mov	r1, r3
 8009d60:	eeb0 0a67 	vmov.f32	s0, s15
 8009d64:	f000 fec6 	bl	800aaf4 <biquadFilterInit>
        for (int p = 0; p < dynNotch.count; p++) {
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <dynNotchInit+0x32c>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d74:	429a      	cmp	r2, r3
 8009d76:	dba0      	blt.n	8009cba <dynNotchInit+0x252>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	dd97      	ble.n	8009cb4 <dynNotchInit+0x24c>
        }
    }
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	3738      	adds	r7, #56	; 0x38
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	42c80000 	.word	0x42c80000
 8009d94:	10000008 	.word	0x10000008
 8009d98:	49742400 	.word	0x49742400
 8009d9c:	44fa0000 	.word	0x44fa0000
 8009da0:	100002b8 	.word	0x100002b8
 8009da4:	100002bc 	.word	0x100002bc
 8009da8:	10000a98 	.word	0x10000a98
 8009dac:	42900000 	.word	0x42900000
 8009db0:	10000a9c 	.word	0x10000a9c
 8009db4:	10000aa0 	.word	0x10000aa0
 8009db8:	10000aa4 	.word	0x10000aa4
 8009dbc:	10000aac 	.word	0x10000aac
 8009dc0:	100002e4 	.word	0x100002e4

08009dc4 <dynNotchPush>:

// Collect gyro data, to be downsampled and analysed in dynNotchUpdate() function
void dynNotchPush(const int axis, const float sample)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	ed87 0a00 	vstr	s0, [r7]
    sampleAccumulator[axis] += sample;
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <dynNotchPush+0x38>)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	ed93 7a00 	vldr	s14, [r3]
 8009ddc:	edd7 7a00 	vldr	s15, [r7]
 8009de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009de4:	4a05      	ldr	r2, [pc, #20]	; (8009dfc <dynNotchPush+0x38>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	edc3 7a00 	vstr	s15, [r3]
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	100002c0 	.word	0x100002c0

08009e00 <dynNotchUpdate>:

static void dynNotchProcess(void);

// Downsample and analyse gyro data
void dynNotchUpdate(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
    // samples should have been pushed by `dynNotchPush`
    // if gyro sampling is > 1kHz, accumulate and average multiple gyro samples
    if (sampleIndex == sampleCount) {
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <dynNotchUpdate+0xc4>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <dynNotchUpdate+0xc8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d126      	bne.n	8009e60 <dynNotchUpdate+0x60>
        sampleIndex = 0;
 8009e12:	4b2c      	ldr	r3, [pc, #176]	; (8009ec4 <dynNotchUpdate+0xc4>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

        // calculate mean value of accumulated samples
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009e18:	2300      	movs	r3, #0
 8009e1a:	607b      	str	r3, [r7, #4]
 8009e1c:	e01a      	b.n	8009e54 <dynNotchUpdate+0x54>
            sampleAvg[axis] = sampleAccumulator[axis] * sampleCountRcp;
 8009e1e:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <dynNotchUpdate+0xcc>)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	ed93 7a00 	vldr	s14, [r3]
 8009e2a:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <dynNotchUpdate+0xd0>)
 8009e2c:	edd3 7a00 	vldr	s15, [r3]
 8009e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e34:	4a27      	ldr	r2, [pc, #156]	; (8009ed4 <dynNotchUpdate+0xd4>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	edc3 7a00 	vstr	s15, [r3]
            sampleAccumulator[axis] = 0;
 8009e40:	4a22      	ldr	r2, [pc, #136]	; (8009ecc <dynNotchUpdate+0xcc>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3301      	adds	r3, #1
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dde1      	ble.n	8009e1e <dynNotchUpdate+0x1e>

        // We need DYN_NOTCH_CALC_TICKS ticks to update all axes with newly sampled value
        // recalculation of filters takes 4 calls per axis => each filter gets updated every DYN_NOTCH_CALC_TICKS calls
        // at 8kHz PID loop rate this means 8kHz / 4 / 3 = 666Hz => update every 1.5ms
        // at 4kHz PID loop rate this means 4kHz / 4 / 3 = 333Hz => update every 3ms
        state.tick = DYN_NOTCH_CALC_TICKS;
 8009e5a:	4b1f      	ldr	r3, [pc, #124]	; (8009ed8 <dynNotchUpdate+0xd8>)
 8009e5c:	220c      	movs	r2, #12
 8009e5e:	601a      	str	r2, [r3, #0]
    }

    // 2us @ F722
    // SDFT processing in batches to synchronize with incoming downsampled data
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009e60:	2300      	movs	r3, #0
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	e017      	b.n	8009e96 <dynNotchUpdate+0x96>
        sdftPushBatch(&sdft[axis], sampleAvg[axis], sampleIndex);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	f44f 7215 	mov.w	r2, #596	; 0x254
 8009e6c:	fb02 f303 	mul.w	r3, r2, r3
 8009e70:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <dynNotchUpdate+0xdc>)
 8009e72:	441a      	add	r2, r3
 8009e74:	4917      	ldr	r1, [pc, #92]	; (8009ed4 <dynNotchUpdate+0xd4>)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	edd3 7a00 	vldr	s15, [r3]
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <dynNotchUpdate+0xc4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4619      	mov	r1, r3
 8009e86:	eeb0 0a67 	vmov.f32	s0, s15
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f001 fcae 	bl	800b7ec <sdftPushBatch>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	3301      	adds	r3, #1
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	dde4      	ble.n	8009e66 <dynNotchUpdate+0x66>
    }
    sampleIndex++;
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <dynNotchUpdate+0xc4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a08      	ldr	r2, [pc, #32]	; (8009ec4 <dynNotchUpdate+0xc4>)
 8009ea4:	6013      	str	r3, [r2, #0]

    // Find frequency peaks and update filters
    if (state.tick > 0) {
 8009ea6:	4b0c      	ldr	r3, [pc, #48]	; (8009ed8 <dynNotchUpdate+0xd8>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dd06      	ble.n	8009ebc <dynNotchUpdate+0xbc>
        dynNotchProcess();
 8009eae:	f000 f817 	bl	8009ee0 <dynNotchProcess>
        --state.tick;
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <dynNotchUpdate+0xd8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a07      	ldr	r2, [pc, #28]	; (8009ed8 <dynNotchUpdate+0xd8>)
 8009eba:	6013      	str	r3, [r2, #0]
    }
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	100002b4 	.word	0x100002b4
 8009ec8:	100002b8 	.word	0x100002b8
 8009ecc:	100002c0 	.word	0x100002c0
 8009ed0:	100002bc 	.word	0x100002bc
 8009ed4:	100002cc 	.word	0x100002cc
 8009ed8:	100002d8 	.word	0x100002d8
 8009edc:	100002e4 	.word	0x100002e4

08009ee0 <dynNotchProcess>:

// Find frequency peaks and update filters
static void dynNotchProcess(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b09a      	sub	sp, #104	; 0x68
 8009ee4:	af00      	add	r7, sp, #0
    uint32_t startTime = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    //     startTime = micros();
    // }

    //DEBUG_SET(DEBUG_FFT_TIME, 0, state.step);

    switch (state.step) {
 8009eea:	4b8e      	ldr	r3, [pc, #568]	; (800a124 <dynNotchProcess+0x244>)
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	f200 8334 	bhi.w	800a55c <dynNotchProcess+0x67c>
 8009ef4:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <dynNotchProcess+0x1c>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f65 	.word	0x08009f65
 8009f04:	0800a11b 	.word	0x0800a11b
 8009f08:	0800a4a5 	.word	0x0800a4a5
    
        case STEP_WINDOW: // 4.1us (3-6us) @ F722
        {
            sdftWinSq(&sdft[state.axis], sdftData);
 8009f0c:	4b85      	ldr	r3, [pc, #532]	; (800a124 <dynNotchProcess+0x244>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f44f 7215 	mov.w	r2, #596	; 0x254
 8009f14:	fb02 f303 	mul.w	r3, r2, r3
 8009f18:	4a83      	ldr	r2, [pc, #524]	; (800a128 <dynNotchProcess+0x248>)
 8009f1a:	4413      	add	r3, r2
 8009f1c:	4983      	ldr	r1, [pc, #524]	; (800a12c <dynNotchProcess+0x24c>)
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 fd08 	bl	800b934 <sdftWinSq>
            
            // Get total vibrational power in dyn notch range for noise floor estimate in STEP_CALC_FREQUENCIES
            sdftNoiseThreshold = 0.0f;
 8009f24:	4b82      	ldr	r3, [pc, #520]	; (800a130 <dynNotchProcess+0x250>)
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
            for (int bin = (sdftStartBin + 1); bin < sdftEndBin; bin++) {   // don't use startBin or endBin because they are not windowed properly
 8009f2c:	4b81      	ldr	r3, [pc, #516]	; (800a134 <dynNotchProcess+0x254>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	667b      	str	r3, [r7, #100]	; 0x64
 8009f34:	e010      	b.n	8009f58 <dynNotchProcess+0x78>
                sdftNoiseThreshold += sdftData[bin];                        // sdftData contains power spectral density
 8009f36:	4a7d      	ldr	r2, [pc, #500]	; (800a12c <dynNotchProcess+0x24c>)
 8009f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	ed93 7a00 	vldr	s14, [r3]
 8009f42:	4b7b      	ldr	r3, [pc, #492]	; (800a130 <dynNotchProcess+0x250>)
 8009f44:	edd3 7a00 	vldr	s15, [r3]
 8009f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f4c:	4b78      	ldr	r3, [pc, #480]	; (800a130 <dynNotchProcess+0x250>)
 8009f4e:	edc3 7a00 	vstr	s15, [r3]
            for (int bin = (sdftStartBin + 1); bin < sdftEndBin; bin++) {   // don't use startBin or endBin because they are not windowed properly
 8009f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f54:	3301      	adds	r3, #1
 8009f56:	667b      	str	r3, [r7, #100]	; 0x64
 8009f58:	4b77      	ldr	r3, [pc, #476]	; (800a138 <dynNotchProcess+0x258>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	dbe9      	blt.n	8009f36 <dynNotchProcess+0x56>
            }

            //DEBUG_SET(DEBUG_FFT_TIME, 1, micros() - startTime);

            break;
 8009f62:	e2fb      	b.n	800a55c <dynNotchProcess+0x67c>
        }
        case STEP_DETECT_PEAKS: // 5.5us (4-7us) @ F722
        {
            // Get memory ready for new peak data on current axis
            for (int p = 0; p < dynNotch.count; p++) {
 8009f64:	2300      	movs	r3, #0
 8009f66:	663b      	str	r3, [r7, #96]	; 0x60
 8009f68:	e00f      	b.n	8009f8a <dynNotchProcess+0xaa>
                peaks[p].bin = 0;
 8009f6a:	4a74      	ldr	r2, [pc, #464]	; (800a13c <dynNotchProcess+0x25c>)
 8009f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                peaks[p].value = 0.0f;
 8009f74:	4a71      	ldr	r2, [pc, #452]	; (800a13c <dynNotchProcess+0x25c>)
 8009f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
            for (int p = 0; p < dynNotch.count; p++) {
 8009f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f86:	3301      	adds	r3, #1
 8009f88:	663b      	str	r3, [r7, #96]	; 0x60
 8009f8a:	4b6d      	ldr	r3, [pc, #436]	; (800a140 <dynNotchProcess+0x260>)
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f90:	429a      	cmp	r2, r3
 8009f92:	dbea      	blt.n	8009f6a <dynNotchProcess+0x8a>
            }

            // Search for N biggest peaks in frequency spectrum
            for (int bin = (sdftStartBin + 1); bin < sdftEndBin; bin++) {
 8009f94:	4b67      	ldr	r3, [pc, #412]	; (800a134 <dynNotchProcess+0x254>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f9c:	e070      	b.n	800a080 <dynNotchProcess+0x1a0>
                // Check if bin is peak
                if ((sdftData[bin] > sdftData[bin - 1]) && (sdftData[bin] > sdftData[bin + 1])) {
 8009f9e:	4a63      	ldr	r2, [pc, #396]	; (800a12c <dynNotchProcess+0x24c>)
 8009fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	ed93 7a00 	vldr	s14, [r3]
 8009faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fac:	3b01      	subs	r3, #1
 8009fae:	4a5f      	ldr	r2, [pc, #380]	; (800a12c <dynNotchProcess+0x24c>)
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	edd3 7a00 	vldr	s15, [r3]
 8009fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc0:	dd5b      	ble.n	800a07a <dynNotchProcess+0x19a>
 8009fc2:	4a5a      	ldr	r2, [pc, #360]	; (800a12c <dynNotchProcess+0x24c>)
 8009fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	ed93 7a00 	vldr	s14, [r3]
 8009fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	4a56      	ldr	r2, [pc, #344]	; (800a12c <dynNotchProcess+0x24c>)
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	edd3 7a00 	vldr	s15, [r3]
 8009fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe4:	dd49      	ble.n	800a07a <dynNotchProcess+0x19a>
                    // Check if peak is big enough to be one of N biggest peaks.
                    // If so, insert peak and sort peaks in descending height order
                    for (int p = 0; p < dynNotch.count; p++) {
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fea:	e03e      	b.n	800a06a <dynNotchProcess+0x18a>
                        if (sdftData[bin] > peaks[p].value) {
 8009fec:	4a4f      	ldr	r2, [pc, #316]	; (800a12c <dynNotchProcess+0x24c>)
 8009fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	ed93 7a00 	vldr	s14, [r3]
 8009ff8:	4a50      	ldr	r2, [pc, #320]	; (800a13c <dynNotchProcess+0x25c>)
 8009ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	3304      	adds	r3, #4
 800a002:	edd3 7a00 	vldr	s15, [r3]
 800a006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00e:	dd29      	ble.n	800a064 <dynNotchProcess+0x184>
                            for (int k = dynNotch.count - 1; k > p; k--) {
 800a010:	4b4b      	ldr	r3, [pc, #300]	; (800a140 <dynNotchProcess+0x260>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	3b01      	subs	r3, #1
 800a016:	657b      	str	r3, [r7, #84]	; 0x54
 800a018:	e00f      	b.n	800a03a <dynNotchProcess+0x15a>
                                peaks[k] = peaks[k - 1];
 800a01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01c:	1e5a      	subs	r2, r3, #1
 800a01e:	4847      	ldr	r0, [pc, #284]	; (800a13c <dynNotchProcess+0x25c>)
 800a020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a022:	4946      	ldr	r1, [pc, #280]	; (800a13c <dynNotchProcess+0x25c>)
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	4403      	add	r3, r0
 800a028:	00d2      	lsls	r2, r2, #3
 800a02a:	440a      	add	r2, r1
 800a02c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a030:	e883 0003 	stmia.w	r3, {r0, r1}
                            for (int k = dynNotch.count - 1; k > p; k--) {
 800a034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a036:	3b01      	subs	r3, #1
 800a038:	657b      	str	r3, [r7, #84]	; 0x54
 800a03a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a03e:	429a      	cmp	r2, r3
 800a040:	dceb      	bgt.n	800a01a <dynNotchProcess+0x13a>
                            }
                            peaks[p].bin = bin;
 800a042:	493e      	ldr	r1, [pc, #248]	; (800a13c <dynNotchProcess+0x25c>)
 800a044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a046:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a048:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                            peaks[p].value = sdftData[bin];
 800a04c:	4a37      	ldr	r2, [pc, #220]	; (800a12c <dynNotchProcess+0x24c>)
 800a04e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	4939      	ldr	r1, [pc, #228]	; (800a13c <dynNotchProcess+0x25c>)
 800a058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	440b      	add	r3, r1
 800a05e:	3304      	adds	r3, #4
 800a060:	601a      	str	r2, [r3, #0]
                            break;
 800a062:	e007      	b.n	800a074 <dynNotchProcess+0x194>
                    for (int p = 0; p < dynNotch.count; p++) {
 800a064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a066:	3301      	adds	r3, #1
 800a068:	65bb      	str	r3, [r7, #88]	; 0x58
 800a06a:	4b35      	ldr	r3, [pc, #212]	; (800a140 <dynNotchProcess+0x260>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a070:	429a      	cmp	r2, r3
 800a072:	dbbb      	blt.n	8009fec <dynNotchProcess+0x10c>
                        }
                    }
                    bin++; // If bin is peak, next bin can't be peak => jump it
 800a074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a076:	3301      	adds	r3, #1
 800a078:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (int bin = (sdftStartBin + 1); bin < sdftEndBin; bin++) {
 800a07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07c:	3301      	adds	r3, #1
 800a07e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a080:	4b2d      	ldr	r3, [pc, #180]	; (800a138 <dynNotchProcess+0x258>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a086:	429a      	cmp	r2, r3
 800a088:	db89      	blt.n	8009f9e <dynNotchProcess+0xbe>
                }
            }

            // Sort N biggest peaks in ascending bin order (example: 3, 8, 25, 0, 0, ..., 0)
            for (int p = dynNotch.count - 1; p > 0; p--) {
 800a08a:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <dynNotchProcess+0x260>)
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	3b01      	subs	r3, #1
 800a090:	653b      	str	r3, [r7, #80]	; 0x50
 800a092:	e03e      	b.n	800a112 <dynNotchProcess+0x232>
                for (int k = 0; k < p; k++) {
 800a094:	2300      	movs	r3, #0
 800a096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a098:	e034      	b.n	800a104 <dynNotchProcess+0x224>
                    // Swap peaks but ignore swapping void peaks (bin = 0). This leaves
                    // void peaks at the end of peaks array without moving them
                    if (peaks[k].bin > peaks[k + 1].bin && peaks[k + 1].bin != 0) {
 800a09a:	4a28      	ldr	r2, [pc, #160]	; (800a13c <dynNotchProcess+0x25c>)
 800a09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a0a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	4925      	ldr	r1, [pc, #148]	; (800a13c <dynNotchProcess+0x25c>)
 800a0a8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	dd26      	ble.n	800a0fe <dynNotchProcess+0x21e>
 800a0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	4a21      	ldr	r2, [pc, #132]	; (800a13c <dynNotchProcess+0x25c>)
 800a0b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01f      	beq.n	800a0fe <dynNotchProcess+0x21e>
                        peak_t temp = peaks[k];
 800a0be:	491f      	ldr	r1, [pc, #124]	; (800a13c <dynNotchProcess+0x25c>)
 800a0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c2:	463a      	mov	r2, r7
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	440b      	add	r3, r1
 800a0c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0cc:	e882 0003 	stmia.w	r2, {r0, r1}
                        peaks[k] = peaks[k + 1];
 800a0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	4819      	ldr	r0, [pc, #100]	; (800a13c <dynNotchProcess+0x25c>)
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d8:	4918      	ldr	r1, [pc, #96]	; (800a13c <dynNotchProcess+0x25c>)
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	4403      	add	r3, r0
 800a0de:	00d2      	lsls	r2, r2, #3
 800a0e0:	440a      	add	r2, r1
 800a0e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0e6:	e883 0003 	stmia.w	r3, {r0, r1}
                        peaks[k + 1] = temp;
 800a0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	4a13      	ldr	r2, [pc, #76]	; (800a13c <dynNotchProcess+0x25c>)
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0fa:	e883 0003 	stmia.w	r3, {r0, r1}
                for (int k = 0; k < p; k++) {
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a100:	3301      	adds	r3, #1
 800a102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a108:	429a      	cmp	r2, r3
 800a10a:	dbc6      	blt.n	800a09a <dynNotchProcess+0x1ba>
            for (int p = dynNotch.count - 1; p > 0; p--) {
 800a10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10e:	3b01      	subs	r3, #1
 800a110:	653b      	str	r3, [r7, #80]	; 0x50
 800a112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a114:	2b00      	cmp	r3, #0
 800a116:	dcbd      	bgt.n	800a094 <dynNotchProcess+0x1b4>
                }
            }

            //DEBUG_SET(DEBUG_FFT_TIME, 1, micros() - startTime);

            break;
 800a118:	e220      	b.n	800a55c <dynNotchProcess+0x67c>
        }
        case STEP_CALC_FREQUENCIES: // 4.0us (2-7us) @ F722
        {
            // Approximate noise floor (= average power spectral density in dyn notch range, excluding peaks)
            int peakCount = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	64bb      	str	r3, [r7, #72]	; 0x48
            for (int p = 0; p < dynNotch.count; p++) {
 800a11e:	2300      	movs	r3, #0
 800a120:	647b      	str	r3, [r7, #68]	; 0x44
 800a122:	e058      	b.n	800a1d6 <dynNotchProcess+0x2f6>
 800a124:	100002d8 	.word	0x100002d8
 800a128:	100002e4 	.word	0x100002e4
 800a12c:	10000a08 	.word	0x10000a08
 800a130:	10000aa8 	.word	0x10000aa8
 800a134:	10000aa0 	.word	0x10000aa0
 800a138:	10000aa4 	.word	0x10000aa4
 800a13c:	100009e0 	.word	0x100009e0
 800a140:	10000008 	.word	0x10000008
                if (peaks[p].bin != 0) {
 800a144:	4abb      	ldr	r2, [pc, #748]	; (800a434 <dynNotchProcess+0x554>)
 800a146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d03f      	beq.n	800a1d0 <dynNotchProcess+0x2f0>
                    sdftNoiseThreshold -= 0.75f * sdftData[peaks[p].bin - 1];
 800a150:	4bb9      	ldr	r3, [pc, #740]	; (800a438 <dynNotchProcess+0x558>)
 800a152:	ed93 7a00 	vldr	s14, [r3]
 800a156:	4ab7      	ldr	r2, [pc, #732]	; (800a434 <dynNotchProcess+0x554>)
 800a158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a15e:	3b01      	subs	r3, #1
 800a160:	4ab6      	ldr	r2, [pc, #728]	; (800a43c <dynNotchProcess+0x55c>)
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	edd3 7a00 	vldr	s15, [r3]
 800a16a:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800a16e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a172:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a176:	4bb0      	ldr	r3, [pc, #704]	; (800a438 <dynNotchProcess+0x558>)
 800a178:	edc3 7a00 	vstr	s15, [r3]
                    sdftNoiseThreshold -= sdftData[peaks[p].bin];
 800a17c:	4bae      	ldr	r3, [pc, #696]	; (800a438 <dynNotchProcess+0x558>)
 800a17e:	ed93 7a00 	vldr	s14, [r3]
 800a182:	4aac      	ldr	r2, [pc, #688]	; (800a434 <dynNotchProcess+0x554>)
 800a184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a186:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a18a:	4aac      	ldr	r2, [pc, #688]	; (800a43c <dynNotchProcess+0x55c>)
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	edd3 7a00 	vldr	s15, [r3]
 800a194:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a198:	4ba7      	ldr	r3, [pc, #668]	; (800a438 <dynNotchProcess+0x558>)
 800a19a:	edc3 7a00 	vstr	s15, [r3]
                    sdftNoiseThreshold -= 0.75f * sdftData[peaks[p].bin + 1];
 800a19e:	4ba6      	ldr	r3, [pc, #664]	; (800a438 <dynNotchProcess+0x558>)
 800a1a0:	ed93 7a00 	vldr	s14, [r3]
 800a1a4:	4aa3      	ldr	r2, [pc, #652]	; (800a434 <dynNotchProcess+0x554>)
 800a1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	4aa3      	ldr	r2, [pc, #652]	; (800a43c <dynNotchProcess+0x55c>)
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	edd3 7a00 	vldr	s15, [r3]
 800a1b8:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800a1bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1c4:	4b9c      	ldr	r3, [pc, #624]	; (800a438 <dynNotchProcess+0x558>)
 800a1c6:	edc3 7a00 	vstr	s15, [r3]
                    peakCount++;
 800a1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	64bb      	str	r3, [r7, #72]	; 0x48
            for (int p = 0; p < dynNotch.count; p++) {
 800a1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d6:	4b9a      	ldr	r3, [pc, #616]	; (800a440 <dynNotchProcess+0x560>)
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	dbb1      	blt.n	800a144 <dynNotchProcess+0x264>
                }
            }
            sdftNoiseThreshold /= sdftEndBin - sdftStartBin - peakCount - 1;
 800a1e0:	4b95      	ldr	r3, [pc, #596]	; (800a438 <dynNotchProcess+0x558>)
 800a1e2:	edd3 6a00 	vldr	s13, [r3]
 800a1e6:	4b97      	ldr	r3, [pc, #604]	; (800a444 <dynNotchProcess+0x564>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4b97      	ldr	r3, [pc, #604]	; (800a448 <dynNotchProcess+0x568>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	1ad2      	subs	r2, r2, r3
 800a1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	ee07 3a90 	vmov	s15, r3
 800a1fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a202:	4b8d      	ldr	r3, [pc, #564]	; (800a438 <dynNotchProcess+0x558>)
 800a204:	edc3 7a00 	vstr	s15, [r3]

            // A noise threshold 2 times the noise floor prevents peak tracking being too sensitive to noise
            sdftNoiseThreshold *= 2.0f;
 800a208:	4b8b      	ldr	r3, [pc, #556]	; (800a438 <dynNotchProcess+0x558>)
 800a20a:	edd3 7a00 	vldr	s15, [r3]
 800a20e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a212:	4b89      	ldr	r3, [pc, #548]	; (800a438 <dynNotchProcess+0x558>)
 800a214:	edc3 7a00 	vstr	s15, [r3]

            for (int p = 0; p < dynNotch.count; p++) {
 800a218:	2300      	movs	r3, #0
 800a21a:	643b      	str	r3, [r7, #64]	; 0x40
 800a21c:	e0d9      	b.n	800a3d2 <dynNotchProcess+0x4f2>

                // Only update dynNotch.centerFreq if there is a peak (ignore void peaks) and if peak is above noise floor
                if (peaks[p].bin != 0 && peaks[p].value > sdftNoiseThreshold) {
 800a21e:	4a85      	ldr	r2, [pc, #532]	; (800a434 <dynNotchProcess+0x554>)
 800a220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a222:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80d0 	beq.w	800a3cc <dynNotchProcess+0x4ec>
 800a22c:	4a81      	ldr	r2, [pc, #516]	; (800a434 <dynNotchProcess+0x554>)
 800a22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	4413      	add	r3, r2
 800a234:	3304      	adds	r3, #4
 800a236:	ed93 7a00 	vldr	s14, [r3]
 800a23a:	4b7f      	ldr	r3, [pc, #508]	; (800a438 <dynNotchProcess+0x558>)
 800a23c:	edd3 7a00 	vldr	s15, [r3]
 800a240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a248:	f340 80c0 	ble.w	800a3cc <dynNotchProcess+0x4ec>

                    float meanBin = peaks[p].bin;
 800a24c:	4a79      	ldr	r2, [pc, #484]	; (800a434 <dynNotchProcess+0x554>)
 800a24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a25c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

                    // Height of peak bin (y1) and shoulder bins (y0, y2)
                    const float y0 = sdftData[peaks[p].bin - 1];
 800a260:	4a74      	ldr	r2, [pc, #464]	; (800a434 <dynNotchProcess+0x554>)
 800a262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a268:	3b01      	subs	r3, #1
 800a26a:	4a74      	ldr	r2, [pc, #464]	; (800a43c <dynNotchProcess+0x55c>)
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	623b      	str	r3, [r7, #32]
                    const float y1 = sdftData[peaks[p].bin];
 800a274:	4a6f      	ldr	r2, [pc, #444]	; (800a434 <dynNotchProcess+0x554>)
 800a276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a27c:	4a6f      	ldr	r2, [pc, #444]	; (800a43c <dynNotchProcess+0x55c>)
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	61fb      	str	r3, [r7, #28]
                    const float y2 = sdftData[peaks[p].bin + 1];
 800a286:	4a6b      	ldr	r2, [pc, #428]	; (800a434 <dynNotchProcess+0x554>)
 800a288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a28e:	3301      	adds	r3, #1
 800a290:	4a6a      	ldr	r2, [pc, #424]	; (800a43c <dynNotchProcess+0x55c>)
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	61bb      	str	r3, [r7, #24]

                    // Estimate true peak position aka. meanBin (fit parabola y(x) over y0, y1 and y2, solve dy/dx=0 for x)
                    const float denom = 2.0f * (y0 - 2 * y1 + y2);
 800a29a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a29e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2a2:	ed97 7a08 	vldr	s14, [r7, #32]
 800a2a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2aa:	edd7 7a06 	vldr	s15, [r7, #24]
 800a2ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2b6:	edc7 7a05 	vstr	s15, [r7, #20]
                    if (denom != 0.0f) {
 800a2ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800a2be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c6:	d00f      	beq.n	800a2e8 <dynNotchProcess+0x408>
                        meanBin += (y0 - y2) / denom;
 800a2c8:	ed97 7a08 	vldr	s14, [r7, #32]
 800a2cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800a2d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a2d4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    }

                    // Convert bin to frequency: freq = bin * binResoultion (bin 0 is 0Hz)
                    const float centerFreq = constrainf(meanBin * sdftResolutionHz, dynNotch.minHz, dynNotch.maxHz);
 800a2e8:	4b58      	ldr	r3, [pc, #352]	; (800a44c <dynNotchProcess+0x56c>)
 800a2ea:	ed93 7a00 	vldr	s14, [r3]
 800a2ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f6:	4b52      	ldr	r3, [pc, #328]	; (800a440 <dynNotchProcess+0x560>)
 800a2f8:	ed93 7a01 	vldr	s14, [r3, #4]
 800a2fc:	4b50      	ldr	r3, [pc, #320]	; (800a440 <dynNotchProcess+0x560>)
 800a2fe:	edd3 6a02 	vldr	s13, [r3, #8]
 800a302:	eeb0 1a66 	vmov.f32	s2, s13
 800a306:	eef0 0a47 	vmov.f32	s1, s14
 800a30a:	eeb0 0a67 	vmov.f32	s0, s15
 800a30e:	f7ff fb82 	bl	8009a16 <constrainf>
 800a312:	ed87 0a04 	vstr	s0, [r7, #16]

                    // PT1 style smoothing moves notch center freqs rapidly towards big peaks and slowly away, up to 10x faster 
                    const float cutoffMult = constrainf(peaks[p].value / sdftNoiseThreshold, 1.0f, 10.0f);
 800a316:	4a47      	ldr	r2, [pc, #284]	; (800a434 <dynNotchProcess+0x554>)
 800a318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	3304      	adds	r3, #4
 800a320:	ed93 7a00 	vldr	s14, [r3]
 800a324:	4b44      	ldr	r3, [pc, #272]	; (800a438 <dynNotchProcess+0x558>)
 800a326:	edd3 7a00 	vldr	s15, [r3]
 800a32a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a32e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800a332:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800a336:	eeb0 0a66 	vmov.f32	s0, s13
 800a33a:	f7ff fb6c 	bl	8009a16 <constrainf>
 800a33e:	ed87 0a03 	vstr	s0, [r7, #12]
                    const float gain = pt1FilterGain(DYN_NOTCH_SMOOTH_HZ * cutoffMult, pt1LooptimeS); // dynamic PT1 k value
 800a342:	edd7 7a03 	vldr	s15, [r7, #12]
 800a346:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a34a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a34e:	4b40      	ldr	r3, [pc, #256]	; (800a450 <dynNotchProcess+0x570>)
 800a350:	ed93 7a00 	vldr	s14, [r3]
 800a354:	eef0 0a47 	vmov.f32	s1, s14
 800a358:	eeb0 0a67 	vmov.f32	s0, s15
 800a35c:	f000 fa74 	bl	800a848 <pt1FilterGain>
 800a360:	ed87 0a02 	vstr	s0, [r7, #8]

                    // Finally update notch center frequency p on current axis
                    dynNotch.centerFreq[state.axis][p] += gain * (centerFreq - dynNotch.centerFreq[state.axis][p]);
 800a364:	4b3b      	ldr	r3, [pc, #236]	; (800a454 <dynNotchProcess+0x574>)
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	4935      	ldr	r1, [pc, #212]	; (800a440 <dynNotchProcess+0x560>)
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	3304      	adds	r3, #4
 800a37c:	ed93 7a00 	vldr	s14, [r3]
 800a380:	4b34      	ldr	r3, [pc, #208]	; (800a454 <dynNotchProcess+0x574>)
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	492e      	ldr	r1, [pc, #184]	; (800a440 <dynNotchProcess+0x560>)
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a38e:	4413      	add	r3, r2
 800a390:	3304      	adds	r3, #4
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	440b      	add	r3, r1
 800a396:	3304      	adds	r3, #4
 800a398:	edd3 7a00 	vldr	s15, [r3]
 800a39c:	edd7 6a04 	vldr	s13, [r7, #16]
 800a3a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a3a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a3a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3ac:	4b29      	ldr	r3, [pc, #164]	; (800a454 <dynNotchProcess+0x574>)
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3b4:	4922      	ldr	r1, [pc, #136]	; (800a440 <dynNotchProcess+0x560>)
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3be:	4413      	add	r3, r2
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	edc3 7a00 	vstr	s15, [r3]
            for (int p = 0; p < dynNotch.count; p++) {
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <dynNotchProcess+0x560>)
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	f6ff af20 	blt.w	800a21e <dynNotchProcess+0x33e>
                }
            }

            if(calculateThrottlePercentAbs() > DYN_NOTCH_OSD_MIN_THROTTLE) {
 800a3de:	f7ff fa93 	bl	8009908 <calculateThrottlePercentAbs>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b14      	cmp	r3, #20
 800a3e6:	d947      	bls.n	800a478 <dynNotchProcess+0x598>
                for (int p = 0; p < dynNotch.count; p++) {
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ec:	e03f      	b.n	800a46e <dynNotchProcess+0x58e>
                    dynNotch.maxCenterFreq = MAX(dynNotch.maxCenterFreq, dynNotch.centerFreq[state.axis][p]);
 800a3ee:	4b14      	ldr	r3, [pc, #80]	; (800a440 <dynNotchProcess+0x560>)
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f4:	4b17      	ldr	r3, [pc, #92]	; (800a454 <dynNotchProcess+0x574>)
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	4911      	ldr	r1, [pc, #68]	; (800a440 <dynNotchProcess+0x560>)
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a402:	4413      	add	r3, r2
 800a404:	3304      	adds	r3, #4
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	3304      	adds	r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a41a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a41e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a426:	d517      	bpl.n	800a458 <dynNotchProcess+0x578>
 800a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a432:	e013      	b.n	800a45c <dynNotchProcess+0x57c>
 800a434:	100009e0 	.word	0x100009e0
 800a438:	10000aa8 	.word	0x10000aa8
 800a43c:	10000a08 	.word	0x10000a08
 800a440:	10000008 	.word	0x10000008
 800a444:	10000aa4 	.word	0x10000aa4
 800a448:	10000aa0 	.word	0x10000aa0
 800a44c:	10000a9c 	.word	0x10000a9c
 800a450:	10000aac 	.word	0x10000aac
 800a454:	100002d8 	.word	0x100002d8
 800a458:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a45c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a460:	ee17 2a90 	vmov	r2, s15
 800a464:	4b45      	ldr	r3, [pc, #276]	; (800a57c <dynNotchProcess+0x69c>)
 800a466:	611a      	str	r2, [r3, #16]
                for (int p = 0; p < dynNotch.count; p++) {
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	3301      	adds	r3, #1
 800a46c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a46e:	4b43      	ldr	r3, [pc, #268]	; (800a57c <dynNotchProcess+0x69c>)
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a474:	429a      	cmp	r2, r3
 800a476:	dbba      	blt.n	800a3ee <dynNotchProcess+0x50e>
                }
            }

            if (state.axis == gyro.gyroDebugAxis) {
 800a478:	4b41      	ldr	r3, [pc, #260]	; (800a580 <dynNotchProcess+0x6a0>)
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	4a41      	ldr	r2, [pc, #260]	; (800a584 <dynNotchProcess+0x6a4>)
 800a47e:	f892 22f6 	ldrb.w	r2, [r2, #758]	; 0x2f6
 800a482:	4293      	cmp	r3, r2
 800a484:	d169      	bne.n	800a55a <dynNotchProcess+0x67a>
                for (int p = 0; p < dynNotch.count && p < 3; p++) {
 800a486:	2300      	movs	r3, #0
 800a488:	637b      	str	r3, [r7, #52]	; 0x34
 800a48a:	e002      	b.n	800a492 <dynNotchProcess+0x5b2>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48e:	3301      	adds	r3, #1
 800a490:	637b      	str	r3, [r7, #52]	; 0x34
 800a492:	4b3a      	ldr	r3, [pc, #232]	; (800a57c <dynNotchProcess+0x69c>)
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a498:	429a      	cmp	r2, r3
 800a49a:	da5e      	bge.n	800a55a <dynNotchProcess+0x67a>
 800a49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	ddf4      	ble.n	800a48c <dynNotchProcess+0x5ac>
                //DEBUG_SET(DEBUG_DYN_LPF, 1, lrintf(dynNotch.centerFreq[state.axis][0]));
            }

            //DEBUG_SET(DEBUG_FFT_TIME, 1, micros() - startTime);

            break;
 800a4a2:	e05a      	b.n	800a55a <dynNotchProcess+0x67a>
        }
        case STEP_UPDATE_FILTERS: // 5.4us (2-9us) @ F722
        {
            for (int p = 0; p < dynNotch.count; p++) {
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a8:	e043      	b.n	800a532 <dynNotchProcess+0x652>
                // Only update notch filter coefficients if the corresponding peak got its center frequency updated in the previous step
                if (peaks[p].bin != 0 && peaks[p].value > sdftNoiseThreshold) {
 800a4aa:	4a37      	ldr	r2, [pc, #220]	; (800a588 <dynNotchProcess+0x6a8>)
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d03a      	beq.n	800a52c <dynNotchProcess+0x64c>
 800a4b6:	4a34      	ldr	r2, [pc, #208]	; (800a588 <dynNotchProcess+0x6a8>)
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	3304      	adds	r3, #4
 800a4c0:	ed93 7a00 	vldr	s14, [r3]
 800a4c4:	4b31      	ldr	r3, [pc, #196]	; (800a58c <dynNotchProcess+0x6ac>)
 800a4c6:	edd3 7a00 	vldr	s15, [r3]
 800a4ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d2:	dd2b      	ble.n	800a52c <dynNotchProcess+0x64c>
                    biquadFilterUpdate(&dynNotch.notch[state.axis][p], dynNotch.centerFreq[state.axis][p], dynNotch.looptimeUs, dynNotch.q, FILTER_NOTCH, 1.0f);
 800a4d4:	4b2a      	ldr	r3, [pc, #168]	; (800a580 <dynNotchProcess+0x6a0>)
 800a4d6:	6899      	ldr	r1, [r3, #8]
 800a4d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	22c8      	movs	r2, #200	; 0xc8
 800a4e4:	fb01 f202 	mul.w	r2, r1, r2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3350      	adds	r3, #80	; 0x50
 800a4ec:	4a23      	ldr	r2, [pc, #140]	; (800a57c <dynNotchProcess+0x69c>)
 800a4ee:	4413      	add	r3, r2
 800a4f0:	1d18      	adds	r0, r3, #4
 800a4f2:	4b23      	ldr	r3, [pc, #140]	; (800a580 <dynNotchProcess+0x6a0>)
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	4921      	ldr	r1, [pc, #132]	; (800a57c <dynNotchProcess+0x69c>)
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	4413      	add	r3, r2
 800a4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	3304      	adds	r3, #4
 800a50a:	edd3 7a00 	vldr	s15, [r3]
 800a50e:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <dynNotchProcess+0x69c>)
 800a510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a512:	4a1a      	ldr	r2, [pc, #104]	; (800a57c <dynNotchProcess+0x69c>)
 800a514:	ed92 7a00 	vldr	s14, [r2]
 800a518:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800a51c:	2201      	movs	r2, #1
 800a51e:	eef0 0a47 	vmov.f32	s1, s14
 800a522:	4619      	mov	r1, r3
 800a524:	eeb0 0a67 	vmov.f32	s0, s15
 800a528:	f000 fb12 	bl	800ab50 <biquadFilterUpdate>
            for (int p = 0; p < dynNotch.count; p++) {
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	3301      	adds	r3, #1
 800a530:	633b      	str	r3, [r7, #48]	; 0x30
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <dynNotchProcess+0x69c>)
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a538:	429a      	cmp	r2, r3
 800a53a:	dbb6      	blt.n	800a4aa <dynNotchProcess+0x5ca>
                }
            }

            //DEBUG_SET(DEBUG_FFT_TIME, 1, micros() - startTime);

            state.axis = (state.axis + 1) % XYZ_AXIS_COUNT;
 800a53c:	4b10      	ldr	r3, [pc, #64]	; (800a580 <dynNotchProcess+0x6a0>)
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	1c59      	adds	r1, r3, #1
 800a542:	4b13      	ldr	r3, [pc, #76]	; (800a590 <dynNotchProcess+0x6b0>)
 800a544:	fb83 3201 	smull	r3, r2, r3, r1
 800a548:	17cb      	asrs	r3, r1, #31
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	4613      	mov	r3, r2
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	4413      	add	r3, r2
 800a552:	1aca      	subs	r2, r1, r3
 800a554:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <dynNotchProcess+0x6a0>)
 800a556:	609a      	str	r2, [r3, #8]
 800a558:	e000      	b.n	800a55c <dynNotchProcess+0x67c>
            break;
 800a55a:	bf00      	nop
        }
    }

    state.step = (state.step + 1) % STEP_COUNT;
 800a55c:	4b08      	ldr	r3, [pc, #32]	; (800a580 <dynNotchProcess+0x6a0>)
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	3301      	adds	r3, #1
 800a562:	425a      	negs	r2, r3
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	f002 0203 	and.w	r2, r2, #3
 800a56c:	bf58      	it	pl
 800a56e:	4253      	negpl	r3, r2
 800a570:	4a03      	ldr	r2, [pc, #12]	; (800a580 <dynNotchProcess+0x6a0>)
 800a572:	6053      	str	r3, [r2, #4]
}
 800a574:	bf00      	nop
 800a576:	3768      	adds	r7, #104	; 0x68
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	10000008 	.word	0x10000008
 800a580:	100002d8 	.word	0x100002d8
 800a584:	10000ff4 	.word	0x10000ff4
 800a588:	100009e0 	.word	0x100009e0
 800a58c:	10000aa8 	.word	0x10000aa8
 800a590:	55555556 	.word	0x55555556

0800a594 <dynNotchFilter>:

float dynNotchFilter(const int axis, float value) 
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	ed87 0a00 	vstr	s0, [r7]
    for (int p = 0; p < dynNotch.count; p++) {
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	e017      	b.n	800a5d6 <dynNotchFilter+0x42>
        value = biquadFilterApplyDF1(&dynNotch.notch[axis][p], value);
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	21c8      	movs	r1, #200	; 0xc8
 800a5b4:	fb01 f202 	mul.w	r2, r1, r2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	3350      	adds	r3, #80	; 0x50
 800a5bc:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <dynNotchFilter+0x5c>)
 800a5be:	4413      	add	r3, r2
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	ed97 0a00 	vldr	s0, [r7]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 fbb2 	bl	800ad30 <biquadFilterApplyDF1>
 800a5cc:	ed87 0a00 	vstr	s0, [r7]
    for (int p = 0; p < dynNotch.count; p++) {
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <dynNotchFilter+0x5c>)
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	dbe2      	blt.n	800a5a6 <dynNotchFilter+0x12>
    }

    return value;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	ee07 3a90 	vmov	s15, r3
}
 800a5e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	10000008 	.word	0x10000008

0800a5f4 <isDynNotchActive>:

bool isDynNotchActive(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
    return dynNotch.count > 0;
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <isDynNotchActive+0x1c>)
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	bfcc      	ite	gt
 800a600:	2301      	movgt	r3, #1
 800a602:	2300      	movle	r3, #0
 800a604:	b2db      	uxtb	r3, r3
}
 800a606:	4618      	mov	r0, r3
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	10000008 	.word	0x10000008

0800a614 <exp_approx>:
float exp_cst2 = 0.f;

/* Relative error bounded by 1e-5 for normalized outputs
   Returns invalid outputs for nan inputs
   Continuous error */
float exp_approx(float val) {
 800a614:	b480      	push	{r7}
 800a616:	b08b      	sub	sp, #44	; 0x2c
 800a618:	af00      	add	r7, sp, #0
 800a61a:	ed87 0a01 	vstr	s0, [r7, #4]
  union { int32_t i; float f; } xu, xu2;
  float val2, val3, val4, b;
  int32_t val4i;
  val2 = 12102203.1615614f*val+1065353216.f;
 800a61e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a622:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a6f4 <exp_approx+0xe0>
 800a626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a62a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a6f8 <exp_approx+0xe4>
 800a62e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a632:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  val3 = val2 < exp_cst1 ? val2 : exp_cst1;
 800a636:	4b31      	ldr	r3, [pc, #196]	; (800a6fc <exp_approx+0xe8>)
 800a638:	edd3 7a00 	vldr	s15, [r3]
 800a63c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	d501      	bpl.n	800a64e <exp_approx+0x3a>
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	e001      	b.n	800a652 <exp_approx+0x3e>
 800a64e:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <exp_approx+0xe8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	623b      	str	r3, [r7, #32]
  val4 = val3 > exp_cst2 ? val3 : exp_cst2;
 800a654:	4b2a      	ldr	r3, [pc, #168]	; (800a700 <exp_approx+0xec>)
 800a656:	edd3 7a00 	vldr	s15, [r3]
 800a65a:	ed97 7a08 	vldr	s14, [r7, #32]
 800a65e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a666:	dd01      	ble.n	800a66c <exp_approx+0x58>
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	e001      	b.n	800a670 <exp_approx+0x5c>
 800a66c:	4b24      	ldr	r3, [pc, #144]	; (800a700 <exp_approx+0xec>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	61fb      	str	r3, [r7, #28]
  val4i = (int32_t) val4;
 800a672:	edd7 7a07 	vldr	s15, [r7, #28]
 800a676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a67a:	ee17 3a90 	vmov	r3, s15
 800a67e:	61bb      	str	r3, [r7, #24]
  xu.i = val4i & 0x7F800000;                   // mask exponent  / round down to neareset 2^n (implicit mantisa bit)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800a686:	613b      	str	r3, [r7, #16]
  xu2.i = (val4i & 0x7FFFFF) | 0x3F800000;     // force exponent to 0
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a68e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a692:	60fb      	str	r3, [r7, #12]
  b = xu2.f;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	617b      	str	r3, [r7, #20]
               [1.000001,1.999999], exp(-(x-1)*log(2)));
     > plot(exp((x-1)*log(2))/(f+x)-1, [1,2]);
     > f+x;
  */
  return
    xu.f * (0.509871020343597804469416f + b *
 800a698:	ed97 7a04 	vldr	s14, [r7, #16]
            (0.312146713032169896138863f + b *
             (0.166617139319965966118107f + b *
              (-2.19061993049215080032874e-3f + b *
 800a69c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6a0:	eddf 6a18 	vldr	s13, [pc, #96]	; 800a704 <exp_approx+0xf0>
 800a6a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a6a8:	eddf 6a17 	vldr	s13, [pc, #92]	; 800a708 <exp_approx+0xf4>
 800a6ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
             (0.166617139319965966118107f + b *
 800a6b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6b8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800a70c <exp_approx+0xf8>
 800a6bc:	ee77 6aa6 	vadd.f32	s13, s15, s13
            (0.312146713032169896138863f + b *
 800a6c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c8:	eddf 6a11 	vldr	s13, [pc, #68]	; 800a710 <exp_approx+0xfc>
 800a6cc:	ee77 6aa6 	vadd.f32	s13, s15, s13
    xu.f * (0.509871020343597804469416f + b *
 800a6d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a6d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6d8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800a714 <exp_approx+0x100>
 800a6dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
               1.3555747234758484073940937e-2f))));
}
 800a6e4:	eeb0 0a67 	vmov.f32	s0, s15
 800a6e8:	372c      	adds	r7, #44	; 0x2c
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	4b38aa3b 	.word	0x4b38aa3b
 800a6f8:	4e7e0000 	.word	0x4e7e0000
 800a6fc:	2000018c 	.word	0x2000018c
 800a700:	200006d0 	.word	0x200006d0
 800a704:	3c5e18ed 	.word	0x3c5e18ed
 800a708:	3b0f9081 	.word	0x3b0f9081
 800a70c:	3e2a9daf 	.word	0x3e2a9daf
 800a710:	3e9fd1b2 	.word	0x3e9fd1b2
 800a714:	3f0286e8 	.word	0x3f0286e8

0800a718 <log_approx>:

/* Absolute error bounded by 1e-6 for normalized inputs
   Returns a finite number for +inf input
   Returns -inf for nan and <= 0 inputs.
   Continuous error. */
float log_approx(float val) {
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	ed87 0a01 	vstr	s0, [r7, #4]
  union { float f; int32_t i; } valu;
  float exp, addcst, x;
  valu.f = val;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60bb      	str	r3, [r7, #8]
  exp = valu.i >> 23;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	15db      	asrs	r3, r3, #23
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a732:	edc7 7a05 	vstr	s15, [r7, #20]
  /* 89.970756366f = 127 * log(2) - constant term of polynomial */
  addcst = val > 0 ? -89.970756366f : -(float)INFINITY;
 800a736:	edd7 7a01 	vldr	s15, [r7, #4]
 800a73a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a742:	dd01      	ble.n	800a748 <log_approx+0x30>
 800a744:	4b22      	ldr	r3, [pc, #136]	; (800a7d0 <log_approx+0xb8>)
 800a746:	e000      	b.n	800a74a <log_approx+0x32>
 800a748:	4b22      	ldr	r3, [pc, #136]	; (800a7d4 <log_approx+0xbc>)
 800a74a:	613b      	str	r3, [r7, #16]
  valu.i = (valu.i & 0x7FFFFF) | 0x3F800000;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a752:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a756:	60bb      	str	r3, [r7, #8]
  x = valu.f;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	60fb      	str	r3, [r7, #12]
    > f+(x-1)*log(2)
 */
  return
    x * (3.529304993f + x * (-2.461222105f +
      x * (1.130626167f + x * (-0.288739945f +
        x * 3.110401639e-2f))))
 800a75c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a760:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a7d8 <log_approx+0xc0>
 800a764:	ee67 7a87 	vmul.f32	s15, s15, s14
      x * (1.130626167f + x * (-0.288739945f +
 800a768:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a7dc <log_approx+0xc4>
 800a76c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a770:	edd7 7a03 	vldr	s15, [r7, #12]
 800a774:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a778:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a7e0 <log_approx+0xc8>
 800a77c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a780:	edd7 7a03 	vldr	s15, [r7, #12]
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
    x * (3.529304993f + x * (-2.461222105f +
 800a788:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800a7e4 <log_approx+0xcc>
 800a78c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a790:	edd7 7a03 	vldr	s15, [r7, #12]
 800a794:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a798:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800a7e8 <log_approx+0xd0>
 800a79c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a7a4:	ee27 7a27 	vmul.f32	s14, s14, s15
    + (addcst + 0.69314718055995f*exp);
 800a7a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7ac:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800a7ec <log_approx+0xd4>
 800a7b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a7b4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7bc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800a7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	c2b3f107 	.word	0xc2b3f107
 800a7d4:	ff800000 	.word	0xff800000
 800a7d8:	3cfecdda 	.word	0x3cfecdda
 800a7dc:	3e93d5b9 	.word	0x3e93d5b9
 800a7e0:	3f90b85c 	.word	0x3f90b85c
 800a7e4:	401d84aa 	.word	0x401d84aa
 800a7e8:	4061e022 	.word	0x4061e022
 800a7ec:	3f317218 	.word	0x3f317218

0800a7f0 <pow_approx>:

float pow_approx(float a, float b)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a7fa:	edc7 0a00 	vstr	s1, [r7]
    return exp_approx(b * log_approx(a));
 800a7fe:	ed97 0a01 	vldr	s0, [r7, #4]
 800a802:	f7ff ff89 	bl	800a718 <log_approx>
 800a806:	eeb0 7a40 	vmov.f32	s14, s0
 800a80a:	edd7 7a00 	vldr	s15, [r7]
 800a80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a812:	eeb0 0a67 	vmov.f32	s0, s15
 800a816:	f7ff fefd 	bl	800a614 <exp_approx>
 800a81a:	eef0 7a40 	vmov.f32	s15, s0
}
 800a81e:	eeb0 0a67 	vmov.f32	s0, s15
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <nullFilterApply>:
#define BIQUAD_Q 1.0f / sqrtf(2.0f)     /* quality factor - 2nd order butterworth*/

// NULL filter

float nullFilterApply(filter_t *filter, float input)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	ed87 0a00 	vstr	s0, [r7]
    UNUSED(filter);
    return input;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	ee07 3a90 	vmov	s15, r3
}
 800a83a:	eeb0 0a67 	vmov.f32	s0, s15
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <pt1FilterGain>:


// PT1 Low Pass filter

float pt1FilterGain(float f_cut, float dT)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a852:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 800a856:	edd7 7a01 	vldr	s15, [r7, #4]
 800a85a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a894 <pt1FilterGain+0x4c>
 800a85e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a86a:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 800a86e:	ed97 7a03 	vldr	s14, [r7, #12]
 800a872:	edd7 7a00 	vldr	s15, [r7]
 800a876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a87a:	ed97 7a00 	vldr	s14, [r7]
 800a87e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a882:	eef0 7a66 	vmov.f32	s15, s13
}
 800a886:	eeb0 0a67 	vmov.f32	s0, s15
 800a88a:	3714      	adds	r7, #20
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	40c90fdb 	.word	0x40c90fdb

0800a898 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f04f 0200 	mov.w	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]
    filter->k = k;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	605a      	str	r2, [r3, #4]
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <pt1FilterApply>:
{
    filter->k = k;
}

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	ed93 7a00 	vldr	s14, [r3]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	edd3 6a01 	vldr	s13, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	edd3 7a00 	vldr	s15, [r3]
 800a8dc:	ed97 6a00 	vldr	s12, [r7]
 800a8e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	ee07 3a90 	vmov	s15, r3
}
 800a8fa:	eeb0 0a67 	vmov.f32	s0, s15
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <pt2FilterInit>:
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
}

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	605a      	str	r2, [r3, #4]
    filter->k = k;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	609a      	str	r2, [r3, #8]
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <pt2FilterApply>:
{
    filter->k = k;
}

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	ed93 7a01 	vldr	s14, [r3, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	edd3 6a02 	vldr	s13, [r3, #8]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	edd3 7a01 	vldr	s15, [r3, #4]
 800a954:	ed97 6a00 	vldr	s12, [r7]
 800a958:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a95c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a960:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	ed93 7a00 	vldr	s14, [r3]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	edd3 6a02 	vldr	s13, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	ed93 6a01 	vldr	s12, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	edd3 7a00 	vldr	s15, [r3]
 800a982:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	ee07 3a90 	vmov	s15, r3
}
 800a99c:	eeb0 0a67 	vmov.f32	s0, s15
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <pt3FilterInit>:
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
}

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f04f 0200 	mov.w	r2, #0
 800a9c4:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f04f 0200 	mov.w	r2, #0
 800a9cc:	609a      	str	r2, [r3, #8]
    filter->k = k;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	60da      	str	r2, [r3, #12]
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <pt3FilterApply>:
{
    filter->k = k;
}

float pt3FilterApply(pt3Filter_t *filter, float input)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	ed93 7a01 	vldr	s14, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	edd3 6a03 	vldr	s13, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	edd3 7a01 	vldr	s15, [r3, #4]
 800a9fe:	ed97 6a00 	vldr	s12, [r7]
 800aa02:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	ed93 7a02 	vldr	s14, [r3, #8]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	edd3 6a03 	vldr	s13, [r3, #12]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	ed93 6a01 	vldr	s12, [r3, #4]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	edd3 7a02 	vldr	s15, [r3, #8]
 800aa2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	ed93 7a00 	vldr	s14, [r3]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	edd3 6a03 	vldr	s13, [r3, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	ed93 6a02 	vldr	s12, [r3, #8]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	edd3 7a00 	vldr	s15, [r3]
 800aa56:	ee76 7a67 	vsub.f32	s15, s12, s15
 800aa5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	ee07 3a90 	vmov	s15, r3
}
 800aa70:	eeb0 0a67 	vmov.f32	s0, s15
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <filterGetNotchQ>:
}

// get notch filter Q given center frequency (f0) and lower cutoff frequency (f1)
// Q = f0 / (f2 - f1) ; f2 = f0^2 / f1
float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	ed87 0a01 	vstr	s0, [r7, #4]
 800aa88:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 800aa8c:	ed97 7a01 	vldr	s14, [r7, #4]
 800aa90:	edd7 7a00 	vldr	s15, [r7]
 800aa94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa98:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa9c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800aaa0:	edd7 7a00 	vldr	s15, [r7]
 800aaa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aaa8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aaac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800aab0:	eef0 7a66 	vmov.f32	s15, s13
}
 800aab4:	eeb0 0a67 	vmov.f32	s0, s15
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
	...

0800aac4 <biquadFilterInitLPF>:

/* sets up a biquad filter as a 2nd order butterworth LPF */
void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	ed87 0a02 	vstr	s0, [r7, #8]
 800aad0:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 800aad2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800aad6:	2200      	movs	r2, #0
 800aad8:	eddf 0a05 	vldr	s1, [pc, #20]	; 800aaf0 <biquadFilterInitLPF+0x2c>
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	ed97 0a02 	vldr	s0, [r7, #8]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 f806 	bl	800aaf4 <biquadFilterInit>
}
 800aae8:	bf00      	nop
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	3f3504f3 	.word	0x3f3504f3

0800aaf4 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6178      	str	r0, [r7, #20]
 800aafc:	ed87 0a04 	vstr	s0, [r7, #16]
 800ab00:	60f9      	str	r1, [r7, #12]
 800ab02:	edc7 0a02 	vstr	s1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	ed87 1a00 	vstr	s2, [r7]
 800ab0c:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	ed97 1a00 	vldr	s2, [r7]
 800ab14:	461a      	mov	r2, r3
 800ab16:	edd7 0a02 	vldr	s1, [r7, #8]
 800ab1a:	68f9      	ldr	r1, [r7, #12]
 800ab1c:	ed97 0a04 	vldr	s0, [r7, #16]
 800ab20:	6978      	ldr	r0, [r7, #20]
 800ab22:	f000 f815 	bl	800ab50 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	619a      	str	r2, [r3, #24]
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f04f 0200 	mov.w	r2, #0
 800ab3c:	621a      	str	r2, [r3, #32]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	6a1a      	ldr	r2, [r3, #32]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	61da      	str	r2, [r3, #28]
}
 800ab46:	bf00      	nop
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6178      	str	r0, [r7, #20]
 800ab58:	ed87 0a04 	vstr	s0, [r7, #16]
 800ab5c:	60f9      	str	r1, [r7, #12]
 800ab5e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ab62:	4613      	mov	r3, r2
 800ab64:	ed87 1a00 	vstr	s2, [r7]
 800ab68:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 800ab6a:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab6e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800ad28 <biquadFilterUpdate+0x1d8>
 800ab72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	ee07 3a90 	vmov	s15, r3
 800ab7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab84:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ad2c <biquadFilterUpdate+0x1dc>
 800ab88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab8c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 800ab90:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800ab94:	f000 f964 	bl	800ae60 <sin_approx>
 800ab98:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 800ab9c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800aba0:	f000 fa08 	bl	800afb4 <cos_approx>
 800aba4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 800aba8:	edd7 7a02 	vldr	s15, [r7, #8]
 800abac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800abb0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800abb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb8:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d04f      	beq.n	800ac62 <biquadFilterUpdate+0x112>
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	dc6e      	bgt.n	800aca4 <biquadFilterUpdate+0x154>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <biquadFilterUpdate+0x80>
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d02a      	beq.n	800ac24 <biquadFilterUpdate+0xd4>
 800abce:	e069      	b.n	800aca4 <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 800abd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800abd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	edd3 7a01 	vldr	s15, [r3, #4]
 800abe8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800abec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 800abfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac02:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800ac06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 800ac10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac14:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800ac22:	e03f      	b.n	800aca4 <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac2a:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 800ac2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac30:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800ac34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac44:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 800ac4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac52:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800ac60:	e020      	b.n	800aca4 <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	6a3a      	ldr	r2, [r7, #32]
 800ac66:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f04f 0200 	mov.w	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 800ac70:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac74:	eef1 7a67 	vneg.f32	s15, s15
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 800ac7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac82:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800ac86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 800ac90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac94:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800aca2:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 800aca4:	edd7 7a08 	vldr	s15, [r7, #32]
 800aca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acb0:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	edd3 6a00 	vldr	s13, [r3]
 800acba:	ed97 7a07 	vldr	s14, [r7, #28]
 800acbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	edd3 6a01 	vldr	s13, [r3, #4]
 800acce:	ed97 7a07 	vldr	s14, [r7, #28]
 800acd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	edd3 6a02 	vldr	s13, [r3, #8]
 800ace2:	ed97 7a07 	vldr	s14, [r7, #28]
 800ace6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	edd3 6a03 	vldr	s13, [r3, #12]
 800acf6:	ed97 7a07 	vldr	s14, [r7, #28]
 800acfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	edd3 6a04 	vldr	s13, [r3, #16]
 800ad0a:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ad1e:	bf00      	nop
 800ad20:	3730      	adds	r7, #48	; 0x30
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	40c90fdb 	.word	0x40c90fdb
 800ad2c:	358637bd 	.word	0x358637bd

0800ad30 <biquadFilterApplyDF1>:
    biquadFilterUpdate(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
}

/* Computes a biquadFilter_t filter on a sample (slightly less precise than df2 but works in dynamic mode) */
float biquadFilterApplyDF1(biquadFilter_t *filter, float input)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	ed87 0a00 	vstr	s0, [r7]
    /* compute result */
    const float result = filter->b0 * input + filter->b1 * filter->x1 + filter->b2 * filter->x2 - filter->a1 * filter->y1 - filter->a2 * filter->y2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	ed93 7a00 	vldr	s14, [r3]
 800ad42:	edd7 7a00 	vldr	s15, [r7]
 800ad46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	edd3 6a01 	vldr	s13, [r3, #4]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	edd3 7a05 	vldr	s15, [r3, #20]
 800ad56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	edd3 6a02 	vldr	s13, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	edd3 6a03 	vldr	s13, [r3, #12]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	edd3 7a07 	vldr	s15, [r3, #28]
 800ad7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	edd3 6a04 	vldr	s13, [r3, #16]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	edd3 7a08 	vldr	s15, [r3, #32]
 800ad92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad9a:	edc7 7a03 	vstr	s15, [r7, #12]

    /* shift x1 to x2, input to x1 */
    filter->x2 = filter->x1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695a      	ldr	r2, [r3, #20]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	619a      	str	r2, [r3, #24]
    filter->x1 = input;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	615a      	str	r2, [r3, #20]

    /* shift y1 to y2, result to y1 */
    filter->y2 = filter->y1;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	69da      	ldr	r2, [r3, #28]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	621a      	str	r2, [r3, #32]
    filter->y1 = result;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	61da      	str	r2, [r3, #28]

    return result;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	ee07 3a90 	vmov	s15, r3
}
 800adc0:	eeb0 0a67 	vmov.f32	s0, s15
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <biquadFilterApply>:
    return filter->weight * result + (1 - filter->weight) * input;
}

/* Computes a biquadFilter_t filter in direct form 2 on a sample (higher precision but can't handle changes in coefficients */
float biquadFilterApply(biquadFilter_t *filter, float input)
{
 800adce:	b480      	push	{r7}
 800add0:	b085      	sub	sp, #20
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	ed93 7a00 	vldr	s14, [r3]
 800ade0:	edd7 7a00 	vldr	s15, [r7]
 800ade4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	edd3 7a05 	vldr	s15, [r3, #20]
 800adee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adf2:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	ed93 7a01 	vldr	s14, [r3, #4]
 800adfc:	edd7 7a00 	vldr	s15, [r7]
 800ae00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	edd3 6a03 	vldr	s13, [r3, #12]
 800ae0a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	ed93 7a02 	vldr	s14, [r3, #8]
 800ae2c:	edd7 7a00 	vldr	s15, [r7]
 800ae30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	edd3 6a04 	vldr	s13, [r3, #16]
 800ae3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	ee07 3a90 	vmov	s15, r3
}
 800ae52:	eeb0 0a67 	vmov.f32	s0, s15
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 800ae6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae72:	ee17 3a90 	vmov	r3, s15
 800ae76:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f113 0f20 	cmn.w	r3, #32
 800ae7e:	db02      	blt.n	800ae86 <sin_approx+0x26>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	dd0a      	ble.n	800ae9c <sin_approx+0x3c>
 800ae86:	eddf 7a42 	vldr	s15, [pc, #264]	; 800af90 <sin_approx+0x130>
 800ae8a:	e079      	b.n	800af80 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800ae8c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae90:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800af94 <sin_approx+0x134>
 800ae94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae98:	edc7 7a01 	vstr	s15, [r7, #4]
 800ae9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800aea0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800af98 <sin_approx+0x138>
 800aea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeac:	dcee      	bgt.n	800ae8c <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 800aeae:	e007      	b.n	800aec0 <sin_approx+0x60>
 800aeb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aeb4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800af94 <sin_approx+0x134>
 800aeb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aebc:	edc7 7a01 	vstr	s15, [r7, #4]
 800aec0:	edd7 7a01 	vldr	s15, [r7, #4]
 800aec4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800af9c <sin_approx+0x13c>
 800aec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	d4ee      	bmi.n	800aeb0 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800aed2:	edd7 7a01 	vldr	s15, [r7, #4]
 800aed6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800afa0 <sin_approx+0x140>
 800aeda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee2:	dd0c      	ble.n	800aefe <sin_approx+0x9e>
 800aee4:	edd7 7a01 	vldr	s15, [r7, #4]
 800aee8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800afa0 <sin_approx+0x140>
 800aeec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aef0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800afa0 <sin_approx+0x140>
 800aef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef8:	edc7 7a01 	vstr	s15, [r7, #4]
 800aefc:	e014      	b.n	800af28 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800aefe:	edd7 7a01 	vldr	s15, [r7, #4]
 800af02:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800afa4 <sin_approx+0x144>
 800af06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0e:	d50b      	bpl.n	800af28 <sin_approx+0xc8>
 800af10:	edd7 7a01 	vldr	s15, [r7, #4]
 800af14:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800afa0 <sin_approx+0x140>
 800af18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af1c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800afa4 <sin_approx+0x144>
 800af20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af24:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 800af28:	edd7 7a01 	vldr	s15, [r7, #4]
 800af2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800af30:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 800af34:	ed97 7a01 	vldr	s14, [r7, #4]
 800af38:	edd7 7a02 	vldr	s15, [r7, #8]
 800af3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af40:	edd7 7a02 	vldr	s15, [r7, #8]
 800af44:	eddf 6a12 	vldr	s13, [pc, #72]	; 800af90 <sin_approx+0x130>
 800af48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800af4c:	eddf 6a16 	vldr	s13, [pc, #88]	; 800afa8 <sin_approx+0x148>
 800af50:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800af54:	edd7 7a02 	vldr	s15, [r7, #8]
 800af58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af5c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800afac <sin_approx+0x14c>
 800af60:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800af64:	edd7 7a02 	vldr	s15, [r7, #8]
 800af68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af6c:	eddf 6a10 	vldr	s13, [pc, #64]	; 800afb0 <sin_approx+0x150>
 800af70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800af74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af78:	edd7 7a01 	vldr	s15, [r7, #4]
 800af7c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800af80:	eeb0 0a67 	vmov.f32	s0, s15
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	00000000 	.word	0x00000000
 800af94:	40c90fdb 	.word	0x40c90fdb
 800af98:	40490fdb 	.word	0x40490fdb
 800af9c:	c0490fdb 	.word	0xc0490fdb
 800afa0:	3fc90fdb 	.word	0x3fc90fdb
 800afa4:	bfc90fdb 	.word	0xbfc90fdb
 800afa8:	3941e792 	.word	0x3941e792
 800afac:	3c083097 	.word	0x3c083097
 800afb0:	3e2aa815 	.word	0x3e2aa815

0800afb4 <cos_approx>:

float cos_approx(float x)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 800afbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800afc2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800afe0 <cos_approx+0x2c>
 800afc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afca:	eeb0 0a67 	vmov.f32	s0, s15
 800afce:	f7ff ff47 	bl	800ae60 <sin_approx>
 800afd2:	eef0 7a40 	vmov.f32	s15, s0
}
 800afd6:	eeb0 0a67 	vmov.f32	s0, s15
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	3fc90fdb 	.word	0x3fc90fdb

0800afe4 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b08b      	sub	sp, #44	; 0x2c
 800afe8:	af00      	add	r7, sp, #0
 800afea:	ed87 0a01 	vstr	s0, [r7, #4]
 800afee:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800aff2:	edd7 7a00 	vldr	s15, [r7]
 800aff6:	eef0 7ae7 	vabs.f32	s15, s15
 800affa:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800affe:	edd7 7a01 	vldr	s15, [r7, #4]
 800b002:	eef0 7ae7 	vabs.f32	s15, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	61bb      	str	r3, [r7, #24]
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	617b      	str	r3, [r7, #20]
 800b012:	ed97 7a06 	vldr	s14, [r7, #24]
 800b016:	edd7 7a05 	vldr	s15, [r7, #20]
 800b01a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b022:	dd01      	ble.n	800b028 <atan2_approx+0x44>
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	e000      	b.n	800b02a <atan2_approx+0x46>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 800b02c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b030:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	d018      	beq.n	800b06c <atan2_approx+0x88>
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	613b      	str	r3, [r7, #16]
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	ed97 7a04 	vldr	s14, [r7, #16]
 800b046:	edd7 7a03 	vldr	s15, [r7, #12]
 800b04a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b052:	d502      	bpl.n	800b05a <atan2_approx+0x76>
 800b054:	edd7 7a04 	vldr	s15, [r7, #16]
 800b058:	e001      	b.n	800b05e <atan2_approx+0x7a>
 800b05a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b05e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b062:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b066:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800b06a:	e002      	b.n	800b072 <atan2_approx+0x8e>
    else res = 0.0f;
 800b06c:	f04f 0300 	mov.w	r3, #0
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 800b072:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b076:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b154 <atan2_approx+0x170>
 800b07a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b07e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b158 <atan2_approx+0x174>
 800b082:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b086:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b15c <atan2_approx+0x178>
 800b092:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b160 <atan2_approx+0x17c>
 800b0a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b0a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ae:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b164 <atan2_approx+0x180>
 800b0b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0b6:	eef1 6a67 	vneg.f32	s13, s15
 800b0ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b168 <atan2_approx+0x184>
 800b0c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0c6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b16c <atan2_approx+0x188>
 800b0ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 800b0e6:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0ea:	edd7 7a08 	vldr	s15, [r7, #32]
 800b0ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f6:	dd07      	ble.n	800b108 <atan2_approx+0x124>
 800b0f8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b170 <atan2_approx+0x18c>
 800b0fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b100:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b104:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 800b108:	edd7 7a00 	vldr	s15, [r7]
 800b10c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	d507      	bpl.n	800b126 <atan2_approx+0x142>
 800b116:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b174 <atan2_approx+0x190>
 800b11a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b122:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 800b126:	edd7 7a01 	vldr	s15, [r7, #4]
 800b12a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b132:	d505      	bpl.n	800b140 <atan2_approx+0x15c>
 800b134:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b138:	eef1 7a67 	vneg.f32	s15, s15
 800b13c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	ee07 3a90 	vmov	s15, r3
}
 800b146:	eeb0 0a67 	vmov.f32	s0, s15
 800b14a:	372c      	adds	r7, #44	; 0x2c
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	3d4e0939 	.word	0x3d4e0939
 800b158:	3e9eb5e3 	.word	0x3e9eb5e3
 800b15c:	3e16fa88 	.word	0x3e16fa88
 800b160:	3f7ffe45 	.word	0x3f7ffe45
 800b164:	34a8dfa7 	.word	0x34a8dfa7
 800b168:	3f24fb99 	.word	0x3f24fb99
 800b16c:	3e16a269 	.word	0x3e16a269
 800b170:	3fc90fdb 	.word	0x3fc90fdb
 800b174:	40490fdb 	.word	0x40490fdb

0800b178 <acos_approx>:
// http://http.developer.nvidia.com/Cg/acos.html
// Handbook of Mathematical Functions
// M. Abramowitz and I.A. Stegun, Ed.
// acos_approx maximum absolute error = 6.760856e-05 rads (3.873685e-03 degree)
float acos_approx(float x)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 800b182:	edd7 7a01 	vldr	s15, [r7, #4]
 800b186:	eef0 7ae7 	vabs.f32	s15, s15
 800b18a:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 800b18e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b192:	edd7 7a03 	vldr	s15, [r7, #12]
 800b196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b19a:	eeb0 0a67 	vmov.f32	s0, s15
 800b19e:	f020 f991 	bl	802b4c4 <sqrtf>
 800b1a2:	eef0 6a40 	vmov.f32	s13, s0
 800b1a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1aa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b20c <acos_approx+0x94>
 800b1ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b210 <acos_approx+0x98>
 800b1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b214 <acos_approx+0x9c>
 800b1c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b1ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b218 <acos_approx+0xa0>
 800b1d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1de:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 800b1e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ee:	d506      	bpl.n	800b1fe <acos_approx+0x86>
        return M_PIf - result;
 800b1f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800b21c <acos_approx+0xa4>
 800b1f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1fc:	e001      	b.n	800b202 <acos_approx+0x8a>
    else
        return result;
 800b1fe:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800b202:	eeb0 0a67 	vmov.f32	s0, s15
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	bc996e30 	.word	0xbc996e30
 800b210:	3d981627 	.word	0x3d981627
 800b214:	3e593484 	.word	0x3e593484
 800b218:	3fc90da4 	.word	0x3fc90da4
 800b21c:	40490fdb 	.word	0x40490fdb

0800b220 <devClear>:

    return value >= 0 ? value - deadband : value + deadband;
}

void devClear(stdev_t *dev)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	611a      	str	r2, [r3, #16]
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <devPush>:

void devPush(stdev_t *dev, float x)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d10b      	bne.n	800b270 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	605a      	str	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800b26e:	e036      	b.n	800b2de <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	ed93 7a00 	vldr	s14, [r3]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	edd3 7a00 	vldr	s15, [r3]
 800b27c:	edd7 6a00 	vldr	s13, [r7]
 800b280:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	ee07 3a90 	vmov	s15, r3
 800b28c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b290:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	ed93 7a02 	vldr	s14, [r3, #8]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	edd3 7a00 	vldr	s15, [r3]
 800b2aa:	edd7 6a00 	vldr	s13, [r7]
 800b2ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	edd3 7a01 	vldr	s15, [r3, #4]
 800b2b8:	ed97 6a00 	vldr	s12, [r7]
 800b2bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b2c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	609a      	str	r2, [r3, #8]
}
 800b2de:	bf00      	nop
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
	...

0800b2ec <devVariance>:

float devVariance(stdev_t *dev)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	dd0c      	ble.n	800b316 <devVariance+0x2a>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	ed93 7a03 	vldr	s14, [r3, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	3b01      	subs	r3, #1
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b310:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b314:	e001      	b.n	800b31a <devVariance+0x2e>
 800b316:	eddf 6a05 	vldr	s13, [pc, #20]	; 800b32c <devVariance+0x40>
 800b31a:	eef0 7a66 	vmov.f32	s15, s13
}
 800b31e:	eeb0 0a67 	vmov.f32	s0, s15
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	00000000 	.word	0x00000000

0800b330 <devStandardDeviation>:

float devStandardDeviation(stdev_t *dev)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ffd7 	bl	800b2ec <devVariance>
 800b33e:	eef0 7a40 	vmov.f32	s15, s0
 800b342:	eeb0 0a67 	vmov.f32	s0, s15
 800b346:	f020 f8bd 	bl	802b4c4 <sqrtf>
 800b34a:	eef0 7a40 	vmov.f32	s15, s0
}
 800b34e:	eeb0 0a67 	vmov.f32	s0, s15
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <scaleRange>:
float degreesToRadians(int16_t degrees)
{
    return degrees * RAD;
}

int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo) {
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	603b      	str	r3, [r7, #0]
    long int a = ((long int) destTo - (long int) destFrom) * ((long int) x - (long int) srcFrom);
 800b366:	6a3a      	ldr	r2, [r7, #32]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	68f9      	ldr	r1, [r7, #12]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	1a8a      	subs	r2, r1, r2
 800b372:	fb02 f303 	mul.w	r3, r2, r3
 800b376:	617b      	str	r3, [r7, #20]
    long int b = (long int) srcTo - (long int) srcFrom;
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	613b      	str	r3, [r7, #16]
    return (a / b) + destFrom;
 800b380:	697a      	ldr	r2, [r7, #20]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	fb92 f2f3 	sdiv	r2, r2, r3
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	4413      	add	r3, r2
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <scaleRangef>:

float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo) {
 800b398:	b480      	push	{r7}
 800b39a:	b089      	sub	sp, #36	; 0x24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	ed87 0a05 	vstr	s0, [r7, #20]
 800b3a2:	edc7 0a04 	vstr	s1, [r7, #16]
 800b3a6:	ed87 1a03 	vstr	s2, [r7, #12]
 800b3aa:	edc7 1a02 	vstr	s3, [r7, #8]
 800b3ae:	ed87 2a01 	vstr	s4, [r7, #4]
    float a = (destTo - destFrom) * (x - srcFrom);
 800b3b2:	ed97 7a01 	vldr	s14, [r7, #4]
 800b3b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3be:	edd7 6a05 	vldr	s13, [r7, #20]
 800b3c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ce:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = srcTo - srcFrom;
 800b3d2:	ed97 7a03 	vldr	s14, [r7, #12]
 800b3d6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3de:	edc7 7a06 	vstr	s15, [r7, #24]
    return (a / b) + destFrom;
 800b3e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3f2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b3f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b3fa:	3724      	adds	r7, #36	; 0x24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <quickMedianFilter3>:
#define QMF_COPY(p,v,n) { int32_t i; for (i=0; i<n; i++) p[i]=v[i]; }
#define QMF_SORTF(a,b) { if ((a)>(b)) QMF_SWAPF((a),(b)); }
#define QMF_SWAPF(a,b) { float temp=(a);(a)=(b);(b)=temp; }

int32_t quickMedianFilter3(int32_t * v)
{
 800b404:	b480      	push	{r7}
 800b406:	b08b      	sub	sp, #44	; 0x2c
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
    int32_t p[3];
    QMF_COPY(p, v, 3);
 800b40c:	2300      	movs	r3, #0
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24
 800b410:	e00d      	b.n	800b42e <quickMedianFilter3+0x2a>
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	4413      	add	r3, r2
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	3328      	adds	r3, #40	; 0x28
 800b422:	443b      	add	r3, r7
 800b424:	f843 2c1c 	str.w	r2, [r3, #-28]
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	3301      	adds	r3, #1
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	2b02      	cmp	r3, #2
 800b432:	ddee      	ble.n	800b412 <quickMedianFilter3+0xe>

    QMF_SORT(p[0], p[1]); QMF_SORT(p[1], p[2]); QMF_SORT(p[0], p[1]) ;
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	429a      	cmp	r2, r3
 800b43a:	dd05      	ble.n	800b448 <quickMedianFilter3+0x44>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	623b      	str	r3, [r7, #32]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	613b      	str	r3, [r7, #16]
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	dd05      	ble.n	800b45c <quickMedianFilter3+0x58>
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	61fb      	str	r3, [r7, #28]
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	613b      	str	r3, [r7, #16]
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	429a      	cmp	r2, r3
 800b462:	dd05      	ble.n	800b470 <quickMedianFilter3+0x6c>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	613b      	str	r3, [r7, #16]
    return p[1];
 800b470:	693b      	ldr	r3, [r7, #16]
}
 800b472:	4618      	mov	r0, r3
 800b474:	372c      	adds	r7, #44	; 0x2c
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <pidSetTargetLooptime>:

#define ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF 15  // The anti gravity throttle highpass filter cutoff
#define ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF 3  // The anti gravity P smoothing filter cutoff

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 800b488:	4a0f      	ldr	r2, [pc, #60]	; (800b4c8 <pidSetTargetLooptime+0x48>)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 800b48e:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <pidSetTargetLooptime+0x48>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b4cc <pidSetTargetLooptime+0x4c>
 800b49e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4a2:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <pidSetTargetLooptime+0x50>)
 800b4a4:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <pidSetTargetLooptime+0x50>)
 800b4aa:	ed93 7a00 	vldr	s14, [r3]
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b6:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <pidSetTargetLooptime+0x50>)
 800b4b8:	edc3 7a01 	vstr	s15, [r3, #4]
#ifdef USE_DSHOT
    dshotSetPidLoopTime(targetPidLooptime);
#endif
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	10000ab0 	.word	0x10000ab0
 800b4cc:	358637bd 	.word	0x358637bd
 800b4d0:	10000af0 	.word	0x10000af0

0800b4d4 <pidInit>:
//     pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
//     pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
// }

void pidInit(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
    pidSetTargetLooptime(gyro.targetLooptime); // Initialize pid looptime
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <pidInit+0x14>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff ffcf 	bl	800b480 <pidSetTargetLooptime>
    //pidInitFilters(pidProfile);
    //pidInitConfig(pidProfile);
#ifdef USE_RPM_FILTER
    rpmFilterInit(rpmFilterConfig());
#endif
}
 800b4e2:	bf00      	nop
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	10000ff4 	.word	0x10000ff4

0800b4ec <QueueCreate>:
{

}

bool QueueCreate(Queue_t *Q, uint8_t *Q_buf, uint32_t length)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
	bool ret = true;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	75fb      	strb	r3, [r7, #23]

	Q->buffer = Q_buf;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	601a      	str	r2, [r3, #0]
	Q->head = 0;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	711a      	strb	r2, [r3, #4]
	Q->tail = 0;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	715a      	strb	r2, [r3, #5]
	Q->size = MAX_SIZE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	22ff      	movs	r2, #255	; 0xff
 800b512:	719a      	strb	r2, [r3, #6]
	Q->temp = 0;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	71da      	strb	r2, [r3, #7]
	Q->cnt = 0;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	609a      	str	r2, [r3, #8]

	return ret;
 800b520:	7dfb      	ldrb	r3, [r7, #23]
}
 800b522:	4618      	mov	r0, r3
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <Q_empty>:
{
	if((Q->head+1)%MAX_SIZE == Q->tail){
	   return true;
	} return false;
}
uint8_t Q_empty(Queue_t *Q){
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
	if(Q->head == Q->tail){
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	791b      	ldrb	r3, [r3, #4]
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	795b      	ldrb	r3, [r3, #5]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	429a      	cmp	r2, r3
 800b544:	d101      	bne.n	800b54a <Q_empty+0x1c>
		return true;
 800b546:	2301      	movs	r3, #1
 800b548:	e000      	b.n	800b54c <Q_empty+0x1e>
	} return false;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <Q_read>:
		Q->head = (Q->head+1) % MAX_SIZE;
	}
	return true;
}

bool Q_read(Queue_t *Q, uint8_t *p_data, uint32_t length){
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
	if(Q_empty(Q)){
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7ff ffe2 	bl	800b52e <Q_empty>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <Q_read+0x1c>
		return false;
 800b570:	2300      	movs	r3, #0
 800b572:	e028      	b.n	800b5c6 <Q_read+0x6e>
	}
	for (int i=0; i<length; i++)
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e020      	b.n	800b5bc <Q_read+0x64>
	{
		p_data[i] = Q->buffer[Q->tail];
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	7952      	ldrb	r2, [r2, #5]
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	441a      	add	r2, r3
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	440b      	add	r3, r1
 800b58c:	7812      	ldrb	r2, [r2, #0]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	701a      	strb	r2, [r3, #0]
		Q->tail = (Q->tail+1) % MAX_SIZE;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	795b      	ldrb	r3, [r3, #5]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <Q_read+0x78>)
 800b59c:	fb83 1302 	smull	r1, r3, r3, r2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	11d9      	asrs	r1, r3, #7
 800b5a4:	17d3      	asrs	r3, r2, #31
 800b5a6:	1ac9      	subs	r1, r1, r3
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	1a5b      	subs	r3, r3, r1
 800b5ae:	1ad1      	subs	r1, r2, r3
 800b5b0:	b2ca      	uxtb	r2, r1
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	715a      	strb	r2, [r3, #5]
	for (int i=0; i<length; i++)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d8da      	bhi.n	800b57a <Q_read+0x22>
	}

	return true;
 800b5c4:	2301      	movs	r3, #1
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	80808081 	.word	0x80808081

0800b5d4 <QueueAvailable>:

uint32_t QueueAvailable(Queue_t *Q)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (Q->head - Q->tail) % Q->size;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	791b      	ldrb	r3, [r3, #4]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	795b      	ldrb	r3, [r3, #5]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	7992      	ldrb	r2, [r2, #6]
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	fb93 f1f2 	sdiv	r1, r3, r2
 800b5f6:	fb01 f202 	mul.w	r2, r1, r2
 800b5fa:	1a9b      	subs	r3, r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]

  return length;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <getArmingDisableFlags>:
{
    return armingDisableFlags;
}

armingDisableFlags_e getArmingDisableFlags(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
    return armingDisableFlags;
 800b610:	4b03      	ldr	r3, [pc, #12]	; (800b620 <getArmingDisableFlags+0x14>)
 800b612:	681b      	ldr	r3, [r3, #0]
}
 800b614:	4618      	mov	r0, r3
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	200006d4 	.word	0x200006d4

0800b624 <constrain>:
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	429a      	cmp	r2, r3
 800b636:	da01      	bge.n	800b63c <constrain+0x18>
        return low;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	e006      	b.n	800b64a <constrain+0x26>
    else if (amt > high)
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	dd01      	ble.n	800b648 <constrain+0x24>
        return high;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	e000      	b.n	800b64a <constrain+0x26>
        return amt;
 800b648:	68fb      	ldr	r3, [r7, #12]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
	...

0800b658 <sdftInit>:

static void applySqrt(const sdft_t *sdft, float *data);


void sdftInit(sdft_t *sdft, const int startBin, const int endBin, const int numBatches)
{
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	ed2d 8b02 	vpush	{d8}
 800b65e:	b08d      	sub	sp, #52	; 0x34
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
    if (!isInitialized) {
 800b66a:	4b58      	ldr	r3, [pc, #352]	; (800b7cc <sdftInit+0x174>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f083 0301 	eor.w	r3, r3, #1
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d04d      	beq.n	800b714 <sdftInit+0xbc>
        rPowerN = powf(SDFT_R, SDFT_SAMPLE_SIZE);
 800b678:	4b55      	ldr	r3, [pc, #340]	; (800b7d0 <sdftInit+0x178>)
 800b67a:	4a56      	ldr	r2, [pc, #344]	; (800b7d4 <sdftInit+0x17c>)
 800b67c:	601a      	str	r2, [r3, #0]
        const float c = 2.0f * M_PIf / (float)SDFT_SAMPLE_SIZE;
 800b67e:	4b56      	ldr	r3, [pc, #344]	; (800b7d8 <sdftInit+0x180>)
 800b680:	623b      	str	r3, [r7, #32]
        float phi = 0.0f;
 800b682:	f04f 0300 	mov.w	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < SDFT_BIN_COUNT; i++) {
 800b688:	2300      	movs	r3, #0
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b68c:	e03c      	b.n	800b708 <sdftInit+0xb0>
            phi = c * i;
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	ee07 3a90 	vmov	s15, r3
 800b694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b698:	ed97 7a08 	vldr	s14, [r7, #32]
 800b69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a0:	edc7 7a07 	vstr	s15, [r7, #28]
            twiddle[i] = SDFT_R * (cos_approx(phi) + _Complex_I * sin_approx(phi));
 800b6a4:	ed97 0a07 	vldr	s0, [r7, #28]
 800b6a8:	f7ff fbda 	bl	800ae60 <sin_approx>
 800b6ac:	eeb0 8a40 	vmov.f32	s16, s0
 800b6b0:	ed97 0a07 	vldr	s0, [r7, #28]
 800b6b4:	f7ff fc7e 	bl	800afb4 <cos_approx>
 800b6b8:	eeb0 7a40 	vmov.f32	s14, s0
 800b6bc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b7dc <sdftInit+0x184>
 800b6c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b6c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6c8:	ee17 2a90 	vmov	r2, s15
 800b6cc:	ee18 3a10 	vmov	r3, s16
 800b6d0:	ee07 2a10 	vmov	s14, r2
 800b6d4:	eddf 7a42 	vldr	s15, [pc, #264]	; 800b7e0 <sdftInit+0x188>
 800b6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6dc:	ee06 3a90 	vmov	s13, r3
 800b6e0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b7e0 <sdftInit+0x188>
 800b6e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6e8:	ee17 4a10 	vmov	r4, s14
 800b6ec:	ee17 0a90 	vmov	r0, s15
 800b6f0:	4a3c      	ldr	r2, [pc, #240]	; (800b7e4 <sdftInit+0x18c>)
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	00d9      	lsls	r1, r3, #3
 800b6f6:	4411      	add	r1, r2
 800b6f8:	600c      	str	r4, [r1, #0]
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3304      	adds	r3, #4
 800b700:	6018      	str	r0, [r3, #0]
        for (int i = 0; i < SDFT_BIN_COUNT; i++) {
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	3301      	adds	r3, #1
 800b706:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	2b23      	cmp	r3, #35	; 0x23
 800b70c:	ddbf      	ble.n	800b68e <sdftInit+0x36>
        }
        isInitialized = true;
 800b70e:	4b2f      	ldr	r3, [pc, #188]	; (800b7cc <sdftInit+0x174>)
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
    }

    sdft->idx = 0;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]

    // Add 1 bin on either side outside of range (if possible) to get proper windowing up to range limits
    sdft->startBin = constrain(startBin - 1, 0, SDFT_BIN_COUNT - 1);
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	2223      	movs	r2, #35	; 0x23
 800b720:	2100      	movs	r1, #0
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ff7e 	bl	800b624 <constrain>
 800b728:	4602      	mov	r2, r0
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	605a      	str	r2, [r3, #4]
    sdft->endBin = constrain(endBin + 1, sdft->startBin, SDFT_BIN_COUNT - 1);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	1c58      	adds	r0, r3, #1
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	2223      	movs	r2, #35	; 0x23
 800b738:	4619      	mov	r1, r3
 800b73a:	f7ff ff73 	bl	800b624 <constrain>
 800b73e:	4602      	mov	r2, r0
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	609a      	str	r2, [r3, #8]

    sdft->numBatches = MAX(numBatches, 1);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	429a      	cmp	r2, r3
 800b752:	bfb8      	it	lt
 800b754:	461a      	movlt	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	611a      	str	r2, [r3, #16]
    sdft->batchSize = (sdft->endBin - sdft->startBin) / sdft->numBatches + 1;  // batchSize = ceil(numBins / numBatches)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	1ad2      	subs	r2, r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	fb92 f3f3 	sdiv	r3, r2, r3
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < SDFT_SAMPLE_SIZE; i++) {
 800b772:	2300      	movs	r3, #0
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
 800b776:	e00b      	b.n	800b790 <sdftInit+0x138>
        sdft->samples[i] = 0.0f;
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	3304      	adds	r3, #4
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	3304      	adds	r3, #4
 800b784:	f04f 0200 	mov.w	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < SDFT_SAMPLE_SIZE; i++) {
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	3301      	adds	r3, #1
 800b78e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	2b47      	cmp	r3, #71	; 0x47
 800b794:	ddf0      	ble.n	800b778 <sdftInit+0x120>
    }

    for (int i = 0; i < SDFT_BIN_COUNT; i++) {
 800b796:	2300      	movs	r3, #0
 800b798:	627b      	str	r3, [r7, #36]	; 0x24
 800b79a:	e00c      	b.n	800b7b6 <sdftInit+0x15e>
        sdft->data[i] = 0.0f;
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a0:	3326      	adds	r3, #38	; 0x26
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4a10      	ldr	r2, [pc, #64]	; (800b7e8 <sdftInit+0x190>)
 800b7a8:	6811      	ldr	r1, [r2, #0]
 800b7aa:	6059      	str	r1, [r3, #4]
 800b7ac:	6852      	ldr	r2, [r2, #4]
 800b7ae:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < SDFT_BIN_COUNT; i++) {
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	2b23      	cmp	r3, #35	; 0x23
 800b7ba:	ddef      	ble.n	800b79c <sdftInit+0x144>
    }
}
 800b7bc:	bf00      	nop
 800b7be:	bf00      	nop
 800b7c0:	3734      	adds	r7, #52	; 0x34
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	ecbd 8b02 	vpop	{d8}
 800b7c8:	bd90      	pop	{r4, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	10000dac 	.word	0x10000dac
 800b7d0:	10000da8 	.word	0x10000da8
 800b7d4:	3f7e29bc 	.word	0x3f7e29bc
 800b7d8:	3db2b8c3 	.word	0x3db2b8c3
 800b7dc:	00000000 	.word	0x00000000
 800b7e0:	3f7ff972 	.word	0x3f7ff972
 800b7e4:	10000db0 	.word	0x10000db0
 800b7e8:	0802bc10 	.word	0x0802bc10

0800b7ec <sdftPushBatch>:
}


// Add new sample to frequency spectrum in parts
void sdftPushBatch(sdft_t* sdft, const float sample, const int batchIdx)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b7f8:	6079      	str	r1, [r7, #4]
    const int batchStart = sdft->batchSize * batchIdx;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68da      	ldr	r2, [r3, #12]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	fb02 f303 	mul.w	r3, r2, r3
 800b804:	617b      	str	r3, [r7, #20]
    int batchEnd = batchStart;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	61fb      	str	r3, [r7, #28]

    const float delta = sample - rPowerN * sdft->samples[sdft->idx];
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	3304      	adds	r3, #4
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	3304      	adds	r3, #4
 800b818:	ed93 7a00 	vldr	s14, [r3]
 800b81c:	4b42      	ldr	r3, [pc, #264]	; (800b928 <sdftPushBatch+0x13c>)
 800b81e:	edd3 7a00 	vldr	s15, [r3]
 800b822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b826:	ed97 7a02 	vldr	s14, [r7, #8]
 800b82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b82e:	edc7 7a04 	vstr	s15, [r7, #16]

    if (batchIdx == sdft->numBatches - 1) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	3b01      	subs	r3, #1
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d121      	bne.n	800b882 <sdftPushBatch+0x96>
        sdft->samples[sdft->idx] = sample;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	3304      	adds	r3, #4
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4413      	add	r3, r2
 800b84a:	3304      	adds	r3, #4
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	601a      	str	r2, [r3, #0]
        sdft->idx = (sdft->idx + 1) % SDFT_SAMPLE_SIZE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	1c59      	adds	r1, r3, #1
 800b856:	4b35      	ldr	r3, [pc, #212]	; (800b92c <sdftPushBatch+0x140>)
 800b858:	fb83 2301 	smull	r2, r3, r3, r1
 800b85c:	111a      	asrs	r2, r3, #4
 800b85e:	17cb      	asrs	r3, r1, #31
 800b860:	1ad2      	subs	r2, r2, r3
 800b862:	4613      	mov	r3, r2
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	4413      	add	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	1aca      	subs	r2, r1, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	601a      	str	r2, [r3, #0]
        batchEnd += sdft->endBin - batchStart + 1;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	3301      	adds	r3, #1
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	4413      	add	r3, r2
 800b87e:	61fb      	str	r3, [r7, #28]
 800b880:	e004      	b.n	800b88c <sdftPushBatch+0xa0>
    } else {
        batchEnd += sdft->batchSize;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	69fa      	ldr	r2, [r7, #28]
 800b888:	4413      	add	r3, r2
 800b88a:	61fb      	str	r3, [r7, #28]
    }

    for (int i = batchStart; i < batchEnd; i++) {
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	61bb      	str	r3, [r7, #24]
 800b890:	e041      	b.n	800b916 <sdftPushBatch+0x12a>
 800b892:	4a27      	ldr	r2, [pc, #156]	; (800b930 <sdftPushBatch+0x144>)
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4413      	add	r3, r2
 800b89a:	edd3 6a00 	vldr	s13, [r3]
 800b89e:	4a24      	ldr	r2, [pc, #144]	; (800b930 <sdftPushBatch+0x144>)
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	00db      	lsls	r3, r3, #3
 800b8a4:	4413      	add	r3, r2
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	ed93 6a00 	vldr	s12, [r3]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	3326      	adds	r3, #38	; 0x26
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	3326      	adds	r3, #38	; 0x26
 800b8c0:	00db      	lsls	r3, r3, #3
 800b8c2:	4413      	add	r3, r2
 800b8c4:	edd3 5a02 	vldr	s11, [r3, #8]
        sdft->data[i] = twiddle[i] * (sdft->data[i] + delta);
 800b8c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8d0:	eef0 1a65 	vmov.f32	s3, s11
 800b8d4:	eeb0 1a67 	vmov.f32	s2, s15
 800b8d8:	eef0 0a46 	vmov.f32	s1, s12
 800b8dc:	eeb0 0a66 	vmov.f32	s0, s13
 800b8e0:	f7fd f90a 	bl	8008af8 <__mulsc3>
 800b8e4:	eeb0 7a40 	vmov.f32	s14, s0
 800b8e8:	eef0 7a60 	vmov.f32	s15, s1
 800b8ec:	ee17 0a10 	vmov	r0, s14
 800b8f0:	ee17 1a90 	vmov	r1, s15
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	3326      	adds	r3, #38	; 0x26
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3304      	adds	r3, #4
 800b900:	6018      	str	r0, [r3, #0]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	3326      	adds	r3, #38	; 0x26
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	4413      	add	r3, r2
 800b90c:	3308      	adds	r3, #8
 800b90e:	6019      	str	r1, [r3, #0]
    for (int i = batchStart; i < batchEnd; i++) {
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	3301      	adds	r3, #1
 800b914:	61bb      	str	r3, [r7, #24]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	dbb9      	blt.n	800b892 <sdftPushBatch+0xa6>
    }
}
 800b91e:	bf00      	nop
 800b920:	bf00      	nop
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	10000da8 	.word	0x10000da8
 800b92c:	38e38e39 	.word	0x38e38e39
 800b930:	10000db0 	.word	0x10000db0

0800b934 <sdftWinSq>:


// Get squared magnitude of frequency spectrum with Hann window applied
// Hann window in frequency domain: X[k] = -0.25 * X[k-1] +0.5 * X[k] -0.25 * X[k+1]
void sdftWinSq(const sdft_t *sdft, float *output)
{
 800b934:	b480      	push	{r7}
 800b936:	b08b      	sub	sp, #44	; 0x2c
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
    complex_t val;
    float re;
    float im;

    for (int i = (sdft->startBin + 1); i < sdft->endBin; i++) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	3301      	adds	r3, #1
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
 800b946:	e05c      	b.n	800ba02 <sdftWinSq+0xce>
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	3326      	adds	r3, #38	; 0x26
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	4413      	add	r3, r2
 800b952:	ed93 6a01 	vldr	s12, [r3, #4]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	3326      	adds	r3, #38	; 0x26
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	4413      	add	r3, r2
 800b960:	ed93 7a02 	vldr	s14, [r3, #8]
        val = sdft->data[i] - 0.5f * (sdft->data[i - 1] + sdft->data[i + 1]); // multiply by 2 to save one multiplication
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	3b01      	subs	r3, #1
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	3326      	adds	r3, #38	; 0x26
 800b96c:	00db      	lsls	r3, r3, #3
 800b96e:	4413      	add	r3, r2
 800b970:	edd3 6a01 	vldr	s13, [r3, #4]
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	3301      	adds	r3, #1
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	3326      	adds	r3, #38	; 0x26
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	4413      	add	r3, r2
 800b980:	edd3 7a01 	vldr	s15, [r3, #4]
 800b984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b988:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b98c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	3b01      	subs	r3, #1
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	3326      	adds	r3, #38	; 0x26
 800b998:	00db      	lsls	r3, r3, #3
 800b99a:	4413      	add	r3, r2
 800b99c:	edd3 5a02 	vldr	s11, [r3, #8]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	3326      	adds	r3, #38	; 0x26
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800b9b0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800b9b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800b9b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b9bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b9c0:	edc7 6a04 	vstr	s13, [r7, #16]
 800b9c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c8:	edc7 7a03 	vstr	s15, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	61fa      	str	r2, [r7, #28]
 800b9d2:	623b      	str	r3, [r7, #32]
        re = crealf(val);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	61bb      	str	r3, [r7, #24]
        im = cimagf(val);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	617b      	str	r3, [r7, #20]
        output[i] = re * re + im * im;
 800b9dc:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b9e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9f8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = (sdft->startBin + 1); i < sdft->endBin; i++) {
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	3301      	adds	r3, #1
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	db9d      	blt.n	800b948 <sdftWinSq+0x14>
    }
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	372c      	adds	r7, #44	; 0x2c
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <imuQuaternionComputeProducts>:
#ifdef _USE_HW_CLI
static void cliSensor(cli_args_t *args);
#endif

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	ed93 7a00 	vldr	s14, [r3]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	edd3 7a00 	vldr	s15, [r3]
 800ba30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	ed93 7a00 	vldr	s14, [r3]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	ed93 7a00 	vldr	s14, [r3]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	ed93 7a00 	vldr	s14, [r3]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ba72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	ed93 7a01 	vldr	s14, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	edd3 7a03 	vldr	s15, [r3, #12]
 800bab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	ed93 7a02 	vldr	s14, [r3, #8]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	edd3 7a02 	vldr	s15, [r3, #8]
 800baca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	ed93 7a02 	vldr	s14, [r3, #8]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	edd3 7a03 	vldr	s15, [r3, #12]
 800bae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	ed93 7a03 	vldr	s14, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	edd3 7a03 	vldr	s15, [r3, #12]
 800baf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 800bb10:	4946      	ldr	r1, [pc, #280]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb12:	4847      	ldr	r0, [pc, #284]	; (800bc30 <imuComputeRotationMatrix+0x124>)
 800bb14:	f7ff ff81 	bl	800ba1a <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 800bb18:	4b44      	ldr	r3, [pc, #272]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb1a:	edd3 7a07 	vldr	s15, [r3, #28]
 800bb1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb26:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb2a:	4b40      	ldr	r3, [pc, #256]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bb30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb38:	4b3e      	ldr	r3, [pc, #248]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bb3a:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 800bb3e:	4b3b      	ldr	r3, [pc, #236]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb40:	ed93 7a05 	vldr	s14, [r3, #20]
 800bb44:	4b39      	ldr	r3, [pc, #228]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb46:	edd3 7a03 	vldr	s15, [r3, #12]
 800bb4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb52:	4b38      	ldr	r3, [pc, #224]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bb54:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 800bb58:	4b34      	ldr	r3, [pc, #208]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb5a:	ed93 7a06 	vldr	s14, [r3, #24]
 800bb5e:	4b33      	ldr	r3, [pc, #204]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb60:	edd3 7a02 	vldr	s15, [r3, #8]
 800bb64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb6c:	4b31      	ldr	r3, [pc, #196]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bb6e:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb74:	ed93 7a05 	vldr	s14, [r3, #20]
 800bb78:	4b2c      	ldr	r3, [pc, #176]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb7a:	edd3 7a03 	vldr	s15, [r3, #12]
 800bb7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb86:	4b2b      	ldr	r3, [pc, #172]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bb88:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 800bb8c:	4b27      	ldr	r3, [pc, #156]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bb8e:	edd3 7a04 	vldr	s15, [r3, #16]
 800bb92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb9e:	4b23      	ldr	r3, [pc, #140]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bba0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bba4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbac:	4b21      	ldr	r3, [pc, #132]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bbae:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 800bbb2:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbb4:	ed93 7a08 	vldr	s14, [r3, #32]
 800bbb8:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbba:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bbc6:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bbc8:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 800bbcc:	4b17      	ldr	r3, [pc, #92]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbce:	ed93 7a06 	vldr	s14, [r3, #24]
 800bbd2:	4b16      	ldr	r3, [pc, #88]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbd4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bbd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bbe0:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bbe2:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 800bbe6:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbe8:	ed93 7a08 	vldr	s14, [r3, #32]
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bbee:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbf6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bbfc:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bc02:	edd3 7a04 	vldr	s15, [r3, #16]
 800bc06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc12:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <imuComputeRotationMatrix+0x120>)
 800bc14:	edd3 7a07 	vldr	s15, [r3, #28]
 800bc18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc20:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <imuComputeRotationMatrix+0x128>)
 800bc22:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200001b0 	.word	0x200001b0
 800bc30:	200001a0 	.word	0x200001a0
 800bc34:	200006e4 	.word	0x200006e4

0800bc38 <Sensor_Init>:

bool Sensor_Init(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	bool ret = true;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	71fb      	strb	r3, [r7, #7]

	is_init = bmi270_Init();
 800bc42:	f005 fb53 	bl	80112ec <bmi270_Init>
 800bc46:	4603      	mov	r3, r0
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <Sensor_Init+0x3c>)
 800bc4c:	701a      	strb	r2, [r3, #0]
  
	if (is_init != true)
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <Sensor_Init+0x3c>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	f083 0301 	eor.w	r3, r3, #1
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <Sensor_Init+0x28>
 	{
   		return false;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e004      	b.n	800bc6a <Sensor_Init+0x32>
  	}

	#ifdef _USE_HW_CLI
  		cliAdd("Sensor", cliSensor);
 800bc60:	4905      	ldr	r1, [pc, #20]	; (800bc78 <Sensor_Init+0x40>)
 800bc62:	4806      	ldr	r0, [pc, #24]	; (800bc7c <Sensor_Init+0x44>)
 800bc64:	f006 fd02 	bl	801266c <cliAdd>
	#endif

    return ret;
 800bc68:	79fb      	ldrb	r3, [r7, #7]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20003ea2 	.word	0x20003ea2
 800bc78:	0800c5d1 	.word	0x0800c5d1
 800bc7c:	0802bc18 	.word	0x0802bc18

0800bc80 <imuUpdateAttitude>:

void imuUpdateAttitude(uint32_t currentTimeUs)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
    if (acc.isAccelUpdatedAtLeastOnce) {
 800bc88:	4b0d      	ldr	r3, [pc, #52]	; (800bcc0 <imuUpdateAttitude+0x40>)
 800bc8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <imuUpdateAttitude+0x1a>

        imuCalculateEstimatedAttitude(currentTimeUs);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fc20 	bl	800c4d8 <imuCalculateEstimatedAttitude>
        acc.accADC[X] = 0;
        acc.accADC[Y] = 0;
        acc.accADC[Z] = 0;
        schedulerIgnoreTaskStateTime();
    }
}
 800bc98:	e00d      	b.n	800bcb6 <imuUpdateAttitude+0x36>
        acc.accADC[X] = 0;
 800bc9a:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <imuUpdateAttitude+0x40>)
 800bc9c:	f04f 0200 	mov.w	r2, #0
 800bca0:	625a      	str	r2, [r3, #36]	; 0x24
        acc.accADC[Y] = 0;
 800bca2:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <imuUpdateAttitude+0x40>)
 800bca4:	f04f 0200 	mov.w	r2, #0
 800bca8:	629a      	str	r2, [r3, #40]	; 0x28
        acc.accADC[Z] = 0;
 800bcaa:	4b05      	ldr	r3, [pc, #20]	; (800bcc0 <imuUpdateAttitude+0x40>)
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	62da      	str	r2, [r3, #44]	; 0x2c
        schedulerIgnoreTaskStateTime();
 800bcb2:	f002 fca1 	bl	800e5f8 <schedulerIgnoreTaskStateTime>
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	10000f2c 	.word	0x10000f2c

0800bcc4 <invSqrt>:

static float invSqrt(float x)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 800bcce:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcd2:	f01f fbf7 	bl	802b4c4 <sqrtf>
 800bcd6:	eef0 7a40 	vmov.f32	s15, s0
 800bcda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bce2:	eef0 7a66 	vmov.f32	s15, s13
}
 800bce6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	ed2d 8b02 	vpush	{d8}
 800bcf6:	b096      	sub	sp, #88	; 0x58
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800bcfe:	edc7 0a08 	vstr	s1, [r7, #32]
 800bd02:	ed87 1a07 	vstr	s2, [r7, #28]
 800bd06:	edc7 1a06 	vstr	s3, [r7, #24]
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	ed87 2a04 	vstr	s4, [r7, #16]
 800bd10:	edc7 2a03 	vstr	s5, [r7, #12]
 800bd14:	ed87 3a02 	vstr	s6, [r7, #8]
 800bd18:	edc7 3a01 	vstr	s7, [r7, #4]
 800bd1c:	ed87 4a00 	vstr	s8, [r7]
 800bd20:	75fb      	strb	r3, [r7, #23]
 800bd22:	460b      	mov	r3, r1
 800bd24:	75bb      	strb	r3, [r7, #22]
 800bd26:	4613      	mov	r3, r2
 800bd28:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 800bd2a:	edd7 7a08 	vldr	s15, [r7, #32]
 800bd2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bd32:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bd3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd3e:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bd46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd4a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd4e:	f01f fbb9 	bl	802b4c4 <sqrtf>
 800bd52:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 800bd56:	f04f 0300 	mov.w	r3, #0
 800bd5a:	657b      	str	r3, [r7, #84]	; 0x54
 800bd5c:	f04f 0300 	mov.w	r3, #0
 800bd60:	653b      	str	r3, [r7, #80]	; 0x50
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (useCOG) {
 800bd68:	7d7b      	ldrb	r3, [r7, #21]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d060      	beq.n	800be30 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 800bd6e:	e007      	b.n	800bd80 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 800bd70:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd74:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800bd98 <imuMahonyAHRSupdate+0xa8>
 800bd78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd7c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 800bd80:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd84:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800bd94 <imuMahonyAHRSupdate+0xa4>
 800bd88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd90:	dcee      	bgt.n	800bd70 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 800bd92:	e00d      	b.n	800bdb0 <imuMahonyAHRSupdate+0xc0>
 800bd94:	40490fdb 	.word	0x40490fdb
 800bd98:	40c90fdb 	.word	0x40c90fdb
 800bd9c:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 800bda0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bda4:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 800bd98 <imuMahonyAHRSupdate+0xa8>
 800bda8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdac:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 800bdb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdb4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bd9c <imuMahonyAHRSupdate+0xac>
 800bdb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc0:	d4ee      	bmi.n	800bda0 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 800bdc2:	ed97 0a01 	vldr	s0, [r7, #4]
 800bdc6:	f7ff f84b 	bl	800ae60 <sin_approx>
 800bdca:	eef0 7a40 	vmov.f32	s15, s0
 800bdce:	eeb1 7a67 	vneg.f32	s14, s15
 800bdd2:	4be3      	ldr	r3, [pc, #908]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bdd4:	edd3 7a00 	vldr	s15, [r3]
 800bdd8:	ee27 8a27 	vmul.f32	s16, s14, s15
 800bddc:	ed97 0a01 	vldr	s0, [r7, #4]
 800bde0:	f7ff f8e8 	bl	800afb4 <cos_approx>
 800bde4:	eeb0 7a40 	vmov.f32	s14, s0
 800bde8:	4bdd      	ldr	r3, [pc, #884]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bdea:	edd3 7a03 	vldr	s15, [r3, #12]
 800bdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdf2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800bdf6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        ex = rMat[2][0] * ez_ef;
 800bdfa:	4bd9      	ldr	r3, [pc, #868]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bdfc:	edd3 7a06 	vldr	s15, [r3, #24]
 800be00:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800be04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        ey = rMat[2][1] * ez_ef;
 800be0c:	4bd4      	ldr	r3, [pc, #848]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800be0e:	edd3 7a07 	vldr	s15, [r3, #28]
 800be12:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800be16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be1a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        ez = rMat[2][2] * ez_ef;
 800be1e:	4bd0      	ldr	r3, [pc, #832]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800be20:	edd3 7a08 	vldr	s15, [r3, #32]
 800be24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800be28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be2c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
#else
    UNUSED(useMag);
#endif

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 800be30:	edd7 7a04 	vldr	s15, [r7, #16]
 800be34:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800be38:	edd7 7a03 	vldr	s15, [r7, #12]
 800be3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800be40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be44:	edd7 7a02 	vldr	s15, [r7, #8]
 800be48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800be4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be50:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d068      	beq.n	800bf2c <imuMahonyAHRSupdate+0x23c>
 800be5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800be5e:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800c164 <imuMahonyAHRSupdate+0x474>
 800be62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6a:	dd5f      	ble.n	800bf2c <imuMahonyAHRSupdate+0x23c>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 800be6c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800be70:	f7ff ff28 	bl	800bcc4 <invSqrt>
 800be74:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 800be78:	ed97 7a04 	vldr	s14, [r7, #16]
 800be7c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800be80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be84:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 800be88:	ed97 7a03 	vldr	s14, [r7, #12]
 800be8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800be90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be94:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 800be98:	ed97 7a02 	vldr	s14, [r7, #8]
 800be9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800bea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea4:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 800bea8:	4bad      	ldr	r3, [pc, #692]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800beaa:	ed93 7a08 	vldr	s14, [r3, #32]
 800beae:	edd7 7a03 	vldr	s15, [r7, #12]
 800beb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beb6:	4baa      	ldr	r3, [pc, #680]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800beb8:	edd3 6a07 	vldr	s13, [r3, #28]
 800bebc:	edd7 7a02 	vldr	s15, [r7, #8]
 800bec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bec8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800becc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bed0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 800bed4:	4ba2      	ldr	r3, [pc, #648]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bed6:	ed93 7a06 	vldr	s14, [r3, #24]
 800beda:	edd7 7a02 	vldr	s15, [r7, #8]
 800bede:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bee2:	4b9f      	ldr	r3, [pc, #636]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bee4:	edd3 6a08 	vldr	s13, [r3, #32]
 800bee8:	edd7 7a04 	vldr	s15, [r7, #16]
 800beec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bef4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800befc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 800bf00:	4b97      	ldr	r3, [pc, #604]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bf02:	ed93 7a07 	vldr	s14, [r3, #28]
 800bf06:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf0e:	4b94      	ldr	r3, [pc, #592]	; (800c160 <imuMahonyAHRSupdate+0x470>)
 800bf10:	edd3 6a06 	vldr	s13, [r3, #24]
 800bf14:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf20:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bf24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf28:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
            integralFBy += dcmKiGain * ey * dt;
            integralFBz += dcmKiGain * ez * dt;
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 800bf2c:	4b8e      	ldr	r3, [pc, #568]	; (800c168 <imuMahonyAHRSupdate+0x478>)
 800bf2e:	f04f 0200 	mov.w	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 800bf34:	4b8d      	ldr	r3, [pc, #564]	; (800c16c <imuMahonyAHRSupdate+0x47c>)
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 800bf3c:	4b8c      	ldr	r3, [pc, #560]	; (800c170 <imuMahonyAHRSupdate+0x480>)
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 800bf44:	ed97 7a00 	vldr	s14, [r7]
 800bf48:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800bf4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf50:	4b85      	ldr	r3, [pc, #532]	; (800c168 <imuMahonyAHRSupdate+0x478>)
 800bf52:	edd3 7a00 	vldr	s15, [r3]
 800bf56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf5a:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf62:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 800bf66:	ed97 7a00 	vldr	s14, [r7]
 800bf6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800bf6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf72:	4b7e      	ldr	r3, [pc, #504]	; (800c16c <imuMahonyAHRSupdate+0x47c>)
 800bf74:	edd3 7a00 	vldr	s15, [r3]
 800bf78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf7c:	ed97 7a07 	vldr	s14, [r7, #28]
 800bf80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf84:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 800bf88:	ed97 7a00 	vldr	s14, [r7]
 800bf8c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800bf90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf94:	4b76      	ldr	r3, [pc, #472]	; (800c170 <imuMahonyAHRSupdate+0x480>)
 800bf96:	edd3 7a00 	vldr	s15, [r3]
 800bf9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf9e:	ed97 7a06 	vldr	s14, [r7, #24]
 800bfa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfa6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 800bfaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bfb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfb6:	ed97 7a08 	vldr	s14, [r7, #32]
 800bfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfbe:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 800bfc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bfca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfce:	ed97 7a07 	vldr	s14, [r7, #28]
 800bfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd6:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 800bfda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bfe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfe6:	ed97 7a06 	vldr	s14, [r7, #24]
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 800bff2:	4b60      	ldr	r3, [pc, #384]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.x = q.x;
 800bff8:	4b5e      	ldr	r3, [pc, #376]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.y = q.y;
 800bffe:	4b5d      	ldr	r3, [pc, #372]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
    buffer.z = q.z;
 800c004:	4b5b      	ldr	r3, [pc, #364]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	63bb      	str	r3, [r7, #56]	; 0x38

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 800c00a:	4b5a      	ldr	r3, [pc, #360]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c00c:	ed93 7a00 	vldr	s14, [r3]
 800c010:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c014:	eef1 6a67 	vneg.f32	s13, s15
 800c018:	edd7 7a08 	vldr	s15, [r7, #32]
 800c01c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c020:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800c024:	edd7 7a07 	vldr	s15, [r7, #28]
 800c028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c02c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c030:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c034:	edd7 7a06 	vldr	s15, [r7, #24]
 800c038:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c03c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c040:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c044:	4b4b      	ldr	r3, [pc, #300]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c046:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 800c04a:	4b4a      	ldr	r3, [pc, #296]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c04c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c050:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c054:	edd7 7a08 	vldr	s15, [r7, #32]
 800c058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c05c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800c060:	edd7 7a06 	vldr	s15, [r7, #24]
 800c064:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c068:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c06c:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c070:	edd7 7a07 	vldr	s15, [r7, #28]
 800c074:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c078:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c07c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c080:	4b3c      	ldr	r3, [pc, #240]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c082:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 800c086:	4b3b      	ldr	r3, [pc, #236]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c088:	ed93 7a02 	vldr	s14, [r3, #8]
 800c08c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c090:	edd7 7a07 	vldr	s15, [r7, #28]
 800c094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c098:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800c09c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c0a8:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c0ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800c0b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0bc:	4b2d      	ldr	r3, [pc, #180]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c0be:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 800c0c2:	4b2c      	ldr	r3, [pc, #176]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c0c4:	ed93 7a03 	vldr	s14, [r3, #12]
 800c0c8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c0cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c0d4:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800c0d8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c0e4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800c0e8:	edd7 7a08 	vldr	s15, [r7, #32]
 800c0ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c0f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c0f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0f8:	4b1e      	ldr	r3, [pc, #120]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c0fa:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 800c0fe:	4b1d      	ldr	r3, [pc, #116]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c100:	ed93 7a00 	vldr	s14, [r3]
 800c104:	4b1b      	ldr	r3, [pc, #108]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c106:	edd3 7a00 	vldr	s15, [r3]
 800c10a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c10e:	4b19      	ldr	r3, [pc, #100]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c110:	edd3 6a01 	vldr	s13, [r3, #4]
 800c114:	4b17      	ldr	r3, [pc, #92]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c116:	edd3 7a01 	vldr	s15, [r3, #4]
 800c11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c11e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c124:	edd3 6a02 	vldr	s13, [r3, #8]
 800c128:	4b12      	ldr	r3, [pc, #72]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c12a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c12e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c132:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c138:	edd3 6a03 	vldr	s13, [r3, #12]
 800c13c:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c13e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14a:	eeb0 0a67 	vmov.f32	s0, s15
 800c14e:	f7ff fdb9 	bl	800bcc4 <invSqrt>
 800c152:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    q.w *= recipNorm;
 800c156:	4b07      	ldr	r3, [pc, #28]	; (800c174 <imuMahonyAHRSupdate+0x484>)
 800c158:	ed93 7a00 	vldr	s14, [r3]
 800c15c:	e00c      	b.n	800c178 <imuMahonyAHRSupdate+0x488>
 800c15e:	bf00      	nop
 800c160:	200006e4 	.word	0x200006e4
 800c164:	3c23d70a 	.word	0x3c23d70a
 800c168:	20000710 	.word	0x20000710
 800c16c:	20000714 	.word	0x20000714
 800c170:	20000718 	.word	0x20000718
 800c174:	200001a0 	.word	0x200001a0
 800c178:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c180:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c182:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 800c186:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c188:	ed93 7a01 	vldr	s14, [r3, #4]
 800c18c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c190:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c196:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c19c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c1a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c1aa:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c1b0:	ed93 7a03 	vldr	s14, [r3, #12]
 800c1b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <imuMahonyAHRSupdate+0x4e8>)
 800c1be:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 800c1c2:	f7ff fca3 	bl	800bb0c <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 800c1c6:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <imuMahonyAHRSupdate+0x4ec>)
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	701a      	strb	r2, [r3, #0]
}
 800c1cc:	bf00      	nop
 800c1ce:	3758      	adds	r7, #88	; 0x58
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	ecbd 8b02 	vpop	{d8}
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200001a0 	.word	0x200001a0
 800c1dc:	20003ea3 	.word	0x20003ea3

0800c1e0 <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 800c1e8:	f04f 0300 	mov.w	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < 3; axis++) {
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	613b      	str	r3, [r7, #16]
 800c1f2:	e012      	b.n	800c21a <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 800c200:	edd7 7a03 	vldr	s15, [r7, #12]
 800c204:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c208:	ed97 7a05 	vldr	s14, [r7, #20]
 800c20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c210:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < 3; axis++) {
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	3301      	adds	r3, #1
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	dde9      	ble.n	800c1f4 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <imuIsAccelerometerHealthy+0x98>)
 800c222:	ed93 7a00 	vldr	s14, [r3]
 800c226:	4b14      	ldr	r3, [pc, #80]	; (800c278 <imuIsAccelerometerHealthy+0x98>)
 800c228:	edd3 7a00 	vldr	s15, [r3]
 800c22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c230:	ed97 7a05 	vldr	s14, [r7, #20]
 800c234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c238:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 800c23c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c240:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800c27c <imuIsAccelerometerHealthy+0x9c>
 800c244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24c:	dd0a      	ble.n	800c264 <imuIsAccelerometerHealthy+0x84>
 800c24e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c252:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800c280 <imuIsAccelerometerHealthy+0xa0>
 800c256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25e:	d501      	bpl.n	800c264 <imuIsAccelerometerHealthy+0x84>
 800c260:	2301      	movs	r3, #1
 800c262:	e000      	b.n	800c266 <imuIsAccelerometerHealthy+0x86>
 800c264:	2300      	movs	r3, #0
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	b2db      	uxtb	r3, r3
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	371c      	adds	r7, #28
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	10000f2c 	.word	0x10000f2c
 800c27c:	3f4f5c29 	.word	0x3f4f5c29
 800c280:	3f9ae148 	.word	0x3f9ae148

0800c284 <imuCalcKpGain>:
// After disarming we want to quickly reestablish convergence to deal with the attitude estimation being incorrect due to a crash.
//   - wait for a 250ms period of low gyro activity to ensure the craft is not moving
//   - use a large dcmKpGain value for 500ms to allow the attitude estimate to quickly converge
//   - reset the gain back to the standard setting
static float imuCalcKpGain(uint32_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	460b      	mov	r3, r1
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	72fb      	strb	r3, [r7, #11]
  static bool lastArmState = false;
  static uint32_t gyroQuietPeriodTimeEnd = 0;
  static uint32_t attitudeResetTimeEnd = 0;
  static bool attitudeResetCompleted = false;
  float ret;
  bool attitudeResetActive = false;
 800c292:	2300      	movs	r3, #0
 800c294:	74fb      	strb	r3, [r7, #19]

  const bool armState = false;//ARMING_FLAG(ARMED);
 800c296:	2300      	movs	r3, #0
 800c298:	74bb      	strb	r3, [r7, #18]

  if (!armState) {
 800c29a:	7cbb      	ldrb	r3, [r7, #18]
 800c29c:	f083 0301 	eor.w	r3, r3, #1
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d079      	beq.n	800c39a <imuCalcKpGain+0x116>
      if (lastArmState) {   // Just disarmed; start the gyro quiet period
 800c2a6:	4b4f      	ldr	r3, [pc, #316]	; (800c3e4 <imuCalcKpGain+0x160>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00b      	beq.n	800c2c6 <imuCalcKpGain+0x42>
          gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f503 3374 	add.w	r3, r3, #249856	; 0x3d000
 800c2b4:	3390      	adds	r3, #144	; 0x90
 800c2b6:	4a4c      	ldr	r2, [pc, #304]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c2b8:	6013      	str	r3, [r2, #0]
          attitudeResetTimeEnd = 0;
 800c2ba:	4b4c      	ldr	r3, [pc, #304]	; (800c3ec <imuCalcKpGain+0x168>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]
          attitudeResetCompleted = false;
 800c2c0:	4b4b      	ldr	r3, [pc, #300]	; (800c3f0 <imuCalcKpGain+0x16c>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
      }

      // If gyro activity exceeds the threshold then restart the quiet period.
      // Also, if the attitude reset has been complete and there is subsequent gyro activity then
      // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
      if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 800c2c6:	4b49      	ldr	r3, [pc, #292]	; (800c3ec <imuCalcKpGain+0x168>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d107      	bne.n	800c2de <imuCalcKpGain+0x5a>
 800c2ce:	4b46      	ldr	r3, [pc, #280]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d103      	bne.n	800c2de <imuCalcKpGain+0x5a>
 800c2d6:	4b46      	ldr	r3, [pc, #280]	; (800c3f0 <imuCalcKpGain+0x16c>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d034      	beq.n	800c348 <imuCalcKpGain+0xc4>
          if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	edd3 7a00 	vldr	s15, [r3]
 800c2e4:	eef0 7ae7 	vabs.f32	s15, s15
 800c2e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800c2ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f4:	dc1f      	bgt.n	800c336 <imuCalcKpGain+0xb2>
              || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	edd3 7a00 	vldr	s15, [r3]
 800c2fe:	eef0 7ae7 	vabs.f32	s15, s15
 800c302:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800c306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30e:	dc12      	bgt.n	800c336 <imuCalcKpGain+0xb2>
              || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3308      	adds	r3, #8
 800c314:	edd3 7a00 	vldr	s15, [r3]
 800c318:	eef0 7ae7 	vabs.f32	s15, s15
 800c31c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800c320:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	dc05      	bgt.n	800c336 <imuCalcKpGain+0xb2>
              || (!useAcc)) {
 800c32a:	7afb      	ldrb	r3, [r7, #11]
 800c32c:	f083 0301 	eor.w	r3, r3, #1
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d008      	beq.n	800c348 <imuCalcKpGain+0xc4>

              gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f503 3374 	add.w	r3, r3, #249856	; 0x3d000
 800c33c:	3390      	adds	r3, #144	; 0x90
 800c33e:	4a2a      	ldr	r2, [pc, #168]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c340:	6013      	str	r3, [r2, #0]
              attitudeResetTimeEnd = 0;
 800c342:	4b2a      	ldr	r3, [pc, #168]	; (800c3ec <imuCalcKpGain+0x168>)
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]
          }
      }
      if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 800c348:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <imuCalcKpGain+0x168>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d011      	beq.n	800c374 <imuCalcKpGain+0xf0>
          if (currentTimeUs >= attitudeResetTimeEnd) {
 800c350:	4b26      	ldr	r3, [pc, #152]	; (800c3ec <imuCalcKpGain+0x168>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	429a      	cmp	r2, r3
 800c358:	d309      	bcc.n	800c36e <imuCalcKpGain+0xea>
              gyroQuietPeriodTimeEnd = 0;
 800c35a:	4b23      	ldr	r3, [pc, #140]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]
              attitudeResetTimeEnd = 0;
 800c360:	4b22      	ldr	r3, [pc, #136]	; (800c3ec <imuCalcKpGain+0x168>)
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
              attitudeResetCompleted = true;
 800c366:	4b22      	ldr	r3, [pc, #136]	; (800c3f0 <imuCalcKpGain+0x16c>)
 800c368:	2201      	movs	r2, #1
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	e015      	b.n	800c39a <imuCalcKpGain+0x116>
          } else {
              attitudeResetActive = true;
 800c36e:	2301      	movs	r3, #1
 800c370:	74fb      	strb	r3, [r7, #19]
 800c372:	e012      	b.n	800c39a <imuCalcKpGain+0x116>
          }
      } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 800c374:	4b1c      	ldr	r3, [pc, #112]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00e      	beq.n	800c39a <imuCalcKpGain+0x116>
 800c37c:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	429a      	cmp	r2, r3
 800c384:	d309      	bcc.n	800c39a <imuCalcKpGain+0x116>
          // Start the high gain period to bring the estimation into convergence
          attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 800c38c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c390:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <imuCalcKpGain+0x168>)
 800c392:	6013      	str	r3, [r2, #0]
          gyroQuietPeriodTimeEnd = 0;
 800c394:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <imuCalcKpGain+0x164>)
 800c396:	2200      	movs	r2, #0
 800c398:	601a      	str	r2, [r3, #0]
      }
  }
  lastArmState = armState;
 800c39a:	4a12      	ldr	r2, [pc, #72]	; (800c3e4 <imuCalcKpGain+0x160>)
 800c39c:	7cbb      	ldrb	r3, [r7, #18]
 800c39e:	7013      	strb	r3, [r2, #0]

  if (attitudeResetActive) {
 800c3a0:	7cfb      	ldrb	r3, [r7, #19]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d002      	beq.n	800c3ac <imuCalcKpGain+0x128>
      ret = ATTITUDE_RESET_KP_GAIN;
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <imuCalcKpGain+0x170>)
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	e010      	b.n	800c3ce <imuCalcKpGain+0x14a>
  } else {
      ret = 0.25;
 800c3ac:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800c3b0:	617b      	str	r3, [r7, #20]
      if (!armState) {
 800c3b2:	7cbb      	ldrb	r3, [r7, #18]
 800c3b4:	f083 0301 	eor.w	r3, r3, #1
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d007      	beq.n	800c3ce <imuCalcKpGain+0x14a>
        ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 800c3be:	edd7 7a05 	vldr	s15, [r7, #20]
 800c3c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c3c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3ca:	edc7 7a05 	vstr	s15, [r7, #20]
      }
  }

  return ret;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	ee07 3a90 	vmov	s15, r3
}
 800c3d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20003ea4 	.word	0x20003ea4
 800c3e8:	2000071c 	.word	0x2000071c
 800c3ec:	20000720 	.word	0x20000720
 800c3f0:	20003ea5 	.word	0x20003ea5
 800c3f4:	41c80000 	.word	0x41c80000

0800c3f8 <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08a      	sub	sp, #40	; 0x28
 800c3fc:	af00      	add	r7, sp, #0

       attitude.values.roll = lrintf(atan2_approx((+2.0f * (buffer.wx + buffer.yz)), (+1.0f - 2.0f * (buffer.xx + buffer.yy))) * (1800.0f / M_PIf));
       attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(+2.0f * (buffer.wy - buffer.xz))) * (1800.0f / M_PIf));
       attitude.values.yaw = lrintf((-atan2_approx((+2.0f * (buffer.wz + buffer.xy)), (+1.0f - 2.0f * (buffer.yy + buffer.zz))) * (1800.0f / M_PIf)));
    } else {
       attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 800c3fe:	4b32      	ldr	r3, [pc, #200]	; (800c4c8 <imuUpdateEulerAngles+0xd0>)
 800c400:	edd3 7a07 	vldr	s15, [r3, #28]
 800c404:	4b30      	ldr	r3, [pc, #192]	; (800c4c8 <imuUpdateEulerAngles+0xd0>)
 800c406:	ed93 7a08 	vldr	s14, [r3, #32]
 800c40a:	eef0 0a47 	vmov.f32	s1, s14
 800c40e:	eeb0 0a67 	vmov.f32	s0, s15
 800c412:	f7fe fde7 	bl	800afe4 <atan2_approx>
 800c416:	eef0 7a40 	vmov.f32	s15, s0
 800c41a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800c4cc <imuUpdateEulerAngles+0xd4>
 800c41e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c422:	eeb0 0a67 	vmov.f32	s0, s15
 800c426:	f01e ffb5 	bl	802b394 <lrintf>
 800c42a:	4603      	mov	r3, r0
 800c42c:	b21a      	sxth	r2, r3
 800c42e:	4b28      	ldr	r3, [pc, #160]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c430:	801a      	strh	r2, [r3, #0]
       attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 800c432:	4b25      	ldr	r3, [pc, #148]	; (800c4c8 <imuUpdateEulerAngles+0xd0>)
 800c434:	edd3 7a06 	vldr	s15, [r3, #24]
 800c438:	eef1 7a67 	vneg.f32	s15, s15
 800c43c:	eeb0 0a67 	vmov.f32	s0, s15
 800c440:	f7fe fe9a 	bl	800b178 <acos_approx>
 800c444:	eef0 7a40 	vmov.f32	s15, s0
 800c448:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c4d4 <imuUpdateEulerAngles+0xdc>
 800c44c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c450:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c4cc <imuUpdateEulerAngles+0xd4>
 800c454:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c458:	eeb0 0a67 	vmov.f32	s0, s15
 800c45c:	f01e ff9a 	bl	802b394 <lrintf>
 800c460:	4603      	mov	r3, r0
 800c462:	b21a      	sxth	r2, r3
 800c464:	4b1a      	ldr	r3, [pc, #104]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c466:	805a      	strh	r2, [r3, #2]
       attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 800c468:	4b17      	ldr	r3, [pc, #92]	; (800c4c8 <imuUpdateEulerAngles+0xd0>)
 800c46a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c46e:	4b16      	ldr	r3, [pc, #88]	; (800c4c8 <imuUpdateEulerAngles+0xd0>)
 800c470:	ed93 7a00 	vldr	s14, [r3]
 800c474:	eef0 0a47 	vmov.f32	s1, s14
 800c478:	eeb0 0a67 	vmov.f32	s0, s15
 800c47c:	f7fe fdb2 	bl	800afe4 <atan2_approx>
 800c480:	eef0 7a40 	vmov.f32	s15, s0
 800c484:	eef1 7a67 	vneg.f32	s15, s15
 800c488:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c4cc <imuUpdateEulerAngles+0xd4>
 800c48c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c490:	eeb0 0a67 	vmov.f32	s0, s15
 800c494:	f01e ff7e 	bl	802b394 <lrintf>
 800c498:	4603      	mov	r3, r0
 800c49a:	b21a      	sxth	r2, r3
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c49e:	809a      	strh	r2, [r3, #4]
    }

    if (attitude.values.yaw < 0) {
 800c4a0:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c4a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	da09      	bge.n	800c4be <imuUpdateEulerAngles+0xc6>
        attitude.values.yaw += 3600;
 800c4aa:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c4ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	b21a      	sxth	r2, r3
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <imuUpdateEulerAngles+0xd8>)
 800c4bc:	809a      	strh	r2, [r3, #4]
    }
}
 800c4be:	bf00      	nop
 800c4c0:	3728      	adds	r7, #40	; 0x28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	200006e4 	.word	0x200006e4
 800c4cc:	440f3d4c 	.word	0x440f3d4c
 800c4d0:	20000708 	.word	0x20000708
 800c4d4:	3fc90fdb 	.word	0x3fc90fdb

0800c4d8 <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude(uint32_t currentTimeUs)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	ed2d 8b08 	vpush	{d8-d11}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    static uint32_t previousIMUUpdateTime;
    bool useAcc = false;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	77bb      	strb	r3, [r7, #30]
    bool useCOG = false; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	777b      	strb	r3, [r7, #29]
    float courseOverGround = 0; // To be used when useCOG is true.  Stored in Radians
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	61bb      	str	r3, [r7, #24]

    const int32_t deltaT = currentTimeUs - previousIMUUpdateTime;
 800c4f6:	4b32      	ldr	r3, [pc, #200]	; (800c5c0 <imuCalculateEstimatedAttitude+0xe8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	617b      	str	r3, [r7, #20]
    previousIMUUpdateTime = currentTimeUs;
 800c500:	4a2f      	ldr	r2, [pc, #188]	; (800c5c0 <imuCalculateEstimatedAttitude+0xe8>)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6013      	str	r3, [r2, #0]
            useCOG = false; // Don't use the COG when we first reinitialize.  Next time around though, yes.
        }
    }
    #endif
    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	4618      	mov	r0, r3
 800c50c:	f004 fa32 	bl	8010974 <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 800c510:	482c      	ldr	r0, [pc, #176]	; (800c5c4 <imuCalculateEstimatedAttitude+0xec>)
 800c512:	f003 f807 	bl	800f524 <accGetAccumulationAverage>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <imuCalculateEstimatedAttitude+0x4e>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 800c51c:	4829      	ldr	r0, [pc, #164]	; (800c5c4 <imuCalculateEstimatedAttitude+0xec>)
 800c51e:	f7ff fe5f 	bl	800c1e0 <imuIsAccelerometerHealthy>
 800c522:	4603      	mov	r3, r0
 800c524:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	ee07 3a90 	vmov	s15, r3
 800c52c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c530:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c5c8 <imuCalculateEstimatedAttitude+0xf0>
 800c534:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 800c538:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800c53c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c5cc <imuCalculateEstimatedAttitude+0xf4>
 800c540:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 800c544:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800c548:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c5cc <imuCalculateEstimatedAttitude+0xf4>
 800c54c:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 800c550:	edd7 7a04 	vldr	s15, [r7, #16]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800c554:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c5cc <imuCalculateEstimatedAttitude+0xf4>
 800c558:	ee67 9a87 	vmul.f32	s19, s15, s14
 800c55c:	4b19      	ldr	r3, [pc, #100]	; (800c5c4 <imuCalculateEstimatedAttitude+0xec>)
 800c55e:	ed93 aa00 	vldr	s20, [r3]
 800c562:	4b18      	ldr	r3, [pc, #96]	; (800c5c4 <imuCalculateEstimatedAttitude+0xec>)
 800c564:	edd3 aa01 	vldr	s21, [r3, #4]
 800c568:	4b16      	ldr	r3, [pc, #88]	; (800c5c4 <imuCalculateEstimatedAttitude+0xec>)
 800c56a:	ed93 ba02 	vldr	s22, [r3, #8]
 800c56e:	f107 0208 	add.w	r2, r7, #8
 800c572:	7ffb      	ldrb	r3, [r7, #31]
 800c574:	4619      	mov	r1, r3
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff fe84 	bl	800c284 <imuCalcKpGain>
 800c57c:	eef0 7a40 	vmov.f32	s15, s0
 800c580:	7f7a      	ldrb	r2, [r7, #29]
 800c582:	7fb9      	ldrb	r1, [r7, #30]
 800c584:	7ffb      	ldrb	r3, [r7, #31]
 800c586:	eeb0 4a67 	vmov.f32	s8, s15
 800c58a:	edd7 3a06 	vldr	s7, [r7, #24]
 800c58e:	eeb0 3a4b 	vmov.f32	s6, s22
 800c592:	eef0 2a6a 	vmov.f32	s5, s21
 800c596:	eeb0 2a4a 	vmov.f32	s4, s20
 800c59a:	4618      	mov	r0, r3
 800c59c:	eef0 1a69 	vmov.f32	s3, s19
 800c5a0:	eeb0 1a49 	vmov.f32	s2, s18
 800c5a4:	eef0 0a68 	vmov.f32	s1, s17
 800c5a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c5ac:	f7ff fba0 	bl	800bcf0 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 800c5b0:	f7ff ff22 	bl	800c3f8 <imuUpdateEulerAngles>
}
 800c5b4:	bf00      	nop
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	ecbd 8b08 	vpop	{d8-d11}
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20000724 	.word	0x20000724
 800c5c4:	200006d8 	.word	0x200006d8
 800c5c8:	358637bd 	.word	0x358637bd
 800c5cc:	3c8efa35 	.word	0x3c8efa35

0800c5d0 <cliSensor>:
}
#endif

#ifdef _USE_HW_CLI
void cliSensor(cli_args_t *args)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d10d      	bne.n	800c600 <cliSensor+0x30>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	490e      	ldr	r1, [pc, #56]	; (800c624 <cliSensor+0x54>)
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	4798      	blx	r3
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <cliSensor+0x30>
  {
    while(cliKeepLoop())
 800c5f4:	bf00      	nop
 800c5f6:	f006 f823 	bl	8012640 <cliKeepLoop>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1fa      	bne.n	800c5f6 <cliSensor+0x26>
    {
  
    }
	}

    ret = true;
 800c600:	2301      	movs	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]

  if (ret != true)
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	f083 0301 	eor.w	r3, r3, #1
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d005      	beq.n	800c61c <cliSensor+0x4c>
  {
    cliPrintf("lcd test\n");
 800c610:	4805      	ldr	r0, [pc, #20]	; (800c628 <cliSensor+0x58>)
 800c612:	f005 ff1b 	bl	801244c <cliPrintf>
    cliPrintf("lcd image\n");
 800c616:	4805      	ldr	r0, [pc, #20]	; (800c62c <cliSensor+0x5c>)
 800c618:	f005 ff18 	bl	801244c <cliPrintf>
  }
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	0802bc20 	.word	0x0802bc20
 800c628:	0802bc28 	.word	0x0802bc28
 800c62c:	0802bc34 	.word	0x0802bc34

0800c630 <SerialCom>:
	tailSerialReply();
}
///////////////////////////////////////////////////

void SerialCom(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t timeMax; // limit max time in this function in case of GPS
	timeMax = micros();
 800c636:	f7fc fdfd 	bl	8009234 <micros>
 800c63a:	60f8      	str	r0, [r7, #12]
	int i = 1;
 800c63c:	2301      	movs	r3, #1
 800c63e:	60bb      	str	r3, [r7, #8]
#ifndef _USE_HW_CLI
	for(int i = 0; i < 2; i++)
	{
#endif
		currentPortState = &ports[i];
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2286      	movs	r2, #134	; 0x86
 800c644:	fb02 f303 	mul.w	r3, r2, r3
 800c648:	4a6f      	ldr	r2, [pc, #444]	; (800c808 <SerialCom+0x1d8>)
 800c64a:	4413      	add	r3, r2
 800c64c:	4a6f      	ldr	r2, [pc, #444]	; (800c80c <SerialCom+0x1dc>)
 800c64e:	6013      	str	r3, [r2, #0]
		CURRENTPORT = i;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	b2da      	uxtb	r2, r3
 800c654:	4b6e      	ldr	r3, [pc, #440]	; (800c810 <SerialCom+0x1e0>)
 800c656:	701a      	strb	r2, [r3, #0]
		while(uartAvailable(CURRENTPORT) > 0)
 800c658:	e0c8      	b.n	800c7ec <SerialCom+0x1bc>
		{
			c = uartRead(CURRENTPORT);
 800c65a:	4b6d      	ldr	r3, [pc, #436]	; (800c810 <SerialCom+0x1e0>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	4618      	mov	r0, r3
 800c660:	f009 f844 	bl	80156ec <uartRead>
 800c664:	4603      	mov	r3, r0
 800c666:	71fb      	strb	r3, [r7, #7]
			if (currentPortState->c_state == IDLE)
 800c668:	4b68      	ldr	r3, [pc, #416]	; (800c80c <SerialCom+0x1dc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10a      	bne.n	800c68a <SerialCom+0x5a>
			{
				currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	2b24      	cmp	r3, #36	; 0x24
 800c678:	bf0c      	ite	eq
 800c67a:	2301      	moveq	r3, #1
 800c67c:	2300      	movne	r3, #0
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	4b62      	ldr	r3, [pc, #392]	; (800c80c <SerialCom+0x1dc>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800c688:	e0b0      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_START)
 800c68a:	4b60      	ldr	r3, [pc, #384]	; (800c80c <SerialCom+0x1dc>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c692:	2b01      	cmp	r3, #1
 800c694:	d10a      	bne.n	800c6ac <SerialCom+0x7c>
			{
				currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	2b4d      	cmp	r3, #77	; 0x4d
 800c69a:	d101      	bne.n	800c6a0 <SerialCom+0x70>
 800c69c:	2202      	movs	r2, #2
 800c69e:	e000      	b.n	800c6a2 <SerialCom+0x72>
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	4b5a      	ldr	r3, [pc, #360]	; (800c80c <SerialCom+0x1dc>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800c6aa:	e09f      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_M)
 800c6ac:	4b57      	ldr	r3, [pc, #348]	; (800c80c <SerialCom+0x1dc>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d10a      	bne.n	800c6ce <SerialCom+0x9e>
			{
				currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	2b3c      	cmp	r3, #60	; 0x3c
 800c6bc:	d101      	bne.n	800c6c2 <SerialCom+0x92>
 800c6be:	2203      	movs	r2, #3
 800c6c0:	e000      	b.n	800c6c4 <SerialCom+0x94>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4b51      	ldr	r3, [pc, #324]	; (800c80c <SerialCom+0x1dc>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800c6cc:	e08e      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_ARROW)
 800c6ce:	4b4f      	ldr	r3, [pc, #316]	; (800c80c <SerialCom+0x1dc>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c6d6:	2b03      	cmp	r3, #3
 800c6d8:	d129      	bne.n	800c72e <SerialCom+0xfe>
			{
				if (c > INBUF_SIZE)
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	2b80      	cmp	r3, #128	; 0x80
 800c6de:	d905      	bls.n	800c6ec <SerialCom+0xbc>
				{  // now we are expecting the payload size
					currentPortState->c_state = IDLE;
 800c6e0:	4b4a      	ldr	r3, [pc, #296]	; (800c80c <SerialCom+0x1dc>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					continue;
 800c6ea:	e07f      	b.n	800c7ec <SerialCom+0x1bc>
				}
				currentPortState->dataSize = c;
 800c6ec:	4b47      	ldr	r3, [pc, #284]	; (800c80c <SerialCom+0x1dc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	79fa      	ldrb	r2, [r7, #7]
 800c6f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				currentPortState->offset = 0;
 800c6f6:	4b45      	ldr	r3, [pc, #276]	; (800c80c <SerialCom+0x1dc>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				currentPortState->indRX = 0;
 800c700:	4b42      	ldr	r3, [pc, #264]	; (800c80c <SerialCom+0x1dc>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2200      	movs	r2, #0
 800c706:	705a      	strb	r2, [r3, #1]
				currentPortState->checksum = 0;
 800c708:	4b40      	ldr	r3, [pc, #256]	; (800c80c <SerialCom+0x1dc>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2200      	movs	r2, #0
 800c70e:	701a      	strb	r2, [r3, #0]
				currentPortState->checksum ^= c;
 800c710:	4b3e      	ldr	r3, [pc, #248]	; (800c80c <SerialCom+0x1dc>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	7819      	ldrb	r1, [r3, #0]
 800c716:	4b3d      	ldr	r3, [pc, #244]	; (800c80c <SerialCom+0x1dc>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	79fa      	ldrb	r2, [r7, #7]
 800c71c:	404a      	eors	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_SIZE;
 800c722:	4b3a      	ldr	r3, [pc, #232]	; (800c80c <SerialCom+0x1dc>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2204      	movs	r2, #4
 800c728:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800c72c:	e05e      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_SIZE)
 800c72e:	4b37      	ldr	r3, [pc, #220]	; (800c80c <SerialCom+0x1dc>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c736:	2b04      	cmp	r3, #4
 800c738:	d113      	bne.n	800c762 <SerialCom+0x132>
			{
				currentPortState->cmdMSP = c;
 800c73a:	4b34      	ldr	r3, [pc, #208]	; (800c80c <SerialCom+0x1dc>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	79fa      	ldrb	r2, [r7, #7]
 800c740:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				currentPortState->checksum ^= c;
 800c744:	4b31      	ldr	r3, [pc, #196]	; (800c80c <SerialCom+0x1dc>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	7819      	ldrb	r1, [r3, #0]
 800c74a:	4b30      	ldr	r3, [pc, #192]	; (800c80c <SerialCom+0x1dc>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	79fa      	ldrb	r2, [r7, #7]
 800c750:	404a      	eors	r2, r1
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_CMD;
 800c756:	4b2d      	ldr	r3, [pc, #180]	; (800c80c <SerialCom+0x1dc>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2205      	movs	r2, #5
 800c75c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800c760:	e044      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 800c762:	4b2a      	ldr	r3, [pc, #168]	; (800c80c <SerialCom+0x1dc>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c76a:	2b05      	cmp	r3, #5
 800c76c:	d121      	bne.n	800c7b2 <SerialCom+0x182>
 800c76e:	4b27      	ldr	r3, [pc, #156]	; (800c80c <SerialCom+0x1dc>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 800c776:	4b25      	ldr	r3, [pc, #148]	; (800c80c <SerialCom+0x1dc>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c77e:	429a      	cmp	r2, r3
 800c780:	d217      	bcs.n	800c7b2 <SerialCom+0x182>
			{
				currentPortState->checksum ^= c;
 800c782:	4b22      	ldr	r3, [pc, #136]	; (800c80c <SerialCom+0x1dc>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	7819      	ldrb	r1, [r3, #0]
 800c788:	4b20      	ldr	r3, [pc, #128]	; (800c80c <SerialCom+0x1dc>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	79fa      	ldrb	r2, [r7, #7]
 800c78e:	404a      	eors	r2, r1
 800c790:	b2d2      	uxtb	r2, r2
 800c792:	701a      	strb	r2, [r3, #0]
				currentPortState->inBuf[currentPortState->offset++] = c;
 800c794:	4b1d      	ldr	r3, [pc, #116]	; (800c80c <SerialCom+0x1dc>)
 800c796:	6819      	ldr	r1, [r3, #0]
 800c798:	4b1c      	ldr	r3, [pc, #112]	; (800c80c <SerialCom+0x1dc>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 800c7a0:	1c50      	adds	r0, r2, #1
 800c7a2:	b2c0      	uxtb	r0, r0
 800c7a4:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	440b      	add	r3, r1
 800c7ac:	79fa      	ldrb	r2, [r7, #7]
 800c7ae:	709a      	strb	r2, [r3, #2]
 800c7b0:	e01c      	b.n	800c7ec <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 800c7b2:	4b16      	ldr	r3, [pc, #88]	; (800c80c <SerialCom+0x1dc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800c7ba:	2b05      	cmp	r3, #5
 800c7bc:	d116      	bne.n	800c7ec <SerialCom+0x1bc>
 800c7be:	4b13      	ldr	r3, [pc, #76]	; (800c80c <SerialCom+0x1dc>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 800c7c6:	4b11      	ldr	r3, [pc, #68]	; (800c80c <SerialCom+0x1dc>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d30c      	bcc.n	800c7ec <SerialCom+0x1bc>
			{
				if (currentPortState->checksum == c)
 800c7d2:	4b0e      	ldr	r3, [pc, #56]	; (800c80c <SerialCom+0x1dc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	79fa      	ldrb	r2, [r7, #7]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d101      	bne.n	800c7e2 <SerialCom+0x1b2>
				{
					evaluateCommand();
 800c7de:	f000 f819 	bl	800c814 <evaluateCommand>
				}
				currentPortState->c_state = IDLE;
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <SerialCom+0x1dc>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		while(uartAvailable(CURRENTPORT) > 0)
 800c7ec:	4b08      	ldr	r3, [pc, #32]	; (800c810 <SerialCom+0x1e0>)
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f008 fe8b 	bl	801550c <uartAvailable>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f47f af2e 	bne.w	800c65a <SerialCom+0x2a>
#endif
		}
#ifndef _USE_HW_CLI
	}
#endif
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	20000728 	.word	0x20000728
 800c80c:	200001d8 	.word	0x200001d8
 800c810:	20003ea6 	.word	0x20003ea6

0800c814 <evaluateCommand>:

void evaluateCommand(void)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
	uint8_t i=0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp=0;
 800c81e:	2300      	movs	r3, #0
 800c820:	603b      	str	r3, [r7, #0]
	switch(currentPortState->cmdMSP)
 800c822:	4b42      	ldr	r3, [pc, #264]	; (800c92c <evaluateCommand+0x118>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c82a:	3b65      	subs	r3, #101	; 0x65
 800c82c:	2b33      	cmp	r3, #51	; 0x33
 800c82e:	d875      	bhi.n	800c91c <evaluateCommand+0x108>
 800c830:	a201      	add	r2, pc, #4	; (adr r2, 800c838 <evaluateCommand+0x24>)
 800c832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c836:	bf00      	nop
 800c838:	0800c91d 	.word	0x0800c91d
 800c83c:	0800c91d 	.word	0x0800c91d
 800c840:	0800c91d 	.word	0x0800c91d
 800c844:	0800c91d 	.word	0x0800c91d
 800c848:	0800c91d 	.word	0x0800c91d
 800c84c:	0800c91d 	.word	0x0800c91d
 800c850:	0800c91d 	.word	0x0800c91d
 800c854:	0800c91d 	.word	0x0800c91d
 800c858:	0800c91d 	.word	0x0800c91d
 800c85c:	0800c91d 	.word	0x0800c91d
 800c860:	0800c91d 	.word	0x0800c91d
 800c864:	0800c91d 	.word	0x0800c91d
 800c868:	0800c91d 	.word	0x0800c91d
 800c86c:	0800c91d 	.word	0x0800c91d
 800c870:	0800c91d 	.word	0x0800c91d
 800c874:	0800c91d 	.word	0x0800c91d
 800c878:	0800c91d 	.word	0x0800c91d
 800c87c:	0800c91d 	.word	0x0800c91d
 800c880:	0800c91d 	.word	0x0800c91d
 800c884:	0800c91d 	.word	0x0800c91d
 800c888:	0800c91d 	.word	0x0800c91d
 800c88c:	0800c91d 	.word	0x0800c91d
 800c890:	0800c91d 	.word	0x0800c91d
 800c894:	0800c91d 	.word	0x0800c91d
 800c898:	0800c91d 	.word	0x0800c91d
 800c89c:	0800c91d 	.word	0x0800c91d
 800c8a0:	0800c91d 	.word	0x0800c91d
 800c8a4:	0800c91d 	.word	0x0800c91d
 800c8a8:	0800c91d 	.word	0x0800c91d
 800c8ac:	0800c91d 	.word	0x0800c91d
 800c8b0:	0800c91d 	.word	0x0800c91d
 800c8b4:	0800c91d 	.word	0x0800c91d
 800c8b8:	0800c91d 	.word	0x0800c91d
 800c8bc:	0800c91d 	.word	0x0800c91d
 800c8c0:	0800c91d 	.word	0x0800c91d
 800c8c4:	0800c91d 	.word	0x0800c91d
 800c8c8:	0800c91d 	.word	0x0800c91d
 800c8cc:	0800c91d 	.word	0x0800c91d
 800c8d0:	0800c91d 	.word	0x0800c91d
 800c8d4:	0800c91d 	.word	0x0800c91d
 800c8d8:	0800c91d 	.word	0x0800c91d
 800c8dc:	0800c91d 	.word	0x0800c91d
 800c8e0:	0800c91d 	.word	0x0800c91d
 800c8e4:	0800c91d 	.word	0x0800c91d
 800c8e8:	0800c91d 	.word	0x0800c91d
 800c8ec:	0800c91d 	.word	0x0800c91d
 800c8f0:	0800c91d 	.word	0x0800c91d
 800c8f4:	0800c91d 	.word	0x0800c91d
 800c8f8:	0800c91d 	.word	0x0800c91d
 800c8fc:	0800c909 	.word	0x0800c909
 800c900:	0800c91d 	.word	0x0800c91d
 800c904:	0800c91d 	.word	0x0800c91d
		case MSP_DISARM:
			//mwDisarm();
			break;

		case MSP_RC_RAW:
			for(i=0; i < 5; i++)
 800c908:	2300      	movs	r3, #0
 800c90a:	71fb      	strb	r3, [r7, #7]
 800c90c:	e002      	b.n	800c914 <evaluateCommand+0x100>
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	3301      	adds	r3, #1
 800c912:	71fb      	strb	r3, [r7, #7]
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	2b04      	cmp	r3, #4
 800c918:	d9f9      	bls.n	800c90e <evaluateCommand+0xfa>
			//RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
			// RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
			// RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
			// RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
			// RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
			break;
 800c91a:	e000      	b.n	800c91e <evaluateCommand+0x10a>
		// 	break;

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 800c91c:	bf00      	nop
	}

}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	200001d8 	.word	0x200001d8

0800c930 <cmpTimeUs>:
#include "rx/rx.h"
#include "rx/crsf.h"
#include "pg.h"

//#include "telemetry/crsf.h"
static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	4618      	mov	r0, r3
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <crsfFrameCRC>:
    }
}
#endif

static uint8_t crsfFrameCRC(void)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
    // CRC includes type and payload
    uint8_t crc = crc8_dvb_s2(0, crsfFrame.frame.type);
 800c952:	4b13      	ldr	r3, [pc, #76]	; (800c9a0 <crsfFrameCRC+0x54>)
 800c954:	789b      	ldrb	r3, [r3, #2]
 800c956:	22d5      	movs	r2, #213	; 0xd5
 800c958:	4619      	mov	r1, r3
 800c95a:	2000      	movs	r0, #0
 800c95c:	f004 fba2 	bl	80110a4 <crc8_calc>
 800c960:	4603      	mov	r3, r0
 800c962:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC; ++ii) {
 800c964:	2300      	movs	r3, #0
 800c966:	603b      	str	r3, [r7, #0]
 800c968:	e00e      	b.n	800c988 <crsfFrameCRC+0x3c>
        crc = crc8_dvb_s2(crc, crsfFrame.frame.payload[ii]);
 800c96a:	4a0d      	ldr	r2, [pc, #52]	; (800c9a0 <crsfFrameCRC+0x54>)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	4413      	add	r3, r2
 800c970:	3303      	adds	r3, #3
 800c972:	7819      	ldrb	r1, [r3, #0]
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	22d5      	movs	r2, #213	; 0xd5
 800c978:	4618      	mov	r0, r3
 800c97a:	f004 fb93 	bl	80110a4 <crc8_calc>
 800c97e:	4603      	mov	r3, r0
 800c980:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < crsfFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC; ++ii) {
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <crsfFrameCRC+0x54>)
 800c98a:	785b      	ldrb	r3, [r3, #1]
 800c98c:	3b02      	subs	r3, #2
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	dbea      	blt.n	800c96a <crsfFrameCRC+0x1e>
    }
    return crc;
 800c994:	79fb      	ldrb	r3, [r7, #7]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20000834 	.word	0x20000834

0800c9a4 <crsfDataReceive>:
    return crc;
}

// Receive ISR callback, called back from serial port
void crsfDataReceive(uint16_t c, void *data)
{
 800c9a4:	b5b0      	push	{r4, r5, r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	6039      	str	r1, [r7, #0]
 800c9ae:	80fb      	strh	r3, [r7, #6]
    rxRuntimeState_t *const rxRuntimeState = (rxRuntimeState_t *const)data;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	61fb      	str	r3, [r7, #28]

    static uint8_t crsfFramePosition = 0;
#if defined(USE_CRSF_V3)
    static uint8_t crsfFrameErrorCnt = 0;
#endif
    const uint32_t currentTimeUs = micros();
 800c9b4:	f7fc fc3e 	bl	8009234 <micros>
 800c9b8:	61b8      	str	r0, [r7, #24]

#ifdef DEBUG_CRSF_PACKETS
    debug[2] = currentTimeUs - crsfFrameStartAtUs;
#endif

    if (cmpTimeUs(currentTimeUs, crsfFrameStartAtUs) > CRSF_TIME_NEEDED_PER_FRAME_US) {
 800c9ba:	4b38      	ldr	r3, [pc, #224]	; (800ca9c <crsfDataReceive+0xf8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	69b8      	ldr	r0, [r7, #24]
 800c9c2:	f7ff ffb5 	bl	800c930 <cmpTimeUs>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	dd02      	ble.n	800c9d6 <crsfDataReceive+0x32>
        if (crsfFramePosition > 0) {
            // count an error if full valid frame not received within the allowed time.
            crsfFrameErrorCnt++;
        }
#endif
        crsfFramePosition = 0;
 800c9d0:	4b33      	ldr	r3, [pc, #204]	; (800caa0 <crsfDataReceive+0xfc>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
    }

    if (crsfFramePosition == 0) {
 800c9d6:	4b32      	ldr	r3, [pc, #200]	; (800caa0 <crsfDataReceive+0xfc>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d102      	bne.n	800c9e4 <crsfDataReceive+0x40>
        crsfFrameStartAtUs = currentTimeUs;
 800c9de:	4a2f      	ldr	r2, [pc, #188]	; (800ca9c <crsfDataReceive+0xf8>)
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	6013      	str	r3, [r2, #0]
    }
    // assume frame is 5 bytes long until we have received the frame length
    // full frame length includes the length of the address and framelength fields
    // sometimes we can receive some garbage data. So, we need to check max size for preventing buffer overrun.
    const int fullFrameLength = crsfFramePosition < 3 ? 5 : MIN(crsfFrame.frame.frameLength + CRSF_FRAME_LENGTH_ADDRESS + CRSF_FRAME_LENGTH_FRAMELENGTH, CRSF_FRAME_SIZE_MAX);
 800c9e4:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <crsfDataReceive+0xfc>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d90b      	bls.n	800ca04 <crsfDataReceive+0x60>
 800c9ec:	4b2d      	ldr	r3, [pc, #180]	; (800caa4 <crsfDataReceive+0x100>)
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	613b      	str	r3, [r7, #16]
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	bfa8      	it	ge
 800ca00:	4613      	movge	r3, r2
 800ca02:	e000      	b.n	800ca06 <crsfDataReceive+0x62>
 800ca04:	2305      	movs	r3, #5
 800ca06:	60fb      	str	r3, [r7, #12]

    if (crsfFramePosition < fullFrameLength) {
 800ca08:	4b25      	ldr	r3, [pc, #148]	; (800caa0 <crsfDataReceive+0xfc>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4293      	cmp	r3, r2
 800ca12:	dd3f      	ble.n	800ca94 <crsfDataReceive+0xf0>
        crsfFrame.bytes[crsfFramePosition++] = (uint8_t)c;
 800ca14:	4b22      	ldr	r3, [pc, #136]	; (800caa0 <crsfDataReceive+0xfc>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	b2d1      	uxtb	r1, r2
 800ca1c:	4a20      	ldr	r2, [pc, #128]	; (800caa0 <crsfDataReceive+0xfc>)
 800ca1e:	7011      	strb	r1, [r2, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	88fb      	ldrh	r3, [r7, #6]
 800ca24:	b2d9      	uxtb	r1, r3
 800ca26:	4b1f      	ldr	r3, [pc, #124]	; (800caa4 <crsfDataReceive+0x100>)
 800ca28:	5499      	strb	r1, [r3, r2]
        if (crsfFramePosition >= fullFrameLength) {
 800ca2a:	4b1d      	ldr	r3, [pc, #116]	; (800caa0 <crsfDataReceive+0xfc>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4293      	cmp	r3, r2
 800ca34:	dc2e      	bgt.n	800ca94 <crsfDataReceive+0xf0>
            crsfFramePosition = 0;
 800ca36:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <crsfDataReceive+0xfc>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
            const uint8_t crc = crsfFrameCRC();
 800ca3c:	f7ff ff86 	bl	800c94c <crsfFrameCRC>
 800ca40:	4603      	mov	r3, r0
 800ca42:	72fb      	strb	r3, [r7, #11]
            if (crc == crsfFrame.bytes[fullFrameLength - 1]) {
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	4a16      	ldr	r2, [pc, #88]	; (800caa4 <crsfDataReceive+0x100>)
 800ca4a:	5cd3      	ldrb	r3, [r2, r3]
 800ca4c:	7afa      	ldrb	r2, [r7, #11]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d120      	bne.n	800ca94 <crsfDataReceive+0xf0>
#if defined(USE_CRSF_V3)
                crsfFrameErrorCnt = 0;
#endif
                switch (crsfFrame.frame.type) {
 800ca52:	4b14      	ldr	r3, [pc, #80]	; (800caa4 <crsfDataReceive+0x100>)
 800ca54:	789b      	ldrb	r3, [r3, #2]
 800ca56:	3b16      	subs	r3, #22
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d818      	bhi.n	800ca8e <crsfDataReceive+0xea>
                case CRSF_FRAMETYPE_RC_CHANNELS_PACKED:
                case CRSF_FRAMETYPE_SUBSET_RC_CHANNELS_PACKED:
                    if (crsfFrame.frame.deviceAddress == CRSF_ADDRESS_FLIGHT_CONTROLLER) {
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <crsfDataReceive+0x100>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2bc8      	cmp	r3, #200	; 0xc8
 800ca62:	d116      	bne.n	800ca92 <crsfDataReceive+0xee>
                        rxRuntimeState->lastRcFrameTimeUs = currentTimeUs;
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	621a      	str	r2, [r3, #32]
                        crsfFrameDone = true;
 800ca6a:	4b0f      	ldr	r3, [pc, #60]	; (800caa8 <crsfDataReceive+0x104>)
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	701a      	strb	r2, [r3, #0]
                        memcpy(&crsfChannelDataFrame, &crsfFrame, sizeof(crsfFrame));
 800ca70:	4a0e      	ldr	r2, [pc, #56]	; (800caac <crsfDataReceive+0x108>)
 800ca72:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <crsfDataReceive+0x100>)
 800ca74:	4614      	mov	r4, r2
 800ca76:	461d      	mov	r5, r3
 800ca78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    }
                    break;
 800ca8c:	e001      	b.n	800ca92 <crsfDataReceive+0xee>
                        //crsfProcessCommand(crsfFrame.frame.payload + CRSF_FRAME_ORIGIN_DEST_SIZE);
                    }
                    break;
#endif
                default:
                    break;
 800ca8e:	bf00      	nop
 800ca90:	e000      	b.n	800ca94 <crsfDataReceive+0xf0>
                    break;
 800ca92:	bf00      	nop
            setCrsfDefaultSpeed();
            crsfFrameErrorCnt = 0;
        }
#endif
    }
}
 800ca94:	bf00      	nop
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca9c:	200008f4 	.word	0x200008f4
 800caa0:	20003ea8 	.word	0x20003ea8
 800caa4:	20000834 	.word	0x20000834
 800caa8:	20003ea7 	.word	0x20003ea7
 800caac:	20000874 	.word	0x20000874

0800cab0 <crsfFrameStatus>:

static uint8_t crsfFrameStatus(rxRuntimeState_t *rxRuntimeState)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b08b      	sub	sp, #44	; 0x2c
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
    UNUSED(rxRuntimeState);

#if defined(USE_CRSF_LINK_STATISTICS)
    crsfCheckRssi(micros());
#endif
    if (crsfFrameDone) {
 800cab8:	4ba6      	ldr	r3, [pc, #664]	; (800cd54 <crsfFrameStatus+0x2a4>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 8191 	beq.w	800cde4 <crsfFrameStatus+0x334>
        crsfFrameDone = false;
 800cac2:	4ba4      	ldr	r3, [pc, #656]	; (800cd54 <crsfFrameStatus+0x2a4>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]

        // unpack the RC channels
        if (crsfChannelDataFrame.frame.type == CRSF_FRAMETYPE_RC_CHANNELS_PACKED) {
 800cac8:	4ba3      	ldr	r3, [pc, #652]	; (800cd58 <crsfFrameStatus+0x2a8>)
 800caca:	789b      	ldrb	r3, [r3, #2]
 800cacc:	2b16      	cmp	r3, #22
 800cace:	f040 80da 	bne.w	800cc86 <crsfFrameStatus+0x1d6>
            // use ordinary RC frame structure (0x16)
            const crsfPayloadRcChannelsPacked_t* const rcChannels = (crsfPayloadRcChannelsPacked_t*)&crsfChannelDataFrame.frame.payload;
 800cad2:	4ba2      	ldr	r3, [pc, #648]	; (800cd5c <crsfFrameStatus+0x2ac>)
 800cad4:	60bb      	str	r3, [r7, #8]
            channelScale = CRSF_RC_CHANNEL_SCALE_LEGACY;
 800cad6:	4ba2      	ldr	r3, [pc, #648]	; (800cd60 <crsfFrameStatus+0x2b0>)
 800cad8:	4aa2      	ldr	r2, [pc, #648]	; (800cd64 <crsfFrameStatus+0x2b4>)
 800cada:	601a      	str	r2, [r3, #0]
            crsfChannelData[0] = rcChannels->chan0;
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	781a      	ldrb	r2, [r3, #0]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	021b      	lsls	r3, r3, #8
 800cae8:	4313      	orrs	r3, r2
 800caea:	b29b      	uxth	r3, r3
 800caec:	461a      	mov	r2, r3
 800caee:	4b9e      	ldr	r3, [pc, #632]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800caf0:	601a      	str	r2, [r3, #0]
            crsfChannelData[1] = rcChannels->chan1;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	785a      	ldrb	r2, [r3, #1]
 800caf6:	08d2      	lsrs	r2, r2, #3
 800caf8:	b2d2      	uxtb	r2, r2
 800cafa:	789b      	ldrb	r3, [r3, #2]
 800cafc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb00:	015b      	lsls	r3, r3, #5
 800cb02:	4313      	orrs	r3, r2
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	461a      	mov	r2, r3
 800cb08:	4b97      	ldr	r3, [pc, #604]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb0a:	605a      	str	r2, [r3, #4]
            crsfChannelData[2] = rcChannels->chan2;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	789a      	ldrb	r2, [r3, #2]
 800cb10:	0992      	lsrs	r2, r2, #6
 800cb12:	b2d2      	uxtb	r2, r2
 800cb14:	78d9      	ldrb	r1, [r3, #3]
 800cb16:	0089      	lsls	r1, r1, #2
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	029b      	lsls	r3, r3, #10
 800cb22:	4313      	orrs	r3, r2
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	4b8f      	ldr	r3, [pc, #572]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb2a:	609a      	str	r2, [r3, #8]
            crsfChannelData[3] = rcChannels->chan3;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	791a      	ldrb	r2, [r3, #4]
 800cb30:	0852      	lsrs	r2, r2, #1
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	795b      	ldrb	r3, [r3, #5]
 800cb36:	f003 030f 	and.w	r3, r3, #15
 800cb3a:	01db      	lsls	r3, r3, #7
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	461a      	mov	r2, r3
 800cb42:	4b89      	ldr	r3, [pc, #548]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb44:	60da      	str	r2, [r3, #12]
            crsfChannelData[4] = rcChannels->chan4;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	795a      	ldrb	r2, [r3, #5]
 800cb4a:	0912      	lsrs	r2, r2, #4
 800cb4c:	b2d2      	uxtb	r2, r2
 800cb4e:	799b      	ldrb	r3, [r3, #6]
 800cb50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	4313      	orrs	r3, r2
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	4b82      	ldr	r3, [pc, #520]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb5e:	611a      	str	r2, [r3, #16]
            crsfChannelData[5] = rcChannels->chan5;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	799a      	ldrb	r2, [r3, #6]
 800cb64:	09d2      	lsrs	r2, r2, #7
 800cb66:	b2d2      	uxtb	r2, r2
 800cb68:	79d9      	ldrb	r1, [r3, #7]
 800cb6a:	0049      	lsls	r1, r1, #1
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	7a1b      	ldrb	r3, [r3, #8]
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	025b      	lsls	r3, r3, #9
 800cb76:	4313      	orrs	r3, r2
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	4b7a      	ldr	r3, [pc, #488]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb7e:	615a      	str	r2, [r3, #20]
            crsfChannelData[6] = rcChannels->chan6;
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	7a1a      	ldrb	r2, [r3, #8]
 800cb84:	0892      	lsrs	r2, r2, #2
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	7a5b      	ldrb	r3, [r3, #9]
 800cb8a:	f003 031f 	and.w	r3, r3, #31
 800cb8e:	019b      	lsls	r3, r3, #6
 800cb90:	4313      	orrs	r3, r2
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	461a      	mov	r2, r3
 800cb96:	4b74      	ldr	r3, [pc, #464]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cb98:	619a      	str	r2, [r3, #24]
            crsfChannelData[7] = rcChannels->chan7;
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	7a5a      	ldrb	r2, [r3, #9]
 800cb9e:	0952      	lsrs	r2, r2, #5
 800cba0:	b2d2      	uxtb	r2, r2
 800cba2:	7a9b      	ldrb	r3, [r3, #10]
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	4313      	orrs	r3, r2
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	461a      	mov	r2, r3
 800cbac:	4b6e      	ldr	r3, [pc, #440]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cbae:	61da      	str	r2, [r3, #28]
            crsfChannelData[8] = rcChannels->chan8;
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	7ada      	ldrb	r2, [r3, #11]
 800cbb4:	7b1b      	ldrb	r3, [r3, #12]
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	4b69      	ldr	r3, [pc, #420]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cbc4:	621a      	str	r2, [r3, #32]
            crsfChannelData[9] = rcChannels->chan9;
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	7b1a      	ldrb	r2, [r3, #12]
 800cbca:	08d2      	lsrs	r2, r2, #3
 800cbcc:	b2d2      	uxtb	r2, r2
 800cbce:	7b5b      	ldrb	r3, [r3, #13]
 800cbd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbd4:	015b      	lsls	r3, r3, #5
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4b62      	ldr	r3, [pc, #392]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cbde:	625a      	str	r2, [r3, #36]	; 0x24
            crsfChannelData[10] = rcChannels->chan10;
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	7b5a      	ldrb	r2, [r3, #13]
 800cbe4:	0992      	lsrs	r2, r2, #6
 800cbe6:	b2d2      	uxtb	r2, r2
 800cbe8:	7b99      	ldrb	r1, [r3, #14]
 800cbea:	0089      	lsls	r1, r1, #2
 800cbec:	430a      	orrs	r2, r1
 800cbee:	7bdb      	ldrb	r3, [r3, #15]
 800cbf0:	f003 0301 	and.w	r3, r3, #1
 800cbf4:	029b      	lsls	r3, r3, #10
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	4b5a      	ldr	r3, [pc, #360]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cbfe:	629a      	str	r2, [r3, #40]	; 0x28
            crsfChannelData[11] = rcChannels->chan11;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	7bda      	ldrb	r2, [r3, #15]
 800cc04:	0852      	lsrs	r2, r2, #1
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	7c1b      	ldrb	r3, [r3, #16]
 800cc0a:	f003 030f 	and.w	r3, r3, #15
 800cc0e:	01db      	lsls	r3, r3, #7
 800cc10:	4313      	orrs	r3, r2
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	4b54      	ldr	r3, [pc, #336]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cc18:	62da      	str	r2, [r3, #44]	; 0x2c
            crsfChannelData[12] = rcChannels->chan12;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	7c1a      	ldrb	r2, [r3, #16]
 800cc1e:	0912      	lsrs	r2, r2, #4
 800cc20:	b2d2      	uxtb	r2, r2
 800cc22:	7c5b      	ldrb	r3, [r3, #17]
 800cc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	461a      	mov	r2, r3
 800cc30:	4b4d      	ldr	r3, [pc, #308]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cc32:	631a      	str	r2, [r3, #48]	; 0x30
            crsfChannelData[13] = rcChannels->chan13;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	7c5a      	ldrb	r2, [r3, #17]
 800cc38:	09d2      	lsrs	r2, r2, #7
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	7c99      	ldrb	r1, [r3, #18]
 800cc3e:	0049      	lsls	r1, r1, #1
 800cc40:	430a      	orrs	r2, r1
 800cc42:	7cdb      	ldrb	r3, [r3, #19]
 800cc44:	f003 0303 	and.w	r3, r3, #3
 800cc48:	025b      	lsls	r3, r3, #9
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	461a      	mov	r2, r3
 800cc50:	4b45      	ldr	r3, [pc, #276]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cc52:	635a      	str	r2, [r3, #52]	; 0x34
            crsfChannelData[14] = rcChannels->chan14;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	7cda      	ldrb	r2, [r3, #19]
 800cc58:	0892      	lsrs	r2, r2, #2
 800cc5a:	b2d2      	uxtb	r2, r2
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	f003 031f 	and.w	r3, r3, #31
 800cc62:	019b      	lsls	r3, r3, #6
 800cc64:	4313      	orrs	r3, r2
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	461a      	mov	r2, r3
 800cc6a:	4b3f      	ldr	r3, [pc, #252]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cc6c:	639a      	str	r2, [r3, #56]	; 0x38
            crsfChannelData[15] = rcChannels->chan15;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	7d1a      	ldrb	r2, [r3, #20]
 800cc72:	0952      	lsrs	r2, r2, #5
 800cc74:	b2d2      	uxtb	r2, r2
 800cc76:	7d5b      	ldrb	r3, [r3, #21]
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4b39      	ldr	r3, [pc, #228]	; (800cd68 <crsfFrameStatus+0x2b8>)
 800cc82:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc84:	e0ac      	b.n	800cde0 <crsfFrameStatus+0x330>
        } else {
            // use subset RC frame structure (0x17)
            uint8_t readByteIndex = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            const uint8_t *payload = crsfChannelDataFrame.frame.payload;
 800cc8c:	4b33      	ldr	r3, [pc, #204]	; (800cd5c <crsfFrameStatus+0x2ac>)
 800cc8e:	617b      	str	r3, [r7, #20]

            // get the configuration byte
            uint8_t configByte = payload[readByteIndex++];
 800cc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	4413      	add	r3, r2
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	74fb      	strb	r3, [r7, #19]

            // get the channel number of start channel
            uint8_t startChannel = configByte & CRSF_SUBSET_RC_STARTING_CHANNEL_MASK;
 800cca4:	7cfb      	ldrb	r3, [r7, #19]
 800cca6:	f003 031f 	and.w	r3, r3, #31
 800ccaa:	74bb      	strb	r3, [r7, #18]
            configByte >>= CRSF_SUBSET_RC_STARTING_CHANNEL_BITS;
 800ccac:	7cfb      	ldrb	r3, [r7, #19]
 800ccae:	095b      	lsrs	r3, r3, #5
 800ccb0:	74fb      	strb	r3, [r7, #19]

            // get the channel resolution settings
            uint8_t channelBits;
            uint16_t channelMask;
            uint8_t channelRes = configByte & CRSF_SUBSET_RC_RES_CONFIGURATION_MASK;
 800ccb2:	7cfb      	ldrb	r3, [r7, #19]
 800ccb4:	f003 0303 	and.w	r3, r3, #3
 800ccb8:	747b      	strb	r3, [r7, #17]
            configByte >>= CRSF_SUBSET_RC_RES_CONFIGURATION_BITS;
 800ccba:	7cfb      	ldrb	r3, [r7, #19]
 800ccbc:	089b      	lsrs	r3, r3, #2
 800ccbe:	74fb      	strb	r3, [r7, #19]
            switch (channelRes) {
 800ccc0:	7c7b      	ldrb	r3, [r7, #17]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d027      	beq.n	800cd16 <crsfFrameStatus+0x266>
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	dc0f      	bgt.n	800ccea <crsfFrameStatus+0x23a>
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <crsfFrameStatus+0x224>
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d016      	beq.n	800cd00 <crsfFrameStatus+0x250>
 800ccd2:	e00a      	b.n	800ccea <crsfFrameStatus+0x23a>
            case CRSF_SUBSET_RC_RES_CONF_10B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_10B;
 800ccd4:	230a      	movs	r3, #10
 800ccd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                channelMask = CRSF_SUBSET_RC_RES_MASK_10B;
 800ccda:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ccde:	84bb      	strh	r3, [r7, #36]	; 0x24
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_10B;
 800cce0:	4b1f      	ldr	r3, [pc, #124]	; (800cd60 <crsfFrameStatus+0x2b0>)
 800cce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cce6:	601a      	str	r2, [r3, #0]
                break;
 800cce8:	e020      	b.n	800cd2c <crsfFrameStatus+0x27c>
            default:
            case CRSF_SUBSET_RC_RES_CONF_11B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_11B;
 800ccea:	230b      	movs	r3, #11
 800ccec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                channelMask = CRSF_SUBSET_RC_RES_MASK_11B;
 800ccf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ccf4:	84bb      	strh	r3, [r7, #36]	; 0x24
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_11B;
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	; (800cd60 <crsfFrameStatus+0x2b0>)
 800ccf8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800ccfc:	601a      	str	r2, [r3, #0]
                break;
 800ccfe:	e015      	b.n	800cd2c <crsfFrameStatus+0x27c>
            case CRSF_SUBSET_RC_RES_CONF_12B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_12B;
 800cd00:	230c      	movs	r3, #12
 800cd02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                channelMask = CRSF_SUBSET_RC_RES_MASK_12B;
 800cd06:	f640 73ff 	movw	r3, #4095	; 0xfff
 800cd0a:	84bb      	strh	r3, [r7, #36]	; 0x24
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_12B;
 800cd0c:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <crsfFrameStatus+0x2b0>)
 800cd0e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800cd12:	601a      	str	r2, [r3, #0]
                break;
 800cd14:	e00a      	b.n	800cd2c <crsfFrameStatus+0x27c>
            case CRSF_SUBSET_RC_RES_CONF_13B:
                channelBits = CRSF_SUBSET_RC_RES_BITS_13B;
 800cd16:	230d      	movs	r3, #13
 800cd18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                channelMask = CRSF_SUBSET_RC_RES_MASK_13B;
 800cd1c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800cd20:	84bb      	strh	r3, [r7, #36]	; 0x24
                channelScale = CRSF_SUBSET_RC_CHANNEL_SCALE_13B;
 800cd22:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <crsfFrameStatus+0x2b0>)
 800cd24:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800cd28:	601a      	str	r2, [r3, #0]
                break;
 800cd2a:	bf00      	nop
            }

            // do nothing for the reserved configuration bit
            configByte >>= CRSF_SUBSET_RC_RESERVED_CONFIGURATION_BITS;
 800cd2c:	7cfb      	ldrb	r3, [r7, #19]
 800cd2e:	085b      	lsrs	r3, r3, #1
 800cd30:	74fb      	strb	r3, [r7, #19]

            // calculate the number of channels packed
            uint8_t numOfChannels = ((crsfChannelDataFrame.frame.frameLength - CRSF_FRAME_LENGTH_TYPE_CRC - 1) * 8) / channelBits;
 800cd32:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <crsfFrameStatus+0x2a8>)
 800cd34:	785b      	ldrb	r3, [r3, #1]
 800cd36:	3b03      	subs	r3, #3
 800cd38:	00da      	lsls	r2, r3, #3
 800cd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd3e:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd42:	743b      	strb	r3, [r7, #16]

            // unpack the channel data
            uint8_t bitsMerged = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            uint32_t readValue = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	61fb      	str	r3, [r7, #28]
            for (uint8_t n = 0; n < numOfChannels; n++) {
 800cd4e:	2300      	movs	r3, #0
 800cd50:	76fb      	strb	r3, [r7, #27]
 800cd52:	e041      	b.n	800cdd8 <crsfFrameStatus+0x328>
 800cd54:	20003ea7 	.word	0x20003ea7
 800cd58:	20000874 	.word	0x20000874
 800cd5c:	20000877 	.word	0x20000877
 800cd60:	200001dc 	.word	0x200001dc
 800cd64:	3f1ff101 	.word	0x3f1ff101
 800cd68:	200008b4 	.word	0x200008b4
                while (bitsMerged < channelBits) {
                    uint8_t readByte = payload[readByteIndex++];
 800cd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd70:	1c5a      	adds	r2, r3, #1
 800cd72:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800cd76:	461a      	mov	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	73fb      	strb	r3, [r7, #15]
                    readValue |= ((uint32_t) readByte) << bitsMerged;
 800cd80:	7bfa      	ldrb	r2, [r7, #15]
 800cd82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd86:	fa02 f303 	lsl.w	r3, r2, r3
 800cd8a:	69fa      	ldr	r2, [r7, #28]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	61fb      	str	r3, [r7, #28]
                    bitsMerged += 8;
 800cd90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd94:	3308      	adds	r3, #8
 800cd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                while (bitsMerged < channelBits) {
 800cd9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800cd9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d3e2      	bcc.n	800cd6c <crsfFrameStatus+0x2bc>
                }
                crsfChannelData[startChannel + n] = readValue & channelMask;
 800cda6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800cda8:	7cba      	ldrb	r2, [r7, #18]
 800cdaa:	7efb      	ldrb	r3, [r7, #27]
 800cdac:	4413      	add	r3, r2
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	400a      	ands	r2, r1
 800cdb2:	4910      	ldr	r1, [pc, #64]	; (800cdf4 <crsfFrameStatus+0x344>)
 800cdb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                readValue >>= channelBits;
 800cdb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cdc2:	61fb      	str	r3, [r7, #28]
                bitsMerged -= channelBits;
 800cdc4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800cdc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            for (uint8_t n = 0; n < numOfChannels; n++) {
 800cdd2:	7efb      	ldrb	r3, [r7, #27]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	76fb      	strb	r3, [r7, #27]
 800cdd8:	7efa      	ldrb	r2, [r7, #27]
 800cdda:	7c3b      	ldrb	r3, [r7, #16]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d3dc      	bcc.n	800cd9a <crsfFrameStatus+0x2ea>
            }
        }
        return RX_FRAME_COMPLETE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <crsfFrameStatus+0x336>
    }
    return RX_FRAME_PENDING;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	372c      	adds	r7, #44	; 0x2c
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	200008b4 	.word	0x200008b4

0800cdf8 <crsfReadRawRC>:

static float crsfReadRawRC(const rxRuntimeState_t *rxRuntimeState, uint8_t chan)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70fb      	strb	r3, [r7, #3]
    UNUSED(rxRuntimeState);
    if (channelScale == CRSF_RC_CHANNEL_SCALE_LEGACY) {
 800ce04:	4b19      	ldr	r3, [pc, #100]	; (800ce6c <crsfReadRawRC+0x74>)
 800ce06:	edd3 7a00 	vldr	s15, [r3]
 800ce0a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800ce70 <crsfReadRawRC+0x78>
 800ce0e:	eef4 7a47 	vcmp.f32	s15, s14
 800ce12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce16:	d111      	bne.n	800ce3c <crsfReadRawRC+0x44>
        * mid  992 -> 1500us
        * max 1811 -> 2012us
        * scale factor = (2012-988) / (1811-172) = 0.62477120195241
        * offset = 988 - 172 * 0.62477120195241 = 880.53935326418548
        */
        return (channelScale * (float)crsfChannelData[chan]) + 881;
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	4a16      	ldr	r2, [pc, #88]	; (800ce74 <crsfReadRawRC+0x7c>)
 800ce1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce20:	ee07 3a90 	vmov	s15, r3
 800ce24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce28:	4b10      	ldr	r3, [pc, #64]	; (800ce6c <crsfReadRawRC+0x74>)
 800ce2a:	edd3 7a00 	vldr	s15, [r3]
 800ce2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce32:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ce78 <crsfReadRawRC+0x80>
 800ce36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce3a:	e010      	b.n	800ce5e <crsfReadRawRC+0x66>
    } else {
        /* conversion from RC value to PWM
        * for 0x17 Subset RC frame
        */
        return (channelScale * (float)crsfChannelData[chan]) + 988;
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	4a0d      	ldr	r2, [pc, #52]	; (800ce74 <crsfReadRawRC+0x7c>)
 800ce40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce44:	ee07 3a90 	vmov	s15, r3
 800ce48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce4c:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <crsfReadRawRC+0x74>)
 800ce4e:	edd3 7a00 	vldr	s15, [r3]
 800ce52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce56:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ce7c <crsfReadRawRC+0x84>
 800ce5a:	ee77 7a87 	vadd.f32	s15, s15, s14
    }
}
 800ce5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	200001dc 	.word	0x200001dc
 800ce70:	3f1ff101 	.word	0x3f1ff101
 800ce74:	200008b4 	.word	0x200008b4
 800ce78:	445c4000 	.word	0x445c4000
 800ce7c:	44770000 	.word	0x44770000

0800ce80 <crsfRxInit>:
{
    return telemetryBufLen == 0;
}

bool crsfRxInit(rxRuntimeState_t *rxRuntimeState)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
    for (int ii = 0; ii < CRSF_MAX_CHANNEL; ++ii) {
 800ce88:	2300      	movs	r3, #0
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	e013      	b.n	800ceb6 <crsfRxInit+0x36>
        crsfChannelData[ii] = (16 * p_rx_pg->midrc) / 10 - 1408;
 800ce8e:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <crsfRxInit+0x80>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	8a1b      	ldrh	r3, [r3, #16]
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	4a1b      	ldr	r2, [pc, #108]	; (800cf04 <crsfRxInit+0x84>)
 800ce98:	fb82 1203 	smull	r1, r2, r2, r3
 800ce9c:	1092      	asrs	r2, r2, #2
 800ce9e:	17db      	asrs	r3, r3, #31
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800cea6:	4619      	mov	r1, r3
 800cea8:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <crsfRxInit+0x88>)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int ii = 0; ii < CRSF_MAX_CHANNEL; ++ii) {
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60fb      	str	r3, [r7, #12]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b0f      	cmp	r3, #15
 800ceba:	dde8      	ble.n	800ce8e <crsfRxInit+0xe>
    }

    rxRuntimeState->channelCount = CRSF_MAX_CHANNEL;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2210      	movs	r2, #16
 800cec0:	709a      	strb	r2, [r3, #2]
    rxRuntimeState->rxRefreshRate = CRSF_TIME_BETWEEN_FRAMES_US; //!!TODO this needs checking
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f641 220b 	movw	r2, #6667	; 0x1a0b
 800cec8:	809a      	strh	r2, [r3, #4]

    rxRuntimeState->rcReadRawFn = crsfReadRawRC;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a0f      	ldr	r2, [pc, #60]	; (800cf0c <crsfRxInit+0x8c>)
 800cece:	609a      	str	r2, [r3, #8]
    rxRuntimeState->rcFrameStatusFn = crsfFrameStatus;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a0f      	ldr	r2, [pc, #60]	; (800cf10 <crsfRxInit+0x90>)
 800ced4:	60da      	str	r2, [r3, #12]
    rxRuntimeState->rcFrameTimeUsFn = rxFrameTimeUs;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a0e      	ldr	r2, [pc, #56]	; (800cf14 <crsfRxInit+0x94>)
 800ceda:	615a      	str	r2, [r3, #20]
    // const serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_RX_SERIAL);
    // if (!portConfig) {
    //     return false;
    // }

    uint32_t crsfBaudrate = CRSF_BAUDRATE;
 800cedc:	4b0e      	ldr	r3, [pc, #56]	; (800cf18 <crsfRxInit+0x98>)
 800cede:	60bb      	str	r3, [r7, #8]
    uartOpen(_DEF_UART2, crsfBaudrate);
 800cee0:	68b9      	ldr	r1, [r7, #8]
 800cee2:	2002      	movs	r0, #2
 800cee4:	f008 f89a 	bl	801501c <uartOpen>
    //     crsfBaudrate,
    //     CRSF_PORT_MODE,
    //     CRSF_PORT_OPTIONS | (rxConfig->serialrx_inverted ? SERIAL_INVERTED : 0)
    //     );

    if (rssiSource == RSSI_SOURCE_NONE) {
 800cee8:	4b0c      	ldr	r3, [pc, #48]	; (800cf1c <crsfRxInit+0x9c>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <crsfRxInit+0x76>
        rssiSource = RSSI_SOURCE_RX_PROTOCOL_CRSF;
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <crsfRxInit+0x9c>)
 800cef2:	2206      	movs	r2, #6
 800cef4:	701a      	strb	r2, [r3, #0]
    if (linkQualitySource == LQ_SOURCE_NONE) {
        linkQualitySource = LQ_SOURCE_RX_PROTOCOL_CRSF;
    }
#endif

    return true;
 800cef6:	2301      	movs	r3, #1
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3710      	adds	r7, #16
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	2000019c 	.word	0x2000019c
 800cf04:	66666667 	.word	0x66666667
 800cf08:	200008b4 	.word	0x200008b4
 800cf0c:	0800cdf9 	.word	0x0800cdf9
 800cf10:	0800cab1 	.word	0x0800cab1
 800cf14:	0800d92d 	.word	0x0800d92d
 800cf18:	000668a0 	.word	0x000668a0
 800cf1c:	20003eaa 	.word	0x20003eaa

0800cf20 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	da01      	bge.n	800cf38 <constrain+0x18>
        return low;
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	e006      	b.n	800cf46 <constrain+0x26>
    else if (amt > high)
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	dd01      	ble.n	800cf44 <constrain+0x24>
        return high;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	e000      	b.n	800cf46 <constrain+0x26>
    else
        return amt;
 800cf44:	68fb      	ldr	r3, [r7, #12]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	ed87 0a03 	vstr	s0, [r7, #12]
 800cf5c:	edc7 0a02 	vstr	s1, [r7, #8]
 800cf60:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 800cf64:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf68:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf74:	d501      	bpl.n	800cf7a <constrainf+0x28>
        return low;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	e00b      	b.n	800cf92 <constrainf+0x40>
    else if (amt > high)
 800cf7a:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf7e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8a:	dd01      	ble.n	800cf90 <constrainf+0x3e>
        return high;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	e000      	b.n	800cf92 <constrainf+0x40>
    else
        return amt;
 800cf90:	68fb      	ldr	r3, [r7, #12]
}
 800cf92:	ee07 3a90 	vmov	s15, r3
 800cf96:	eeb0 0a67 	vmov.f32	s0, s15
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <cmp32>:
#define container_of(ptr, type, member)  ( __extension__ ({     \
        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
        (type *)( (char *)__mptr - offsetof(type,member) );}))

static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <cmpTimeUs>:
#include "crsf.h"
#include "pg.h"

float rcCommand[4];           // interval [1000;2000] for THROTTLE and [-500;+500] for ROLL/PITCH/YAW
static bool isRxDataNew = false;
static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <nullReadRawRC>:
        rxChannelRangeConfig++;
    }
}

static float nullReadRawRC(const rxRuntimeState_t *rxRuntimeState, uint8_t channel)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
    UNUSED(rxRuntimeState);
    UNUSED(channel);

    return 0; //PPM_RCVR_TIMEOUT
 800cfe8:	f04f 0300 	mov.w	r3, #0
 800cfec:	ee07 3a90 	vmov	s15, r3
}
 800cff0:	eeb0 0a67 	vmov.f32	s0, s15
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <nullFrameStatus>:

static uint8_t nullFrameStatus(rxRuntimeState_t *rxRuntimeState)
{
 800cffe:	b480      	push	{r7}
 800d000:	b083      	sub	sp, #12
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
    UNUSED(rxRuntimeState);

    return RX_FRAME_PENDING;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <nullProcessFrame>:

static bool nullProcessFrame(const rxRuntimeState_t *rxRuntimeState)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
    UNUSED(rxRuntimeState);

    return true;
 800d01c:	2301      	movs	r3, #1
}
 800d01e:	4618      	mov	r0, r3
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <isPulseValid>:

bool isPulseValid(uint16_t pulseDuration)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	4603      	mov	r3, r0
 800d032:	80fb      	strh	r3, [r7, #6]
    return  pulseDuration >= 885 &&
 800d034:	88fb      	ldrh	r3, [r7, #6]
 800d036:	f5b3 7f5d 	cmp.w	r3, #884	; 0x374
 800d03a:	d906      	bls.n	800d04a <isPulseValid+0x20>
 800d03c:	88fb      	ldrh	r3, [r7, #6]
 800d03e:	f640 0243 	movw	r2, #2115	; 0x843
 800d042:	4293      	cmp	r3, r2
 800d044:	d801      	bhi.n	800d04a <isPulseValid+0x20>
 800d046:	2301      	movs	r3, #1
 800d048:	e000      	b.n	800d04c <isPulseValid+0x22>
 800d04a:	2300      	movs	r3, #0
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	b2db      	uxtb	r3, r3
            pulseDuration <= 2115;
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <serialRxInit>:
#define USE_SERIAL_RX
#define USE_SERIALRX_SBUS
#define USE_SERIALRX_CRSF
#ifdef USE_SERIAL_RX
static bool serialRxInit(rxRuntimeState_t *rxRuntimeState)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
    bool enabled = false;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
    switch (rxRuntimeState->serialrxProvider) {
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d002      	beq.n	800d078 <serialRxInit+0x1a>
 800d072:	2b09      	cmp	r3, #9
 800d074:	d006      	beq.n	800d084 <serialRxInit+0x26>
 800d076:	e00b      	b.n	800d090 <serialRxInit+0x32>
        enabled = spektrumInit(rxConfig, rxRuntimeState);
        break;
#endif
#ifdef USE_SERIALRX_SBUS
    case SERIALRX_SBUS:
        enabled = sbusInit(rxRuntimeState);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fed3 	bl	800de24 <sbusInit>
 800d07e:	4603      	mov	r3, r0
 800d080:	73fb      	strb	r3, [r7, #15]
        break;
 800d082:	e008      	b.n	800d096 <serialRxInit+0x38>
        enabled = jetiExBusInit(rxConfig, rxRuntimeState);
        break;
#endif
#ifdef USE_SERIALRX_CRSF
    case SERIALRX_CRSF:
        enabled = crsfRxInit(rxRuntimeState);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff fefb 	bl	800ce80 <crsfRxInit>
 800d08a:	4603      	mov	r3, r0
 800d08c:	73fb      	strb	r3, [r7, #15]
        break;
 800d08e:	e002      	b.n	800d096 <serialRxInit+0x38>
    case SERIALRX_FPORT:
        enabled = fportRxInit(rxConfig, rxRuntimeState);
        break;
#endif
    default:
        enabled = false;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
        break;
 800d094:	bf00      	nop
    }
    return enabled;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <rxInit>:
#ifdef _USE_HW_CLI
static void cliRx(cli_args_t *args);
#endif

void rxInit(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
    rxRuntimeState.rxProvider = RX_PROVIDER_SERIAL;
 800d0a6:	4b32      	ldr	r3, [pc, #200]	; (800d170 <rxInit+0xd0>)
 800d0a8:	2203      	movs	r2, #3
 800d0aa:	701a      	strb	r2, [r3, #0]
    rxRuntimeState.serialrxProvider = SERIALRX_SBUS;
 800d0ac:	4b30      	ldr	r3, [pc, #192]	; (800d170 <rxInit+0xd0>)
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	705a      	strb	r2, [r3, #1]
    rxRuntimeState.serialrxProvider = SERIALRX_CRSF;
 800d0b2:	4b2f      	ldr	r3, [pc, #188]	; (800d170 <rxInit+0xd0>)
 800d0b4:	2209      	movs	r2, #9
 800d0b6:	705a      	strb	r2, [r3, #1]
    rxRuntimeState.rcReadRawFn = nullReadRawRC;
 800d0b8:	4b2d      	ldr	r3, [pc, #180]	; (800d170 <rxInit+0xd0>)
 800d0ba:	4a2e      	ldr	r2, [pc, #184]	; (800d174 <rxInit+0xd4>)
 800d0bc:	609a      	str	r2, [r3, #8]
    rxRuntimeState.rcFrameStatusFn = nullFrameStatus;
 800d0be:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <rxInit+0xd0>)
 800d0c0:	4a2d      	ldr	r2, [pc, #180]	; (800d178 <rxInit+0xd8>)
 800d0c2:	60da      	str	r2, [r3, #12]
    rxRuntimeState.rcProcessFrameFn = nullProcessFrame;
 800d0c4:	4b2a      	ldr	r3, [pc, #168]	; (800d170 <rxInit+0xd0>)
 800d0c6:	4a2d      	ldr	r2, [pc, #180]	; (800d17c <rxInit+0xdc>)
 800d0c8:	611a      	str	r2, [r3, #16]
    rxRuntimeState.lastRcFrameTimeUs = 0;
 800d0ca:	4b29      	ldr	r3, [pc, #164]	; (800d170 <rxInit+0xd0>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	621a      	str	r2, [r3, #32]
    rcSampleIndex = 0;
 800d0d0:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <rxInit+0xe0>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	701a      	strb	r2, [r3, #0]
    parseRcChannels("AETR1234");
 800d0d6:	482b      	ldr	r0, [pc, #172]	; (800d184 <rxInit+0xe4>)
 800d0d8:	f000 fb18 	bl	800d70c <parseRcChannels>

    for (int i = 0; i < MAX_SUPPORTED_RC_CHANNEL_COUNT; i++) {
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	e011      	b.n	800d106 <rxInit+0x66>
        rcData[i] = 1500;
 800d0e2:	4a29      	ldr	r2, [pc, #164]	; (800d188 <rxInit+0xe8>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	4a28      	ldr	r2, [pc, #160]	; (800d18c <rxInit+0xec>)
 800d0ec:	601a      	str	r2, [r3, #0]
        validRxSignalTimeout[i] = millis() + MAX_INVALID_PULSE_TIME_MS;
 800d0ee:	f7fc f89a 	bl	8009226 <millis>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800d0f8:	4925      	ldr	r1, [pc, #148]	; (800d190 <rxInit+0xf0>)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < MAX_SUPPORTED_RC_CHANNEL_COUNT; i++) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3301      	adds	r3, #1
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b11      	cmp	r3, #17
 800d10a:	ddea      	ble.n	800d0e2 <rxInit+0x42>
    }

    rcData[THROTTLE] = 885;
 800d10c:	4b1e      	ldr	r3, [pc, #120]	; (800d188 <rxInit+0xe8>)
 800d10e:	4a21      	ldr	r2, [pc, #132]	; (800d194 <rxInit+0xf4>)
 800d110:	60da      	str	r2, [r3, #12]
    //         // Initialize ARM AUX channel to OFF value
    //         rcData[modeActivationCondition->auxChannelIndex + NON_AUX_CHANNEL_COUNT] = value;
    //     }
    // }

    switch (rxRuntimeState.rxProvider) {
 800d112:	4b17      	ldr	r3, [pc, #92]	; (800d170 <rxInit+0xd0>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	2b03      	cmp	r3, #3
 800d118:	d111      	bne.n	800d13e <rxInit+0x9e>

        break;
#ifdef USE_SERIAL_RX
    case RX_PROVIDER_SERIAL:
        {
            const bool enabled = serialRxInit(&rxRuntimeState);
 800d11a:	4815      	ldr	r0, [pc, #84]	; (800d170 <rxInit+0xd0>)
 800d11c:	f7ff ff9f 	bl	800d05e <serialRxInit>
 800d120:	4603      	mov	r3, r0
 800d122:	72fb      	strb	r3, [r7, #11]
            if (!enabled) {
 800d124:	7afb      	ldrb	r3, [r7, #11]
 800d126:	f083 0301 	eor.w	r3, r3, #1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d008      	beq.n	800d142 <rxInit+0xa2>
                rxRuntimeState.rcReadRawFn = nullReadRawRC;
 800d130:	4b0f      	ldr	r3, [pc, #60]	; (800d170 <rxInit+0xd0>)
 800d132:	4a10      	ldr	r2, [pc, #64]	; (800d174 <rxInit+0xd4>)
 800d134:	609a      	str	r2, [r3, #8]
                rxRuntimeState.rcFrameStatusFn = nullFrameStatus;
 800d136:	4b0e      	ldr	r3, [pc, #56]	; (800d170 <rxInit+0xd0>)
 800d138:	4a0f      	ldr	r2, [pc, #60]	; (800d178 <rxInit+0xd8>)
 800d13a:	60da      	str	r2, [r3, #12]
            }
        }

        break;
 800d13c:	e001      	b.n	800d142 <rxInit+0xa2>
        break;
 800d13e:	bf00      	nop
 800d140:	e000      	b.n	800d144 <rxInit+0xa4>
        break;
 800d142:	bf00      	nop
    // }

    // Setup source frame RSSI filtering to take averaged values every FRAME_ERR_RESAMPLE_US
    //pt1FilterInit(&frameErrFilter, pt1FilterGain(GET_FRAME_ERR_LPF_FREQUENCY(rxConfig()->rssi_src_frame_lpf_period), FRAME_ERR_RESAMPLE_US/1000000.0));

    rxChannelCount = MIN(6 + NON_AUX_CHANNEL_COUNT, rxRuntimeState.channelCount);
 800d144:	230a      	movs	r3, #10
 800d146:	607b      	str	r3, [r7, #4]
 800d148:	4b09      	ldr	r3, [pc, #36]	; (800d170 <rxInit+0xd0>)
 800d14a:	789b      	ldrb	r3, [r3, #2]
 800d14c:	70fb      	strb	r3, [r7, #3]
 800d14e:	78fa      	ldrb	r2, [r7, #3]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4293      	cmp	r3, r2
 800d154:	bfa8      	it	ge
 800d156:	4613      	movge	r3, r2
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <rxInit+0xf8>)
 800d15c:	701a      	strb	r2, [r3, #0]
    
    #ifdef _USE_HW_CLI
        cliAdd("rx", cliRx);
 800d15e:	490f      	ldr	r1, [pc, #60]	; (800d19c <rxInit+0xfc>)
 800d160:	480f      	ldr	r0, [pc, #60]	; (800d1a0 <rxInit+0x100>)
 800d162:	f005 fa83 	bl	801266c <cliAdd>
    #endif
}
 800d166:	bf00      	nop
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	200009f4 	.word	0x200009f4
 800d174:	0800cfdd 	.word	0x0800cfdd
 800d178:	0800cfff 	.word	0x0800cfff
 800d17c:	0800d015 	.word	0x0800d015
 800d180:	20003eb1 	.word	0x20003eb1
 800d184:	0802bc40 	.word	0x0802bc40
 800d188:	20000964 	.word	0x20000964
 800d18c:	44bb8000 	.word	0x44bb8000
 800d190:	200009ac 	.word	0x200009ac
 800d194:	445d4000 	.word	0x445d4000
 800d198:	20003eaf 	.word	0x20003eaf
 800d19c:	0800dbc5 	.word	0x0800dbc5
 800d1a0:	0802bc4c 	.word	0x0802bc4c

0800d1a4 <setLinkQuality>:
#endif

#define FRAME_ERR_RESAMPLE_US 100000

static void setLinkQuality(bool validFrame, int32_t currentDeltaTimeUs)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
        // calculate new sample mean
        linkQuality = updateLinkQualitySamples(validFrame ? LINK_QUALITY_MAX_VALUE : 0);
    }
#endif

    if (rssiSource == RSSI_SOURCE_FRAME_ERRORS) {
 800d1b0:	4b1f      	ldr	r3, [pc, #124]	; (800d230 <setLinkQuality+0x8c>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b05      	cmp	r3, #5
 800d1b6:	d137      	bne.n	800d228 <setLinkQuality+0x84>
        resampleTimeUs += currentDeltaTimeUs;
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	; (800d234 <setLinkQuality+0x90>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	4413      	add	r3, r2
 800d1c0:	4a1c      	ldr	r2, [pc, #112]	; (800d234 <setLinkQuality+0x90>)
 800d1c2:	6013      	str	r3, [r2, #0]
        rssiSum += validFrame ? RSSI_MAX_VALUE : 0;
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <setLinkQuality+0x2c>
 800d1ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d1ce:	e000      	b.n	800d1d2 <setLinkQuality+0x2e>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4b19      	ldr	r3, [pc, #100]	; (800d238 <setLinkQuality+0x94>)
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	4b17      	ldr	r3, [pc, #92]	; (800d238 <setLinkQuality+0x94>)
 800d1dc:	801a      	strh	r2, [r3, #0]
        rssiCount++;
 800d1de:	4b17      	ldr	r3, [pc, #92]	; (800d23c <setLinkQuality+0x98>)
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	4b15      	ldr	r3, [pc, #84]	; (800d23c <setLinkQuality+0x98>)
 800d1e8:	801a      	strh	r2, [r3, #0]

        if (resampleTimeUs >= FRAME_ERR_RESAMPLE_US) {
 800d1ea:	4b12      	ldr	r3, [pc, #72]	; (800d234 <setLinkQuality+0x90>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a14      	ldr	r2, [pc, #80]	; (800d240 <setLinkQuality+0x9c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	dd19      	ble.n	800d228 <setLinkQuality+0x84>
            setRssi(rssiSum / rssiCount, rssiSource);
 800d1f4:	4b10      	ldr	r3, [pc, #64]	; (800d238 <setLinkQuality+0x94>)
 800d1f6:	881a      	ldrh	r2, [r3, #0]
 800d1f8:	4b10      	ldr	r3, [pc, #64]	; (800d23c <setLinkQuality+0x98>)
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d200:	b29b      	uxth	r3, r3
 800d202:	4a0b      	ldr	r2, [pc, #44]	; (800d230 <setLinkQuality+0x8c>)
 800d204:	7812      	ldrb	r2, [r2, #0]
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fb03 	bl	800d814 <setRssi>
            rssiSum = 0;
 800d20e:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <setLinkQuality+0x94>)
 800d210:	2200      	movs	r2, #0
 800d212:	801a      	strh	r2, [r3, #0]
            rssiCount = 0;
 800d214:	4b09      	ldr	r3, [pc, #36]	; (800d23c <setLinkQuality+0x98>)
 800d216:	2200      	movs	r2, #0
 800d218:	801a      	strh	r2, [r3, #0]
            resampleTimeUs -= FRAME_ERR_RESAMPLE_US;
 800d21a:	4b06      	ldr	r3, [pc, #24]	; (800d234 <setLinkQuality+0x90>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800d222:	3ba0      	subs	r3, #160	; 0xa0
 800d224:	4a03      	ldr	r2, [pc, #12]	; (800d234 <setLinkQuality+0x90>)
 800d226:	6013      	str	r3, [r2, #0]
        }
    }
}
 800d228:	bf00      	nop
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	20003eaa 	.word	0x20003eaa
 800d234:	20000a30 	.word	0x20000a30
 800d238:	20003e8a 	.word	0x20003e8a
 800d23c:	20003e8c 	.word	0x20003e8c
 800d240:	0001869f 	.word	0x0001869f

0800d244 <rxUpdateCheck>:
    uplinkTxPwrMw = uplinkTxPwrMwValue;
}
#endif

bool rxUpdateCheck(uint32_t currentTimeUs, int32_t currentDeltaTimeUs)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
    UNUSED(currentTimeUs);
    UNUSED(currentDeltaTimeUs);

    return taskUpdateRxMainInProgress() || rxDataProcessingRequired || auxiliaryProcessingRequired;
 800d24e:	f001 ff45 	bl	800f0dc <taskUpdateRxMainInProgress>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d107      	bne.n	800d268 <rxUpdateCheck+0x24>
 800d258:	4b08      	ldr	r3, [pc, #32]	; (800d27c <rxUpdateCheck+0x38>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d103      	bne.n	800d268 <rxUpdateCheck+0x24>
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <rxUpdateCheck+0x3c>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <rxUpdateCheck+0x28>
 800d268:	2301      	movs	r3, #1
 800d26a:	e000      	b.n	800d26e <rxUpdateCheck+0x2a>
 800d26c:	2300      	movs	r3, #0
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	b2db      	uxtb	r3, r3
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20003eab 	.word	0x20003eab
 800d280:	20003eac 	.word	0x20003eac

0800d284 <rxFrameCheck>:

void rxFrameCheck(uint32_t currentTimeUs, int32_t currentDeltaTimeUs)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
    bool signalReceived = false;
 800d28e:	2300      	movs	r3, #0
 800d290:	75fb      	strb	r3, [r7, #23]
    bool useDataDrivenProcessing = true;
 800d292:	2301      	movs	r3, #1
 800d294:	75bb      	strb	r3, [r7, #22]
    int32_t needRxSignalMaxDelayUs = DELAY_100_MS;
 800d296:	4b32      	ldr	r3, [pc, #200]	; (800d360 <rxFrameCheck+0xdc>)
 800d298:	613b      	str	r3, [r7, #16]

    //DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 2, MIN(2000, currentDeltaTimeUs / 100));

    if (taskUpdateRxMainInProgress()) {
 800d29a:	f001 ff1f 	bl	800f0dc <taskUpdateRxMainInProgress>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d158      	bne.n	800d356 <rxFrameCheck+0xd2>
        //  no need to check for new data as a packet is being processed already
        return;
    }

    switch (rxRuntimeState.rxProvider) {
 800d2a4:	4b2f      	ldr	r3, [pc, #188]	; (800d364 <rxFrameCheck+0xe0>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	3b03      	subs	r3, #3
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d82b      	bhi.n	800d306 <rxFrameCheck+0x82>
#endif
    case RX_PROVIDER_SERIAL:
    case RX_PROVIDER_MSP:
    case RX_PROVIDER_SPI:
        {
            const uint8_t frameStatus = rxRuntimeState.rcFrameStatusFn(&rxRuntimeState);
 800d2ae:	4b2d      	ldr	r3, [pc, #180]	; (800d364 <rxFrameCheck+0xe0>)
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	482c      	ldr	r0, [pc, #176]	; (800d364 <rxFrameCheck+0xe0>)
 800d2b4:	4798      	blx	r3
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	73fb      	strb	r3, [r7, #15]
            //DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 1, (frameStatus & RX_FRAME_FAILSAFE));
            signalReceived = (frameStatus & RX_FRAME_COMPLETE) && !(frameStatus & (RX_FRAME_FAILSAFE | RX_FRAME_DROPPED));
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	f003 0301 	and.w	r3, r3, #1
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <rxFrameCheck+0x4e>
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
 800d2c6:	f003 030a 	and.w	r3, r3, #10
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <rxFrameCheck+0x4e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <rxFrameCheck+0x50>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	75fb      	strb	r3, [r7, #23]
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	f003 0301 	and.w	r3, r3, #1
 800d2dc:	75fb      	strb	r3, [r7, #23]
            setLinkQuality(signalReceived, currentDeltaTimeUs);
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7ff ff5e 	bl	800d1a4 <setLinkQuality>
            auxiliaryProcessingRequired |= (frameStatus & RX_FRAME_PROCESSING_REQUIRED);
 800d2e8:	4b1f      	ldr	r3, [pc, #124]	; (800d368 <rxFrameCheck+0xe4>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	bf14      	ite	ne
 800d2fa:	2301      	movne	r3, #1
 800d2fc:	2300      	moveq	r3, #0
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	4b19      	ldr	r3, [pc, #100]	; (800d368 <rxFrameCheck+0xe4>)
 800d302:	701a      	strb	r2, [r3, #0]
        }

        break;
 800d304:	e000      	b.n	800d308 <rxFrameCheck+0x84>
        break;
 800d306:	bf00      	nop
    }

    if (signalReceived) {
 800d308:	7dfb      	ldrb	r3, [r7, #23]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00e      	beq.n	800d32c <rxFrameCheck+0xa8>
        //  true only when a new packet arrives
        needRxSignalBefore = currentTimeUs + needRxSignalMaxDelayUs;
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4413      	add	r3, r2
 800d314:	4a15      	ldr	r2, [pc, #84]	; (800d36c <rxFrameCheck+0xe8>)
 800d316:	6013      	str	r3, [r2, #0]
        rxSignalReceived = true; // immediately process packet data
 800d318:	4b15      	ldr	r3, [pc, #84]	; (800d370 <rxFrameCheck+0xec>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	701a      	strb	r2, [r3, #0]
        if (useDataDrivenProcessing) {
 800d31e:	7dbb      	ldrb	r3, [r7, #22]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d019      	beq.n	800d358 <rxFrameCheck+0xd4>
            rxDataProcessingRequired = true;
 800d324:	4b13      	ldr	r3, [pc, #76]	; (800d374 <rxFrameCheck+0xf0>)
 800d326:	2201      	movs	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e015      	b.n	800d358 <rxFrameCheck+0xd4>
            //  process the new Rx packet when it arrives
        }
    } else {
        //  watch for next packet
        if (cmpTimeUs(currentTimeUs, needRxSignalBefore) > 0) {
 800d32c:	4b0f      	ldr	r3, [pc, #60]	; (800d36c <rxFrameCheck+0xe8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff fe44 	bl	800cfc0 <cmpTimeUs>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dd0c      	ble.n	800d358 <rxFrameCheck+0xd4>
            //  initial time to signalReceived failure is 100ms, then we check every 100ms
            rxSignalReceived = false;
 800d33e:	4b0c      	ldr	r3, [pc, #48]	; (800d370 <rxFrameCheck+0xec>)
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]
            needRxSignalBefore = currentTimeUs + needRxSignalMaxDelayUs;
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4413      	add	r3, r2
 800d34a:	4a08      	ldr	r2, [pc, #32]	; (800d36c <rxFrameCheck+0xe8>)
 800d34c:	6013      	str	r3, [r2, #0]
            //  review and process rcData values every 100ms in case failsafe changed them
            rxDataProcessingRequired = true;
 800d34e:	4b09      	ldr	r3, [pc, #36]	; (800d374 <rxFrameCheck+0xf0>)
 800d350:	2201      	movs	r2, #1
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	e000      	b.n	800d358 <rxFrameCheck+0xd4>
        return;
 800d356:	bf00      	nop
        }
    }

    //DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 0, rxSignalReceived);
}
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	000186a0 	.word	0x000186a0
 800d364:	200009f4 	.word	0x200009f4
 800d368:	20003eac 	.word	0x20003eac
 800d36c:	20000914 	.word	0x20000914
 800d370:	20003ead 	.word	0x20003ead
 800d374:	20003eab 	.word	0x20003eab

0800d378 <getRxfailValue>:
    return rcDataMean[chan] / PPM_AND_PWM_SAMPLE_COUNT;
}
#endif

static uint16_t getRxfailValue(uint8_t channel)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	71fb      	strb	r3, [r7, #7]
    //const rxFailsafeChannelConfig_t *channelFailsafeConfig = rxFailsafeChannelConfigs(channel);
    const bool failsafeAuxSwitch = false;//IS_RC_MODE_ACTIVE(BOXFAILSAFE);
 800d382:	2300      	movs	r3, #0
 800d384:	73fb      	strb	r3, [r7, #15]

    switch (RX_FAILSAFE_MODE_AUTO) { //channelFailsafeConfig->mode
    case RX_FAILSAFE_MODE_AUTO:
        switch (channel) {
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	dc02      	bgt.n	800d392 <getRxfailValue+0x1a>
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	da03      	bge.n	800d398 <getRxfailValue+0x20>
 800d390:	e008      	b.n	800d3a4 <getRxfailValue+0x2c>
 800d392:	2b03      	cmp	r3, #3
 800d394:	d003      	beq.n	800d39e <getRxfailValue+0x26>
 800d396:	e005      	b.n	800d3a4 <getRxfailValue+0x2c>
        case ROLL:
        case PITCH:
        case YAW:
            return 1500;
 800d398:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800d39c:	e01c      	b.n	800d3d8 <getRxfailValue+0x60>
        case THROTTLE:
            // if (featureIsEnabled(FEATURE_3D) && !IS_RC_MODE_ACTIVE(BOX3D) && !flight3DConfig()->switched_mode3d) {
            //     return 1500;
            // } else {
                return 885;
 800d39e:	f240 3375 	movw	r3, #885	; 0x375
 800d3a2:	e019      	b.n	800d3d8 <getRxfailValue+0x60>

    FALLTHROUGH;
    default:
    case RX_FAILSAFE_MODE_INVALID:
    case RX_FAILSAFE_MODE_HOLD:
        if (failsafeAuxSwitch) {
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00b      	beq.n	800d3c2 <getRxfailValue+0x4a>
            return rcRaw[channel]; // current values are allowed through on held channels with switch induced failsafe
 800d3aa:	79fb      	ldrb	r3, [r7, #7]
 800d3ac:	4a0d      	ldr	r2, [pc, #52]	; (800d3e4 <getRxfailValue+0x6c>)
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	edd3 7a00 	vldr	s15, [r3]
 800d3b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ba:	ee17 3a90 	vmov	r3, s15
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	e00a      	b.n	800d3d8 <getRxfailValue+0x60>
        } else {
            return rcData[channel]; // last good value
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	4a08      	ldr	r2, [pc, #32]	; (800d3e8 <getRxfailValue+0x70>)
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	edd3 7a00 	vldr	s15, [r3]
 800d3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d2:	ee17 3a90 	vmov	r3, s15
 800d3d6:	b29b      	uxth	r3, r3
        }
    case RX_FAILSAFE_MODE_SET:
        return RXFAIL_STEP_TO_CHANNEL_VALUE(CHANNEL_VALUE_TO_RXFAIL_STEP(1000));
    }
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	2000091c 	.word	0x2000091c
 800d3e8:	20000964 	.word	0x20000964

0800d3ec <applyRxChannelRangeConfiguraton>:

#define PPM_RCVR_TIMEOUT            0

static float applyRxChannelRangeConfiguraton(float sample)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Avoid corruption of channel with a value of PPM_RCVR_TIMEOUT
    if (sample == PPM_RCVR_TIMEOUT) {
 800d3f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	d102      	bne.n	800d40a <applyRxChannelRangeConfiguraton+0x1e>
        return PPM_RCVR_TIMEOUT;
 800d404:	f04f 0300 	mov.w	r3, #0
 800d408:	e00e      	b.n	800d428 <applyRxChannelRangeConfiguraton+0x3c>
    }

    sample = scaleRangef(sample, 1000, 2000, PWM_RANGE_MIN, PWM_RANGE_MAX);
 800d40a:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 800d438 <applyRxChannelRangeConfiguraton+0x4c>
 800d40e:	eddf 1a0b 	vldr	s3, [pc, #44]	; 800d43c <applyRxChannelRangeConfiguraton+0x50>
 800d412:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800d438 <applyRxChannelRangeConfiguraton+0x4c>
 800d416:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d43c <applyRxChannelRangeConfiguraton+0x50>
 800d41a:	ed97 0a01 	vldr	s0, [r7, #4]
 800d41e:	f7fd ffbb 	bl	800b398 <scaleRangef>
 800d422:	ed87 0a01 	vstr	s0, [r7, #4]
    // out of range channel values are now constrained after the validity check in detectAndApplySignalLossBehaviour()
    return sample;
 800d426:	687b      	ldr	r3, [r7, #4]
}
 800d428:	ee07 3a90 	vmov	s15, r3
 800d42c:	eeb0 0a67 	vmov.f32	s0, s15
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	44fa0000 	.word	0x44fa0000
 800d43c:	447a0000 	.word	0x447a0000

0800d440 <readRxChannelsApplyRanges>:

static void readRxChannelsApplyRanges(void)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
    for (int channel = 0; channel < rxChannelCount; channel++) {
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	e024      	b.n	800d496 <readRxChannelsApplyRanges+0x56>

        const uint8_t rawChannel = channel < RX_MAPPABLE_CHANNEL_COUNT ? rcmap[channel] : channel;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b07      	cmp	r3, #7
 800d450:	dc04      	bgt.n	800d45c <readRxChannelsApplyRanges+0x1c>
 800d452:	4a16      	ldr	r2, [pc, #88]	; (800d4ac <readRxChannelsApplyRanges+0x6c>)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4413      	add	r3, r2
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	e001      	b.n	800d460 <readRxChannelsApplyRanges+0x20>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	71fb      	strb	r3, [r7, #7]
        if (rxConfig()->msp_override_channels_mask) {
            sample = rxMspOverrideReadRawRc(&rxRuntimeState, rxConfig(), rawChannel);
        } else
#endif
        {
            sample = rxRuntimeState.rcReadRawFn(&rxRuntimeState, rawChannel);
 800d462:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <readRxChannelsApplyRanges+0x70>)
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	79fa      	ldrb	r2, [r7, #7]
 800d468:	4611      	mov	r1, r2
 800d46a:	4811      	ldr	r0, [pc, #68]	; (800d4b0 <readRxChannelsApplyRanges+0x70>)
 800d46c:	4798      	blx	r3
 800d46e:	ed87 0a02 	vstr	s0, [r7, #8]
        }

        // apply the rx calibration
        if (channel < NON_AUX_CHANNEL_COUNT) {
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b03      	cmp	r3, #3
 800d476:	dc05      	bgt.n	800d484 <readRxChannelsApplyRanges+0x44>
            sample = applyRxChannelRangeConfiguraton(sample);
 800d478:	ed97 0a02 	vldr	s0, [r7, #8]
 800d47c:	f7ff ffb6 	bl	800d3ec <applyRxChannelRangeConfiguraton>
 800d480:	ed87 0a02 	vstr	s0, [r7, #8]
        }

        rcRaw[channel] = sample;
 800d484:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <readRxChannelsApplyRanges+0x74>)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	601a      	str	r2, [r3, #0]
    for (int channel = 0; channel < rxChannelCount; channel++) {
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <readRxChannelsApplyRanges+0x78>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	dbd4      	blt.n	800d44c <readRxChannelsApplyRanges+0xc>
    }
}
 800d4a2:	bf00      	nop
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	20000908 	.word	0x20000908
 800d4b0:	200009f4 	.word	0x200009f4
 800d4b4:	2000091c 	.word	0x2000091c
 800d4b8:	20003eaf 	.word	0x20003eaf

0800d4bc <detectAndApplySignalLossBehaviour>:

void detectAndApplySignalLossBehaviour(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
    const uint32_t currentTimeMs = millis();
 800d4c2:	f7fb feb0 	bl	8009226 <millis>
 800d4c6:	6078      	str	r0, [r7, #4]
    const bool failsafeAuxSwitch = false; //IS_RC_MODE_ACTIVE(BOXFAILSAFE);
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	70fb      	strb	r3, [r7, #3]
    rxFlightChannelsValid = rxSignalReceived && !failsafeAuxSwitch;
 800d4cc:	4b4a      	ldr	r3, [pc, #296]	; (800d5f8 <detectAndApplySignalLossBehaviour+0x13c>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d007      	beq.n	800d4e4 <detectAndApplySignalLossBehaviour+0x28>
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	f083 0301 	eor.w	r3, r3, #1
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <detectAndApplySignalLossBehaviour+0x28>
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e000      	b.n	800d4e6 <detectAndApplySignalLossBehaviour+0x2a>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4b43      	ldr	r3, [pc, #268]	; (800d5fc <detectAndApplySignalLossBehaviour+0x140>)
 800d4ee:	701a      	strb	r2, [r3, #0]
    //  set rxFlightChannelsValid false when a packet is bad or we use a failsafe switch

    for (int channel = 0; channel < rxChannelCount; channel++) {
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	e075      	b.n	800d5e2 <detectAndApplySignalLossBehaviour+0x126>
        float sample = rcRaw[channel]; // sample has latest RC value, rcData has last 'accepted valid' value
 800d4f6:	4a42      	ldr	r2, [pc, #264]	; (800d600 <detectAndApplySignalLossBehaviour+0x144>)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	60bb      	str	r3, [r7, #8]
        const bool thisChannelValid = rxFlightChannelsValid && isPulseValid(sample);
 800d502:	4b3e      	ldr	r3, [pc, #248]	; (800d5fc <detectAndApplySignalLossBehaviour+0x140>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00e      	beq.n	800d528 <detectAndApplySignalLossBehaviour+0x6c>
 800d50a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d50e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d512:	ee17 3a90 	vmov	r3, s15
 800d516:	b29b      	uxth	r3, r3
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fd86 	bl	800d02a <isPulseValid>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d001      	beq.n	800d528 <detectAndApplySignalLossBehaviour+0x6c>
 800d524:	2301      	movs	r3, #1
 800d526:	e000      	b.n	800d52a <detectAndApplySignalLossBehaviour+0x6e>
 800d528:	2300      	movs	r3, #0
 800d52a:	70bb      	strb	r3, [r7, #2]
 800d52c:	78bb      	ldrb	r3, [r7, #2]
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	70bb      	strb	r3, [r7, #2]
        // if the whole packet is bad, consider all channels bad

        if (thisChannelValid) {
 800d534:	78bb      	ldrb	r3, [r7, #2]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <detectAndApplySignalLossBehaviour+0x8c>
            //  reset the invalid pulse period timer for every good channel
            validRxSignalTimeout[channel] = currentTimeMs + MAX_INVALID_PULSE_TIME_MS;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800d540:	4930      	ldr	r1, [pc, #192]	; (800d604 <detectAndApplySignalLossBehaviour+0x148>)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            } else {
                //  During Stage 2, set aux channels as per Stage 1 configuration
                sample = getRxfailValue(channel);
            }
        } else {
            if (failsafeAuxSwitch) {
 800d548:	78fb      	ldrb	r3, [r7, #3]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00c      	beq.n	800d568 <detectAndApplySignalLossBehaviour+0xac>
                sample = getRxfailValue(channel);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff ff10 	bl	800d378 <getRxfailValue>
 800d558:	4603      	mov	r3, r0
 800d55a:	ee07 3a90 	vmov	s15, r3
 800d55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d562:	edc7 7a02 	vstr	s15, [r7, #8]
 800d566:	e029      	b.n	800d5bc <detectAndApplySignalLossBehaviour+0x100>
                //  set channels to Stage 1 values immediately failsafe switch is activated
            } else if (!thisChannelValid) {
 800d568:	78bb      	ldrb	r3, [r7, #2]
 800d56a:	f083 0301 	eor.w	r3, r3, #1
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d023      	beq.n	800d5bc <detectAndApplySignalLossBehaviour+0x100>
                if (cmp32(currentTimeMs, validRxSignalTimeout[channel]) < 0) {
 800d574:	4a23      	ldr	r2, [pc, #140]	; (800d604 <detectAndApplySignalLossBehaviour+0x148>)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7ff fd10 	bl	800cfa4 <cmp32>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	da06      	bge.n	800d598 <detectAndApplySignalLossBehaviour+0xdc>
                    // first 300ms of Stage 1 failsafe
                    sample = rcData[channel];
 800d58a:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <detectAndApplySignalLossBehaviour+0x14c>)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	60bb      	str	r3, [r7, #8]
 800d596:	e011      	b.n	800d5bc <detectAndApplySignalLossBehaviour+0x100>
                    //  HOLD last valid value on bad channel/s for MAX_INVALID_PULSE_TIME_MS (300ms)
                } else {
                    // remaining Stage 1 failsafe period after 300ms
                    if (channel < NON_AUX_CHANNEL_COUNT) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	dc02      	bgt.n	800d5a4 <detectAndApplySignalLossBehaviour+0xe8>
                        rxFlightChannelsValid = false;
 800d59e:	4b17      	ldr	r3, [pc, #92]	; (800d5fc <detectAndApplySignalLossBehaviour+0x140>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	701a      	strb	r2, [r3, #0]
                        //  declare signal lost after 300ms of any one bad flight channel
                    }
                    sample = getRxfailValue(channel);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff fee5 	bl	800d378 <getRxfailValue>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	ee07 3a90 	vmov	s15, r3
 800d5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b8:	edc7 7a02 	vstr	s15, [r7, #8]
                    // set channels that are invalid for more than 300ms to Stage 1 values
                }
            }
        }

        sample = constrainf(sample, PWM_PULSE_MIN, PWM_PULSE_MAX);
 800d5bc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800d60c <detectAndApplySignalLossBehaviour+0x150>
 800d5c0:	eddf 0a13 	vldr	s1, [pc, #76]	; 800d610 <detectAndApplySignalLossBehaviour+0x154>
 800d5c4:	ed97 0a02 	vldr	s0, [r7, #8]
 800d5c8:	f7ff fcc3 	bl	800cf52 <constrainf>
 800d5cc:	ed87 0a02 	vstr	s0, [r7, #8]
        } else
#endif

        {
            //  set rcData to either validated incoming values, or failsafe-modified values
            rcData[channel] = sample;
 800d5d0:	4a0d      	ldr	r2, [pc, #52]	; (800d608 <detectAndApplySignalLossBehaviour+0x14c>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	4413      	add	r3, r2
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	601a      	str	r2, [r3, #0]
    for (int channel = 0; channel < rxChannelCount; channel++) {
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <detectAndApplySignalLossBehaviour+0x158>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	db83      	blt.n	800d4f6 <detectAndApplySignalLossBehaviour+0x3a>
        //failsafeOnValidDataFailed();
        //  -> start timer to enter stage2 failsafe
    }

    //DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 3, rcData[THROTTLE]);
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20003ead 	.word	0x20003ead
 800d5fc:	20003eae 	.word	0x20003eae
 800d600:	2000091c 	.word	0x2000091c
 800d604:	200009ac 	.word	0x200009ac
 800d608:	20000964 	.word	0x20000964
 800d60c:	450ca000 	.word	0x450ca000
 800d610:	443b8000 	.word	0x443b8000
 800d614:	20003eaf 	.word	0x20003eaf

0800d618 <calculateRxChannelsAndUpdateFailsafe>:

bool calculateRxChannelsAndUpdateFailsafe(uint32_t currentTimeUs)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
    if (auxiliaryProcessingRequired) {
 800d620:	4b34      	ldr	r3, [pc, #208]	; (800d6f4 <calculateRxChannelsAndUpdateFailsafe+0xdc>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d011      	beq.n	800d64c <calculateRxChannelsAndUpdateFailsafe+0x34>
        auxiliaryProcessingRequired = !rxRuntimeState.rcProcessFrameFn(&rxRuntimeState);
 800d628:	4b33      	ldr	r3, [pc, #204]	; (800d6f8 <calculateRxChannelsAndUpdateFailsafe+0xe0>)
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	4832      	ldr	r0, [pc, #200]	; (800d6f8 <calculateRxChannelsAndUpdateFailsafe+0xe0>)
 800d62e:	4798      	blx	r3
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	bf14      	ite	ne
 800d636:	2301      	movne	r3, #1
 800d638:	2300      	moveq	r3, #0
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f083 0301 	eor.w	r3, r3, #1
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <calculateRxChannelsAndUpdateFailsafe+0xdc>)
 800d64a:	701a      	strb	r2, [r3, #0]
    }

    if (!rxDataProcessingRequired) {
 800d64c:	4b2b      	ldr	r3, [pc, #172]	; (800d6fc <calculateRxChannelsAndUpdateFailsafe+0xe4>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f083 0301 	eor.w	r3, r3, #1
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <calculateRxChannelsAndUpdateFailsafe+0x46>
        return false;
 800d65a:	2300      	movs	r3, #0
 800d65c:	e046      	b.n	800d6ec <calculateRxChannelsAndUpdateFailsafe+0xd4>
    }

    rxDataProcessingRequired = false;
 800d65e:	4b27      	ldr	r3, [pc, #156]	; (800d6fc <calculateRxChannelsAndUpdateFailsafe+0xe4>)
 800d660:	2200      	movs	r2, #0
 800d662:	701a      	strb	r2, [r3, #0]

    // only proceed when no more samples to skip and suspend period is over
    if (skipRxSamples || currentTimeUs <= suspendRxSignalUntil) {
 800d664:	4b26      	ldr	r3, [pc, #152]	; (800d700 <calculateRxChannelsAndUpdateFailsafe+0xe8>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <calculateRxChannelsAndUpdateFailsafe+0x5e>
 800d66c:	4b25      	ldr	r3, [pc, #148]	; (800d704 <calculateRxChannelsAndUpdateFailsafe+0xec>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	429a      	cmp	r2, r3
 800d674:	d817      	bhi.n	800d6a6 <calculateRxChannelsAndUpdateFailsafe+0x8e>
        if (currentTimeUs > suspendRxSignalUntil) {
 800d676:	4b23      	ldr	r3, [pc, #140]	; (800d704 <calculateRxChannelsAndUpdateFailsafe+0xec>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d905      	bls.n	800d68c <calculateRxChannelsAndUpdateFailsafe+0x74>
            skipRxSamples--;
 800d680:	4b1f      	ldr	r3, [pc, #124]	; (800d700 <calculateRxChannelsAndUpdateFailsafe+0xe8>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	3b01      	subs	r3, #1
 800d686:	b2da      	uxtb	r2, r3
 800d688:	4b1d      	ldr	r3, [pc, #116]	; (800d700 <calculateRxChannelsAndUpdateFailsafe+0xe8>)
 800d68a:	701a      	strb	r2, [r3, #0]
        }

        return true;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e02d      	b.n	800d6ec <calculateRxChannelsAndUpdateFailsafe+0xd4>
    }

    while(uartAvailable(_DEF_UART2)){
        sbusDataReceive(uartRead(_DEF_UART2), rxRuntimeState.frameData);
 800d690:	2002      	movs	r0, #2
 800d692:	f008 f82b 	bl	80156ec <uartRead>
 800d696:	4603      	mov	r3, r0
 800d698:	461a      	mov	r2, r3
 800d69a:	4b17      	ldr	r3, [pc, #92]	; (800d6f8 <calculateRxChannelsAndUpdateFailsafe+0xe0>)
 800d69c:	69db      	ldr	r3, [r3, #28]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f000 fb49 	bl	800dd38 <sbusDataReceive>
    while(uartAvailable(_DEF_UART2)){
 800d6a6:	2002      	movs	r0, #2
 800d6a8:	f007 ff30 	bl	801550c <uartAvailable>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1ee      	bne.n	800d690 <calculateRxChannelsAndUpdateFailsafe+0x78>
    }
        while(uartAvailable(_DEF_UART2)){
 800d6b2:	e00a      	b.n	800d6ca <calculateRxChannelsAndUpdateFailsafe+0xb2>
        crsfDataReceive(uartRead(_DEF_UART2), rxRuntimeState.frameData);
 800d6b4:	2002      	movs	r0, #2
 800d6b6:	f008 f819 	bl	80156ec <uartRead>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	4a0e      	ldr	r2, [pc, #56]	; (800d6f8 <calculateRxChannelsAndUpdateFailsafe+0xe0>)
 800d6c0:	69d2      	ldr	r2, [r2, #28]
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff f96d 	bl	800c9a4 <crsfDataReceive>
        while(uartAvailable(_DEF_UART2)){
 800d6ca:	2002      	movs	r0, #2
 800d6cc:	f007 ff1e 	bl	801550c <uartAvailable>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1ee      	bne.n	800d6b4 <calculateRxChannelsAndUpdateFailsafe+0x9c>
    }

    readRxChannelsApplyRanges();            // returns rcRaw
 800d6d6:	f7ff feb3 	bl	800d440 <readRxChannelsApplyRanges>
    detectAndApplySignalLossBehaviour();    // returns rcData
 800d6da:	f7ff feef 	bl	800d4bc <detectAndApplySignalLossBehaviour>

    rcSampleIndex++;
 800d6de:	4b0a      	ldr	r3, [pc, #40]	; (800d708 <calculateRxChannelsAndUpdateFailsafe+0xf0>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	4b08      	ldr	r3, [pc, #32]	; (800d708 <calculateRxChannelsAndUpdateFailsafe+0xf0>)
 800d6e8:	701a      	strb	r2, [r3, #0]

    return true;
 800d6ea:	2301      	movs	r3, #1
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20003eac 	.word	0x20003eac
 800d6f8:	200009f4 	.word	0x200009f4
 800d6fc:	20003eab 	.word	0x20003eab
 800d700:	20003eb0 	.word	0x20003eb0
 800d704:	20000918 	.word	0x20000918
 800d708:	20003eb1 	.word	0x20003eb1

0800d70c <parseRcChannels>:

void parseRcChannels(const char *input)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
    for (const char *c = input; *c; c++) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	e019      	b.n	800d74e <parseRcChannels+0x42>
        const char *s = strchr(rcChannelLetters, *c);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	4619      	mov	r1, r3
 800d720:	480f      	ldr	r0, [pc, #60]	; (800d760 <parseRcChannels+0x54>)
 800d722:	f01a fcaf 	bl	8028084 <strchr>
 800d726:	60b8      	str	r0, [r7, #8]
        if (s && (s < rcChannelLetters + RX_MAPPABLE_CHANNEL_COUNT)) {
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <parseRcChannels+0x3c>
 800d72e:	4a0d      	ldr	r2, [pc, #52]	; (800d764 <parseRcChannels+0x58>)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	4293      	cmp	r3, r2
 800d734:	d208      	bcs.n	800d748 <parseRcChannels+0x3c>
            rcmap[s - rcChannelLetters] = c - input;
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	1ad1      	subs	r1, r2, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	4a08      	ldr	r2, [pc, #32]	; (800d760 <parseRcChannels+0x54>)
 800d740:	1a9b      	subs	r3, r3, r2
 800d742:	b2c9      	uxtb	r1, r1
 800d744:	4a08      	ldr	r2, [pc, #32]	; (800d768 <parseRcChannels+0x5c>)
 800d746:	54d1      	strb	r1, [r2, r3]
    for (const char *c = input; *c; c++) {
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	3301      	adds	r3, #1
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e1      	bne.n	800d71a <parseRcChannels+0xe>
        }
    }
}
 800d756:	bf00      	nop
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	0802cad8 	.word	0x0802cad8
 800d764:	0802cae0 	.word	0x0802cae0
 800d768:	20000908 	.word	0x20000908

0800d76c <setRssiDirect>:

void setRssiDirect(uint16_t newRssi, rssiSource_e source)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	460a      	mov	r2, r1
 800d776:	80fb      	strh	r3, [r7, #6]
 800d778:	4613      	mov	r3, r2
 800d77a:	717b      	strb	r3, [r7, #5]
    if (source != rssiSource) {
 800d77c:	4b07      	ldr	r3, [pc, #28]	; (800d79c <setRssiDirect+0x30>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	797a      	ldrb	r2, [r7, #5]
 800d782:	429a      	cmp	r2, r3
 800d784:	d103      	bne.n	800d78e <setRssiDirect+0x22>
        return;
    }

    rssi = newRssi;
 800d786:	4a06      	ldr	r2, [pc, #24]	; (800d7a0 <setRssiDirect+0x34>)
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	8013      	strh	r3, [r2, #0]
 800d78c:	e000      	b.n	800d790 <setRssiDirect+0x24>
        return;
 800d78e:	bf00      	nop
}
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	20003eaa 	.word	0x20003eaa
 800d7a0:	20003e88 	.word	0x20003e88

0800d7a4 <updateRssiSamples>:

#define RSSI_SAMPLE_COUNT 16

static uint16_t updateRssiSamples(uint16_t value)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	80fb      	strh	r3, [r7, #6]
    static uint16_t samples[RSSI_SAMPLE_COUNT];
    static uint8_t sampleIndex = 0;
    static unsigned sum = 0;

    sum += value - samples[sampleIndex];
 800d7ae:	88fb      	ldrh	r3, [r7, #6]
 800d7b0:	4a15      	ldr	r2, [pc, #84]	; (800d808 <updateRssiSamples+0x64>)
 800d7b2:	7812      	ldrb	r2, [r2, #0]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4a15      	ldr	r2, [pc, #84]	; (800d80c <updateRssiSamples+0x68>)
 800d7b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	461a      	mov	r2, r3
 800d7c0:	4b13      	ldr	r3, [pc, #76]	; (800d810 <updateRssiSamples+0x6c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	4a12      	ldr	r2, [pc, #72]	; (800d810 <updateRssiSamples+0x6c>)
 800d7c8:	6013      	str	r3, [r2, #0]
    samples[sampleIndex] = value;
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <updateRssiSamples+0x64>)
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4a0e      	ldr	r2, [pc, #56]	; (800d80c <updateRssiSamples+0x68>)
 800d7d2:	88fb      	ldrh	r3, [r7, #6]
 800d7d4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    sampleIndex = (sampleIndex + 1) % RSSI_SAMPLE_COUNT;
 800d7d8:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <updateRssiSamples+0x64>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	425a      	negs	r2, r3
 800d7e0:	f003 030f 	and.w	r3, r3, #15
 800d7e4:	f002 020f 	and.w	r2, r2, #15
 800d7e8:	bf58      	it	pl
 800d7ea:	4253      	negpl	r3, r2
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <updateRssiSamples+0x64>)
 800d7f0:	701a      	strb	r2, [r3, #0]
    return sum / RSSI_SAMPLE_COUNT;
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <updateRssiSamples+0x6c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	091b      	lsrs	r3, r3, #4
 800d7f8:	b29b      	uxth	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20003eb2 	.word	0x20003eb2
 800d80c:	20000a34 	.word	0x20000a34
 800d810:	20000a54 	.word	0x20000a54

0800d814 <setRssi>:

void setRssi(uint16_t rssiValue, rssiSource_e source)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	460a      	mov	r2, r1
 800d81e:	80fb      	strh	r3, [r7, #6]
 800d820:	4613      	mov	r3, r2
 800d822:	717b      	strb	r3, [r7, #5]
    if (source != rssiSource) {
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <setRssi+0x3c>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	797a      	ldrb	r2, [r7, #5]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d10b      	bne.n	800d846 <setRssi+0x32>
        return;
    }

    // Filter RSSI value
    if (source == RSSI_SOURCE_FRAME_ERRORS) {
 800d82e:	797b      	ldrb	r3, [r7, #5]
 800d830:	2b05      	cmp	r3, #5
 800d832:	d009      	beq.n	800d848 <setRssi+0x34>
        //rssi = pt1FilterApply(&frameErrFilter, rssiValue);
    } else {
        // calculate new sample mean
        rssi = updateRssiSamples(rssiValue);
 800d834:	88fb      	ldrh	r3, [r7, #6]
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff ffb4 	bl	800d7a4 <updateRssiSamples>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	4b04      	ldr	r3, [pc, #16]	; (800d854 <setRssi+0x40>)
 800d842:	801a      	strh	r2, [r3, #0]
 800d844:	e000      	b.n	800d848 <setRssi+0x34>
        return;
 800d846:	bf00      	nop
    }
}
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20003eaa 	.word	0x20003eaa
 800d854:	20003e88 	.word	0x20003e88

0800d858 <updateRSSIPWM>:
        lastMspRssiUpdateUs = micros();
    }
}

static void updateRSSIPWM(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af02      	add	r7, sp, #8
    // Read value of AUX channel as rssi
    int16_t pwmRssi = rcData[10 - 1]; //.rssi_channel = 0
 800d85e:	4b12      	ldr	r3, [pc, #72]	; (800d8a8 <updateRSSIPWM+0x50>)
 800d860:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d868:	ee17 3a90 	vmov	r3, s15
 800d86c:	80fb      	strh	r3, [r7, #6]

    // Range of rawPwmRssi is [1000;2000]. rssi should be in [0;1023];
    setRssiDirect(scaleRange(constrain(pwmRssi, PWM_RANGE_MIN, PWM_RANGE_MAX), PWM_RANGE_MIN, PWM_RANGE_MAX, 0, RSSI_MAX_VALUE), RSSI_SOURCE_RX_CHANNEL);
 800d86e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d872:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d876:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff fb50 	bl	800cf20 <constrain>
 800d880:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	2300      	movs	r3, #0
 800d888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d88c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d890:	f7fd fd62 	bl	800b358 <scaleRange>
 800d894:	4603      	mov	r3, r0
 800d896:	b29b      	uxth	r3, r3
 800d898:	2102      	movs	r1, #2
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff ff66 	bl	800d76c <setRssiDirect>
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	20000964 	.word	0x20000964

0800d8ac <updateRSSIADC>:

static void updateRSSIADC(uint32_t currentTimeUs)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
    const uint16_t adcRssiSample = adcGetChannel(ADC_RSSI);
    uint16_t rssiValue = adcRssiSample / RSSI_ADC_DIVISOR;

    setRssi(rssiValue, RSSI_SOURCE_ADC);
#endif
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <updateRSSI>:

void updateRSSI(uint32_t currentTimeUs)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
    switch (rssiSource) {
 800d8c8:	4b14      	ldr	r3, [pc, #80]	; (800d91c <updateRSSI+0x5c>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b04      	cmp	r3, #4
 800d8ce:	d00c      	beq.n	800d8ea <updateRSSI+0x2a>
 800d8d0:	2b04      	cmp	r3, #4
 800d8d2:	dc1b      	bgt.n	800d90c <updateRSSI+0x4c>
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d004      	beq.n	800d8e2 <updateRSSI+0x22>
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d117      	bne.n	800d90c <updateRSSI+0x4c>
    case RSSI_SOURCE_RX_CHANNEL:
        updateRSSIPWM();
 800d8dc:	f7ff ffbc 	bl	800d858 <updateRSSIPWM>
        break;
 800d8e0:	e017      	b.n	800d912 <updateRSSI+0x52>
    case RSSI_SOURCE_ADC:
        updateRSSIADC(currentTimeUs);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff ffe2 	bl	800d8ac <updateRSSIADC>
        break;
 800d8e8:	e013      	b.n	800d912 <updateRSSI+0x52>
    case RSSI_SOURCE_MSP:
        if (cmpTimeUs(micros(), lastMspRssiUpdateUs) > DELAY_1500_MS) {  // 1.5s
 800d8ea:	f7fb fca3 	bl	8009234 <micros>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	4b0b      	ldr	r3, [pc, #44]	; (800d920 <updateRSSI+0x60>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f7ff fb62 	bl	800cfc0 <cmpTimeUs>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	4a09      	ldr	r2, [pc, #36]	; (800d924 <updateRSSI+0x64>)
 800d900:	4293      	cmp	r3, r2
 800d902:	dd05      	ble.n	800d910 <updateRSSI+0x50>
            rssi = 0;
 800d904:	4b08      	ldr	r3, [pc, #32]	; (800d928 <updateRSSI+0x68>)
 800d906:	2200      	movs	r2, #0
 800d908:	801a      	strh	r2, [r3, #0]
        }
        break;
 800d90a:	e001      	b.n	800d910 <updateRSSI+0x50>
    default:
        break;
 800d90c:	bf00      	nop
 800d90e:	e000      	b.n	800d912 <updateRSSI+0x52>
        break;
 800d910:	bf00      	nop
    }
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	20003eaa 	.word	0x20003eaa
 800d920:	20000910 	.word	0x20000910
 800d924:	0016e360 	.word	0x0016e360
 800d928:	20003e88 	.word	0x20003e88

0800d92c <rxFrameTimeUs>:

    return frameTimeDeltaUs;
}

uint32_t rxFrameTimeUs(void)
{
 800d92c:	b480      	push	{r7}
 800d92e:	af00      	add	r7, sp, #0
    return rxRuntimeState.lastRcFrameTimeUs;
 800d930:	4b03      	ldr	r3, [pc, #12]	; (800d940 <rxFrameTimeUs+0x14>)
 800d932:	6a1b      	ldr	r3, [r3, #32]
}
 800d934:	4618      	mov	r0, r3
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	200009f4 	.word	0x200009f4

0800d944 <processRx>:

/*
 * processRx called from taskUpdateRxMain
 */
bool processRx(uint32_t currentTimeUs)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    if (!calculateRxChannelsAndUpdateFailsafe(currentTimeUs)) {
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff fe63 	bl	800d618 <calculateRxChannelsAndUpdateFailsafe>
 800d952:	4603      	mov	r3, r0
 800d954:	f083 0301 	eor.w	r3, r3, #1
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <processRx+0x1e>
        return false;
 800d95e:	2300      	movs	r3, #0
 800d960:	e003      	b.n	800d96a <processRx+0x26>
    // if (featureIsEnabled(FEATURE_3D)) {
    //     if (!IS_RC_MODE_ACTIVE(BOXARM))
    //         disarm(DISARM_REASON_SWITCH);
    // }

    updateRSSI(currentTimeUs);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff ffac 	bl	800d8c0 <updateRSSI>
//             launchControlState = LAUNCH_CONTROL_DISABLED;
//         }
//     }
// #endif

    return true;
 800d968:	2301      	movs	r3, #1
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <processRxModes>:

void processRxModes(uint32_t currentTimeUs)
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
        beeper(BEEPER_RC_SMOOTHING_INIT_FAIL);
    }
#endif

    //pidSetAntiGravityState(IS_RC_MODE_ACTIVE(BOXANTIGRAVITY) || featureIsEnabled(FEATURE_ANTI_GRAVITY));
}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
	...

0800d988 <rcLookupThrottle>:

#define THROTTLE_LOOKUP_LENGTH 12
static int16_t lookupThrottleRC[THROTTLE_LOOKUP_LENGTH];    // lookup table for expo & mid THROTTLE

static int16_t rcLookupThrottle(int32_t tmp)
{
 800d988:	b490      	push	{r4, r7}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    const int32_t tmp2 = tmp / 100;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a17      	ldr	r2, [pc, #92]	; (800d9f0 <rcLookupThrottle+0x68>)
 800d994:	fb82 1203 	smull	r1, r2, r2, r3
 800d998:	1152      	asrs	r2, r2, #5
 800d99a:	17db      	asrs	r3, r3, #31
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	60fb      	str	r3, [r7, #12]
    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
    return lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;
 800d9a0:	4a14      	ldr	r2, [pc, #80]	; (800d9f4 <rcLookupThrottle+0x6c>)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800d9b0:	fb03 f101 	mul.w	r1, r3, r1
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	440b      	add	r3, r1
 800d9b8:	68f9      	ldr	r1, [r7, #12]
 800d9ba:	3101      	adds	r1, #1
 800d9bc:	480d      	ldr	r0, [pc, #52]	; (800d9f4 <rcLookupThrottle+0x6c>)
 800d9be:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	480b      	ldr	r0, [pc, #44]	; (800d9f4 <rcLookupThrottle+0x6c>)
 800d9c6:	68f9      	ldr	r1, [r7, #12]
 800d9c8:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800d9cc:	1a61      	subs	r1, r4, r1
 800d9ce:	fb01 f303 	mul.w	r3, r1, r3
 800d9d2:	4907      	ldr	r1, [pc, #28]	; (800d9f0 <rcLookupThrottle+0x68>)
 800d9d4:	fb81 0103 	smull	r0, r1, r1, r3
 800d9d8:	1149      	asrs	r1, r1, #5
 800d9da:	17db      	asrs	r3, r3, #31
 800d9dc:	1acb      	subs	r3, r1, r3
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4413      	add	r3, r2
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	b21b      	sxth	r3, r3
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bc90      	pop	{r4, r7}
 800d9ee:	4770      	bx	lr
 800d9f0:	51eb851f 	.word	0x51eb851f
 800d9f4:	20000a18 	.word	0x20000a18

0800d9f8 <updateRcCommands>:

void updateRcCommands(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
    isRxDataNew = true;
 800d9fe:	4b6d      	ldr	r3, [pc, #436]	; (800dbb4 <updateRcCommands+0x1bc>)
 800da00:	2201      	movs	r2, #1
 800da02:	701a      	strb	r2, [r3, #0]

    for (int axis = 0; axis < 3; axis++) {
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e09d      	b.n	800db46 <updateRcCommands+0x14e>
        // non coupled PID reduction scaler used in PID controller 1 and PID controller 2.

        float tmp = MIN(ABS(rcData[axis] - p_rx_pg->midrc), 500);
 800da0a:	4a6b      	ldr	r2, [pc, #428]	; (800dbb8 <updateRcCommands+0x1c0>)
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	ed93 7a00 	vldr	s14, [r3]
 800da16:	4b69      	ldr	r3, [pc, #420]	; (800dbbc <updateRcCommands+0x1c4>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	8a1b      	ldrh	r3, [r3, #16]
 800da1c:	ee07 3a90 	vmov	s15, r3
 800da20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da28:	edc7 7a02 	vstr	s15, [r7, #8]
 800da2c:	edd7 7a02 	vldr	s15, [r7, #8]
 800da30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da38:	dd02      	ble.n	800da40 <updateRcCommands+0x48>
 800da3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800da3e:	e003      	b.n	800da48 <updateRcCommands+0x50>
 800da40:	edd7 7a02 	vldr	s15, [r7, #8]
 800da44:	eef1 7a67 	vneg.f32	s15, s15
 800da48:	edc7 7a01 	vstr	s15, [r7, #4]
 800da4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800da50:	603b      	str	r3, [r7, #0]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	ee07 3a90 	vmov	s15, r3
 800da58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da5c:	ed97 7a01 	vldr	s14, [r7, #4]
 800da60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da68:	d502      	bpl.n	800da70 <updateRcCommands+0x78>
 800da6a:	edd7 7a01 	vldr	s15, [r7, #4]
 800da6e:	e004      	b.n	800da7a <updateRcCommands+0x82>
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	ee07 3a90 	vmov	s15, r3
 800da76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da7a:	edc7 7a04 	vstr	s15, [r7, #16]
        if (axis == ROLL || axis == PITCH) {
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <updateRcCommands+0x92>
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d11b      	bne.n	800dac2 <updateRcCommands+0xca>
            if (tmp > 5) {
 800da8a:	edd7 7a04 	vldr	s15, [r7, #16]
 800da8e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800da92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da9a:	dd08      	ble.n	800daae <updateRcCommands+0xb6>
                tmp -= 5;
 800da9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800daa0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800daa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800daa8:	edc7 7a04 	vstr	s15, [r7, #16]
 800daac:	e002      	b.n	800dab4 <updateRcCommands+0xbc>
            } else {
                tmp = 0;
 800daae:	f04f 0300 	mov.w	r3, #0
 800dab2:	613b      	str	r3, [r7, #16]
            }
            rcCommand[axis] = tmp;
 800dab4:	4a42      	ldr	r2, [pc, #264]	; (800dbc0 <updateRcCommands+0x1c8>)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	601a      	str	r2, [r3, #0]
 800dac0:	e01e      	b.n	800db00 <updateRcCommands+0x108>
        } else {
            if (tmp > 5) {
 800dac2:	edd7 7a04 	vldr	s15, [r7, #16]
 800dac6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800daca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad2:	dd08      	ble.n	800dae6 <updateRcCommands+0xee>
                tmp -= 5;
 800dad4:	edd7 7a04 	vldr	s15, [r7, #16]
 800dad8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800dadc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dae0:	edc7 7a04 	vstr	s15, [r7, #16]
 800dae4:	e002      	b.n	800daec <updateRcCommands+0xf4>
            } else {
                tmp = 0;
 800dae6:	f04f 0300 	mov.w	r3, #0
 800daea:	613b      	str	r3, [r7, #16]
            }
            rcCommand[axis] = tmp * -GET_DIRECTION(false);
 800daec:	edd7 7a04 	vldr	s15, [r7, #16]
 800daf0:	eef1 7a67 	vneg.f32	s15, s15
 800daf4:	4a32      	ldr	r2, [pc, #200]	; (800dbc0 <updateRcCommands+0x1c8>)
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	edc3 7a00 	vstr	s15, [r3]
        }
        if (rcData[axis] < p_rx_pg->midrc) {
 800db00:	4a2d      	ldr	r2, [pc, #180]	; (800dbb8 <updateRcCommands+0x1c0>)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	ed93 7a00 	vldr	s14, [r3]
 800db0c:	4b2b      	ldr	r3, [pc, #172]	; (800dbbc <updateRcCommands+0x1c4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	8a1b      	ldrh	r3, [r3, #16]
 800db12:	ee07 3a90 	vmov	s15, r3
 800db16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db22:	d50d      	bpl.n	800db40 <updateRcCommands+0x148>
            rcCommand[axis] = -rcCommand[axis];
 800db24:	4a26      	ldr	r2, [pc, #152]	; (800dbc0 <updateRcCommands+0x1c8>)
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	edd3 7a00 	vldr	s15, [r3]
 800db30:	eef1 7a67 	vneg.f32	s15, s15
 800db34:	4a22      	ldr	r2, [pc, #136]	; (800dbc0 <updateRcCommands+0x1c8>)
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < 3; axis++) {
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	3301      	adds	r3, #1
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	f77f af5e 	ble.w	800da0a <updateRcCommands+0x12>
    // if (featureIsEnabled(FEATURE_3D)) {
    //     tmp = constrain(rcData[THROTTLE], PWM_RANGE_MIN, PWM_RANGE_MAX);
    //     tmp = (uint32_t)(tmp - PWM_RANGE_MIN);
    // } else
    {
        tmp = constrain(rcData[THROTTLE], p_rx_pg->mincheck, PWM_RANGE_MAX);
 800db4e:	4b1a      	ldr	r3, [pc, #104]	; (800dbb8 <updateRcCommands+0x1c0>)
 800db50:	edd3 7a03 	vldr	s15, [r3, #12]
 800db54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db58:	4b18      	ldr	r3, [pc, #96]	; (800dbbc <updateRcCommands+0x1c4>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	8a5b      	ldrh	r3, [r3, #18]
 800db5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800db62:	4619      	mov	r1, r3
 800db64:	ee17 0a90 	vmov	r0, s15
 800db68:	f7ff f9da 	bl	800cf20 <constrain>
 800db6c:	60f8      	str	r0, [r7, #12]
        tmp = (uint32_t)(tmp - p_rx_pg->mincheck) * PWM_RANGE_MIN / (PWM_RANGE_MAX - p_rx_pg->mincheck);
 800db6e:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <updateRcCommands+0x1c4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	8a5b      	ldrh	r3, [r3, #18]
 800db74:	461a      	mov	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	461a      	mov	r2, r3
 800db7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	4a0d      	ldr	r2, [pc, #52]	; (800dbbc <updateRcCommands+0x1c4>)
 800db86:	6812      	ldr	r2, [r2, #0]
 800db88:	8a52      	ldrh	r2, [r2, #18]
 800db8a:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800db8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db92:	60fb      	str	r3, [r7, #12]

    // if (getLowVoltageCutoff()->enabled) {
    //     tmp = tmp * getLowVoltageCutoff()->percentage / 100;
    // }

    rcCommand[THROTTLE] = rcLookupThrottle(tmp);
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f7ff fef7 	bl	800d988 <rcLookupThrottle>
 800db9a:	4603      	mov	r3, r0
 800db9c:	ee07 3a90 	vmov	s15, r3
 800dba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dba4:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <updateRcCommands+0x1c8>)
 800dba6:	edc3 7a03 	vstr	s15, [r3, #12]
    //     rcCommand[PITCH] = rcCommandBuff.Y;
    //     if ((!FLIGHT_MODE(ANGLE_MODE)&&(!FLIGHT_MODE(HORIZON_MODE)) && (!FLIGHT_MODE(GPS_RESCUE_MODE)))) {
    //         rcCommand[YAW] = rcCommandBuff.Z;
    //     }
    // }
}
 800dbaa:	bf00      	nop
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	20003ea9 	.word	0x20003ea9
 800dbb8:	20000964 	.word	0x20000964
 800dbbc:	2000019c 	.word	0x2000019c
 800dbc0:	200008f8 	.word	0x200008f8

0800dbc4 <cliRx>:


#ifdef _USE_HW_CLI
void cliRx(cli_args_t *args)
{
 800dbc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbc8:	b0a2      	sub	sp, #136	; 0x88
 800dbca:	af12      	add	r7, sp, #72	; 0x48
 800dbcc:	6378      	str	r0, [r7, #52]	; 0x34
  bool ret = false;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

if (args->argc == 1 && args->isStr(0, "show") == true)
 800dbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd6:	881b      	ldrh	r3, [r3, #0]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	f040 8088 	bne.w	800dcee <cliRx+0x12a>
 800dbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	494a      	ldr	r1, [pc, #296]	; (800dd0c <cliRx+0x148>)
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	4798      	blx	r3
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d07f      	beq.n	800dcee <cliRx+0x12a>
  {
    uint32_t pre_time;
 	pre_time = millis();
 800dbee:	f7fb fb1a 	bl	8009226 <millis>
 800dbf2:	63b8      	str	r0, [r7, #56]	; 0x38
    while(cliKeepLoop())
 800dbf4:	e073      	b.n	800dcde <cliRx+0x11a>
    {
        scheduler();
 800dbf6:	f000 ff13 	bl	800ea20 <scheduler>
        if (millis()-pre_time >= 1000)
 800dbfa:	f7fb fb14 	bl	8009226 <millis>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc08:	d369      	bcc.n	800dcde <cliRx+0x11a>
    	{
     		pre_time = millis();
 800dc0a:	f7fb fb0c 	bl	8009226 <millis>
 800dc0e:	63b8      	str	r0, [r7, #56]	; 0x38
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc10:	4b3f      	ldr	r3, [pc, #252]	; (800dd10 <cliRx+0x14c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fa fbdf 	bl	80083d8 <__aeabi_f2d>
 800dc1a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800dc1e:	4b3c      	ldr	r3, [pc, #240]	; (800dd10 <cliRx+0x14c>)
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fa fbd8 	bl	80083d8 <__aeabi_f2d>
 800dc28:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800dc2c:	4b38      	ldr	r3, [pc, #224]	; (800dd10 <cliRx+0x14c>)
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fa fbd1 	bl	80083d8 <__aeabi_f2d>
 800dc36:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800dc3a:	4b35      	ldr	r3, [pc, #212]	; (800dd10 <cliRx+0x14c>)
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fa fbca 	bl	80083d8 <__aeabi_f2d>
 800dc44:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800dc48:	4b31      	ldr	r3, [pc, #196]	; (800dd10 <cliRx+0x14c>)
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fa fbc3 	bl	80083d8 <__aeabi_f2d>
 800dc52:	e9c7 0102 	strd	r0, r1, [r7, #8]
            rcRaw[5], rcRaw[6], rcRaw[7], rcRaw[8], rcRaw[9]);
 800dc56:	4b2e      	ldr	r3, [pc, #184]	; (800dd10 <cliRx+0x14c>)
 800dc58:	695b      	ldr	r3, [r3, #20]
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fa fbbc 	bl	80083d8 <__aeabi_f2d>
 800dc60:	e9c7 0100 	strd	r0, r1, [r7]
            rcRaw[5], rcRaw[6], rcRaw[7], rcRaw[8], rcRaw[9]);
 800dc64:	4b2a      	ldr	r3, [pc, #168]	; (800dd10 <cliRx+0x14c>)
 800dc66:	699b      	ldr	r3, [r3, #24]
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fa fbb5 	bl	80083d8 <__aeabi_f2d>
 800dc6e:	4682      	mov	sl, r0
 800dc70:	468b      	mov	fp, r1
            rcRaw[5], rcRaw[6], rcRaw[7], rcRaw[8], rcRaw[9]);
 800dc72:	4b27      	ldr	r3, [pc, #156]	; (800dd10 <cliRx+0x14c>)
 800dc74:	69db      	ldr	r3, [r3, #28]
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fa fbae 	bl	80083d8 <__aeabi_f2d>
 800dc7c:	4680      	mov	r8, r0
 800dc7e:	4689      	mov	r9, r1
            rcRaw[5], rcRaw[6], rcRaw[7], rcRaw[8], rcRaw[9]);
 800dc80:	4b23      	ldr	r3, [pc, #140]	; (800dd10 <cliRx+0x14c>)
 800dc82:	6a1b      	ldr	r3, [r3, #32]
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fa fba7 	bl	80083d8 <__aeabi_f2d>
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	460d      	mov	r5, r1
            rcRaw[5], rcRaw[6], rcRaw[7], rcRaw[8], rcRaw[9]);
 800dc8e:	4b20      	ldr	r3, [pc, #128]	; (800dd10 <cliRx+0x14c>)
 800dc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            cliPrintf("rx: %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r", rcRaw[0], rcRaw[1], rcRaw[2], rcRaw[3], rcRaw[4],
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fa fba0 	bl	80083d8 <__aeabi_f2d>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800dca0:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 800dca4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dca8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dcac:	ed97 7b00 	vldr	d7, [r7]
 800dcb0:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dcb4:	ed97 7b02 	vldr	d7, [r7, #8]
 800dcb8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcbc:	ed97 7b04 	vldr	d7, [r7, #16]
 800dcc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dcc4:	ed97 7b06 	vldr	d7, [r7, #24]
 800dcc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dccc:	ed97 7b08 	vldr	d7, [r7, #32]
 800dcd0:	ed8d 7b00 	vstr	d7, [sp]
 800dcd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dcd8:	480e      	ldr	r0, [pc, #56]	; (800dd14 <cliRx+0x150>)
 800dcda:	f004 fbb7 	bl	801244c <cliPrintf>
    while(cliKeepLoop())
 800dcde:	f004 fcaf 	bl	8012640 <cliKeepLoop>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d186      	bne.n	800dbf6 <cliRx+0x32>
    	}
    }
    ret = true;
 800dce8:	2301      	movs	r3, #1
 800dcea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  if (ret != true)
 800dcee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcf2:	f083 0301 	eor.w	r3, r3, #1
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <cliRx+0x13e>
  {
    cliPrintf("Rx show \n\r");
 800dcfc:	4806      	ldr	r0, [pc, #24]	; (800dd18 <cliRx+0x154>)
 800dcfe:	f004 fba5 	bl	801244c <cliPrintf>
  }
}
 800dd02:	bf00      	nop
 800dd04:	3740      	adds	r7, #64	; 0x40
 800dd06:	46bd      	mov	sp, r7
 800dd08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd0c:	0802bc50 	.word	0x0802bc50
 800dd10:	2000091c 	.word	0x2000091c
 800dd14:	0802bc58 	.word	0x0802bc58
 800dd18:	0802bc88 	.word	0x0802bc88

0800dd1c <cmpTimeUs>:
// #endif

#define SBUS_DIGITAL_CHANNEL_MIN 173
#define SBUS_DIGITAL_CHANNEL_MAX 1812

static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <sbusDataReceive>:
    bool done;
} sbusFrameData_t;

// Receive ISR callback
void sbusDataReceive(uint8_t c, void *data)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
    sbusFrameData_t *sbusFrameData = data;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	617b      	str	r3, [r7, #20]

    const uint32_t nowUs = micros();
 800dd48:	f7fb fa74 	bl	8009234 <micros>
 800dd4c:	6138      	str	r0, [r7, #16]

    const int32_t sbusFrameTime = cmpTimeUs(nowUs, sbusFrameData->startAtUs);
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6938      	ldr	r0, [r7, #16]
 800dd56:	f7ff ffe1 	bl	800dd1c <cmpTimeUs>
 800dd5a:	60f8      	str	r0, [r7, #12]

    if (sbusFrameTime > (long)(SBUS_TIME_NEEDED_PER_FRAME + 500)) {
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f640 52ac 	movw	r2, #3500	; 0xdac
 800dd62:	4293      	cmp	r3, r2
 800dd64:	dd03      	ble.n	800dd6e <sbusDataReceive+0x36>
        sbusFrameData->position = 0;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 2020 	strb.w	r2, [r3, #32]
    }

    if (sbusFrameData->position == 0) {
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d105      	bne.n	800dd84 <sbusDataReceive+0x4c>
        if (c != SBUS_FRAME_BEGIN_BYTE) {
 800dd78:	79fb      	ldrb	r3, [r7, #7]
 800dd7a:	2b0f      	cmp	r3, #15
 800dd7c:	d122      	bne.n	800ddc4 <sbusDataReceive+0x8c>
            return;
        }
        sbusFrameData->startAtUs = nowUs;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	61da      	str	r2, [r3, #28]
    }
 
    if (sbusFrameData->position < SBUS_FRAME_SIZE) {
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd8a:	2b18      	cmp	r3, #24
 800dd8c:	d81b      	bhi.n	800ddc6 <sbusDataReceive+0x8e>
        sbusFrameData->frame.bytes[sbusFrameData->position++] = (uint8_t)c;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	b2d1      	uxtb	r1, r2
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	f882 1020 	strb.w	r1, [r2, #32]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	79fa      	ldrb	r2, [r7, #7]
 800dda4:	545a      	strb	r2, [r3, r1]
        if (sbusFrameData->position < SBUS_FRAME_SIZE) {
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddac:	2b18      	cmp	r3, #24
 800ddae:	d804      	bhi.n	800ddba <sbusDataReceive+0x82>
            sbusFrameData->done = false;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800ddb8:	e005      	b.n	800ddc6 <sbusDataReceive+0x8e>
        } else {
            sbusFrameData->done = true;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800ddc2:	e000      	b.n	800ddc6 <sbusDataReceive+0x8e>
            return;
 800ddc4:	bf00      	nop
            //DEBUG_SET(DEBUG_SBUS, DEBUG_SBUS_FRAME_TIME, sbusFrameTime);
        }
    }
}
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <sbusFrameStatus>:

static uint8_t sbusFrameStatus(rxRuntimeState_t *rxRuntimeState)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
    sbusFrameData_t *sbusFrameData = rxRuntimeState->frameData;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	69db      	ldr	r3, [r3, #28]
 800ddd8:	60fb      	str	r3, [r7, #12]
    if (!sbusFrameData->done) {
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dde0:	f083 0301 	eor.w	r3, r3, #1
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <sbusFrameStatus+0x22>
        return RX_FRAME_PENDING;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e015      	b.n	800de1a <sbusFrameStatus+0x4e>
    }
    sbusFrameData->done = false;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    //DEBUG_SET(DEBUG_SBUS, DEBUG_SBUS_FRAME_FLAGS, sbusFrameData->frame.frame.channels.flags);

    const uint8_t frameStatus = sbusChannelsDecode(rxRuntimeState, &sbusFrameData->frame.frame.channels);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f847 	bl	800de90 <sbusChannelsDecode>
 800de02:	4603      	mov	r3, r0
 800de04:	72fb      	strb	r3, [r7, #11]

    if (!(frameStatus & (RX_FRAME_FAILSAFE | RX_FRAME_DROPPED))) {
 800de06:	7afb      	ldrb	r3, [r7, #11]
 800de08:	f003 030a 	and.w	r3, r3, #10
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d103      	bne.n	800de18 <sbusFrameStatus+0x4c>
        rxRuntimeState->lastRcFrameTimeUs = sbusFrameData->startAtUs;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	69da      	ldr	r2, [r3, #28]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	621a      	str	r2, [r3, #32]
    }

    return frameStatus;
 800de18:	7afb      	ldrb	r3, [r7, #11]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
	...

0800de24 <sbusInit>:

bool sbusInit(rxRuntimeState_t *rxRuntimeState)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
    static uint16_t sbusChannelData[SBUS_MAX_CHANNEL];
    static sbusFrameData_t sbusFrameData;
    static uint32_t sbusBaudRate;

    rxRuntimeState->channelData = sbusChannelData;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a12      	ldr	r2, [pc, #72]	; (800de78 <sbusInit+0x54>)
 800de30:	619a      	str	r2, [r3, #24]
    rxRuntimeState->frameData = &sbusFrameData;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a11      	ldr	r2, [pc, #68]	; (800de7c <sbusInit+0x58>)
 800de36:	61da      	str	r2, [r3, #28]
    sbusChannelsInit(rxRuntimeState);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f963 	bl	800e104 <sbusChannelsInit>

    rxRuntimeState->channelCount = SBUS_MAX_CHANNEL;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2212      	movs	r2, #18
 800de42:	709a      	strb	r2, [r3, #2]

    // if (rxConfig->sbus_baud_fast) {
    //     rxRuntimeState->rxRefreshRate = SBUS_FAST_RX_REFRESH_RATE;
    //     sbusBaudRate  = SBUS_FAST_BAUDRATE;
    // } else {
        rxRuntimeState->rxRefreshRate = SBUS_RX_REFRESH_RATE;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800de4a:	809a      	strh	r2, [r3, #4]
        sbusBaudRate  = SBUS_BAUDRATE;
 800de4c:	4b0c      	ldr	r3, [pc, #48]	; (800de80 <sbusInit+0x5c>)
 800de4e:	4a0d      	ldr	r2, [pc, #52]	; (800de84 <sbusInit+0x60>)
 800de50:	601a      	str	r2, [r3, #0]
//    }

    rxRuntimeState->rcFrameStatusFn = sbusFrameStatus;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a0c      	ldr	r2, [pc, #48]	; (800de88 <sbusInit+0x64>)
 800de56:	60da      	str	r2, [r3, #12]
    rxRuntimeState->rcFrameTimeUsFn = rxFrameTimeUs;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a0c      	ldr	r2, [pc, #48]	; (800de8c <sbusInit+0x68>)
 800de5c:	615a      	str	r2, [r3, #20]
    // }

#ifdef USE_TELEMETRY
    bool portShared = telemetryCheckRxPortShared(portConfig, rxRuntimeState->serialrxProvider);
#else
    bool portShared = false;
 800de5e:	2300      	movs	r3, #0
 800de60:	73fb      	strb	r3, [r7, #15]
#endif
    uartOpen(_DEF_UART2, sbusBaudRate); // UART2 = RC
 800de62:	4b07      	ldr	r3, [pc, #28]	; (800de80 <sbusInit+0x5c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4619      	mov	r1, r3
 800de68:	2002      	movs	r0, #2
 800de6a:	f007 f8d7 	bl	801501c <uartOpen>
    if (portShared) {
        telemetrySharedPort = sBusPort;
    }
#endif

    return true;
 800de6e:	2301      	movs	r3, #1
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20000a58 	.word	0x20000a58
 800de7c:	20000a7c 	.word	0x20000a7c
 800de80:	20000aa0 	.word	0x20000aa0
 800de84:	000186a0 	.word	0x000186a0
 800de88:	0800ddcd 	.word	0x0800ddcd
 800de8c:	0800d92d 	.word	0x0800d92d

0800de90 <sbusChannelsDecode>:

#define SBUS_DIGITAL_CHANNEL_MIN 173
#define SBUS_DIGITAL_CHANNEL_MAX 1812

uint8_t sbusChannelsDecode(rxRuntimeState_t *rxRuntimeState, const sbusChannels_t *channels)
{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
    uint16_t *sbusChannelData = rxRuntimeState->channelData;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	699b      	ldr	r3, [r3, #24]
 800de9e:	60fb      	str	r3, [r7, #12]
    sbusChannelData[0] = channels->chan0;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	781a      	ldrb	r2, [r3, #0]
 800dea4:	785b      	ldrb	r3, [r3, #1]
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	021b      	lsls	r3, r3, #8
 800deac:	4313      	orrs	r3, r2
 800deae:	b29b      	uxth	r3, r3
 800deb0:	461a      	mov	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	801a      	strh	r2, [r3, #0]
    sbusChannelData[1] = channels->chan1;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	785a      	ldrb	r2, [r3, #1]
 800deba:	08d2      	lsrs	r2, r2, #3
 800debc:	b2d2      	uxtb	r2, r2
 800debe:	789b      	ldrb	r3, [r3, #2]
 800dec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dec4:	015b      	lsls	r3, r3, #5
 800dec6:	4313      	orrs	r3, r2
 800dec8:	b29a      	uxth	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	3302      	adds	r3, #2
 800dece:	801a      	strh	r2, [r3, #0]
    sbusChannelData[2] = channels->chan2;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	789a      	ldrb	r2, [r3, #2]
 800ded4:	0992      	lsrs	r2, r2, #6
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	78d9      	ldrb	r1, [r3, #3]
 800deda:	0089      	lsls	r1, r1, #2
 800dedc:	430a      	orrs	r2, r1
 800dede:	791b      	ldrb	r3, [r3, #4]
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	029b      	lsls	r3, r3, #10
 800dee6:	4313      	orrs	r3, r2
 800dee8:	b29a      	uxth	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3304      	adds	r3, #4
 800deee:	801a      	strh	r2, [r3, #0]
    sbusChannelData[3] = channels->chan3;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	791a      	ldrb	r2, [r3, #4]
 800def4:	0852      	lsrs	r2, r2, #1
 800def6:	b2d2      	uxtb	r2, r2
 800def8:	795b      	ldrb	r3, [r3, #5]
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	01db      	lsls	r3, r3, #7
 800df00:	4313      	orrs	r3, r2
 800df02:	b29a      	uxth	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3306      	adds	r3, #6
 800df08:	801a      	strh	r2, [r3, #0]
    sbusChannelData[4] = channels->chan4;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	795a      	ldrb	r2, [r3, #5]
 800df0e:	0912      	lsrs	r2, r2, #4
 800df10:	b2d2      	uxtb	r2, r2
 800df12:	799b      	ldrb	r3, [r3, #6]
 800df14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	4313      	orrs	r3, r2
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3308      	adds	r3, #8
 800df22:	801a      	strh	r2, [r3, #0]
    sbusChannelData[5] = channels->chan5;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	799a      	ldrb	r2, [r3, #6]
 800df28:	09d2      	lsrs	r2, r2, #7
 800df2a:	b2d2      	uxtb	r2, r2
 800df2c:	79d9      	ldrb	r1, [r3, #7]
 800df2e:	0049      	lsls	r1, r1, #1
 800df30:	430a      	orrs	r2, r1
 800df32:	7a1b      	ldrb	r3, [r3, #8]
 800df34:	f003 0303 	and.w	r3, r3, #3
 800df38:	025b      	lsls	r3, r3, #9
 800df3a:	4313      	orrs	r3, r2
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	330a      	adds	r3, #10
 800df42:	801a      	strh	r2, [r3, #0]
    sbusChannelData[6] = channels->chan6;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	7a1a      	ldrb	r2, [r3, #8]
 800df48:	0892      	lsrs	r2, r2, #2
 800df4a:	b2d2      	uxtb	r2, r2
 800df4c:	7a5b      	ldrb	r3, [r3, #9]
 800df4e:	f003 031f 	and.w	r3, r3, #31
 800df52:	019b      	lsls	r3, r3, #6
 800df54:	4313      	orrs	r3, r2
 800df56:	b29a      	uxth	r2, r3
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	330c      	adds	r3, #12
 800df5c:	801a      	strh	r2, [r3, #0]
    sbusChannelData[7] = channels->chan7;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	7a5a      	ldrb	r2, [r3, #9]
 800df62:	0952      	lsrs	r2, r2, #5
 800df64:	b2d2      	uxtb	r2, r2
 800df66:	7a9b      	ldrb	r3, [r3, #10]
 800df68:	00db      	lsls	r3, r3, #3
 800df6a:	4313      	orrs	r3, r2
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	330e      	adds	r3, #14
 800df72:	801a      	strh	r2, [r3, #0]
    sbusChannelData[8] = channels->chan8;
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	7ada      	ldrb	r2, [r3, #11]
 800df78:	7b1b      	ldrb	r3, [r3, #12]
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	4313      	orrs	r3, r2
 800df82:	b29a      	uxth	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3310      	adds	r3, #16
 800df88:	801a      	strh	r2, [r3, #0]
    sbusChannelData[9] = channels->chan9;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	7b1a      	ldrb	r2, [r3, #12]
 800df8e:	08d2      	lsrs	r2, r2, #3
 800df90:	b2d2      	uxtb	r2, r2
 800df92:	7b5b      	ldrb	r3, [r3, #13]
 800df94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df98:	015b      	lsls	r3, r3, #5
 800df9a:	4313      	orrs	r3, r2
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3312      	adds	r3, #18
 800dfa2:	801a      	strh	r2, [r3, #0]
    sbusChannelData[10] = channels->chan10;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	7b5a      	ldrb	r2, [r3, #13]
 800dfa8:	0992      	lsrs	r2, r2, #6
 800dfaa:	b2d2      	uxtb	r2, r2
 800dfac:	7b99      	ldrb	r1, [r3, #14]
 800dfae:	0089      	lsls	r1, r1, #2
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	7bdb      	ldrb	r3, [r3, #15]
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	029b      	lsls	r3, r3, #10
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3314      	adds	r3, #20
 800dfc2:	801a      	strh	r2, [r3, #0]
    sbusChannelData[11] = channels->chan11;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	7bda      	ldrb	r2, [r3, #15]
 800dfc8:	0852      	lsrs	r2, r2, #1
 800dfca:	b2d2      	uxtb	r2, r2
 800dfcc:	7c1b      	ldrb	r3, [r3, #16]
 800dfce:	f003 030f 	and.w	r3, r3, #15
 800dfd2:	01db      	lsls	r3, r3, #7
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3316      	adds	r3, #22
 800dfdc:	801a      	strh	r2, [r3, #0]
    sbusChannelData[12] = channels->chan12;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	7c1a      	ldrb	r2, [r3, #16]
 800dfe2:	0912      	lsrs	r2, r2, #4
 800dfe4:	b2d2      	uxtb	r2, r2
 800dfe6:	7c5b      	ldrb	r3, [r3, #17]
 800dfe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfec:	011b      	lsls	r3, r3, #4
 800dfee:	4313      	orrs	r3, r2
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3318      	adds	r3, #24
 800dff6:	801a      	strh	r2, [r3, #0]
    sbusChannelData[13] = channels->chan13;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	7c5a      	ldrb	r2, [r3, #17]
 800dffc:	09d2      	lsrs	r2, r2, #7
 800dffe:	b2d2      	uxtb	r2, r2
 800e000:	7c99      	ldrb	r1, [r3, #18]
 800e002:	0049      	lsls	r1, r1, #1
 800e004:	430a      	orrs	r2, r1
 800e006:	7cdb      	ldrb	r3, [r3, #19]
 800e008:	f003 0303 	and.w	r3, r3, #3
 800e00c:	025b      	lsls	r3, r3, #9
 800e00e:	4313      	orrs	r3, r2
 800e010:	b29a      	uxth	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	331a      	adds	r3, #26
 800e016:	801a      	strh	r2, [r3, #0]
    sbusChannelData[14] = channels->chan14;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	7cda      	ldrb	r2, [r3, #19]
 800e01c:	0892      	lsrs	r2, r2, #2
 800e01e:	b2d2      	uxtb	r2, r2
 800e020:	7d1b      	ldrb	r3, [r3, #20]
 800e022:	f003 031f 	and.w	r3, r3, #31
 800e026:	019b      	lsls	r3, r3, #6
 800e028:	4313      	orrs	r3, r2
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	331c      	adds	r3, #28
 800e030:	801a      	strh	r2, [r3, #0]
    sbusChannelData[15] = channels->chan15;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	7d1a      	ldrb	r2, [r3, #20]
 800e036:	0952      	lsrs	r2, r2, #5
 800e038:	b2d2      	uxtb	r2, r2
 800e03a:	7d5b      	ldrb	r3, [r3, #21]
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	4313      	orrs	r3, r2
 800e040:	b29a      	uxth	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	331e      	adds	r3, #30
 800e046:	801a      	strh	r2, [r3, #0]

    if (channels->flags & SBUS_FLAG_CHANNEL_17) {
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	7d9b      	ldrb	r3, [r3, #22]
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d005      	beq.n	800e060 <sbusChannelsDecode+0x1d0>
        sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MAX;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3320      	adds	r3, #32
 800e058:	f240 7214 	movw	r2, #1812	; 0x714
 800e05c:	801a      	strh	r2, [r3, #0]
 800e05e:	e003      	b.n	800e068 <sbusChannelsDecode+0x1d8>
    } else {
        sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MIN;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	3320      	adds	r3, #32
 800e064:	22ad      	movs	r2, #173	; 0xad
 800e066:	801a      	strh	r2, [r3, #0]
    }

    if (channels->flags & SBUS_FLAG_CHANNEL_18) {
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	7d9b      	ldrb	r3, [r3, #22]
 800e06c:	f003 0302 	and.w	r3, r3, #2
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <sbusChannelsDecode+0x1f0>
        sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MAX;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	3322      	adds	r3, #34	; 0x22
 800e078:	f240 7214 	movw	r2, #1812	; 0x714
 800e07c:	801a      	strh	r2, [r3, #0]
 800e07e:	e003      	b.n	800e088 <sbusChannelsDecode+0x1f8>
    } else {
        sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MIN;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	3322      	adds	r3, #34	; 0x22
 800e084:	22ad      	movs	r2, #173	; 0xad
 800e086:	801a      	strh	r2, [r3, #0]
    }

    if (channels->flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	7d9b      	ldrb	r3, [r3, #22]
 800e08c:	f003 0308 	and.w	r3, r3, #8
 800e090:	2b00      	cmp	r3, #0
 800e092:	d001      	beq.n	800e098 <sbusChannelsDecode+0x208>
        // internal failsafe enabled and rx failsafe flag set
        // RX *should* still be sending valid channel data (repeated), so use it.
        return RX_FRAME_COMPLETE | RX_FRAME_FAILSAFE;
 800e094:	2303      	movs	r3, #3
 800e096:	e008      	b.n	800e0aa <sbusChannelsDecode+0x21a>
    }

    if (channels->flags & SBUS_FLAG_SIGNAL_LOSS) {
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	7d9b      	ldrb	r3, [r3, #22]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d001      	beq.n	800e0a8 <sbusChannelsDecode+0x218>
        // The received data is a repeat of the last valid data so can be considered complete.
        return RX_FRAME_COMPLETE | RX_FRAME_DROPPED;
 800e0a4:	2309      	movs	r3, #9
 800e0a6:	e000      	b.n	800e0aa <sbusChannelsDecode+0x21a>
    }

    return RX_FRAME_COMPLETE;
 800e0a8:	2301      	movs	r3, #1
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3714      	adds	r7, #20
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
	...

0800e0b8 <sbusChannelsReadRawRC>:

static float sbusChannelsReadRawRC(const rxRuntimeState_t *rxRuntimeState, uint8_t chan)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
    // Linear fitting values read from OpenTX-ppmus and comparing with values received by X4R
    // http://www.wolframalpha.com/input/?i=linear+fit+%7B173%2C+988%7D%2C+%7B1812%2C+2012%7D%2C+%7B993%2C+1500%7D
    return (5 * (float)rxRuntimeState->channelData[chan] / 8) + 880;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	699a      	ldr	r2, [r3, #24]
 800e0c8:	78fb      	ldrb	r3, [r7, #3]
 800e0ca:	005b      	lsls	r3, r3, #1
 800e0cc:	4413      	add	r3, r2
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	ee07 3a90 	vmov	s15, r3
 800e0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800e0dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e0e0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e0e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0e8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800e100 <sbusChannelsReadRawRC+0x48>
 800e0ec:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800e0f0:	eeb0 0a67 	vmov.f32	s0, s15
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	445c0000 	.word	0x445c0000

0800e104 <sbusChannelsInit>:

void sbusChannelsInit(rxRuntimeState_t *rxRuntimeState)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
    rxRuntimeState->rcReadRawFn = sbusChannelsReadRawRC;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a13      	ldr	r2, [pc, #76]	; (800e15c <sbusChannelsInit+0x58>)
 800e110:	609a      	str	r2, [r3, #8]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 800e112:	2300      	movs	r3, #0
 800e114:	60fb      	str	r3, [r7, #12]
 800e116:	e016      	b.n	800e146 <sbusChannelsInit+0x42>
        rxRuntimeState->channelData[b] = (16 * p_rx_pg->midrc) / 10 - 1408;
 800e118:	4b11      	ldr	r3, [pc, #68]	; (800e160 <sbusChannelsInit+0x5c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	8a1b      	ldrh	r3, [r3, #16]
 800e11e:	011b      	lsls	r3, r3, #4
 800e120:	4a10      	ldr	r2, [pc, #64]	; (800e164 <sbusChannelsInit+0x60>)
 800e122:	fb82 1203 	smull	r1, r2, r2, r3
 800e126:	1092      	asrs	r2, r2, #2
 800e128:	17db      	asrs	r3, r3, #31
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6999      	ldr	r1, [r3, #24]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	440b      	add	r3, r1
 800e138:	f5a2 62b0 	sub.w	r2, r2, #1408	; 0x580
 800e13c:	b292      	uxth	r2, r2
 800e13e:	801a      	strh	r2, [r3, #0]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3301      	adds	r3, #1
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b11      	cmp	r3, #17
 800e14a:	dde5      	ble.n	800e118 <sbusChannelsInit+0x14>
    }
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	0800e0b9 	.word	0x0800e0b9
 800e160:	2000019c 	.word	0x2000019c
 800e164:	66666667 	.word	0x66666667

0800e168 <cmpTimeUs>:
static uint32_t lateTaskTotal = 0;
static int16_t taskCount = 0;
static uint32_t nextTimingCycles;
#endif

static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <cmpTimeCycles>:
static inline int32_t cmpTimeCycles(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <queueClear>:
// No need for a linked list for the queue, since items are only inserted at startup

task_t* FAST_DATA_ZERO_INIT taskQueueArray[TASK_COUNT + 1]; // extra item for NULL pointer at end of queue

void queueClear(void)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
    memset(taskQueueArray, 0, sizeof(taskQueueArray));
 800e1a4:	2240      	movs	r2, #64	; 0x40
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	4805      	ldr	r0, [pc, #20]	; (800e1c0 <queueClear+0x20>)
 800e1aa:	f019 ff63 	bl	8028074 <memset>
    taskQueuePos = 0;
 800e1ae:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <queueClear+0x24>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	601a      	str	r2, [r3, #0]
    taskQueueSize = 0;
 800e1b4:	4b04      	ldr	r3, [pc, #16]	; (800e1c8 <queueClear+0x28>)
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]
}
 800e1ba:	bf00      	nop
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	10000eec 	.word	0x10000eec
 800e1c4:	10000ee0 	.word	0x10000ee0
 800e1c8:	10000ee4 	.word	0x10000ee4

0800e1cc <queueContains>:

bool queueContains(task_t *task)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
    for (int ii = 0; ii < taskQueueSize; ++ii) {
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	e00b      	b.n	800e1f2 <queueContains+0x26>
        if (taskQueueArray[ii] == task) {
 800e1da:	4a0c      	ldr	r2, [pc, #48]	; (800e20c <queueContains+0x40>)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d101      	bne.n	800e1ec <queueContains+0x20>
            return true;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e008      	b.n	800e1fe <queueContains+0x32>
    for (int ii = 0; ii < taskQueueSize; ++ii) {
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	60fb      	str	r3, [r7, #12]
 800e1f2:	4b07      	ldr	r3, [pc, #28]	; (800e210 <queueContains+0x44>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	dbee      	blt.n	800e1da <queueContains+0xe>
        }
    }
    return false;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	10000eec 	.word	0x10000eec
 800e210:	10000ee4 	.word	0x10000ee4

0800e214 <queueAdd>:

bool queueAdd(task_t *task)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
    if ((taskQueueSize >= TASK_COUNT) || queueContains(task)) {
 800e21c:	4b25      	ldr	r3, [pc, #148]	; (800e2b4 <queueAdd+0xa0>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2b0e      	cmp	r3, #14
 800e222:	dc05      	bgt.n	800e230 <queueAdd+0x1c>
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ffd1 	bl	800e1cc <queueContains>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <queueAdd+0x20>
        return false;
 800e230:	2300      	movs	r3, #0
 800e232:	e03b      	b.n	800e2ac <queueAdd+0x98>
    }
    for (int ii = 0; ii <= taskQueueSize; ++ii) {
 800e234:	2300      	movs	r3, #0
 800e236:	60fb      	str	r3, [r7, #12]
 800e238:	e032      	b.n	800e2a0 <queueAdd+0x8c>
        if (taskQueueArray[ii] == NULL || taskQueueArray[ii]->attribute->staticPriority < task->attribute->staticPriority) {
 800e23a:	4a1f      	ldr	r2, [pc, #124]	; (800e2b8 <queueAdd+0xa4>)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00c      	beq.n	800e260 <queueAdd+0x4c>
 800e246:	4a1c      	ldr	r2, [pc, #112]	; (800e2b8 <queueAdd+0xa4>)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f993 2014 	ldrsb.w	r2, [r3, #20]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	da1c      	bge.n	800e29a <queueAdd+0x86>
            memmove(&taskQueueArray[ii+1], &taskQueueArray[ii], sizeof(task) * (taskQueueSize - ii));
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3301      	adds	r3, #1
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4a14      	ldr	r2, [pc, #80]	; (800e2b8 <queueAdd+0xa4>)
 800e268:	1898      	adds	r0, r3, r2
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4a12      	ldr	r2, [pc, #72]	; (800e2b8 <queueAdd+0xa4>)
 800e270:	1899      	adds	r1, r3, r2
 800e272:	4b10      	ldr	r3, [pc, #64]	; (800e2b4 <queueAdd+0xa0>)
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	461a      	mov	r2, r3
 800e27e:	f019 fedf 	bl	8028040 <memmove>
            taskQueueArray[ii] = task;
 800e282:	490d      	ldr	r1, [pc, #52]	; (800e2b8 <queueAdd+0xa4>)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ++taskQueueSize;
 800e28c:	4b09      	ldr	r3, [pc, #36]	; (800e2b4 <queueAdd+0xa0>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	3301      	adds	r3, #1
 800e292:	4a08      	ldr	r2, [pc, #32]	; (800e2b4 <queueAdd+0xa0>)
 800e294:	6013      	str	r3, [r2, #0]
            return true;
 800e296:	2301      	movs	r3, #1
 800e298:	e008      	b.n	800e2ac <queueAdd+0x98>
    for (int ii = 0; ii <= taskQueueSize; ++ii) {
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3301      	adds	r3, #1
 800e29e:	60fb      	str	r3, [r7, #12]
 800e2a0:	4b04      	ldr	r3, [pc, #16]	; (800e2b4 <queueAdd+0xa0>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	ddc7      	ble.n	800e23a <queueAdd+0x26>
        }
    }
    return false;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	10000ee4 	.word	0x10000ee4
 800e2b8:	10000eec 	.word	0x10000eec

0800e2bc <queueRemove>:

bool queueRemove(task_t *task)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
    for (int ii = 0; ii < taskQueueSize; ++ii) {
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	60fb      	str	r3, [r7, #12]
 800e2c8:	e021      	b.n	800e30e <queueRemove+0x52>
        if (taskQueueArray[ii] == task) {
 800e2ca:	4a16      	ldr	r2, [pc, #88]	; (800e324 <queueRemove+0x68>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d117      	bne.n	800e308 <queueRemove+0x4c>
            memmove(&taskQueueArray[ii], &taskQueueArray[ii+1], sizeof(task) * (taskQueueSize - ii));
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4a11      	ldr	r2, [pc, #68]	; (800e324 <queueRemove+0x68>)
 800e2de:	1898      	adds	r0, r3, r2
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4a0f      	ldr	r2, [pc, #60]	; (800e324 <queueRemove+0x68>)
 800e2e8:	1899      	adds	r1, r3, r2
 800e2ea:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <queueRemove+0x6c>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	f019 fea3 	bl	8028040 <memmove>
            --taskQueueSize;
 800e2fa:	4b0b      	ldr	r3, [pc, #44]	; (800e328 <queueRemove+0x6c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	4a09      	ldr	r2, [pc, #36]	; (800e328 <queueRemove+0x6c>)
 800e302:	6013      	str	r3, [r2, #0]
            return true;
 800e304:	2301      	movs	r3, #1
 800e306:	e008      	b.n	800e31a <queueRemove+0x5e>
    for (int ii = 0; ii < taskQueueSize; ++ii) {
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3301      	adds	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	4b06      	ldr	r3, [pc, #24]	; (800e328 <queueRemove+0x6c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	429a      	cmp	r2, r3
 800e316:	dbd8      	blt.n	800e2ca <queueRemove+0xe>
        }
    }
    return false;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	10000eec 	.word	0x10000eec
 800e328:	10000ee4 	.word	0x10000ee4

0800e32c <queueFirst>:

/*
 * Returns first item queue or NULL if queue empty
 */
task_t *queueFirst(void)
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
    taskQueuePos = 0;
 800e330:	4b04      	ldr	r3, [pc, #16]	; (800e344 <queueFirst+0x18>)
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]
    return taskQueueArray[0]; // guaranteed to be NULL if queue is empty
 800e336:	4b04      	ldr	r3, [pc, #16]	; (800e348 <queueFirst+0x1c>)
 800e338:	681b      	ldr	r3, [r3, #0]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	10000ee0 	.word	0x10000ee0
 800e348:	10000eec 	.word	0x10000eec

0800e34c <queueNext>:

/*
 * Returns next item in queue or NULL if at end of queue
 */
task_t *queueNext(void)
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    return taskQueueArray[++taskQueuePos]; // guaranteed to be NULL at end of queue
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <queueNext+0x24>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	4a06      	ldr	r2, [pc, #24]	; (800e370 <queueNext+0x24>)
 800e358:	6013      	str	r3, [r2, #0]
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <queueNext+0x24>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a05      	ldr	r2, [pc, #20]	; (800e374 <queueNext+0x28>)
 800e360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e364:	4618      	mov	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	10000ee0 	.word	0x10000ee0
 800e374:	10000eec 	.word	0x10000eec

0800e378 <taskSystemLoad>:

static uint32_t taskTotalExecutionTime = 0;

void taskSystemLoad(uint32_t currentTimeUs)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
    static uint32_t lastExecutedAtUs;
    int32_t deltaTime = cmpTimeUs(currentTimeUs, lastExecutedAtUs);
 800e380:	4b10      	ldr	r3, [pc, #64]	; (800e3c4 <taskSystemLoad+0x4c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7ff feee 	bl	800e168 <cmpTimeUs>
 800e38c:	60f8      	str	r0, [r7, #12]

    // Calculate system load
    if (deltaTime) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d011      	beq.n	800e3b8 <taskSystemLoad+0x40>
        averageSystemLoadPercent = 100 * taskTotalExecutionTime / deltaTime;
 800e394:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <taskSystemLoad+0x50>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2264      	movs	r2, #100	; 0x64
 800e39a:	fb03 f202 	mul.w	r2, r3, r2
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	4b09      	ldr	r3, [pc, #36]	; (800e3cc <taskSystemLoad+0x54>)
 800e3a8:	801a      	strh	r2, [r3, #0]
        taskTotalExecutionTime = 0;
 800e3aa:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <taskSystemLoad+0x50>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]
        lastExecutedAtUs = currentTimeUs;
 800e3b0:	4a04      	ldr	r2, [pc, #16]	; (800e3c4 <taskSystemLoad+0x4c>)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6013      	str	r3, [r2, #0]
    }

#if defined(SIMULATOR_BUILD)
    averageSystemLoadPercent = 0;
#endif
}
 800e3b6:	e001      	b.n	800e3bc <taskSystemLoad+0x44>
        schedulerIgnoreTaskExecTime();
 800e3b8:	f000 f93c 	bl	800e634 <schedulerIgnoreTaskExecTime>
}
 800e3bc:	bf00      	nop
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	20000af4 	.word	0x20000af4
 800e3c8:	20000adc 	.word	0x20000adc
 800e3cc:	10000edc 	.word	0x10000edc

0800e3d0 <getCheckFuncInfo>:
uint32_t checkFuncTotalExecutionTimeUs;
uint32_t checkFuncMovingSumExecutionTimeUs;
uint32_t checkFuncMovingSumDeltaTimeUs;

void getCheckFuncInfo(cfCheckFuncInfo_t *checkFuncInfo)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
    checkFuncInfo->maxExecutionTimeUs = checkFuncMaxExecutionTimeUs;
 800e3d8:	4b0b      	ldr	r3, [pc, #44]	; (800e408 <getCheckFuncInfo+0x38>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	601a      	str	r2, [r3, #0]
    checkFuncInfo->totalExecutionTimeUs = checkFuncTotalExecutionTimeUs;
 800e3e0:	4b0a      	ldr	r3, [pc, #40]	; (800e40c <getCheckFuncInfo+0x3c>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	605a      	str	r2, [r3, #4]
    checkFuncInfo->averageExecutionTimeUs = checkFuncMovingSumExecutionTimeUs / TASK_STATS_MOVING_SUM_COUNT;
 800e3e8:	4b09      	ldr	r3, [pc, #36]	; (800e410 <getCheckFuncInfo+0x40>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	08da      	lsrs	r2, r3, #3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	609a      	str	r2, [r3, #8]
    checkFuncInfo->averageDeltaTimeUs = checkFuncMovingSumDeltaTimeUs / TASK_STATS_MOVING_SUM_COUNT;
 800e3f2:	4b08      	ldr	r3, [pc, #32]	; (800e414 <getCheckFuncInfo+0x44>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	08da      	lsrs	r2, r3, #3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	60da      	str	r2, [r3, #12]
}
 800e3fc:	bf00      	nop
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	20000ae0 	.word	0x20000ae0
 800e40c:	20000ae4 	.word	0x20000ae4
 800e410:	20000ae8 	.word	0x20000ae8
 800e414:	20000aec 	.word	0x20000aec

0800e418 <getTaskInfo>:

void getTaskInfo(taskId_e taskId, taskInfo_t * taskInfo)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	4603      	mov	r3, r0
 800e420:	6039      	str	r1, [r7, #0]
 800e422:	71fb      	strb	r3, [r7, #7]
    taskInfo->isEnabled = queueContains(getTask(taskId));
 800e424:	79fb      	ldrb	r3, [r7, #7]
 800e426:	4618      	mov	r0, r3
 800e428:	f000 ff0c 	bl	800f244 <getTask>
 800e42c:	4603      	mov	r3, r0
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fecc 	bl	800e1cc <queueContains>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	721a      	strb	r2, [r3, #8]
    taskInfo->desiredPeriodUs = getTask(taskId)->attribute->desiredPeriodUs;
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 ff00 	bl	800f244 <getTask>
 800e444:	4603      	mov	r3, r0
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	691a      	ldr	r2, [r3, #16]
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	60da      	str	r2, [r3, #12]
    taskInfo->staticPriority = getTask(taskId)->attribute->staticPriority;
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	4618      	mov	r0, r3
 800e452:	f000 fef7 	bl	800f244 <getTask>
 800e456:	4603      	mov	r3, r0
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f993 2014 	ldrsb.w	r2, [r3, #20]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	725a      	strb	r2, [r3, #9]
    taskInfo->taskName = getTask(taskId)->attribute->taskName;
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	4618      	mov	r0, r3
 800e466:	f000 feed 	bl	800f244 <getTask>
 800e46a:	4603      	mov	r3, r0
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	601a      	str	r2, [r3, #0]
    taskInfo->subTaskName = getTask(taskId)->attribute->subTaskName;
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fee4 	bl	800f244 <getTask>
 800e47c:	4603      	mov	r3, r0
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	605a      	str	r2, [r3, #4]
    taskInfo->maxExecutionTimeUs = getTask(taskId)->maxExecutionTimeUs;
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 fedb 	bl	800f244 <getTask>
 800e48e:	4603      	mov	r3, r0
 800e490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	615a      	str	r2, [r3, #20]
    taskInfo->totalExecutionTimeUs = getTask(taskId)->totalExecutionTimeUs;
 800e496:	79fb      	ldrb	r3, [r7, #7]
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 fed3 	bl	800f244 <getTask>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	619a      	str	r2, [r3, #24]
    taskInfo->averageExecutionTime10thUs = getTask(taskId)->movingSumExecutionTime10thUs / TASK_STATS_MOVING_SUM_COUNT;
 800e4a6:	79fb      	ldrb	r3, [r7, #7]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f000 fecb 	bl	800f244 <getTask>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b2:	08da      	lsrs	r2, r3, #3
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	61da      	str	r2, [r3, #28]
    taskInfo->averageDeltaTime10thUs = getTask(taskId)->movingSumDeltaTime10thUs / TASK_STATS_MOVING_SUM_COUNT;
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 fec2 	bl	800f244 <getTask>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	08da      	lsrs	r2, r3, #3
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	621a      	str	r2, [r3, #32]
    taskInfo->latestDeltaTimeUs = getTask(taskId)->taskLatestDeltaTimeUs;
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 feb9 	bl	800f244 <getTask>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	611a      	str	r2, [r3, #16]
    taskInfo->movingAverageCycleTimeUs = getTask(taskId)->movingAverageCycleTimeUs;
 800e4da:	79fb      	ldrb	r3, [r7, #7]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 feb1 	bl	800f244 <getTask>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(USE_LATE_TASK_STATISTICS)
    taskInfo->lateCount = getTask(taskId)->lateCount;
 800e4ea:	79fb      	ldrb	r3, [r7, #7]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f000 fea9 	bl	800f244 <getTask>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	62da      	str	r2, [r3, #44]	; 0x2c
    taskInfo->runCount = getTask(taskId)->runCount;
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 fea1 	bl	800f244 <getTask>
 800e502:	4603      	mov	r3, r0
 800e504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	629a      	str	r2, [r3, #40]	; 0x28
    taskInfo->execTime = getTask(taskId)->execTime;
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fe99 	bl	800f244 <getTask>
 800e512:	4603      	mov	r3, r0
 800e514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	631a      	str	r2, [r3, #48]	; 0x30
#endif
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <rescheduleTask>:

void rescheduleTask(taskId_e taskId, int32_t newPeriodUs)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	6039      	str	r1, [r7, #0]
 800e52e:	71fb      	strb	r3, [r7, #7]
    task_t *task;

    if (taskId == TASK_SELF) {
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	2b10      	cmp	r3, #16
 800e534:	d103      	bne.n	800e53e <rescheduleTask+0x1a>
        task = currentTask;
 800e536:	4b16      	ldr	r3, [pc, #88]	; (800e590 <rescheduleTask+0x6c>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	617b      	str	r3, [r7, #20]
 800e53c:	e007      	b.n	800e54e <rescheduleTask+0x2a>
    } else if (taskId < TASK_COUNT) {
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	2b0e      	cmp	r3, #14
 800e542:	d821      	bhi.n	800e588 <rescheduleTask+0x64>
        task = getTask(taskId);
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 fe7c 	bl	800f244 <getTask>
 800e54c:	6178      	str	r0, [r7, #20]
    } else {
        return;
    }
    task->attribute->desiredPeriodUs = MAX(SCHEDULER_DELAY_LIMIT, newPeriodUs);  // Limit delay to 100us (10 kHz) to prevent scheduler clogging
 800e54e:	230a      	movs	r3, #10
 800e550:	613b      	str	r3, [r7, #16]
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	bfb8      	it	lt
 800e55e:	461a      	movlt	r2, r3
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	611a      	str	r2, [r3, #16]

    // Catch the case where the gyro loop is adjusted
    if (taskId == TASK_GYRO) {
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d10e      	bne.n	800e58a <rescheduleTask+0x66>
        desiredPeriodCycles = (int32_t)(((uint32_t)getTask(TASK_GYRO)->attribute->desiredPeriodUs) * 168);
 800e56c:	2002      	movs	r0, #2
 800e56e:	f000 fe69 	bl	800f244 <getTask>
 800e572:	4603      	mov	r3, r0
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	461a      	mov	r2, r3
 800e57a:	23a8      	movs	r3, #168	; 0xa8
 800e57c:	fb02 f303 	mul.w	r3, r2, r3
 800e580:	461a      	mov	r2, r3
 800e582:	4b04      	ldr	r3, [pc, #16]	; (800e594 <rescheduleTask+0x70>)
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	e000      	b.n	800e58a <rescheduleTask+0x66>
        return;
 800e588:	bf00      	nop
    }
}
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	10000ed0 	.word	0x10000ed0
 800e594:	20000acc 	.word	0x20000acc

0800e598 <setTaskEnabled>:

void setTaskEnabled(taskId_e taskId, bool enabled)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	460a      	mov	r2, r1
 800e5a2:	71fb      	strb	r3, [r7, #7]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	71bb      	strb	r3, [r7, #6]
    if (taskId == TASK_SELF || taskId < TASK_COUNT) {
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	2b10      	cmp	r3, #16
 800e5ac:	d002      	beq.n	800e5b4 <setTaskEnabled+0x1c>
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	2b0e      	cmp	r3, #14
 800e5b2:	d81a      	bhi.n	800e5ea <setTaskEnabled+0x52>
        task_t *task = taskId == TASK_SELF ? currentTask : getTask(taskId);
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	2b10      	cmp	r3, #16
 800e5b8:	d005      	beq.n	800e5c6 <setTaskEnabled+0x2e>
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f000 fe41 	bl	800f244 <getTask>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	e001      	b.n	800e5ca <setTaskEnabled+0x32>
 800e5c6:	4b0b      	ldr	r3, [pc, #44]	; (800e5f4 <setTaskEnabled+0x5c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	60fb      	str	r3, [r7, #12]
        if (enabled && task->attribute->taskFunc) {
 800e5cc:	79bb      	ldrb	r3, [r7, #6]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <setTaskEnabled+0x4c>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <setTaskEnabled+0x4c>
            queueAdd(task);
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7ff fe19 	bl	800e214 <queueAdd>
        } else {
            queueRemove(task);
        }
    }
}
 800e5e2:	e002      	b.n	800e5ea <setTaskEnabled+0x52>
            queueRemove(task);
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff fe69 	bl	800e2bc <queueRemove>
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	10000ed0 	.word	0x10000ed0

0800e5f8 <schedulerIgnoreTaskStateTime>:
    }
}

// Called by tasks executing what are known to be short states
void schedulerIgnoreTaskStateTime()
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	af00      	add	r7, sp, #0
    ignoreCurrentTaskExecRate = true;
 800e5fc:	4b05      	ldr	r3, [pc, #20]	; (800e614 <schedulerIgnoreTaskStateTime+0x1c>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	701a      	strb	r2, [r3, #0]
    ignoreCurrentTaskExecTime = true;
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <schedulerIgnoreTaskStateTime+0x20>)
 800e604:	2201      	movs	r2, #1
 800e606:	701a      	strb	r2, [r3, #0]
}
 800e608:	bf00      	nop
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	10000ed4 	.word	0x10000ed4
 800e618:	10000ed8 	.word	0x10000ed8

0800e61c <schedulerIgnoreTaskExecRate>:

// Called by tasks with state machines to only count one state as determining rate
void schedulerIgnoreTaskExecRate()
{
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
    ignoreCurrentTaskExecRate = true;
 800e620:	4b03      	ldr	r3, [pc, #12]	; (800e630 <schedulerIgnoreTaskExecRate+0x14>)
 800e622:	2201      	movs	r2, #1
 800e624:	701a      	strb	r2, [r3, #0]
}
 800e626:	bf00      	nop
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	10000ed4 	.word	0x10000ed4

0800e634 <schedulerIgnoreTaskExecTime>:

// Called by tasks without state machines executing in what is known to be a shorter time than peak
void schedulerIgnoreTaskExecTime()
{
 800e634:	b480      	push	{r7}
 800e636:	af00      	add	r7, sp, #0
    ignoreCurrentTaskExecTime = true;
 800e638:	4b03      	ldr	r3, [pc, #12]	; (800e648 <schedulerIgnoreTaskExecTime+0x14>)
 800e63a:	2201      	movs	r2, #1
 800e63c:	701a      	strb	r2, [r3, #0]
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	10000ed8 	.word	0x10000ed8

0800e64c <schedulerGetIgnoreTaskExecTime>:

bool schedulerGetIgnoreTaskExecTime()
{
 800e64c:	b480      	push	{r7}
 800e64e:	af00      	add	r7, sp, #0
    return ignoreCurrentTaskExecTime;
 800e650:	4b03      	ldr	r3, [pc, #12]	; (800e660 <schedulerGetIgnoreTaskExecTime+0x14>)
 800e652:	781b      	ldrb	r3, [r3, #0]
}
 800e654:	4618      	mov	r0, r3
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	10000ed8 	.word	0x10000ed8

0800e664 <schedulerResetTaskStatistics>:

void schedulerResetTaskStatistics(taskId_e taskId)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	4603      	mov	r3, r0
 800e66c:	71fb      	strb	r3, [r7, #7]
    if (taskId == TASK_SELF) {
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	2b10      	cmp	r3, #16
 800e672:	d110      	bne.n	800e696 <schedulerResetTaskStatistics+0x32>
        currentTask->anticipatedExecutionTime = 0;
 800e674:	4b19      	ldr	r3, [pc, #100]	; (800e6dc <schedulerResetTaskStatistics+0x78>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2200      	movs	r2, #0
 800e67a:	61da      	str	r2, [r3, #28]
        currentTask->movingSumDeltaTime10thUs = 0;
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <schedulerResetTaskStatistics+0x78>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2200      	movs	r2, #0
 800e682:	621a      	str	r2, [r3, #32]
        currentTask->totalExecutionTimeUs = 0;
 800e684:	4b15      	ldr	r3, [pc, #84]	; (800e6dc <schedulerResetTaskStatistics+0x78>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2200      	movs	r2, #0
 800e68a:	62da      	str	r2, [r3, #44]	; 0x2c
        currentTask->maxExecutionTimeUs = 0;
 800e68c:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <schedulerResetTaskStatistics+0x78>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2200      	movs	r2, #0
 800e692:	629a      	str	r2, [r3, #40]	; 0x28
        getTask(taskId)->anticipatedExecutionTime = 0;
        getTask(taskId)->movingSumDeltaTime10thUs = 0;
        getTask(taskId)->totalExecutionTimeUs = 0;
        getTask(taskId)->maxExecutionTimeUs = 0;
    }
}
 800e694:	e01e      	b.n	800e6d4 <schedulerResetTaskStatistics+0x70>
    } else if (taskId < TASK_COUNT) {
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	2b0e      	cmp	r3, #14
 800e69a:	d81b      	bhi.n	800e6d4 <schedulerResetTaskStatistics+0x70>
        getTask(taskId)->anticipatedExecutionTime = 0;
 800e69c:	79fb      	ldrb	r3, [r7, #7]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 fdd0 	bl	800f244 <getTask>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	61da      	str	r2, [r3, #28]
        getTask(taskId)->movingSumDeltaTime10thUs = 0;
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fdc9 	bl	800f244 <getTask>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	621a      	str	r2, [r3, #32]
        getTask(taskId)->totalExecutionTimeUs = 0;
 800e6b8:	79fb      	ldrb	r3, [r7, #7]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fdc2 	bl	800f244 <getTask>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	62da      	str	r2, [r3, #44]	; 0x2c
        getTask(taskId)->maxExecutionTimeUs = 0;
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 fdbb 	bl	800f244 <getTask>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e6d4:	bf00      	nop
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	10000ed0 	.word	0x10000ed0

0800e6e0 <schedulerResetTaskMaxExecutionTime>:

void schedulerResetTaskMaxExecutionTime(taskId_e taskId)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
    if (taskId == TASK_SELF) {
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	2b10      	cmp	r3, #16
 800e6ee:	d104      	bne.n	800e6fa <schedulerResetTaskMaxExecutionTime+0x1a>
        currentTask->maxExecutionTimeUs = 0;
 800e6f0:	4b0c      	ldr	r3, [pc, #48]	; (800e724 <schedulerResetTaskMaxExecutionTime+0x44>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	629a      	str	r2, [r3, #40]	; 0x28
    #if defined(USE_LATE_TASK_STATISTICS)
        task->lateCount = 0;
        task->runCount = 0;
    #endif
    }
}
 800e6f8:	e010      	b.n	800e71c <schedulerResetTaskMaxExecutionTime+0x3c>
    } else if (taskId < TASK_COUNT) {
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	2b0e      	cmp	r3, #14
 800e6fe:	d80d      	bhi.n	800e71c <schedulerResetTaskMaxExecutionTime+0x3c>
        task_t *task = getTask(taskId);
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	4618      	mov	r0, r3
 800e704:	f000 fd9e 	bl	800f244 <getTask>
 800e708:	60f8      	str	r0, [r7, #12]
        task->maxExecutionTimeUs = 0;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	629a      	str	r2, [r3, #40]	; 0x28
        task->lateCount = 0;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	639a      	str	r2, [r3, #56]	; 0x38
        task->runCount = 0;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e71c:	bf00      	nop
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	10000ed0 	.word	0x10000ed0

0800e728 <schedulerResetCheckFunctionMaxExecutionTime>:

void schedulerResetCheckFunctionMaxExecutionTime(void)
{
 800e728:	b480      	push	{r7}
 800e72a:	af00      	add	r7, sp, #0
    checkFuncMaxExecutionTimeUs = 0;
 800e72c:	4b03      	ldr	r3, [pc, #12]	; (800e73c <schedulerResetCheckFunctionMaxExecutionTime+0x14>)
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
}
 800e732:	bf00      	nop
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	20000ae0 	.word	0x20000ae0

0800e740 <schedulerInit>:

void schedulerInit(void)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
    queueClear();
 800e746:	f7ff fd2b 	bl	800e1a0 <queueClear>
    queueAdd(getTask(TASK_SYSTEM));
 800e74a:	2000      	movs	r0, #0
 800e74c:	f000 fd7a 	bl	800f244 <getTask>
 800e750:	4603      	mov	r3, r0
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff fd5e 	bl	800e214 <queueAdd>

    schedLoopStartMinCycles = SCHED_START_LOOP_MIN_US * 168;
 800e758:	4b25      	ldr	r3, [pc, #148]	; (800e7f0 <schedulerInit+0xb0>)
 800e75a:	22a8      	movs	r2, #168	; 0xa8
 800e75c:	601a      	str	r2, [r3, #0]
    schedLoopStartMaxCycles = SCHED_START_LOOP_MAX_US * 168;
 800e75e:	4b25      	ldr	r3, [pc, #148]	; (800e7f4 <schedulerInit+0xb4>)
 800e760:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800e764:	601a      	str	r2, [r3, #0]
    schedLoopStartCycles = schedLoopStartMinCycles;
 800e766:	4b22      	ldr	r3, [pc, #136]	; (800e7f0 <schedulerInit+0xb0>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a23      	ldr	r2, [pc, #140]	; (800e7f8 <schedulerInit+0xb8>)
 800e76c:	6013      	str	r3, [r2, #0]
    schedLoopStartDeltaDownCycles = 168 / SCHED_START_LOOP_DOWN_STEP;
 800e76e:	4b23      	ldr	r3, [pc, #140]	; (800e7fc <schedulerInit+0xbc>)
 800e770:	2203      	movs	r2, #3
 800e772:	601a      	str	r2, [r3, #0]
    schedLoopStartDeltaUpCycles = 168 / SCHED_START_LOOP_UP_STEP;
 800e774:	4b22      	ldr	r3, [pc, #136]	; (800e800 <schedulerInit+0xc0>)
 800e776:	22a8      	movs	r2, #168	; 0xa8
 800e778:	601a      	str	r2, [r3, #0]

    taskGuardMinCycles = TASK_GUARD_MARGIN_MIN_US * 168;
 800e77a:	4b22      	ldr	r3, [pc, #136]	; (800e804 <schedulerInit+0xc4>)
 800e77c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e780:	601a      	str	r2, [r3, #0]
    taskGuardMaxCycles = TASK_GUARD_MARGIN_MAX_US * 168;
 800e782:	4b21      	ldr	r3, [pc, #132]	; (800e808 <schedulerInit+0xc8>)
 800e784:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e788:	601a      	str	r2, [r3, #0]
    taskGuardCycles = taskGuardMinCycles;
 800e78a:	4b1e      	ldr	r3, [pc, #120]	; (800e804 <schedulerInit+0xc4>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a1f      	ldr	r2, [pc, #124]	; (800e80c <schedulerInit+0xcc>)
 800e790:	6013      	str	r3, [r2, #0]
    taskGuardDeltaDownCycles = 168 / TASK_GUARD_MARGIN_DOWN_STEP;
 800e792:	4b1f      	ldr	r3, [pc, #124]	; (800e810 <schedulerInit+0xd0>)
 800e794:	2203      	movs	r2, #3
 800e796:	601a      	str	r2, [r3, #0]
    taskGuardDeltaUpCycles = 168 / TASK_GUARD_MARGIN_UP_STEP;
 800e798:	4b1e      	ldr	r3, [pc, #120]	; (800e814 <schedulerInit+0xd4>)
 800e79a:	22a8      	movs	r2, #168	; 0xa8
 800e79c:	601a      	str	r2, [r3, #0]

    desiredPeriodCycles = (int32_t)(((uint32_t)getTask(TASK_GYRO)->attribute->desiredPeriodUs) * 168);
 800e79e:	2002      	movs	r0, #2
 800e7a0:	f000 fd50 	bl	800f244 <getTask>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	23a8      	movs	r3, #168	; 0xa8
 800e7ae:	fb02 f303 	mul.w	r3, r2, r3
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	4b18      	ldr	r3, [pc, #96]	; (800e818 <schedulerInit+0xd8>)
 800e7b6:	601a      	str	r2, [r3, #0]

    lastTargetCycles = getCycleCounter();
 800e7b8:	f7fa fd0c 	bl	80091d4 <getCycleCounter>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	4a17      	ldr	r2, [pc, #92]	; (800e81c <schedulerInit+0xdc>)
 800e7c0:	6013      	str	r3, [r2, #0]

#if defined(USE_LATE_TASK_STATISTICS)
    nextTimingCycles = lastTargetCycles;
 800e7c2:	4b16      	ldr	r3, [pc, #88]	; (800e81c <schedulerInit+0xdc>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a16      	ldr	r2, [pc, #88]	; (800e820 <schedulerInit+0xe0>)
 800e7c8:	6013      	str	r3, [r2, #0]
#endif

    for (taskId_e taskId = 0; taskId < TASK_COUNT; taskId++) {
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	71fb      	strb	r3, [r7, #7]
 800e7ce:	e006      	b.n	800e7de <schedulerInit+0x9e>
        schedulerResetTaskStatistics(taskId);
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff ff46 	bl	800e664 <schedulerResetTaskStatistics>
    for (taskId_e taskId = 0; taskId < TASK_COUNT; taskId++) {
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	71fb      	strb	r3, [r7, #7]
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	2b0e      	cmp	r3, #14
 800e7e2:	d9f5      	bls.n	800e7d0 <schedulerInit+0x90>
    }
}
 800e7e4:	bf00      	nop
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20000aa8 	.word	0x20000aa8
 800e7f4:	20000aac 	.word	0x20000aac
 800e7f8:	20000aa4 	.word	0x20000aa4
 800e7fc:	20000ab0 	.word	0x20000ab0
 800e800:	20000ab4 	.word	0x20000ab4
 800e804:	20000abc 	.word	0x20000abc
 800e808:	20000ac0 	.word	0x20000ac0
 800e80c:	20000ab8 	.word	0x20000ab8
 800e810:	20000ac4 	.word	0x20000ac4
 800e814:	20000ac8 	.word	0x20000ac8
 800e818:	20000acc 	.word	0x20000acc
 800e81c:	20000ad0 	.word	0x20000ad0
 800e820:	20000ad8 	.word	0x20000ad8

0800e824 <schedulerSetNextStateTime>:

static int32_t taskNextStateTime;

void schedulerSetNextStateTime(int32_t nextStateTime)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
    taskNextStateTime = nextStateTime;
 800e82c:	4a04      	ldr	r2, [pc, #16]	; (800e840 <schedulerSetNextStateTime+0x1c>)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6013      	str	r3, [r2, #0]
}
 800e832:	bf00      	nop
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	20000af0 	.word	0x20000af0

0800e844 <schedulerGetNextStateTime>:

int32_t schedulerGetNextStateTime()
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
    return currentTask->anticipatedExecutionTime >> TASK_EXEC_TIME_SHIFT;
 800e848:	4b04      	ldr	r3, [pc, #16]	; (800e85c <schedulerGetNextStateTime+0x18>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	69db      	ldr	r3, [r3, #28]
 800e84e:	09db      	lsrs	r3, r3, #7
}
 800e850:	4618      	mov	r0, r3
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	10000ed0 	.word	0x10000ed0

0800e860 <schedulerExecuteTask>:

uint32_t schedulerExecuteTask(task_t *selectedTask, uint32_t currentTimeUs)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
    uint32_t taskExecutionTimeUs = 0;
 800e86a:	2300      	movs	r3, #0
 800e86c:	61fb      	str	r3, [r7, #28]

    if (selectedTask) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 80c3 	beq.w	800e9fc <schedulerExecuteTask+0x19c>
        currentTask = selectedTask;
 800e876:	4a64      	ldr	r2, [pc, #400]	; (800ea08 <schedulerExecuteTask+0x1a8>)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6013      	str	r3, [r2, #0]
        ignoreCurrentTaskExecRate = false;
 800e87c:	4b63      	ldr	r3, [pc, #396]	; (800ea0c <schedulerExecuteTask+0x1ac>)
 800e87e:	2200      	movs	r2, #0
 800e880:	701a      	strb	r2, [r3, #0]
        ignoreCurrentTaskExecTime = false;
 800e882:	4b63      	ldr	r3, [pc, #396]	; (800ea10 <schedulerExecuteTask+0x1b0>)
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
        taskNextStateTime = -1;
 800e888:	4b62      	ldr	r3, [pc, #392]	; (800ea14 <schedulerExecuteTask+0x1b4>)
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295
 800e88e:	601a      	str	r2, [r3, #0]
        float period = currentTimeUs - selectedTask->lastExecutedAtUs;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	ee07 3a90 	vmov	s15, r3
 800e89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8a0:	edc7 7a06 	vstr	s15, [r7, #24]
        selectedTask->lastExecutedAtUs = currentTimeUs;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	60da      	str	r2, [r3, #12]
        selectedTask->lastDesiredAt += selectedTask->attribute->desiredPeriodUs;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	6812      	ldr	r2, [r2, #0]
 800e8b2:	6912      	ldr	r2, [r2, #16]
 800e8b4:	441a      	add	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	615a      	str	r2, [r3, #20]
        selectedTask->dynamicPriority = 0;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	809a      	strh	r2, [r3, #4]

        // Execute task
        const uint32_t currentTimeBeforeTaskCallUs = micros();
 800e8c0:	f7fa fcb8 	bl	8009234 <micros>
 800e8c4:	6178      	str	r0, [r7, #20]
        selectedTask->attribute->taskFunc(currentTimeBeforeTaskCallUs);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	6978      	ldr	r0, [r7, #20]
 800e8ce:	4798      	blx	r3
        taskExecutionTimeUs = micros() - currentTimeBeforeTaskCallUs;
 800e8d0:	f7fa fcb0 	bl	8009234 <micros>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	61fb      	str	r3, [r7, #28]
        taskTotalExecutionTime += taskExecutionTimeUs;
 800e8dc:	4b4e      	ldr	r3, [pc, #312]	; (800ea18 <schedulerExecuteTask+0x1b8>)
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	4a4c      	ldr	r2, [pc, #304]	; (800ea18 <schedulerExecuteTask+0x1b8>)
 800e8e6:	6013      	str	r3, [r2, #0]
        selectedTask->movingSumExecutionTime10thUs += (taskExecutionTimeUs * 10) - selectedTask->movingSumExecutionTime10thUs / TASK_STATS_MOVING_SUM_COUNT;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fc:	08db      	lsrs	r3, r3, #3
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	18ca      	adds	r2, r1, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	625a      	str	r2, [r3, #36]	; 0x24
        if (!ignoreCurrentTaskExecRate) {
 800e906:	4b41      	ldr	r3, [pc, #260]	; (800ea0c <schedulerExecuteTask+0x1ac>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	f083 0301 	eor.w	r3, r3, #1
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d01b      	beq.n	800e94c <schedulerExecuteTask+0xec>
            // Record task execution rate and max execution time
            selectedTask->taskLatestDeltaTimeUs = cmpTimeUs(currentTimeUs, selectedTask->lastStatsAtUs);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e918:	4619      	mov	r1, r3
 800e91a:	6838      	ldr	r0, [r7, #0]
 800e91c:	f7ff fc24 	bl	800e168 <cmpTimeUs>
 800e920:	4602      	mov	r2, r0
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	609a      	str	r2, [r3, #8]
            selectedTask->movingSumDeltaTime10thUs += (selectedTask->taskLatestDeltaTimeUs * 10) - selectedTask->movingSumDeltaTime10thUs / TASK_STATS_MOVING_SUM_COUNT;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a19      	ldr	r1, [r3, #32]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4413      	add	r3, r2
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	461a      	mov	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a1b      	ldr	r3, [r3, #32]
 800e93c:	08db      	lsrs	r3, r3, #3
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	18ca      	adds	r2, r1, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	621a      	str	r2, [r3, #32]
            selectedTask->lastStatsAtUs = currentTimeUs;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // Update estimate of expected task duration
        if (taskNextStateTime != -1) {
 800e94c:	4b31      	ldr	r3, [pc, #196]	; (800ea14 <schedulerExecuteTask+0x1b4>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e954:	d006      	beq.n	800e964 <schedulerExecuteTask+0x104>
            selectedTask->anticipatedExecutionTime = taskNextStateTime << TASK_EXEC_TIME_SHIFT;
 800e956:	4b2f      	ldr	r3, [pc, #188]	; (800ea14 <schedulerExecuteTask+0x1b4>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	01db      	lsls	r3, r3, #7
 800e95c:	461a      	mov	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	61da      	str	r2, [r3, #28]
 800e962:	e01a      	b.n	800e99a <schedulerExecuteTask+0x13a>
        } else if (!ignoreCurrentTaskExecTime) {
 800e964:	4b2a      	ldr	r3, [pc, #168]	; (800ea10 <schedulerExecuteTask+0x1b0>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f083 0301 	eor.w	r3, r3, #1
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d013      	beq.n	800e99a <schedulerExecuteTask+0x13a>
            if (taskExecutionTimeUs > (selectedTask->anticipatedExecutionTime >> TASK_EXEC_TIME_SHIFT)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	09db      	lsrs	r3, r3, #7
 800e978:	69fa      	ldr	r2, [r7, #28]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d904      	bls.n	800e988 <schedulerExecuteTask+0x128>
                selectedTask->anticipatedExecutionTime = taskExecutionTimeUs << TASK_EXEC_TIME_SHIFT;
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	01da      	lsls	r2, r3, #7
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	61da      	str	r2, [r3, #28]
 800e986:	e008      	b.n	800e99a <schedulerExecuteTask+0x13a>
            } else if (selectedTask->anticipatedExecutionTime > 1) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d904      	bls.n	800e99a <schedulerExecuteTask+0x13a>
                // Slowly decay the max time
                selectedTask->anticipatedExecutionTime--;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	1e5a      	subs	r2, r3, #1
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	61da      	str	r2, [r3, #28]
            }
        }

        if (!ignoreCurrentTaskExecTime) {
 800e99a:	4b1d      	ldr	r3, [pc, #116]	; (800ea10 <schedulerExecuteTask+0x1b0>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	f083 0301 	eor.w	r3, r3, #1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <schedulerExecuteTask+0x160>
            selectedTask->maxExecutionTimeUs = MAX(selectedTask->maxExecutionTimeUs, taskExecutionTimeUs);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ac:	613b      	str	r3, [r7, #16]
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	60fb      	str	r3, [r7, #12]
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	bf38      	it	cc
 800e9ba:	461a      	movcc	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	629a      	str	r2, [r3, #40]	; 0x28
        }

        selectedTask->totalExecutionTimeUs += taskExecutionTimeUs;   // time consumed by scheduler + task
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	441a      	add	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	62da      	str	r2, [r3, #44]	; 0x2c
        selectedTask->movingAverageCycleTimeUs += 0.05f * (period - selectedTask->movingAverageCycleTimeUs);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	ed93 7a06 	vldr	s14, [r3, #24]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	edd3 7a06 	vldr	s15, [r3, #24]
 800e9d8:	edd7 6a06 	vldr	s13, [r7, #24]
 800e9dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e9e0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ea1c <schedulerExecuteTask+0x1bc>
 800e9e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e9e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	edc3 7a06 	vstr	s15, [r3, #24]
#if defined(USE_LATE_TASK_STATISTICS)
        selectedTask->runCount++;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f6:	1c5a      	adds	r2, r3, #1
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	635a      	str	r2, [r3, #52]	; 0x34
#endif
    }

    return taskExecutionTimeUs;
 800e9fc:	69fb      	ldr	r3, [r7, #28]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3720      	adds	r7, #32
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	10000ed0 	.word	0x10000ed0
 800ea0c:	10000ed4 	.word	0x10000ed4
 800ea10:	10000ed8 	.word	0x10000ed8
 800ea14:	20000af0 	.word	0x20000af0
 800ea18:	20000adc 	.word	0x20000adc
 800ea1c:	3d4ccccd 	.word	0x3d4ccccd

0800ea20 <scheduler>:
    unittest_scheduler_selectedTaskDynamicPriority = selectedTaskDynamicPriority;
}
#endif

void scheduler(void)
{
 800ea20:	b590      	push	{r4, r7, lr}
 800ea22:	b093      	sub	sp, #76	; 0x4c
 800ea24:	af00      	add	r7, sp, #0
// #if !defined(UNIT_TEST)
//     const uint32_t schedulerStartTimeUs = micros();
// #endif
    uint32_t currentTimeUs;
    uint32_t nowCycles;
    uint32_t taskExecutionTimeUs = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	643b      	str	r3, [r7, #64]	; 0x40
    task_t *selectedTask = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint16_t selectedTaskDynamicPriority = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint32_t nextTargetCycles = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	637b      	str	r3, [r7, #52]	; 0x34
        lastTargetCycles = getCycleCounter();
        nextTargetCycles = lastTargetCycles + desiredPeriodCycles;
    }
#endif

    if (gyroEnabled) {
 800ea36:	4b85      	ldr	r3, [pc, #532]	; (800ec4c <scheduler+0x22c>)
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 80b9 	beq.w	800ebb2 <scheduler+0x192>
        // Realtime gyro/filtering/PID tasks get complete priority
        task_t *gyroTask = getTask(TASK_GYRO);
 800ea40:	2002      	movs	r0, #2
 800ea42:	f000 fbff 	bl	800f244 <getTask>
 800ea46:	62b8      	str	r0, [r7, #40]	; 0x28
        nowCycles = getCycleCounter();
 800ea48:	f7fa fbc4 	bl	80091d4 <getCycleCounter>
 800ea4c:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(UNIT_TEST)
        lastTargetCycles = clockMicrosToCycles(gyroTask->lastExecutedAtUs);
#endif
        nextTargetCycles = lastTargetCycles + desiredPeriodCycles;
 800ea4e:	4b80      	ldr	r3, [pc, #512]	; (800ec50 <scheduler+0x230>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	4a80      	ldr	r2, [pc, #512]	; (800ec54 <scheduler+0x234>)
 800ea54:	6812      	ldr	r2, [r2, #0]
 800ea56:	4413      	add	r3, r2
 800ea58:	637b      	str	r3, [r7, #52]	; 0x34
        schedLoopRemainingCycles = cmpTimeCycles(nextTargetCycles, nowCycles);
 800ea5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea5e:	f7ff fb91 	bl	800e184 <cmpTimeCycles>
 800ea62:	6338      	str	r0, [r7, #48]	; 0x30

        if (schedLoopRemainingCycles < -desiredPeriodCycles) {
 800ea64:	4b7b      	ldr	r3, [pc, #492]	; (800ec54 <scheduler+0x234>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	425b      	negs	r3, r3
 800ea6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	da13      	bge.n	800ea98 <scheduler+0x78>
            /* A task has so grossly overrun that at entire gyro cycle has been skipped
             * This is most likely to occur when connected to the configurator via USB as the serial
             * task is non-deterministic
             * Recover as best we can, advancing scheduling by a whole number of cycles
             */
            nextTargetCycles += desiredPeriodCycles * (1 + (schedLoopRemainingCycles / -desiredPeriodCycles));
 800ea70:	4b78      	ldr	r3, [pc, #480]	; (800ec54 <scheduler+0x234>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	425b      	negs	r3, r3
 800ea76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea78:	fb92 f3f3 	sdiv	r3, r2, r3
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	4a75      	ldr	r2, [pc, #468]	; (800ec54 <scheduler+0x234>)
 800ea80:	6812      	ldr	r2, [r2, #0]
 800ea82:	fb02 f303 	mul.w	r3, r2, r3
 800ea86:	461a      	mov	r2, r3
 800ea88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea8a:	4413      	add	r3, r2
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
            schedLoopRemainingCycles = cmpTimeCycles(nextTargetCycles, nowCycles);
 800ea8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea92:	f7ff fb77 	bl	800e184 <cmpTimeCycles>
 800ea96:	6338      	str	r0, [r7, #48]	; 0x30
        }

        // Tune out the time lost between completing the last task execution and re-entering the scheduler
        if ((schedLoopRemainingCycles < schedLoopStartMinCycles) &&
 800ea98:	4b6f      	ldr	r3, [pc, #444]	; (800ec58 <scheduler+0x238>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	da0e      	bge.n	800eac0 <scheduler+0xa0>
            (schedLoopStartCycles < schedLoopStartMaxCycles)) {
 800eaa2:	4b6e      	ldr	r3, [pc, #440]	; (800ec5c <scheduler+0x23c>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	4b6e      	ldr	r3, [pc, #440]	; (800ec60 <scheduler+0x240>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
        if ((schedLoopRemainingCycles < schedLoopStartMinCycles) &&
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	da08      	bge.n	800eac0 <scheduler+0xa0>
            schedLoopStartCycles += schedLoopStartDeltaUpCycles;
 800eaae:	4b6b      	ldr	r3, [pc, #428]	; (800ec5c <scheduler+0x23c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	4b6b      	ldr	r3, [pc, #428]	; (800ec64 <scheduler+0x244>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4413      	add	r3, r2
 800eaba:	461a      	mov	r2, r3
 800eabc:	4b67      	ldr	r3, [pc, #412]	; (800ec5c <scheduler+0x23c>)
 800eabe:	601a      	str	r2, [r3, #0]
        }

        // Once close to the timing boundary, poll for it's arrival
        if (schedLoopRemainingCycles < schedLoopStartCycles) {
 800eac0:	4b66      	ldr	r3, [pc, #408]	; (800ec5c <scheduler+0x23c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eac6:	429a      	cmp	r2, r3
 800eac8:	da73      	bge.n	800ebb2 <scheduler+0x192>
            if (schedLoopStartCycles > schedLoopStartMinCycles) {
 800eaca:	4b64      	ldr	r3, [pc, #400]	; (800ec5c <scheduler+0x23c>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	4b62      	ldr	r3, [pc, #392]	; (800ec58 <scheduler+0x238>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	dd11      	ble.n	800eafa <scheduler+0xda>
                schedLoopStartCycles -= schedLoopStartDeltaDownCycles;
 800ead6:	4b61      	ldr	r3, [pc, #388]	; (800ec5c <scheduler+0x23c>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	4b62      	ldr	r3, [pc, #392]	; (800ec68 <scheduler+0x248>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	461a      	mov	r2, r3
 800eae4:	4b5d      	ldr	r3, [pc, #372]	; (800ec5c <scheduler+0x23c>)
 800eae6:	601a      	str	r2, [r3, #0]
            }
#if !defined(UNIT_TEST)
            while (schedLoopRemainingCycles > 0) {
 800eae8:	e007      	b.n	800eafa <scheduler+0xda>
                nowCycles = getCycleCounter();
 800eaea:	f7fa fb73 	bl	80091d4 <getCycleCounter>
 800eaee:	6478      	str	r0, [r7, #68]	; 0x44
                schedLoopRemainingCycles = cmpTimeCycles(nextTargetCycles, nowCycles);
 800eaf0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaf4:	f7ff fb46 	bl	800e184 <cmpTimeCycles>
 800eaf8:	6338      	str	r0, [r7, #48]	; 0x30
            while (schedLoopRemainingCycles > 0) {
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	dcf4      	bgt.n	800eaea <scheduler+0xca>
            }
            // DEBUG_SET(DEBUG_SCHEDULER_DETERMINISM, 0, clockCyclesTo10thMicros(cmpTimeCycles(nowCycles, lastTargetCycles)));
#endif
            currentTimeUs = micros();
 800eb00:	f7fa fb98 	bl	8009234 <micros>
 800eb04:	6278      	str	r0, [r7, #36]	; 0x24
            taskExecutionTimeUs += schedulerExecuteTask(gyroTask, currentTimeUs);
 800eb06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb0a:	f7ff fea9 	bl	800e860 <schedulerExecuteTask>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb12:	4413      	add	r3, r2
 800eb14:	643b      	str	r3, [r7, #64]	; 0x40

            if (gyroFilterReady()) {
 800eb16:	f7fa ff37 	bl	8009988 <gyroFilterReady>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00b      	beq.n	800eb38 <scheduler+0x118>
                taskExecutionTimeUs += schedulerExecuteTask(getTask(TASK_FILTER), currentTimeUs);
 800eb20:	2003      	movs	r0, #3
 800eb22:	f000 fb8f 	bl	800f244 <getTask>
 800eb26:	4603      	mov	r3, r0
 800eb28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff fe98 	bl	800e860 <schedulerExecuteTask>
 800eb30:	4602      	mov	r2, r0
 800eb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb34:	4413      	add	r3, r2
 800eb36:	643b      	str	r3, [r7, #64]	; 0x40
            }
            if (pidLoopReady()) {
 800eb38:	f7fa ff3a 	bl	80099b0 <pidLoopReady>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00b      	beq.n	800eb5a <scheduler+0x13a>
                taskExecutionTimeUs += schedulerExecuteTask(getTask(TASK_PID), currentTimeUs);
 800eb42:	2004      	movs	r0, #4
 800eb44:	f000 fb7e 	bl	800f244 <getTask>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff fe87 	bl	800e860 <schedulerExecuteTask>
 800eb52:	4602      	mov	r2, r0
 800eb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb56:	4413      	add	r3, r2
 800eb58:	643b      	str	r3, [r7, #64]	; 0x40
            }

            // Check for incoming RX data. Don't do this in the checker as that is called repeatedly within
            // a given gyro loop, and ELRS takes a long time to process this and so can only be safely processed
            // before the checkers
            rxFrameCheck(currentTimeUs, cmpTimeUs(currentTimeUs, getTask(TASK_RX)->lastExecutedAtUs));
 800eb5a:	2007      	movs	r0, #7
 800eb5c:	f000 fb72 	bl	800f244 <getTask>
 800eb60:	4603      	mov	r3, r0
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	4619      	mov	r1, r3
 800eb66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb68:	f7ff fafe 	bl	800e168 <cmpTimeUs>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4619      	mov	r1, r3
 800eb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb72:	f7fe fb87 	bl	800d284 <rxFrameCheck>

#if defined(USE_LATE_TASK_STATISTICS)
            // % CPU busy
            //DEBUG_SET(DEBUG_TIMING_ACCURACY, 0, getAverageSystemLoadPercent());

            if (cmpTimeCycles(nextTimingCycles, nowCycles) < 0) {
 800eb76:	4b3d      	ldr	r3, [pc, #244]	; (800ec6c <scheduler+0x24c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7ff fb01 	bl	800e184 <cmpTimeCycles>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	da11      	bge.n	800ebac <scheduler+0x18c>
                nextTimingCycles += clockMicrosToCycles(1000000);
 800eb88:	4839      	ldr	r0, [pc, #228]	; (800ec70 <scheduler+0x250>)
 800eb8a:	f7fa fb2f 	bl	80091ec <clockMicrosToCycles>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	4b36      	ldr	r3, [pc, #216]	; (800ec6c <scheduler+0x24c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4413      	add	r3, r2
 800eb96:	4a35      	ldr	r2, [pc, #212]	; (800ec6c <scheduler+0x24c>)
 800eb98:	6013      	str	r3, [r2, #0]
                // Total lateness in last second in us
                //DEBUG_SET(DEBUG_TIMING_ACCURACY, 2, clockCyclesTo10thMicros(lateTaskTotal));
                // Total tasks run in last second
                //DEBUG_SET(DEBUG_TIMING_ACCURACY, 3, taskCount);

                lateTaskCount = 0;
 800eb9a:	4b36      	ldr	r3, [pc, #216]	; (800ec74 <scheduler+0x254>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	801a      	strh	r2, [r3, #0]
                lateTaskTotal = 0;
 800eba0:	4b35      	ldr	r3, [pc, #212]	; (800ec78 <scheduler+0x258>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]
                taskCount = 0;
 800eba6:	4b35      	ldr	r3, [pc, #212]	; (800ec7c <scheduler+0x25c>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	801a      	strh	r2, [r3, #0]
            }
#endif
            lastTargetCycles = nextTargetCycles;
 800ebac:	4a28      	ldr	r2, [pc, #160]	; (800ec50 <scheduler+0x230>)
 800ebae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb0:	6013      	str	r3, [r2, #0]
            }
#endif
       }
    }

    nowCycles = getCycleCounter();
 800ebb2:	f7fa fb0f 	bl	80091d4 <getCycleCounter>
 800ebb6:	6478      	str	r0, [r7, #68]	; 0x44
    schedLoopRemainingCycles = cmpTimeCycles(nextTargetCycles, nowCycles);
 800ebb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebbc:	f7ff fae2 	bl	800e184 <cmpTimeCycles>
 800ebc0:	6338      	str	r0, [r7, #48]	; 0x30

    if (!gyroEnabled || (schedLoopRemainingCycles > (int32_t)(CHECK_GUARD_MARGIN_US * 168))) {
 800ebc2:	4b22      	ldr	r3, [pc, #136]	; (800ec4c <scheduler+0x22c>)
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f083 0301 	eor.w	r3, r3, #1
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <scheduler+0x1ba>
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800ebd6:	f340 81df 	ble.w	800ef98 <scheduler+0x578>
        currentTimeUs = micros();
 800ebda:	f7fa fb2b 	bl	8009234 <micros>
 800ebde:	6278      	str	r0, [r7, #36]	; 0x24

        // Update task dynamic priorities
        for (task_t *task = queueFirst(); task != NULL; task = queueNext()) {
 800ebe0:	f7ff fba4 	bl	800e32c <queueFirst>
 800ebe4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ebe6:	e0ef      	b.n	800edc8 <scheduler+0x3a8>
            if (task->attribute->staticPriority != TASK_PRIORITY_REALTIME) {
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ebf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf4:	f000 80e5 	beq.w	800edc2 <scheduler+0x3a2>
                // Task has checkFunc - event driven
                if (task->attribute->checkFunc) {
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 8093 	beq.w	800ed2a <scheduler+0x30a>
                    // Increase priority for event driven tasks
                    if (task->dynamicPriority > 0) {
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	889b      	ldrh	r3, [r3, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d039      	beq.n	800ec80 <scheduler+0x260>
                        task->taskAgePeriods = 1 + (cmpTimeUs(currentTimeUs, task->lastSignaledAtUs) / task->attribute->desiredPeriodUs);
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	4619      	mov	r1, r3
 800ec12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec14:	f7ff faa8 	bl	800e168 <cmpTimeUs>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	fb92 f3f3 	sdiv	r3, r2, r3
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3301      	adds	r3, #1
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	80da      	strh	r2, [r3, #6]
                        task->dynamicPriority = 1 + task->attribute->staticPriority * task->taskAgePeriods;
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	88db      	ldrh	r3, [r3, #6]
 800ec3c:	fb12 f303 	smulbb	r3, r2, r3
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	3301      	adds	r3, #1
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	809a      	strh	r2, [r3, #4]
 800ec4a:	e08f      	b.n	800ed6c <scheduler+0x34c>
 800ec4c:	10000ee8 	.word	0x10000ee8
 800ec50:	20000ad0 	.word	0x20000ad0
 800ec54:	20000acc 	.word	0x20000acc
 800ec58:	20000aa8 	.word	0x20000aa8
 800ec5c:	20000aa4 	.word	0x20000aa4
 800ec60:	20000aac 	.word	0x20000aac
 800ec64:	20000ab4 	.word	0x20000ab4
 800ec68:	20000ab0 	.word	0x20000ab0
 800ec6c:	20000ad8 	.word	0x20000ad8
 800ec70:	000f4240 	.word	0x000f4240
 800ec74:	20003e8e 	.word	0x20003e8e
 800ec78:	20000ad4 	.word	0x20000ad4
 800ec7c:	20003e90 	.word	0x20003e90
                    } else if (task->attribute->checkFunc(currentTimeUs, cmpTimeUs(currentTimeUs, task->lastExecutedAtUs))) {
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	689c      	ldr	r4, [r3, #8]
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec8e:	f7ff fa6b 	bl	800e168 <cmpTimeUs>
 800ec92:	4603      	mov	r3, r0
 800ec94:	4619      	mov	r1, r3
 800ec96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec98:	47a0      	blx	r4
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d040      	beq.n	800ed22 <scheduler+0x302>
                        const uint32_t checkFuncExecutionTimeUs = cmpTimeUs(micros(), currentTimeUs);
 800eca0:	f7fa fac8 	bl	8009234 <micros>
 800eca4:	4603      	mov	r3, r0
 800eca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff fa5d 	bl	800e168 <cmpTimeUs>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	613b      	str	r3, [r7, #16]
                        checkFuncMovingSumExecutionTimeUs += checkFuncExecutionTimeUs - checkFuncMovingSumExecutionTimeUs / TASK_STATS_MOVING_SUM_COUNT;
 800ecb2:	4b8c      	ldr	r3, [pc, #560]	; (800eee4 <scheduler+0x4c4>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	08db      	lsrs	r3, r3, #3
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	1ad2      	subs	r2, r2, r3
 800ecbc:	4b89      	ldr	r3, [pc, #548]	; (800eee4 <scheduler+0x4c4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	4a88      	ldr	r2, [pc, #544]	; (800eee4 <scheduler+0x4c4>)
 800ecc4:	6013      	str	r3, [r2, #0]
                        checkFuncMovingSumDeltaTimeUs += task->taskLatestDeltaTimeUs - checkFuncMovingSumDeltaTimeUs / TASK_STATS_MOVING_SUM_COUNT;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b86      	ldr	r3, [pc, #536]	; (800eee8 <scheduler+0x4c8>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	08db      	lsrs	r3, r3, #3
 800ecd2:	1ad2      	subs	r2, r2, r3
 800ecd4:	4b84      	ldr	r3, [pc, #528]	; (800eee8 <scheduler+0x4c8>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4413      	add	r3, r2
 800ecda:	4a83      	ldr	r2, [pc, #524]	; (800eee8 <scheduler+0x4c8>)
 800ecdc:	6013      	str	r3, [r2, #0]
                        checkFuncTotalExecutionTimeUs += checkFuncExecutionTimeUs;   // time consumed by scheduler + task
 800ecde:	4b83      	ldr	r3, [pc, #524]	; (800eeec <scheduler+0x4cc>)
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	4413      	add	r3, r2
 800ece6:	4a81      	ldr	r2, [pc, #516]	; (800eeec <scheduler+0x4cc>)
 800ece8:	6013      	str	r3, [r2, #0]
                        checkFuncMaxExecutionTimeUs = MAX(checkFuncMaxExecutionTimeUs, checkFuncExecutionTimeUs);
 800ecea:	4b81      	ldr	r3, [pc, #516]	; (800eef0 <scheduler+0x4d0>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	60bb      	str	r3, [r7, #8]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	bf38      	it	cc
 800ecfc:	4613      	movcc	r3, r2
 800ecfe:	4a7c      	ldr	r2, [pc, #496]	; (800eef0 <scheduler+0x4d0>)
 800ed00:	6013      	str	r3, [r2, #0]
                        task->lastSignaledAtUs = currentTimeUs;
 800ed02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed06:	611a      	str	r2, [r3, #16]
                        task->taskAgePeriods = 1;
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	80da      	strh	r2, [r3, #6]
                        task->dynamicPriority = 1 + task->attribute->staticPriority;
 800ed0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	3301      	adds	r3, #1
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1e:	809a      	strh	r2, [r3, #4]
 800ed20:	e024      	b.n	800ed6c <scheduler+0x34c>
                    } else {
                        task->taskAgePeriods = 0;
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	2200      	movs	r2, #0
 800ed26:	80da      	strh	r2, [r3, #6]
 800ed28:	e020      	b.n	800ed6c <scheduler+0x34c>
                    }
                } else {
                    // Task is time-driven, dynamicPriority is last execution age (measured in desiredPeriods)
                    // Task age is calculated from last execution
                    task->taskAgePeriods = (cmpTimeUs(currentTimeUs, task->lastExecutedAtUs) / task->attribute->desiredPeriodUs);
 800ed2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed32:	f7ff fa19 	bl	800e168 <cmpTimeUs>
 800ed36:	4602      	mov	r2, r0
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	fb92 f3f3 	sdiv	r3, r2, r3
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	80da      	strh	r2, [r3, #6]
                    if (task->taskAgePeriods > 0) {
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	88db      	ldrh	r3, [r3, #6]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00d      	beq.n	800ed6c <scheduler+0x34c>
                        task->dynamicPriority = 1 + task->attribute->staticPriority * task->taskAgePeriods;
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	88db      	ldrh	r3, [r3, #6]
 800ed5e:	fb12 f303 	smulbb	r3, r2, r3
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	3301      	adds	r3, #1
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	809a      	strh	r2, [r3, #4]
                    }
                }

                if (task->dynamicPriority > selectedTaskDynamicPriority) {
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	889b      	ldrh	r3, [r3, #4]
 800ed70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d225      	bcs.n	800edc2 <scheduler+0x3a2>
                    int32_t taskRequiredTimeUs = task->anticipatedExecutionTime >> TASK_EXEC_TIME_SHIFT;
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	09db      	lsrs	r3, r3, #7
 800ed7c:	607b      	str	r3, [r7, #4]
                    int32_t taskRequiredTimeCycles = (int32_t)((uint32_t)taskRequiredTimeUs * 168);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	22a8      	movs	r2, #168	; 0xa8
 800ed82:	fb02 f303 	mul.w	r3, r2, r3
 800ed86:	603b      	str	r3, [r7, #0]
                    // Allow a little extra time
                    taskRequiredTimeCycles += checkCycles + taskGuardCycles;
 800ed88:	4b5a      	ldr	r3, [pc, #360]	; (800eef4 <scheduler+0x4d4>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a5a      	ldr	r2, [pc, #360]	; (800eef8 <scheduler+0x4d8>)
 800ed8e:	6812      	ldr	r2, [r2, #0]
 800ed90:	441a      	add	r2, r3
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	4413      	add	r3, r2
 800ed96:	603b      	str	r3, [r7, #0]

                    // If there's no time to run the task, discount it from prioritisation unless aged sufficiently
                    // Don't block the SERIAL task.
                    if ((taskRequiredTimeCycles < schedLoopRemainingCycles) ||
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	db0b      	blt.n	800edb8 <scheduler+0x398>
                        ((scheduleCount & SCHED_TASK_DEFER_MASK) == 0) ||
 800eda0:	4b56      	ldr	r3, [pc, #344]	; (800eefc <scheduler+0x4dc>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f003 0307 	and.w	r3, r3, #7
                    if ((taskRequiredTimeCycles < schedLoopRemainingCycles) ||
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <scheduler+0x398>
                        ((task - tasks) == TASK_SERIAL)) {
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	4a54      	ldr	r2, [pc, #336]	; (800ef00 <scheduler+0x4e0>)
 800edb0:	1a9b      	subs	r3, r3, r2
                        ((scheduleCount & SCHED_TASK_DEFER_MASK) == 0) ||
 800edb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edb6:	d104      	bne.n	800edc2 <scheduler+0x3a2>
                        selectedTaskDynamicPriority = task->dynamicPriority;
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	889b      	ldrh	r3, [r3, #4]
 800edbc:	877b      	strh	r3, [r7, #58]	; 0x3a
                        selectedTask = task;
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (task_t *task = queueFirst(); task != NULL; task = queueNext()) {
 800edc2:	f7ff fac3 	bl	800e34c <queueNext>
 800edc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800edc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f47f af0c 	bne.w	800ebe8 <scheduler+0x1c8>

        }

        // The number of cycles taken to run the checkers is quite consistent with some higher spikes, but
        // that doesn't defeat its use
        checkCycles = cmpTimeCycles(getCycleCounter(), nowCycles);
 800edd0:	f7fa fa00 	bl	80091d4 <getCycleCounter>
 800edd4:	4603      	mov	r3, r0
 800edd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff f9d3 	bl	800e184 <cmpTimeCycles>
 800edde:	4603      	mov	r3, r0
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b44      	ldr	r3, [pc, #272]	; (800eef4 <scheduler+0x4d4>)
 800ede4:	601a      	str	r2, [r3, #0]

        if (selectedTask) {
 800ede6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80d5 	beq.w	800ef98 <scheduler+0x578>
            // Recheck the available time as checkCycles is only approximate
            int32_t taskRequiredTimeUs = selectedTask->anticipatedExecutionTime >> TASK_EXEC_TIME_SHIFT;
 800edee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf0:	69db      	ldr	r3, [r3, #28]
 800edf2:	09db      	lsrs	r3, r3, #7
 800edf4:	623b      	str	r3, [r7, #32]
#if defined(USE_LATE_TASK_STATISTICS)
            selectedTask->execTime = taskRequiredTimeUs;
 800edf6:	6a3a      	ldr	r2, [r7, #32]
 800edf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
            int32_t taskRequiredTimeCycles = (int32_t)((uint32_t)taskRequiredTimeUs) * 168;
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	22a8      	movs	r2, #168	; 0xa8
 800ee00:	fb02 f303 	mul.w	r3, r2, r3
 800ee04:	61fb      	str	r3, [r7, #28]

            nowCycles = getCycleCounter();
 800ee06:	f7fa f9e5 	bl	80091d4 <getCycleCounter>
 800ee0a:	6478      	str	r0, [r7, #68]	; 0x44
            schedLoopRemainingCycles = cmpTimeCycles(nextTargetCycles, nowCycles);
 800ee0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee10:	f7ff f9b8 	bl	800e184 <cmpTimeCycles>
 800ee14:	6338      	str	r0, [r7, #48]	; 0x30

            // Allow a little extra time
            taskRequiredTimeCycles += taskGuardCycles;
 800ee16:	4b38      	ldr	r3, [pc, #224]	; (800eef8 <scheduler+0x4d8>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	61fb      	str	r3, [r7, #28]
#if defined(USE_LATE_TASK_STATISTICS)
            if (!gyroEnabled || (taskRequiredTimeCycles < schedLoopRemainingCycles)) {
 800ee20:	4b38      	ldr	r3, [pc, #224]	; (800ef04 <scheduler+0x4e4>)
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	f083 0301 	eor.w	r3, r3, #1
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d104      	bne.n	800ee38 <scheduler+0x418>
 800ee2e:	69fa      	ldr	r2, [r7, #28]
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	429a      	cmp	r2, r3
 800ee34:	f280 808f 	bge.w	800ef56 <scheduler+0x536>
                uint32_t antipatedEndCycles = nowCycles + taskRequiredTimeCycles;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee3c:	4413      	add	r3, r2
 800ee3e:	61bb      	str	r3, [r7, #24]
                taskExecutionTimeUs += schedulerExecuteTask(selectedTask, currentTimeUs);
 800ee40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ee44:	f7ff fd0c 	bl	800e860 <schedulerExecuteTask>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee4c:	4413      	add	r3, r2
 800ee4e:	643b      	str	r3, [r7, #64]	; 0x40
                nowCycles = getCycleCounter();
 800ee50:	f7fa f9c0 	bl	80091d4 <getCycleCounter>
 800ee54:	6478      	str	r0, [r7, #68]	; 0x44
                int32_t cyclesOverdue = cmpTimeCycles(nowCycles, antipatedEndCycles);
 800ee56:	69b9      	ldr	r1, [r7, #24]
 800ee58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee5a:	f7ff f993 	bl	800e184 <cmpTimeCycles>
 800ee5e:	6178      	str	r0, [r7, #20]

                if (cyclesOverdue > 0) {
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	dd1a      	ble.n	800ee9c <scheduler+0x47c>
                    if ((currentTask - tasks) != TASK_SERIAL) {
 800ee66:	4b28      	ldr	r3, [pc, #160]	; (800ef08 <scheduler+0x4e8>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a25      	ldr	r2, [pc, #148]	; (800ef00 <scheduler+0x4e0>)
 800ee6c:	1a9b      	subs	r3, r3, r2
 800ee6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee72:	d013      	beq.n	800ee9c <scheduler+0x47c>
                        // DEBUG_SET(DEBUG_SCHEDULER_DETERMINISM, 1, currentTask - tasks);
                        // DEBUG_SET(DEBUG_SCHEDULER_DETERMINISM, 2, clockCyclesTo10thMicros(cyclesOverdue));
                        currentTask->lateCount++;
 800ee74:	4b24      	ldr	r3, [pc, #144]	; (800ef08 <scheduler+0x4e8>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee7a:	3201      	adds	r2, #1
 800ee7c:	639a      	str	r2, [r3, #56]	; 0x38
                        lateTaskCount++;
 800ee7e:	4b23      	ldr	r3, [pc, #140]	; (800ef0c <scheduler+0x4ec>)
 800ee80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3301      	adds	r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	b21a      	sxth	r2, r3
 800ee8c:	4b1f      	ldr	r3, [pc, #124]	; (800ef0c <scheduler+0x4ec>)
 800ee8e:	801a      	strh	r2, [r3, #0]
                        lateTaskTotal += cyclesOverdue;
 800ee90:	4b1f      	ldr	r3, [pc, #124]	; (800ef10 <scheduler+0x4f0>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	4413      	add	r3, r2
 800ee98:	4a1d      	ldr	r2, [pc, #116]	; (800ef10 <scheduler+0x4f0>)
 800ee9a:	6013      	str	r3, [r2, #0]
                    }
                }
#endif  // USE_LATE_TASK_STATISTICS
                if ((currentTask - tasks) == TASK_RX) {
 800ee9c:	4b1a      	ldr	r3, [pc, #104]	; (800ef08 <scheduler+0x4e8>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a17      	ldr	r2, [pc, #92]	; (800ef00 <scheduler+0x4e0>)
 800eea2:	1a9b      	subs	r3, r3, r2
 800eea4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800eea8:	d102      	bne.n	800eeb0 <scheduler+0x490>
                    skippedRxAttempts = 0;
 800eeaa:	4b1a      	ldr	r3, [pc, #104]	; (800ef14 <scheduler+0x4f4>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	701a      	strb	r2, [r3, #0]
                else if ((currentTask - tasks) == TASK_OSD) {
                    skippedOSDAttempts = 0;
                }
#endif

                if ((cyclesOverdue > 0) || (-cyclesOverdue < taskGuardMinCycles)) {
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	dc05      	bgt.n	800eec2 <scheduler+0x4a2>
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	425a      	negs	r2, r3
 800eeba:	4b17      	ldr	r3, [pc, #92]	; (800ef18 <scheduler+0x4f8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	da30      	bge.n	800ef24 <scheduler+0x504>
                    if (taskGuardCycles < taskGuardMaxCycles) {
 800eec2:	4b0d      	ldr	r3, [pc, #52]	; (800eef8 <scheduler+0x4d8>)
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	4b15      	ldr	r3, [pc, #84]	; (800ef1c <scheduler+0x4fc>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	da39      	bge.n	800ef42 <scheduler+0x522>
                        taskGuardCycles += taskGuardDeltaUpCycles;
 800eece:	4b0a      	ldr	r3, [pc, #40]	; (800eef8 <scheduler+0x4d8>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b12      	ldr	r3, [pc, #72]	; (800ef20 <scheduler+0x500>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4413      	add	r3, r2
 800eeda:	461a      	mov	r2, r3
 800eedc:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <scheduler+0x4d8>)
 800eede:	601a      	str	r2, [r3, #0]
                    if (taskGuardCycles < taskGuardMaxCycles) {
 800eee0:	e02f      	b.n	800ef42 <scheduler+0x522>
 800eee2:	bf00      	nop
 800eee4:	20000ae8 	.word	0x20000ae8
 800eee8:	20000aec 	.word	0x20000aec
 800eeec:	20000ae4 	.word	0x20000ae4
 800eef0:	20000ae0 	.word	0x20000ae0
 800eef4:	20000af8 	.word	0x20000af8
 800eef8:	20000ab8 	.word	0x20000ab8
 800eefc:	20000afc 	.word	0x20000afc
 800ef00:	20000b00 	.word	0x20000b00
 800ef04:	10000ee8 	.word	0x10000ee8
 800ef08:	10000ed0 	.word	0x10000ed0
 800ef0c:	20003e8e 	.word	0x20003e8e
 800ef10:	20000ad4 	.word	0x20000ad4
 800ef14:	20003eb3 	.word	0x20003eb3
 800ef18:	20000abc 	.word	0x20000abc
 800ef1c:	20000ac0 	.word	0x20000ac0
 800ef20:	20000ac8 	.word	0x20000ac8
                    }
                } else if (taskGuardCycles > taskGuardMinCycles) {
 800ef24:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <scheduler+0x598>)
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	4b24      	ldr	r3, [pc, #144]	; (800efbc <scheduler+0x59c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	dd08      	ble.n	800ef42 <scheduler+0x522>
                    taskGuardCycles -= taskGuardDeltaDownCycles;
 800ef30:	4b21      	ldr	r3, [pc, #132]	; (800efb8 <scheduler+0x598>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	461a      	mov	r2, r3
 800ef36:	4b22      	ldr	r3, [pc, #136]	; (800efc0 <scheduler+0x5a0>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4b1e      	ldr	r3, [pc, #120]	; (800efb8 <scheduler+0x598>)
 800ef40:	601a      	str	r2, [r3, #0]
                }
#if defined(USE_LATE_TASK_STATISTICS)
                taskCount++;
 800ef42:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <scheduler+0x5a4>)
 800ef44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	b21a      	sxth	r2, r3
 800ef50:	4b1c      	ldr	r3, [pc, #112]	; (800efc4 <scheduler+0x5a4>)
 800ef52:	801a      	strh	r2, [r3, #0]
            if (!gyroEnabled || (taskRequiredTimeCycles < schedLoopRemainingCycles)) {
 800ef54:	e020      	b.n	800ef98 <scheduler+0x578>
#endif  // USE_LATE_TASK_STATISTICS
            } else if ((selectedTask->taskAgePeriods > TASK_AGE_EXPEDITE_COUNT) ||
 800ef56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef58:	88db      	ldrh	r3, [r3, #6]
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d809      	bhi.n	800ef72 <scheduler+0x552>
#ifdef USE_OSD
                       (((selectedTask - tasks) == TASK_OSD) && (TASK_AGE_EXPEDITE_OSD != 0) && (++skippedOSDAttempts > TASK_AGE_EXPEDITE_OSD)) ||
#endif
                       ((TASK_AGE_EXPEDITE_RX != 0) && (++skippedRxAttempts > TASK_AGE_EXPEDITE_RX))) {
 800ef5e:	4b1a      	ldr	r3, [pc, #104]	; (800efc8 <scheduler+0x5a8>)
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	3301      	adds	r3, #1
 800ef64:	b2da      	uxtb	r2, r3
            } else if ((selectedTask->taskAgePeriods > TASK_AGE_EXPEDITE_COUNT) ||
 800ef66:	4b18      	ldr	r3, [pc, #96]	; (800efc8 <scheduler+0x5a8>)
 800ef68:	701a      	strb	r2, [r3, #0]
                       ((TASK_AGE_EXPEDITE_RX != 0) && (++skippedRxAttempts > TASK_AGE_EXPEDITE_RX))) {
 800ef6a:	4b17      	ldr	r3, [pc, #92]	; (800efc8 <scheduler+0x5a8>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
            } else if ((selectedTask->taskAgePeriods > TASK_AGE_EXPEDITE_COUNT) ||
 800ef6e:	2b19      	cmp	r3, #25
 800ef70:	d912      	bls.n	800ef98 <scheduler+0x578>
                // If a task has been unable to run, then reduce it's recorded estimated run time to ensure
                // it's ultimate scheduling
                selectedTask->anticipatedExecutionTime *= TASK_AGE_EXPEDITE_SCALE;
 800ef72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7f9 fa0c 	bl	8008394 <__aeabi_ui2d>
 800ef7c:	a30c      	add	r3, pc, #48	; (adr r3, 800efb0 <scheduler+0x590>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	f7f9 fa81 	bl	8008488 <__aeabi_dmul>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4610      	mov	r0, r2
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	f7f9 fd2b 	bl	80089e8 <__aeabi_d2uiz>
 800ef92:	4602      	mov	r2, r0
 800ef94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef96:	61da      	str	r2, [r3, #28]

#if defined(UNIT_TEST)
    readSchedulerLocals(selectedTask, selectedTaskDynamicPriority);
#endif

    scheduleCount++;
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <scheduler+0x5ac>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	4a0b      	ldr	r2, [pc, #44]	; (800efcc <scheduler+0x5ac>)
 800efa0:	6013      	str	r3, [r2, #0]
}
 800efa2:	bf00      	nop
 800efa4:	374c      	adds	r7, #76	; 0x4c
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd90      	pop	{r4, r7, pc}
 800efaa:	bf00      	nop
 800efac:	f3af 8000 	nop.w
 800efb0:	cccccccd 	.word	0xcccccccd
 800efb4:	3feccccc 	.word	0x3feccccc
 800efb8:	20000ab8 	.word	0x20000ab8
 800efbc:	20000abc 	.word	0x20000abc
 800efc0:	20000ac4 	.word	0x20000ac4
 800efc4:	20003e90 	.word	0x20003e90
 800efc8:	20003eb3 	.word	0x20003eb3
 800efcc:	20000afc 	.word	0x20000afc

0800efd0 <schedulerEnableGyro>:

void schedulerEnableGyro(void)
{
 800efd0:	b480      	push	{r7}
 800efd2:	af00      	add	r7, sp, #0
    gyroEnabled = true;
 800efd4:	4b03      	ldr	r3, [pc, #12]	; (800efe4 <schedulerEnableGyro+0x14>)
 800efd6:	2201      	movs	r2, #1
 800efd8:	701a      	strb	r2, [r3, #0]
}
 800efda:	bf00      	nop
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	10000ee8 	.word	0x10000ee8

0800efe8 <taskMain>:
#define RX_TASK_MARGIN 1

static uint8_t pidUpdateCounter;

static void taskMain(uint32_t currentTimeUs)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
    UNUSED(currentTimeUs);

#ifdef USE_SDCARD
    afatfs_poll();
#endif
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <ledUpdate>:

static void ledUpdate(uint32_t currentTimeUs)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
    static uint32_t pre_time = 0;
    if(currentTimeUs - pre_time >= 1000000)
 800f004:	4b08      	ldr	r3, [pc, #32]	; (800f028 <ledUpdate+0x2c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	4a07      	ldr	r2, [pc, #28]	; (800f02c <ledUpdate+0x30>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d905      	bls.n	800f01e <ledUpdate+0x22>
    {
        pre_time = currentTimeUs;
 800f012:	4a05      	ldr	r2, [pc, #20]	; (800f028 <ledUpdate+0x2c>)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6013      	str	r3, [r2, #0]
        ledToggle(_DEF_LED1);
 800f018:	2000      	movs	r0, #0
 800f01a:	f004 fda3 	bl	8013b64 <ledToggle>
    }
}
 800f01e:	bf00      	nop
 800f020:	3708      	adds	r7, #8
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	20000ec0 	.word	0x20000ec0
 800f02c:	000f423f 	.word	0x000f423f

0800f030 <debugPrint>:


static void debugPrint(uint32_t currentTimeUs)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    //cliPrintf("BARO : %d cm, Load : %d, count : %d \n\r", baro.BaroAlt, getAverageSystemLoadPercent(), getCycleCounter());
    cliPrintf("IMU R: %d, P: %d, Y: %d\n\r",    attitude.values.roll,
 800f038:	4b08      	ldr	r3, [pc, #32]	; (800f05c <debugPrint+0x2c>)
 800f03a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f03e:	4619      	mov	r1, r3
                                                attitude.values.pitch,
 800f040:	4b06      	ldr	r3, [pc, #24]	; (800f05c <debugPrint+0x2c>)
 800f042:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    cliPrintf("IMU R: %d, P: %d, Y: %d\n\r",    attitude.values.roll,
 800f046:	461a      	mov	r2, r3
                                                attitude.values.yaw);
 800f048:	4b04      	ldr	r3, [pc, #16]	; (800f05c <debugPrint+0x2c>)
 800f04a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cliPrintf("IMU R: %d, P: %d, Y: %d\n\r",    attitude.values.roll,
 800f04e:	4804      	ldr	r0, [pc, #16]	; (800f060 <debugPrint+0x30>)
 800f050:	f003 f9fc 	bl	801244c <cliPrintf>
    //                                             sensor.imuSensor1.imuDev.accADCRaw[Y],
    //                                             sensor.imuSensor1.imuDev.accADCRaw[Z]);
    // cliPrintf("GYRO R: %d, P: %d, Y: %d\n\r",    sensor.imuSensor1.imuDev.gyroADCRaw[X],
    //                                             sensor.imuSensor1.imuDev.gyroADCRaw[Y],
    //                                             sensor.imuSensor1.imuDev.gyroADCRaw[Z]);
}
 800f054:	bf00      	nop
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20000708 	.word	0x20000708
 800f060:	0802bc94 	.word	0x0802bc94

0800f064 <taskHandleSerial>:

static void taskHandleSerial(uint32_t currentTimeUs)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    if (cliMode) {
        cliProcess();
        return;
    }
#endif
    cliMain();
 800f06c:	f002 fdbc 	bl	8011be8 <cliMain>
    SerialCom();
 800f070:	f7fd fade 	bl	800c630 <SerialCom>
    // bool evaluateMspData = ARMING_FLAG(ARMED) ? MSP_SKIP_NON_MSP_DATA : MSP_EVALUATE_NON_MSP_DATA;
    // mspSerialProcess(evaluateMspData, mspFcProcessCommand, mspFcProcessReply);
}
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <taskUpdateAccelerometer>:
//     batteryUpdateAlarms();
// }


static void taskUpdateAccelerometer(uint32_t currentTimeUs)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    accUpdate(currentTimeUs);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f9a9 	bl	800f3dc <accUpdate>
}
 800f08a:	bf00      	nop
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
	...

0800f094 <taskGyroSample>:


void taskGyroSample(uint32_t currentTimeUs)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
    UNUSED(currentTimeUs);
    gyroUpdate();
 800f09c:	f001 fabe 	bl	801061c <gyroUpdate>
    if (pidUpdateCounter % activePidLoopDenom == 0) {
 800f0a0:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <taskGyroSample+0x40>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	4a0c      	ldr	r2, [pc, #48]	; (800f0d8 <taskGyroSample+0x44>)
 800f0a6:	7812      	ldrb	r2, [r2, #0]
 800f0a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0ac:	fb01 f202 	mul.w	r2, r1, r2
 800f0b0:	1a9b      	subs	r3, r3, r2
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <taskGyroSample+0x2a>
        pidUpdateCounter = 0;
 800f0b8:	4b06      	ldr	r3, [pc, #24]	; (800f0d4 <taskGyroSample+0x40>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	701a      	strb	r2, [r3, #0]
    }
    pidUpdateCounter++;
 800f0be:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <taskGyroSample+0x40>)
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	4b03      	ldr	r3, [pc, #12]	; (800f0d4 <taskGyroSample+0x40>)
 800f0c8:	701a      	strb	r2, [r3, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20003eb4 	.word	0x20003eb4
 800f0d8:	10000000 	.word	0x10000000

0800f0dc <taskUpdateRxMainInProgress>:
} rxState_e;

static rxState_e rxState = RX_STATE_CHECK;

bool taskUpdateRxMainInProgress()
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
    return (rxState != RX_STATE_CHECK);
 800f0e0:	4b05      	ldr	r3, [pc, #20]	; (800f0f8 <taskUpdateRxMainInProgress+0x1c>)
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	bf14      	ite	ne
 800f0e8:	2301      	movne	r3, #1
 800f0ea:	2300      	moveq	r3, #0
 800f0ec:	b2db      	uxtb	r3, r3
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	20003eb5 	.word	0x20003eb5

0800f0fc <taskUpdateRxMain>:

static void taskUpdateRxMain(uint32_t currentTimeUs)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    static int32_t rxStateDurationFractionUs[RX_STATE_COUNT];
    int32_t executeTimeUs;
    rxState_e oldRxState = rxState;
 800f104:	4b38      	ldr	r3, [pc, #224]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	75fb      	strb	r3, [r7, #23]
    int32_t anticipatedExecutionTime;

    // Where we are using a state machine call schedulerIgnoreTaskExecRate() for all states bar one
    if (rxState != RX_STATE_UPDATE) {
 800f10a:	4b37      	ldr	r3, [pc, #220]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d001      	beq.n	800f116 <taskUpdateRxMain+0x1a>
        schedulerIgnoreTaskExecRate();
 800f112:	f7ff fa83 	bl	800e61c <schedulerIgnoreTaskExecRate>
    }

    switch (rxState) {
 800f116:	4b34      	ldr	r3, [pc, #208]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d012      	beq.n	800f144 <taskUpdateRxMain+0x48>
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d017      	beq.n	800f152 <taskUpdateRxMain+0x56>
    default:
    case RX_STATE_CHECK:
        if (!processRx(currentTimeUs)) {
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7fe fc0e 	bl	800d944 <processRx>
 800f128:	4603      	mov	r3, r0
 800f12a:	f083 0301 	eor.w	r3, r3, #1
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <taskUpdateRxMain+0x40>
            rxState = RX_STATE_CHECK;
 800f134:	4b2c      	ldr	r3, [pc, #176]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f136:	2200      	movs	r2, #0
 800f138:	701a      	strb	r2, [r3, #0]
            break;
 800f13a:	e010      	b.n	800f15e <taskUpdateRxMain+0x62>
        }
        rxState = RX_STATE_MODES;
 800f13c:	4b2a      	ldr	r3, [pc, #168]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f13e:	2201      	movs	r2, #1
 800f140:	701a      	strb	r2, [r3, #0]
        break;
 800f142:	e00c      	b.n	800f15e <taskUpdateRxMain+0x62>

    case RX_STATE_MODES:
        processRxModes(currentTimeUs);
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7fe fc14 	bl	800d972 <processRxModes>
        rxState = RX_STATE_UPDATE;
 800f14a:	4b27      	ldr	r3, [pc, #156]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f14c:	2202      	movs	r2, #2
 800f14e:	701a      	strb	r2, [r3, #0]
        break;
 800f150:	e005      	b.n	800f15e <taskUpdateRxMain+0x62>

    case RX_STATE_UPDATE:
        // updateRcCommands sets rcCommand, which is needed by updateAltHoldState and updateSonarAltHoldState
        updateRcCommands();
 800f152:	f7fe fc51 	bl	800d9f8 <updateRcCommands>
#ifdef USE_USB_CDC_HID
        if (!ARMING_FLAG(ARMED)) {
            sendRcDataToHid();
        }
#endif
        rxState = RX_STATE_CHECK;
 800f156:	4b24      	ldr	r3, [pc, #144]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f158:	2200      	movs	r2, #0
 800f15a:	701a      	strb	r2, [r3, #0]
        break;
 800f15c:	bf00      	nop
    }

    if (!schedulerGetIgnoreTaskExecTime()) {
 800f15e:	f7ff fa75 	bl	800e64c <schedulerGetIgnoreTaskExecTime>
 800f162:	4603      	mov	r3, r0
 800f164:	f083 0301 	eor.w	r3, r3, #1
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d02e      	beq.n	800f1cc <taskUpdateRxMain+0xd0>
        executeTimeUs = micros() - currentTimeUs + RX_TASK_MARGIN;
 800f16e:	f7fa f861 	bl	8009234 <micros>
 800f172:	4602      	mov	r2, r0
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	3301      	adds	r3, #1
 800f17a:	613b      	str	r3, [r7, #16]

        // If the scheduler has reduced the anticipatedExecutionTime due to task aging, pick that up
        anticipatedExecutionTime = schedulerGetNextStateTime();
 800f17c:	f7ff fb62 	bl	800e844 <schedulerGetNextStateTime>
 800f180:	60f8      	str	r0, [r7, #12]
        if (anticipatedExecutionTime != (rxStateDurationFractionUs[oldRxState] >> RX_TASK_DECAY_SHIFT)) {
 800f182:	7dfb      	ldrb	r3, [r7, #23]
 800f184:	4a19      	ldr	r2, [pc, #100]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f18a:	119b      	asrs	r3, r3, #6
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d005      	beq.n	800f19e <taskUpdateRxMain+0xa2>
            rxStateDurationFractionUs[oldRxState] = anticipatedExecutionTime << RX_TASK_DECAY_SHIFT;
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	0192      	lsls	r2, r2, #6
 800f198:	4914      	ldr	r1, [pc, #80]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }

        if (executeTimeUs > (rxStateDurationFractionUs[oldRxState] >> RX_TASK_DECAY_SHIFT)) {
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	4a12      	ldr	r2, [pc, #72]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a6:	119b      	asrs	r3, r3, #6
 800f1a8:	693a      	ldr	r2, [r7, #16]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	dd06      	ble.n	800f1bc <taskUpdateRxMain+0xc0>
            rxStateDurationFractionUs[oldRxState] = executeTimeUs << RX_TASK_DECAY_SHIFT;
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	693a      	ldr	r2, [r7, #16]
 800f1b2:	0192      	lsls	r2, r2, #6
 800f1b4:	490d      	ldr	r1, [pc, #52]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f1ba:	e007      	b.n	800f1cc <taskUpdateRxMain+0xd0>
        } else {
            // Slowly decay the max time
            rxStateDurationFractionUs[oldRxState]--;
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	4a0b      	ldr	r2, [pc, #44]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f1c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1c4:	3a01      	subs	r2, #1
 800f1c6:	4909      	ldr	r1, [pc, #36]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // if (debugMode == DEBUG_RX_STATE_TIME) {
    //     debug[oldRxState] = rxStateDurationFractionUs[oldRxState] >> RX_TASK_DECAY_SHIFT;
    // }

    schedulerSetNextStateTime(rxStateDurationFractionUs[rxState] >> RX_TASK_DECAY_SHIFT);
 800f1cc:	4b06      	ldr	r3, [pc, #24]	; (800f1e8 <taskUpdateRxMain+0xec>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4b06      	ldr	r3, [pc, #24]	; (800f1ec <taskUpdateRxMain+0xf0>)
 800f1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d8:	119b      	asrs	r3, r3, #6
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7ff fb22 	bl	800e824 <schedulerSetNextStateTime>
}
 800f1e0:	bf00      	nop
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	20003eb5 	.word	0x20003eb5
 800f1ec:	20000ec4 	.word	0x20000ec4

0800f1f0 <taskUpdateBaro>:

static void taskUpdateBaro(uint32_t currentTimeUs)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    UNUSED(currentTimeUs);
    
        const uint32_t newDeadline = baroUpdate(currentTimeUs);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 fbf5 	bl	800f9e8 <baroUpdate>
 800f1fe:	60f8      	str	r0, [r7, #12]
        if (newDeadline != 0) {
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <taskUpdateBaro+0x20>
            rescheduleTask(TASK_SELF, newDeadline);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	4619      	mov	r1, r3
 800f20a:	2010      	movs	r0, #16
 800f20c:	f7ff f98a 	bl	800e524 <rescheduleTask>
        }
}
 800f210:	bf00      	nop
 800f212:	3710      	adds	r7, #16
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <taskUpdateMag>:

static void taskUpdateMag(uint32_t currentTimeUs)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
        const uint32_t newDeadline = compassUpdate(currentTimeUs);
        if (newDeadline != 0) {
            rescheduleTask(TASK_SELF, newDeadline);
        }
    }
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <taskCalculateAltitude>:
    rangefinderProcess(getCosTiltAngle());
}
#endif

static void taskCalculateAltitude(uint32_t currentTimeUs)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
    calculateEstimatedAltitude(currentTimeUs);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fd99 	bl	800fd6c <calculateEstimatedAltitude>
}
 800f23a:	bf00      	nop
 800f23c:	3708      	adds	r7, #8
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
	...

0800f244 <getTask>:
    [TASK_ADC_INTERNAL] = DEFINE_TASK("ADCINTERNAL", NULL, NULL, adcInternalProcess, TASK_PERIOD_HZ(1), TASK_PRIORITY_LOWEST),
#endif
};

task_t *getTask(unsigned taskId)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
    return &tasks[taskId];
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	019b      	lsls	r3, r3, #6
 800f250:	4a03      	ldr	r2, [pc, #12]	; (800f260 <getTask+0x1c>)
 800f252:	4413      	add	r3, r2
}
 800f254:	4618      	mov	r0, r3
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	20000b00 	.word	0x20000b00

0800f264 <tasksInitData>:

// Has to be done before tasksInit() in order to initialize any task data which may be uninitialized at boot
void tasksInitData(void)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
    for (int i = 0; i < TASK_COUNT; i++) {
 800f26a:	2300      	movs	r3, #0
 800f26c:	607b      	str	r3, [r7, #4]
 800f26e:	e00e      	b.n	800f28e <tasksInitData+0x2a>
        tasks[i].attribute = &task_attributes[i];
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	4613      	mov	r3, r2
 800f274:	005b      	lsls	r3, r3, #1
 800f276:	4413      	add	r3, r2
 800f278:	00db      	lsls	r3, r3, #3
 800f27a:	4a0a      	ldr	r2, [pc, #40]	; (800f2a4 <tasksInitData+0x40>)
 800f27c:	441a      	add	r2, r3
 800f27e:	490a      	ldr	r1, [pc, #40]	; (800f2a8 <tasksInitData+0x44>)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	019b      	lsls	r3, r3, #6
 800f284:	440b      	add	r3, r1
 800f286:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < TASK_COUNT; i++) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	3301      	adds	r3, #1
 800f28c:	607b      	str	r3, [r7, #4]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2b0e      	cmp	r3, #14
 800f292:	dded      	ble.n	800f270 <tasksInitData+0xc>
    }
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	200001e0 	.word	0x200001e0
 800f2a8:	20000b00 	.word	0x20000b00

0800f2ac <tasksInit>:

void tasksInit(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	af00      	add	r7, sp, #0
    schedulerInit();
 800f2b0:	f7ff fa46 	bl	800e740 <schedulerInit>

    setTaskEnabled(TASK_MAIN, true);
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	2001      	movs	r0, #1
 800f2b8:	f7ff f96e 	bl	800e598 <setTaskEnabled>

    setTaskEnabled(TASK_SERIAL, true);
 800f2bc:	2101      	movs	r1, #1
 800f2be:	2008      	movs	r0, #8
 800f2c0:	f7ff f96a 	bl	800e598 <setTaskEnabled>
    setTaskEnabled(TASK_LED, true);
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	2009      	movs	r0, #9
 800f2c8:	f7ff f966 	bl	800e598 <setTaskEnabled>
    setTaskEnabled(TASK_DEBUG, true);
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	200a      	movs	r0, #10
 800f2d0:	f7ff f962 	bl	800e598 <setTaskEnabled>
    rescheduleTask(TASK_SERIAL, TASK_PERIOD_HZ(100));
 800f2d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800f2d8:	2008      	movs	r0, #8
 800f2da:	f7ff f923 	bl	800e524 <rescheduleTask>

#ifdef USE_STACK_CHECK
    setTaskEnabled(TASK_STACK_CHECK, true);
#endif

    rescheduleTask(TASK_GYRO, 312);
 800f2de:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f2e2:	2002      	movs	r0, #2
 800f2e4:	f7ff f91e 	bl	800e524 <rescheduleTask>
    rescheduleTask(TASK_FILTER, gyro.targetLooptime);
 800f2e8:	4b1e      	ldr	r3, [pc, #120]	; (800f364 <tasksInit+0xb8>)
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	2003      	movs	r0, #3
 800f2f0:	f7ff f918 	bl	800e524 <rescheduleTask>
    rescheduleTask(TASK_PID, gyro.targetLooptime);
 800f2f4:	4b1b      	ldr	r3, [pc, #108]	; (800f364 <tasksInit+0xb8>)
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	2004      	movs	r0, #4
 800f2fc:	f7ff f912 	bl	800e524 <rescheduleTask>
    setTaskEnabled(TASK_GYRO, true);
 800f300:	2101      	movs	r1, #1
 800f302:	2002      	movs	r0, #2
 800f304:	f7ff f948 	bl	800e598 <setTaskEnabled>
    setTaskEnabled(TASK_FILTER, true);
 800f308:	2101      	movs	r1, #1
 800f30a:	2003      	movs	r0, #3
 800f30c:	f7ff f944 	bl	800e598 <setTaskEnabled>
    setTaskEnabled(TASK_PID, true);
 800f310:	2101      	movs	r1, #1
 800f312:	2004      	movs	r0, #4
 800f314:	f7ff f940 	bl	800e598 <setTaskEnabled>
    schedulerEnableGyro();
 800f318:	f7ff fe5a 	bl	800efd0 <schedulerEnableGyro>

    setTaskEnabled(TASK_ACCEL, true);
 800f31c:	2101      	movs	r1, #1
 800f31e:	2005      	movs	r0, #5
 800f320:	f7ff f93a 	bl	800e598 <setTaskEnabled>
    rescheduleTask(TASK_ACCEL, TASK_PERIOD_HZ(800));
 800f324:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800f328:	2005      	movs	r0, #5
 800f32a:	f7ff f8fb 	bl	800e524 <rescheduleTask>
    setTaskEnabled(TASK_ATTITUDE, true);
 800f32e:	2101      	movs	r1, #1
 800f330:	2006      	movs	r0, #6
 800f332:	f7ff f931 	bl	800e598 <setTaskEnabled>
    if (sensors(SENSOR_RANGEFINDER)) {
        setTaskEnabled(TASK_RANGEFINDER, featureIsEnabled(FEATURE_RANGEFINDER));
    }
#endif

    setTaskEnabled(TASK_RX, true);
 800f336:	2101      	movs	r1, #1
 800f338:	2007      	movs	r0, #7
 800f33a:	f7ff f92d 	bl	800e598 <setTaskEnabled>

#ifdef USE_BEEPER
    setTaskEnabled(TASK_BEEPER, true);
#endif

    setTaskEnabled(TASK_GPS, true);
 800f33e:	2101      	movs	r1, #1
 800f340:	200b      	movs	r0, #11
 800f342:	f7ff f929 	bl	800e598 <setTaskEnabled>

    setTaskEnabled(TASK_COMPASS, true);
 800f346:	2101      	movs	r1, #1
 800f348:	200c      	movs	r0, #12
 800f34a:	f7ff f925 	bl	800e598 <setTaskEnabled>

    setTaskEnabled(TASK_BARO, true);
 800f34e:	2101      	movs	r1, #1
 800f350:	200d      	movs	r0, #13
 800f352:	f7ff f921 	bl	800e598 <setTaskEnabled>

    setTaskEnabled(TASK_ALTITUDE, true);
 800f356:	2101      	movs	r1, #1
 800f358:	200e      	movs	r0, #14
 800f35a:	f7ff f91d 	bl	800e598 <setTaskEnabled>

#ifdef USE_CRSF_V3
    const bool useCRSF = rxRuntimeState.serialrxProvider == SERIALRX_CRSF;
    setTaskEnabled(TASK_SPEED_NEGOTIATION, useCRSF);
#endif
}
 800f35e:	bf00      	nop
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	10000ff4 	.word	0x10000ff4

0800f368 <applyAccelerationTrims>:
#include "acceleration.h"

FAST_DATA_ZERO_INIT acc_t acc;                       // acc access functions

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 800f370:	4b19      	ldr	r3, [pc, #100]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f372:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f37c:	ee07 3a90 	vmov	s15, r3
 800f380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f384:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f388:	4b13      	ldr	r3, [pc, #76]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f38a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 800f38e:	4b12      	ldr	r3, [pc, #72]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f390:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f39a:	ee07 3a90 	vmov	s15, r3
 800f39e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3a6:	4b0c      	ldr	r3, [pc, #48]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f3a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f3ae:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f3b8:	ee07 3a90 	vmov	s15, r3
 800f3bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3c4:	4b04      	ldr	r3, [pc, #16]	; (800f3d8 <applyAccelerationTrims+0x70>)
 800f3c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800f3ca:	bf00      	nop
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	10000f2c 	.word	0x10000f2c

0800f3dc <accUpdate>:

#define acc_lpf_factor 4

void accUpdate(uint32_t currentTimeUs)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    UNUSED(currentTimeUs);
    //static float accLPF[3];

    if(acc.dev.dataReady){
 800f3e4:	4b4d      	ldr	r3, [pc, #308]	; (800f51c <accUpdate+0x140>)
 800f3e6:	7d1b      	ldrb	r3, [r3, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00d      	beq.n	800f408 <accUpdate+0x2c>
        if (!acc.dev.readFn(&acc.dev)) {
 800f3ec:	4b4b      	ldr	r3, [pc, #300]	; (800f51c <accUpdate+0x140>)
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	484a      	ldr	r0, [pc, #296]	; (800f51c <accUpdate+0x140>)
 800f3f2:	4798      	blx	r3
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f083 0301 	eor.w	r3, r3, #1
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f040 8089 	bne.w	800f514 <accUpdate+0x138>
            return;
        }
        acc.dev.dataReady = false;
 800f402:	4b46      	ldr	r3, [pc, #280]	; (800f51c <accUpdate+0x140>)
 800f404:	2200      	movs	r2, #0
 800f406:	751a      	strb	r2, [r3, #20]
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 800f408:	4b44      	ldr	r3, [pc, #272]	; (800f51c <accUpdate+0x140>)
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
 800f414:	e015      	b.n	800f442 <accUpdate+0x66>
        //DEBUG_SET(DEBUG_ACCELEROMETER, axis, acc.dev.ADCRaw[axis]);
        acc.accADC[axis] = acc.dev.ADCRaw[axis];
 800f416:	4a41      	ldr	r2, [pc, #260]	; (800f51c <accUpdate+0x140>)
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	3304      	adds	r3, #4
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	4413      	add	r3, r2
 800f420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f424:	ee07 3a90 	vmov	s15, r3
 800f428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f42c:	4a3b      	ldr	r2, [pc, #236]	; (800f51c <accUpdate+0x140>)
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	3308      	adds	r3, #8
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4413      	add	r3, r2
 800f436:	3304      	adds	r3, #4
 800f438:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	3301      	adds	r3, #1
 800f440:	617b      	str	r3, [r7, #20]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2b02      	cmp	r3, #2
 800f446:	dde6      	ble.n	800f416 <accUpdate+0x3a>
	// 		accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + acc.accADC[axis] * (1.0f / acc_lpf_factor);
	// 		acc.accADC[axis] = accLPF[axis];
	// 	}
	// }

    if (accelerationRuntime.accLpfCutHz) {
 800f448:	4b35      	ldr	r3, [pc, #212]	; (800f520 <accUpdate+0x144>)
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d027      	beq.n	800f4a0 <accUpdate+0xc4>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f450:	2300      	movs	r3, #0
 800f452:	613b      	str	r3, [r7, #16]
 800f454:	e021      	b.n	800f49a <accUpdate+0xbe>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	4613      	mov	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	4a2f      	ldr	r2, [pc, #188]	; (800f520 <accUpdate+0x144>)
 800f462:	4413      	add	r3, r2
 800f464:	1d1a      	adds	r2, r3, #4
 800f466:	492d      	ldr	r1, [pc, #180]	; (800f51c <accUpdate+0x140>)
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	3308      	adds	r3, #8
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	440b      	add	r3, r1
 800f470:	3304      	adds	r3, #4
 800f472:	edd3 7a00 	vldr	s15, [r3]
 800f476:	eeb0 0a67 	vmov.f32	s0, s15
 800f47a:	4610      	mov	r0, r2
 800f47c:	f7fb fca7 	bl	800adce <biquadFilterApply>
 800f480:	eef0 7a40 	vmov.f32	s15, s0
 800f484:	4a25      	ldr	r2, [pc, #148]	; (800f51c <accUpdate+0x140>)
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	3308      	adds	r3, #8
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	3304      	adds	r3, #4
 800f490:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	3301      	adds	r3, #1
 800f498:	613b      	str	r3, [r7, #16]
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	ddda      	ble.n	800f456 <accUpdate+0x7a>
        }
    }

    if (!accIsCalibrationComplete()) {
 800f4a0:	f000 f93c 	bl	800f71c <accIsCalibrationComplete>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	f083 0301 	eor.w	r3, r3, #1
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d001      	beq.n	800f4b4 <accUpdate+0xd8>
        performAcclerationCalibration();
 800f4b0:	f000 f96a 	bl	800f788 <performAcclerationCalibration>
    }

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 800f4b4:	4b1a      	ldr	r3, [pc, #104]	; (800f520 <accUpdate+0x144>)
 800f4b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7ff ff55 	bl	800f368 <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 800f4be:	4b18      	ldr	r3, [pc, #96]	; (800f520 <accUpdate+0x144>)
 800f4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	4a16      	ldr	r2, [pc, #88]	; (800f520 <accUpdate+0x144>)
 800f4c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e01c      	b.n	800f50c <accUpdate+0x130>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 800f4d2:	4a13      	ldr	r2, [pc, #76]	; (800f520 <accUpdate+0x144>)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3320      	adds	r3, #32
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	4413      	add	r3, r2
 800f4dc:	3304      	adds	r3, #4
 800f4de:	ed93 7a00 	vldr	s14, [r3]
 800f4e2:	4a0e      	ldr	r2, [pc, #56]	; (800f51c <accUpdate+0x140>)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3308      	adds	r3, #8
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	edd3 7a00 	vldr	s15, [r3]
 800f4f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4f6:	4a0a      	ldr	r2, [pc, #40]	; (800f520 <accUpdate+0x144>)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3320      	adds	r3, #32
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4413      	add	r3, r2
 800f500:	3304      	adds	r3, #4
 800f502:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3301      	adds	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b02      	cmp	r3, #2
 800f510:	dddf      	ble.n	800f4d2 <accUpdate+0xf6>
 800f512:	e000      	b.n	800f516 <accUpdate+0x13a>
            return;
 800f514:	bf00      	nop
    }
}
 800f516:	3718      	adds	r7, #24
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	10000f2c 	.word	0x10000f2c
 800f520:	10000f60 	.word	0x10000f60

0800f524 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 800f524:	b480      	push	{r7}
 800f526:	b085      	sub	sp, #20
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800f52c:	4b25      	ldr	r3, [pc, #148]	; (800f5c4 <accGetAccumulationAverage+0xa0>)
 800f52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f532:	2b00      	cmp	r3, #0
 800f534:	dd2e      	ble.n	800f594 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f536:	2300      	movs	r3, #0
 800f538:	60fb      	str	r3, [r7, #12]
 800f53a:	e022      	b.n	800f582 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800f53c:	4a21      	ldr	r2, [pc, #132]	; (800f5c4 <accGetAccumulationAverage+0xa0>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3320      	adds	r3, #32
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	3304      	adds	r3, #4
 800f548:	edd3 6a00 	vldr	s13, [r3]
 800f54c:	4b1d      	ldr	r3, [pc, #116]	; (800f5c4 <accGetAccumulationAverage+0xa0>)
 800f54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f552:	ee07 3a90 	vmov	s15, r3
 800f556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	4413      	add	r3, r2
 800f562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f566:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 800f56a:	4a16      	ldr	r2, [pc, #88]	; (800f5c4 <accGetAccumulationAverage+0xa0>)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3320      	adds	r3, #32
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	4413      	add	r3, r2
 800f574:	3304      	adds	r3, #4
 800f576:	f04f 0200 	mov.w	r2, #0
 800f57a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3301      	adds	r3, #1
 800f580:	60fb      	str	r3, [r7, #12]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b02      	cmp	r3, #2
 800f586:	ddd9      	ble.n	800f53c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 800f588:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <accGetAccumulationAverage+0xa0>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 800f590:	2301      	movs	r3, #1
 800f592:	e010      	b.n	800f5b6 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f594:	2300      	movs	r3, #0
 800f596:	60bb      	str	r3, [r7, #8]
 800f598:	e009      	b.n	800f5ae <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	f04f 0200 	mov.w	r2, #0
 800f5a6:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	60bb      	str	r3, [r7, #8]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	ddf2      	ble.n	800f59a <accGetAccumulationAverage+0x76>
        }
        return false;
 800f5b4:	2300      	movs	r3, #0
    }
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	10000f60 	.word	0x10000f60

0800f5c8 <setConfigCalibrationCompleted>:
        .values.pitch = 0,
    );
}

static void setConfigCalibrationCompleted(void)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	af00      	add	r7, sp, #0
    p_acc_pg->accZero.values.calibrationCompleted = 1;
 800f5cc:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <setConfigCalibrationCompleted+0x18>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	815a      	strh	r2, [r3, #10]
}
 800f5d4:	bf00      	nop
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	20000194 	.word	0x20000194
 800f5e4:	00000000 	.word	0x00000000

0800f5e8 <accInitFilters>:
//     sensorsSet(SENSOR_ACC);
//     return true;
// }

void accInitFilters(void)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? p_acc_pg->acc_lpf_hz : 0;
 800f5ee:	4b24      	ldr	r3, [pc, #144]	; (800f680 <accInitFilters+0x98>)
 800f5f0:	8c1b      	ldrh	r3, [r3, #32]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d003      	beq.n	800f5fe <accInitFilters+0x16>
 800f5f6:	4b23      	ldr	r3, [pc, #140]	; (800f684 <accInitFilters+0x9c>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	e000      	b.n	800f600 <accInitFilters+0x18>
 800f5fe:	2300      	movs	r3, #0
 800f600:	4a21      	ldr	r2, [pc, #132]	; (800f688 <accInitFilters+0xa0>)
 800f602:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 800f604:	4b20      	ldr	r3, [pc, #128]	; (800f688 <accInitFilters+0xa0>)
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d030      	beq.n	800f66e <accInitFilters+0x86>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 800f60c:	4b1c      	ldr	r3, [pc, #112]	; (800f680 <accInitFilters+0x98>)
 800f60e:	8c1b      	ldrh	r3, [r3, #32]
 800f610:	4618      	mov	r0, r3
 800f612:	f7f8 fecf 	bl	80083b4 <__aeabi_i2d>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	a117      	add	r1, pc, #92	; (adr r1, 800f678 <accInitFilters+0x90>)
 800f61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f620:	f7f9 f85c 	bl	80086dc <__aeabi_ddiv>
 800f624:	4602      	mov	r2, r0
 800f626:	460b      	mov	r3, r1
 800f628:	4610      	mov	r0, r2
 800f62a:	4619      	mov	r1, r3
 800f62c:	f7f9 f9dc 	bl	80089e8 <__aeabi_d2uiz>
 800f630:	4603      	mov	r3, r0
 800f632:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f634:	2300      	movs	r3, #0
 800f636:	607b      	str	r3, [r7, #4]
 800f638:	e016      	b.n	800f668 <accInitFilters+0x80>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	4613      	mov	r3, r2
 800f63e:	009b      	lsls	r3, r3, #2
 800f640:	4413      	add	r3, r2
 800f642:	00db      	lsls	r3, r3, #3
 800f644:	4a10      	ldr	r2, [pc, #64]	; (800f688 <accInitFilters+0xa0>)
 800f646:	4413      	add	r3, r2
 800f648:	3304      	adds	r3, #4
 800f64a:	4a0f      	ldr	r2, [pc, #60]	; (800f688 <accInitFilters+0xa0>)
 800f64c:	8812      	ldrh	r2, [r2, #0]
 800f64e:	ee07 2a90 	vmov	s15, r2
 800f652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	eeb0 0a67 	vmov.f32	s0, s15
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fb fa31 	bl	800aac4 <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3301      	adds	r3, #1
 800f666:	607b      	str	r3, [r7, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	dde5      	ble.n	800f63a <accInitFilters+0x52>
        }
    }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	00000000 	.word	0x00000000
 800f67c:	412e8480 	.word	0x412e8480
 800f680:	10000f2c 	.word	0x10000f2c
 800f684:	20000194 	.word	0x20000194
 800f688:	10000f60 	.word	0x10000f60

0800f68c <accInit>:

bool accInit(uint16_t accSampleRateHz)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	4603      	mov	r3, r0
 800f694:	80fb      	strh	r3, [r7, #6]
    memset(&acc, 0, sizeof(acc));
 800f696:	2234      	movs	r2, #52	; 0x34
 800f698:	2100      	movs	r1, #0
 800f69a:	4817      	ldr	r0, [pc, #92]	; (800f6f8 <accInit+0x6c>)
 800f69c:	f018 fcea 	bl	8028074 <memset>
    // copy over the common gyro mpu settings
    acc.dev.gyro = gyroActiveDev();
 800f6a0:	f001 fcf6 	bl	8011090 <gyroActiveDev>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	4a14      	ldr	r2, [pc, #80]	; (800f6f8 <accInit+0x6c>)
 800f6a8:	6193      	str	r3, [r2, #24]
    //acc.dev.mpuDetectionResult = *gyroMpuDetectionResult();
    acc.dev.acc_high_fsr = p_acc_pg->acc_high_fsr;
 800f6aa:	4b14      	ldr	r3, [pc, #80]	; (800f6fc <accInit+0x70>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	78da      	ldrb	r2, [r3, #3]
 800f6b0:	4b11      	ldr	r3, [pc, #68]	; (800f6f8 <accInit+0x6c>)
 800f6b2:	771a      	strb	r2, [r3, #28]
    //buildRotationMatrixFromAlignment(customAlignment, &acc.dev.rotationMatrix);

    // if (!accDetect(&acc.dev, accelerometerConfig()->acc_hardware)) {
    //     return false;
    // }
    bmi270SpiAccDetect(&acc.dev);
 800f6b4:	4810      	ldr	r0, [pc, #64]	; (800f6f8 <accInit+0x6c>)
 800f6b6:	f001 fde9 	bl	801128c <bmi270SpiAccDetect>
    acc.dev.acc_1G = 256; // set default
 800f6ba:	4b0f      	ldr	r3, [pc, #60]	; (800f6f8 <accInit+0x6c>)
 800f6bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6c0:	819a      	strh	r2, [r3, #12]
    acc.dev.initFn(&acc.dev); // driver initialisation
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	; (800f6f8 <accInit+0x6c>)
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	480c      	ldr	r0, [pc, #48]	; (800f6f8 <accInit+0x6c>)
 800f6c8:	4798      	blx	r3
    acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 800f6ca:	4b0b      	ldr	r3, [pc, #44]	; (800f6f8 <accInit+0x6c>)
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	ee07 3a90 	vmov	s15, r3
 800f6d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6de:	4b06      	ldr	r3, [pc, #24]	; (800f6f8 <accInit+0x6c>)
 800f6e0:	edc3 7a00 	vstr	s15, [r3]

    acc.sampleRateHz = accSampleRateHz;
 800f6e4:	4a04      	ldr	r2, [pc, #16]	; (800f6f8 <accInit+0x6c>)
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	8413      	strh	r3, [r2, #32]
    accInitFilters();
 800f6ea:	f7ff ff7d 	bl	800f5e8 <accInitFilters>
    return true;
 800f6ee:	2301      	movs	r3, #1
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	10000f2c 	.word	0x10000f2c
 800f6fc:	20000194 	.word	0x20000194

0800f700 <accStartCalibration>:

void accStartCalibration(void)
{
 800f700:	b480      	push	{r7}
 800f702:	af00      	add	r7, sp, #0
    accelerationRuntime.calibratingA = CALIBRATING_ACC_CYCLES;
 800f704:	4b04      	ldr	r3, [pc, #16]	; (800f718 <accStartCalibration+0x18>)
 800f706:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800f70a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 800f70e:	bf00      	nop
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	10000f60 	.word	0x10000f60

0800f71c <accIsCalibrationComplete>:

bool accIsCalibrationComplete(void)
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
    return accelerationRuntime.calibratingA == 0;
 800f720:	4b06      	ldr	r3, [pc, #24]	; (800f73c <accIsCalibrationComplete+0x20>)
 800f722:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f726:	2b00      	cmp	r3, #0
 800f728:	bf0c      	ite	eq
 800f72a:	2301      	moveq	r3, #1
 800f72c:	2300      	movne	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
}
 800f730:	4618      	mov	r0, r3
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	10000f60 	.word	0x10000f60

0800f740 <isOnFinalAccelerationCalibrationCycle>:

static bool isOnFinalAccelerationCalibrationCycle(void)
{
 800f740:	b480      	push	{r7}
 800f742:	af00      	add	r7, sp, #0
    return accelerationRuntime.calibratingA == 1;
 800f744:	4b06      	ldr	r3, [pc, #24]	; (800f760 <isOnFinalAccelerationCalibrationCycle+0x20>)
 800f746:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	bf0c      	ite	eq
 800f74e:	2301      	moveq	r3, #1
 800f750:	2300      	movne	r3, #0
 800f752:	b2db      	uxtb	r3, r3
}
 800f754:	4618      	mov	r0, r3
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	10000f60 	.word	0x10000f60

0800f764 <isOnFirstAccelerationCalibrationCycle>:

static bool isOnFirstAccelerationCalibrationCycle(void)
{
 800f764:	b480      	push	{r7}
 800f766:	af00      	add	r7, sp, #0
    return accelerationRuntime.calibratingA == CALIBRATING_ACC_CYCLES;
 800f768:	4b06      	ldr	r3, [pc, #24]	; (800f784 <isOnFirstAccelerationCalibrationCycle+0x20>)
 800f76a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f76e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f772:	bf0c      	ite	eq
 800f774:	2301      	moveq	r3, #1
 800f776:	2300      	movne	r3, #0
 800f778:	b2db      	uxtb	r3, r3
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	10000f60 	.word	0x10000f60

0800f788 <performAcclerationCalibration>:

void performAcclerationCalibration(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
    static int32_t a[3];

    for (int axis = 0; axis < 3; axis++) {
 800f78e:	2300      	movs	r3, #0
 800f790:	607b      	str	r3, [r7, #4]
 800f792:	e035      	b.n	800f800 <performAcclerationCalibration+0x78>

        // Reset a[axis] at start of calibration
        if (isOnFirstAccelerationCalibrationCycle()) {
 800f794:	f7ff ffe6 	bl	800f764 <isOnFirstAccelerationCalibrationCycle>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d004      	beq.n	800f7a8 <performAcclerationCalibration+0x20>
            a[axis] = 0;
 800f79e:	4a39      	ldr	r2, [pc, #228]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        // Sum up CALIBRATING_ACC_CYCLES readings
        a[axis] += acc.accADC[axis];
 800f7a8:	4a36      	ldr	r2, [pc, #216]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7b0:	ee07 3a90 	vmov	s15, r3
 800f7b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f7b8:	4a33      	ldr	r2, [pc, #204]	; (800f888 <performAcclerationCalibration+0x100>)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	3308      	adds	r3, #8
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	4413      	add	r3, r2
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	edd3 7a00 	vldr	s15, [r3]
 800f7c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7d0:	ee17 1a90 	vmov	r1, s15
 800f7d4:	4a2b      	ldr	r2, [pc, #172]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        // Reset global variables to prevent other code from using un-calibrated data
        acc.accADC[axis] = 0;
 800f7dc:	4a2a      	ldr	r2, [pc, #168]	; (800f888 <performAcclerationCalibration+0x100>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4413      	add	r3, r2
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	f04f 0200 	mov.w	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
        accelerationRuntime.accelerationTrims->raw[axis] = 0;
 800f7ee:	4b27      	ldr	r3, [pc, #156]	; (800f88c <performAcclerationCalibration+0x104>)
 800f7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < 3; axis++) {
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	607b      	str	r3, [r7, #4]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b02      	cmp	r3, #2
 800f804:	ddc6      	ble.n	800f794 <performAcclerationCalibration+0xc>
    }

    if (isOnFinalAccelerationCalibrationCycle()) {
 800f806:	f7ff ff9b 	bl	800f740 <isOnFinalAccelerationCalibrationCycle>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d02d      	beq.n	800f86c <performAcclerationCalibration+0xe4>
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        accelerationRuntime.accelerationTrims->raw[X] = (a[X] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800f810:	4b1c      	ldr	r3, [pc, #112]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	33c8      	adds	r3, #200	; 0xc8
 800f816:	4a1e      	ldr	r2, [pc, #120]	; (800f890 <performAcclerationCalibration+0x108>)
 800f818:	fb82 1203 	smull	r1, r2, r2, r3
 800f81c:	11d2      	asrs	r2, r2, #7
 800f81e:	17db      	asrs	r3, r3, #31
 800f820:	1ad2      	subs	r2, r2, r3
 800f822:	4b1a      	ldr	r3, [pc, #104]	; (800f88c <performAcclerationCalibration+0x104>)
 800f824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f826:	b212      	sxth	r2, r2
 800f828:	801a      	strh	r2, [r3, #0]
        accelerationRuntime.accelerationTrims->raw[Y] = (a[Y] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800f82a:	4b16      	ldr	r3, [pc, #88]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	33c8      	adds	r3, #200	; 0xc8
 800f830:	4a17      	ldr	r2, [pc, #92]	; (800f890 <performAcclerationCalibration+0x108>)
 800f832:	fb82 1203 	smull	r1, r2, r2, r3
 800f836:	11d2      	asrs	r2, r2, #7
 800f838:	17db      	asrs	r3, r3, #31
 800f83a:	1ad2      	subs	r2, r2, r3
 800f83c:	4b13      	ldr	r3, [pc, #76]	; (800f88c <performAcclerationCalibration+0x104>)
 800f83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f840:	b212      	sxth	r2, r2
 800f842:	805a      	strh	r2, [r3, #2]
        accelerationRuntime.accelerationTrims->raw[Z] = (a[Z] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc.dev.acc_1G;
 800f844:	4b0f      	ldr	r3, [pc, #60]	; (800f884 <performAcclerationCalibration+0xfc>)
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	33c8      	adds	r3, #200	; 0xc8
 800f84a:	4a11      	ldr	r2, [pc, #68]	; (800f890 <performAcclerationCalibration+0x108>)
 800f84c:	fb82 1203 	smull	r1, r2, r2, r3
 800f850:	11d2      	asrs	r2, r2, #7
 800f852:	17db      	asrs	r3, r3, #31
 800f854:	1ad3      	subs	r3, r2, r3
 800f856:	b29a      	uxth	r2, r3
 800f858:	4b0b      	ldr	r3, [pc, #44]	; (800f888 <performAcclerationCalibration+0x100>)
 800f85a:	899b      	ldrh	r3, [r3, #12]
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	b29a      	uxth	r2, r3
 800f860:	4b0a      	ldr	r3, [pc, #40]	; (800f88c <performAcclerationCalibration+0x104>)
 800f862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f864:	b212      	sxth	r2, r2
 800f866:	809a      	strh	r2, [r3, #4]

        //resetRollAndPitchTrims(rollAndPitchTrims);
        setConfigCalibrationCompleted();
 800f868:	f7ff feae 	bl	800f5c8 <setConfigCalibrationCompleted>

        //saveConfigAndNotify();
    }

    accelerationRuntime.calibratingA--;
 800f86c:	4b07      	ldr	r3, [pc, #28]	; (800f88c <performAcclerationCalibration+0x104>)
 800f86e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800f872:	3b01      	subs	r3, #1
 800f874:	b29a      	uxth	r2, r3
 800f876:	4b05      	ldr	r3, [pc, #20]	; (800f88c <performAcclerationCalibration+0x104>)
 800f878:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	20000ed0 	.word	0x20000ed0
 800f888:	10000f2c 	.word	0x10000f2c
 800f88c:	10000f60 	.word	0x10000f60
 800f890:	51eb851f 	.word	0x51eb851f

0800f894 <Baro_Init>:
#define SET_GROUND_LEVEL_BARO_CYCLES 10 // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)

static bool baroReady = false;

void Baro_Init(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	af00      	add	r7, sp, #0
    dps310Detect(&baro.dev);
 800f898:	4805      	ldr	r0, [pc, #20]	; (800f8b0 <Baro_Init+0x1c>)
 800f89a:	f006 ff2d 	bl	80166f8 <dps310Detect>
    baroStartCalibration();
 800f89e:	f000 f82d 	bl	800f8fc <baroStartCalibration>

    #ifdef _USE_HW_CLI
    cliAdd("dps310", cliDps310);
 800f8a2:	4904      	ldr	r1, [pc, #16]	; (800f8b4 <Baro_Init+0x20>)
 800f8a4:	4804      	ldr	r0, [pc, #16]	; (800f8b8 <Baro_Init+0x24>)
 800f8a6:	f002 fee1 	bl	801266c <cliAdd>
    #endif
}
 800f8aa:	bf00      	nop
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	20000edc 	.word	0x20000edc
 800f8b4:	0800fddd 	.word	0x0800fddd
 800f8b8:	0802bd24 	.word	0x0802bd24

0800f8bc <baroIsCalibrationComplete>:

bool baroIsCalibrationComplete(void)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	af00      	add	r7, sp, #0
    return calibratingB == 0;
 800f8c0:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <baroIsCalibrationComplete+0x1c>)
 800f8c2:	881b      	ldrh	r3, [r3, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	bf0c      	ite	eq
 800f8c8:	2301      	moveq	r3, #1
 800f8ca:	2300      	movne	r3, #0
 800f8cc:	b2db      	uxtb	r3, r3
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	20003e92 	.word	0x20003e92

0800f8dc <baroSetCalibrationCycles>:

static void baroSetCalibrationCycles(uint16_t calibrationCyclesRequired)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	80fb      	strh	r3, [r7, #6]
    calibratingB = calibrationCyclesRequired;
 800f8e6:	4a04      	ldr	r2, [pc, #16]	; (800f8f8 <baroSetCalibrationCycles+0x1c>)
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	8013      	strh	r3, [r2, #0]
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	20003e92 	.word	0x20003e92

0800f8fc <baroStartCalibration>:

void baroStartCalibration(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	af00      	add	r7, sp, #0
    baroSetCalibrationCycles(CALIBRATING_BARO_CYCLES);
 800f900:	20c8      	movs	r0, #200	; 0xc8
 800f902:	f7ff ffeb 	bl	800f8dc <baroSetCalibrationCycles>
}
 800f906:	bf00      	nop
 800f908:	bd80      	pop	{r7, pc}
	...

0800f90c <applyBarometerMedianFilter>:
}

#define PRESSURE_SAMPLES_MEDIAN 3

static int32_t applyBarometerMedianFilter(int32_t newPressureReading)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    static int32_t barometerFilterSamples[PRESSURE_SAMPLES_MEDIAN];
    static int currentFilterSampleIndex = 0;
    static bool medianFilterReady = false;
    int nextSampleIndex;

    nextSampleIndex = (currentFilterSampleIndex + 1);
 800f914:	4b11      	ldr	r3, [pc, #68]	; (800f95c <applyBarometerMedianFilter+0x50>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3301      	adds	r3, #1
 800f91a:	60fb      	str	r3, [r7, #12]
    if (nextSampleIndex == PRESSURE_SAMPLES_MEDIAN) {
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d104      	bne.n	800f92c <applyBarometerMedianFilter+0x20>
        nextSampleIndex = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	60fb      	str	r3, [r7, #12]
        medianFilterReady = true;
 800f926:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <applyBarometerMedianFilter+0x54>)
 800f928:	2201      	movs	r2, #1
 800f92a:	701a      	strb	r2, [r3, #0]
    }

    barometerFilterSamples[currentFilterSampleIndex] = newPressureReading;
 800f92c:	4b0b      	ldr	r3, [pc, #44]	; (800f95c <applyBarometerMedianFilter+0x50>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	490c      	ldr	r1, [pc, #48]	; (800f964 <applyBarometerMedianFilter+0x58>)
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    currentFilterSampleIndex = nextSampleIndex;
 800f938:	4a08      	ldr	r2, [pc, #32]	; (800f95c <applyBarometerMedianFilter+0x50>)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6013      	str	r3, [r2, #0]

    if (medianFilterReady)
 800f93e:	4b08      	ldr	r3, [pc, #32]	; (800f960 <applyBarometerMedianFilter+0x54>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d004      	beq.n	800f950 <applyBarometerMedianFilter+0x44>
        return quickMedianFilter3(barometerFilterSamples);
 800f946:	4807      	ldr	r0, [pc, #28]	; (800f964 <applyBarometerMedianFilter+0x58>)
 800f948:	f7fb fd5c 	bl	800b404 <quickMedianFilter3>
 800f94c:	4603      	mov	r3, r0
 800f94e:	e000      	b.n	800f952 <applyBarometerMedianFilter+0x46>
    else
        return newPressureReading;
 800f950:	687b      	ldr	r3, [r7, #4]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3710      	adds	r7, #16
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20000f20 	.word	0x20000f20
 800f960:	20003eb7 	.word	0x20003eb7
 800f964:	20000f24 	.word	0x20000f24

0800f968 <recalculateBarometerTotal>:

static uint32_t recalculateBarometerTotal(uint32_t pressureTotal, int32_t newPressureReading)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
    static int32_t barometerSamples[BARO_SAMPLE_COUNT_MAX + 1];
    static int currentSampleIndex = 0;
    int nextSampleIndex;

    // store current pressure in barometerSamples
    if (currentSampleIndex >= baro_sample_count) {
 800f972:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <recalculateBarometerTotal+0x70>)
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	461a      	mov	r2, r3
 800f978:	4b18      	ldr	r3, [pc, #96]	; (800f9dc <recalculateBarometerTotal+0x74>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	dc05      	bgt.n	800f98c <recalculateBarometerTotal+0x24>
        nextSampleIndex = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	60fb      	str	r3, [r7, #12]
        baroReady = true;
 800f984:	4b16      	ldr	r3, [pc, #88]	; (800f9e0 <recalculateBarometerTotal+0x78>)
 800f986:	2201      	movs	r2, #1
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	e003      	b.n	800f994 <recalculateBarometerTotal+0x2c>
    } else {
        nextSampleIndex = (currentSampleIndex + 1);
 800f98c:	4b13      	ldr	r3, [pc, #76]	; (800f9dc <recalculateBarometerTotal+0x74>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3301      	adds	r3, #1
 800f992:	60fb      	str	r3, [r7, #12]
    }
    barometerSamples[currentSampleIndex] = applyBarometerMedianFilter(newPressureReading);
 800f994:	4b11      	ldr	r3, [pc, #68]	; (800f9dc <recalculateBarometerTotal+0x74>)
 800f996:	681c      	ldr	r4, [r3, #0]
 800f998:	6838      	ldr	r0, [r7, #0]
 800f99a:	f7ff ffb7 	bl	800f90c <applyBarometerMedianFilter>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	4a10      	ldr	r2, [pc, #64]	; (800f9e4 <recalculateBarometerTotal+0x7c>)
 800f9a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

    // recalculate pressure total
    pressureTotal += barometerSamples[currentSampleIndex];
 800f9a6:	4b0d      	ldr	r3, [pc, #52]	; (800f9dc <recalculateBarometerTotal+0x74>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <recalculateBarometerTotal+0x7c>)
 800f9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	607b      	str	r3, [r7, #4]
    pressureTotal -= barometerSamples[nextSampleIndex];
 800f9b8:	4a0a      	ldr	r2, [pc, #40]	; (800f9e4 <recalculateBarometerTotal+0x7c>)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	1a9b      	subs	r3, r3, r2
 800f9c6:	607b      	str	r3, [r7, #4]

    currentSampleIndex = nextSampleIndex;
 800f9c8:	4a04      	ldr	r2, [pc, #16]	; (800f9dc <recalculateBarometerTotal+0x74>)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6013      	str	r3, [r2, #0]

    return pressureTotal;
 800f9ce:	687b      	ldr	r3, [r7, #4]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd90      	pop	{r4, r7, pc}
 800f9d8:	2000034c 	.word	0x2000034c
 800f9dc:	20000f30 	.word	0x20000f30
 800f9e0:	20003eb6 	.word	0x20003eb6
 800f9e4:	20000f34 	.word	0x20000f34

0800f9e8 <baroUpdate>:
bool isBaroReady(void) {
    return baroReady;
}

uint32_t baroUpdate(uint32_t currentTimeUs)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    static uint32_t baroStateDurationUs[BARO_STATE_COUNT];
    static barometerState_e state = BARO_STATE_PRESSURE_START;
    barometerState_e oldState = state;
 800f9f0:	4b5d      	ldr	r3, [pc, #372]	; (800fb68 <baroUpdate+0x180>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	74fb      	strb	r3, [r7, #19]
    uint32_t executeTimeUs;
    uint32_t sleepTime = 1000; // Wait 1ms between states
 800f9f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9fa:	617b      	str	r3, [r7, #20]

    if (busBusy()){
 800f9fc:	f003 fedc 	bl	80137b8 <busBusy>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <baroUpdate+0x26>
        // If the bus is busy, simply return to have another go later
        schedulerIgnoreTaskStateTime();
 800fa06:	f7fe fdf7 	bl	800e5f8 <schedulerIgnoreTaskStateTime>
        return sleepTime;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	e0a8      	b.n	800fb60 <baroUpdate+0x178>
    }

    switch (state) {
 800fa0e:	4b56      	ldr	r3, [pc, #344]	; (800fb68 <baroUpdate+0x180>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	d80c      	bhi.n	800fa30 <baroUpdate+0x48>
 800fa16:	a201      	add	r2, pc, #4	; (adr r2, 800fa1c <baroUpdate+0x34>)
 800fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1c:	0800fa47 	.word	0x0800fa47
 800fa20:	0800fa63 	.word	0x0800fa63
 800fa24:	0800fa7f 	.word	0x0800fa7f
 800fa28:	0800fa95 	.word	0x0800fa95
 800fa2c:	0800fab1 	.word	0x0800fab1
        default:
        case BARO_STATE_TEMPERATURE_START:
            baro.dev.start_ut(&baro.dev);
 800fa30:	4b4e      	ldr	r3, [pc, #312]	; (800fb6c <baroUpdate+0x184>)
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	484d      	ldr	r0, [pc, #308]	; (800fb6c <baroUpdate+0x184>)
 800fa36:	4798      	blx	r3
            state = BARO_STATE_TEMPERATURE_READ;
 800fa38:	4b4b      	ldr	r3, [pc, #300]	; (800fb68 <baroUpdate+0x180>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	701a      	strb	r2, [r3, #0]
            sleepTime = baro.dev.ut_delay;
 800fa3e:	4b4b      	ldr	r3, [pc, #300]	; (800fb6c <baroUpdate+0x184>)
 800fa40:	889b      	ldrh	r3, [r3, #4]
 800fa42:	617b      	str	r3, [r7, #20]
            break;
 800fa44:	e068      	b.n	800fb18 <baroUpdate+0x130>

        case BARO_STATE_TEMPERATURE_READ:
            if (baro.dev.read_ut(&baro.dev)) {
 800fa46:	4b49      	ldr	r3, [pc, #292]	; (800fb6c <baroUpdate+0x184>)
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	4848      	ldr	r0, [pc, #288]	; (800fb6c <baroUpdate+0x184>)
 800fa4c:	4798      	blx	r3
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d003      	beq.n	800fa5c <baroUpdate+0x74>
                state = BARO_STATE_TEMPERATURE_SAMPLE;
 800fa54:	4b44      	ldr	r3, [pc, #272]	; (800fb68 <baroUpdate+0x180>)
 800fa56:	2201      	movs	r2, #1
 800fa58:	701a      	strb	r2, [r3, #0]
            } else {
                // No action was taken as the read has not completed
                schedulerIgnoreTaskExecTime();
            }
            break;
 800fa5a:	e05d      	b.n	800fb18 <baroUpdate+0x130>
                schedulerIgnoreTaskExecTime();
 800fa5c:	f7fe fdea 	bl	800e634 <schedulerIgnoreTaskExecTime>
            break;
 800fa60:	e05a      	b.n	800fb18 <baroUpdate+0x130>

        case BARO_STATE_TEMPERATURE_SAMPLE:
            if (baro.dev.get_ut(&baro.dev)) {
 800fa62:	4b42      	ldr	r3, [pc, #264]	; (800fb6c <baroUpdate+0x184>)
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	4841      	ldr	r0, [pc, #260]	; (800fb6c <baroUpdate+0x184>)
 800fa68:	4798      	blx	r3
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d003      	beq.n	800fa78 <baroUpdate+0x90>
                state = BARO_STATE_PRESSURE_START;
 800fa70:	4b3d      	ldr	r3, [pc, #244]	; (800fb68 <baroUpdate+0x180>)
 800fa72:	2202      	movs	r2, #2
 800fa74:	701a      	strb	r2, [r3, #0]
            } else {
                // No action was taken as the read has not completed
                schedulerIgnoreTaskExecTime();
            }
            break;
 800fa76:	e04f      	b.n	800fb18 <baroUpdate+0x130>
                schedulerIgnoreTaskExecTime();
 800fa78:	f7fe fddc 	bl	800e634 <schedulerIgnoreTaskExecTime>
            break;
 800fa7c:	e04c      	b.n	800fb18 <baroUpdate+0x130>

        case BARO_STATE_PRESSURE_START:
            baro.dev.start_up(&baro.dev);
 800fa7e:	4b3b      	ldr	r3, [pc, #236]	; (800fb6c <baroUpdate+0x184>)
 800fa80:	695b      	ldr	r3, [r3, #20]
 800fa82:	483a      	ldr	r0, [pc, #232]	; (800fb6c <baroUpdate+0x184>)
 800fa84:	4798      	blx	r3
            state = BARO_STATE_PRESSURE_READ;
 800fa86:	4b38      	ldr	r3, [pc, #224]	; (800fb68 <baroUpdate+0x180>)
 800fa88:	2203      	movs	r2, #3
 800fa8a:	701a      	strb	r2, [r3, #0]
            sleepTime = baro.dev.up_delay;
 800fa8c:	4b37      	ldr	r3, [pc, #220]	; (800fb6c <baroUpdate+0x184>)
 800fa8e:	88db      	ldrh	r3, [r3, #6]
 800fa90:	617b      	str	r3, [r7, #20]
            break;
 800fa92:	e041      	b.n	800fb18 <baroUpdate+0x130>

        case BARO_STATE_PRESSURE_READ:
            if (baro.dev.read_up(&baro.dev)) {
 800fa94:	4b35      	ldr	r3, [pc, #212]	; (800fb6c <baroUpdate+0x184>)
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	4834      	ldr	r0, [pc, #208]	; (800fb6c <baroUpdate+0x184>)
 800fa9a:	4798      	blx	r3
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <baroUpdate+0xc2>
                state = BARO_STATE_PRESSURE_SAMPLE;
 800faa2:	4b31      	ldr	r3, [pc, #196]	; (800fb68 <baroUpdate+0x180>)
 800faa4:	2204      	movs	r2, #4
 800faa6:	701a      	strb	r2, [r3, #0]
            } else {
                // No action was taken as the read has not completed
                schedulerIgnoreTaskExecTime();
            }
            break;
 800faa8:	e036      	b.n	800fb18 <baroUpdate+0x130>
                schedulerIgnoreTaskExecTime();
 800faaa:	f7fe fdc3 	bl	800e634 <schedulerIgnoreTaskExecTime>
            break;
 800faae:	e033      	b.n	800fb18 <baroUpdate+0x130>

        case BARO_STATE_PRESSURE_SAMPLE:
            if (!baro.dev.get_up(&baro.dev)) {
 800fab0:	4b2e      	ldr	r3, [pc, #184]	; (800fb6c <baroUpdate+0x184>)
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	482d      	ldr	r0, [pc, #180]	; (800fb6c <baroUpdate+0x184>)
 800fab6:	4798      	blx	r3
 800fab8:	4603      	mov	r3, r0
 800faba:	f083 0301 	eor.w	r3, r3, #1
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <baroUpdate+0xe2>
                // No action was taken as the read has not completed
                schedulerIgnoreTaskExecTime();
 800fac4:	f7fe fdb6 	bl	800e634 <schedulerIgnoreTaskExecTime>
                break;
 800fac8:	e026      	b.n	800fb18 <baroUpdate+0x130>
            }

            baro.dev.calculate(&baroPressure, &baroTemperature);
 800faca:	4b28      	ldr	r3, [pc, #160]	; (800fb6c <baroUpdate+0x184>)
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	4928      	ldr	r1, [pc, #160]	; (800fb70 <baroUpdate+0x188>)
 800fad0:	4828      	ldr	r0, [pc, #160]	; (800fb74 <baroUpdate+0x18c>)
 800fad2:	4798      	blx	r3
            baro.baroPressure = baroPressure;
 800fad4:	4b27      	ldr	r3, [pc, #156]	; (800fb74 <baroUpdate+0x18c>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a24      	ldr	r2, [pc, #144]	; (800fb6c <baroUpdate+0x184>)
 800fada:	62d3      	str	r3, [r2, #44]	; 0x2c
            baro.baroTemperature = baroTemperature;
 800fadc:	4b24      	ldr	r3, [pc, #144]	; (800fb70 <baroUpdate+0x188>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a22      	ldr	r2, [pc, #136]	; (800fb6c <baroUpdate+0x184>)
 800fae2:	6293      	str	r3, [r2, #40]	; 0x28
            baroPressureSum = recalculateBarometerTotal(baroPressureSum, baroPressure);
 800fae4:	4b24      	ldr	r3, [pc, #144]	; (800fb78 <baroUpdate+0x190>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a22      	ldr	r2, [pc, #136]	; (800fb74 <baroUpdate+0x18c>)
 800faea:	6812      	ldr	r2, [r2, #0]
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff ff3a 	bl	800f968 <recalculateBarometerTotal>
 800faf4:	4603      	mov	r3, r0
 800faf6:	4a20      	ldr	r2, [pc, #128]	; (800fb78 <baroUpdate+0x190>)
 800faf8:	6013      	str	r3, [r2, #0]
            if (baro.dev.combined_read) {
 800fafa:	4b1c      	ldr	r3, [pc, #112]	; (800fb6c <baroUpdate+0x184>)
 800fafc:	789b      	ldrb	r3, [r3, #2]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d003      	beq.n	800fb0a <baroUpdate+0x122>
                state = BARO_STATE_PRESSURE_START;
 800fb02:	4b19      	ldr	r3, [pc, #100]	; (800fb68 <baroUpdate+0x180>)
 800fb04:	2202      	movs	r2, #2
 800fb06:	701a      	strb	r2, [r3, #0]
 800fb08:	e002      	b.n	800fb10 <baroUpdate+0x128>
            } else {
                state = BARO_STATE_TEMPERATURE_START;
 800fb0a:	4b17      	ldr	r3, [pc, #92]	; (800fb68 <baroUpdate+0x180>)
 800fb0c:	2205      	movs	r2, #5
 800fb0e:	701a      	strb	r2, [r3, #0]

            // DEBUG_SET(DEBUG_BARO, 1, baroTemperature);
            // DEBUG_SET(DEBUG_BARO, 2, baroPressure);
            // DEBUG_SET(DEBUG_BARO, 3, baroPressureSum);

            sleepTime = baro.dev.ut_delay;
 800fb10:	4b16      	ldr	r3, [pc, #88]	; (800fb6c <baroUpdate+0x184>)
 800fb12:	889b      	ldrh	r3, [r3, #4]
 800fb14:	617b      	str	r3, [r7, #20]
            break;
 800fb16:	bf00      	nop
    }

    // Where we are using a state machine call schedulerIgnoreTaskExecRate() for all states bar one
    if (sleepTime != baro.dev.ut_delay) {
 800fb18:	4b14      	ldr	r3, [pc, #80]	; (800fb6c <baroUpdate+0x184>)
 800fb1a:	889b      	ldrh	r3, [r3, #4]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d001      	beq.n	800fb28 <baroUpdate+0x140>
        schedulerIgnoreTaskExecRate();
 800fb24:	f7fe fd7a 	bl	800e61c <schedulerIgnoreTaskExecRate>
    }

    executeTimeUs = micros() - currentTimeUs;
 800fb28:	f7f9 fb84 	bl	8009234 <micros>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	60fb      	str	r3, [r7, #12]

    if (executeTimeUs > baroStateDurationUs[oldState]) {
 800fb34:	7cfb      	ldrb	r3, [r7, #19]
 800fb36:	4a11      	ldr	r2, [pc, #68]	; (800fb7c <baroUpdate+0x194>)
 800fb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d904      	bls.n	800fb4c <baroUpdate+0x164>
        baroStateDurationUs[oldState] = executeTimeUs;
 800fb42:	7cfb      	ldrb	r3, [r7, #19]
 800fb44:	490d      	ldr	r1, [pc, #52]	; (800fb7c <baroUpdate+0x194>)
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    schedulerSetNextStateTime(baroStateDurationUs[state]);
 800fb4c:	4b06      	ldr	r3, [pc, #24]	; (800fb68 <baroUpdate+0x180>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	461a      	mov	r2, r3
 800fb52:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <baroUpdate+0x194>)
 800fb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe fe63 	bl	800e824 <schedulerSetNextStateTime>

    return sleepTime;
 800fb5e:	697b      	ldr	r3, [r7, #20]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000350 	.word	0x20000350
 800fb6c:	20000edc 	.word	0x20000edc
 800fb70:	20000f10 	.word	0x20000f10
 800fb74:	20000f0c 	.word	0x20000f0c
 800fb78:	20000f18 	.word	0x20000f18
 800fb7c:	20000ff8 	.word	0x20000ff8

0800fb80 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 800fb8a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fb8e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800fbc0 <pressureToAltitude+0x40>
 800fb92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fb96:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800fbc4 <pressureToAltitude+0x44>
 800fb9a:	eeb0 0a47 	vmov.f32	s0, s14
 800fb9e:	f01b fc39 	bl	802b414 <powf>
 800fba2:	eef0 7a40 	vmov.f32	s15, s0
 800fba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fbaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800fbc8 <pressureToAltitude+0x48>
 800fbb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800fbb6:	eeb0 0a67 	vmov.f32	s0, s15
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	47c5e680 	.word	0x47c5e680
 800fbc4:	3e42dcb1 	.word	0x3e42dcb1
 800fbc8:	4a8748d0 	.word	0x4a8748d0

0800fbcc <baroCalculateAltitude>:

int32_t baroCalculateAltitude(void)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
    int32_t BaroAlt_tmp;

    // calculates height from ground via baro readings
    if (baroIsCalibrationComplete()) {
 800fbd2:	f7ff fe73 	bl	800f8bc <baroIsCalibrationComplete>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d04a      	beq.n	800fc72 <baroCalculateAltitude+0xa6>
        BaroAlt_tmp = lrintf(pressureToAltitude((float)(baroPressureSum / baro_sample_count)));
 800fbdc:	4b29      	ldr	r3, [pc, #164]	; (800fc84 <baroCalculateAltitude+0xb8>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a29      	ldr	r2, [pc, #164]	; (800fc88 <baroCalculateAltitude+0xbc>)
 800fbe2:	7812      	ldrb	r2, [r2, #0]
 800fbe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbe8:	ee07 3a90 	vmov	s15, r3
 800fbec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbf0:	eeb0 0a67 	vmov.f32	s0, s15
 800fbf4:	f7ff ffc4 	bl	800fb80 <pressureToAltitude>
 800fbf8:	eef0 7a40 	vmov.f32	s15, s0
 800fbfc:	eeb0 0a67 	vmov.f32	s0, s15
 800fc00:	f01b fbc8 	bl	802b394 <lrintf>
 800fc04:	6078      	str	r0, [r7, #4]
        BaroAlt_tmp -= baroGroundAltitude;
 800fc06:	4b21      	ldr	r3, [pc, #132]	; (800fc8c <baroCalculateAltitude+0xc0>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	1ad3      	subs	r3, r2, r3
 800fc0e:	607b      	str	r3, [r7, #4]
        baro.BaroAlt = lrintf((float)baro.BaroAlt * CONVERT_PARAMETER_TO_FLOAT(baro_noise_lpf) + (float)BaroAlt_tmp * (1.0f - CONVERT_PARAMETER_TO_FLOAT(baro_noise_lpf))); // additional LPF to reduce baro noise
 800fc10:	4b1f      	ldr	r3, [pc, #124]	; (800fc90 <baroCalculateAltitude+0xc4>)
 800fc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc14:	ee07 3a90 	vmov	s15, r3
 800fc18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc1c:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <baroCalculateAltitude+0xc8>)
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	ee07 3a90 	vmov	s15, r3
 800fc24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc28:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800fc98 <baroCalculateAltitude+0xcc>
 800fc2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fc30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	ee07 3a90 	vmov	s15, r3
 800fc3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fc3e:	4b15      	ldr	r3, [pc, #84]	; (800fc94 <baroCalculateAltitude+0xc8>)
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	ee07 3a90 	vmov	s15, r3
 800fc46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc4a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fc98 <baroCalculateAltitude+0xcc>
 800fc4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fc52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fc56:	ee76 7a67 	vsub.f32	s15, s12, s15
 800fc5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc62:	eeb0 0a67 	vmov.f32	s0, s15
 800fc66:	f01b fb95 	bl	802b394 <lrintf>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	4a08      	ldr	r2, [pc, #32]	; (800fc90 <baroCalculateAltitude+0xc4>)
 800fc6e:	6253      	str	r3, [r2, #36]	; 0x24
 800fc70:	e002      	b.n	800fc78 <baroCalculateAltitude+0xac>
    }
    else {
        baro.BaroAlt = 0;
 800fc72:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <baroCalculateAltitude+0xc4>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	625a      	str	r2, [r3, #36]	; 0x24
    }
    return baro.BaroAlt;
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <baroCalculateAltitude+0xc4>)
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	20000f18 	.word	0x20000f18
 800fc88:	2000034c 	.word	0x2000034c
 800fc8c:	20000f14 	.word	0x20000f14
 800fc90:	20000edc 	.word	0x20000edc
 800fc94:	2000034e 	.word	0x2000034e
 800fc98:	3a83126f 	.word	0x3a83126f

0800fc9c <performBaroCalibrationCycle>:

void performBaroCalibrationCycle(void)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	af00      	add	r7, sp, #0
    static int32_t savedGroundPressure = 0;

    baroGroundPressure -= baroGroundPressure / 8;
 800fca0:	4b29      	ldr	r3, [pc, #164]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	da00      	bge.n	800fcaa <performBaroCalibrationCycle+0xe>
 800fca8:	3307      	adds	r3, #7
 800fcaa:	10db      	asrs	r3, r3, #3
 800fcac:	425b      	negs	r3, r3
 800fcae:	461a      	mov	r2, r3
 800fcb0:	4b25      	ldr	r3, [pc, #148]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	4a24      	ldr	r2, [pc, #144]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fcb8:	6013      	str	r3, [r2, #0]
    baroGroundPressure += baroPressureSum / baro_sample_count;
 800fcba:	4b24      	ldr	r3, [pc, #144]	; (800fd4c <performBaroCalibrationCycle+0xb0>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a24      	ldr	r2, [pc, #144]	; (800fd50 <performBaroCalibrationCycle+0xb4>)
 800fcc0:	7812      	ldrb	r2, [r2, #0]
 800fcc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcc6:	4a20      	ldr	r2, [pc, #128]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fcc8:	6812      	ldr	r2, [r2, #0]
 800fcca:	4413      	add	r3, r2
 800fccc:	461a      	mov	r2, r3
 800fcce:	4b1e      	ldr	r3, [pc, #120]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fcd0:	601a      	str	r2, [r3, #0]
    baroGroundAltitude = (1.0f - pow_approx((baroGroundPressure / 8) / 101325.0f, 0.190259f)) * 4433000.0f;
 800fcd2:	4b1d      	ldr	r3, [pc, #116]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	da00      	bge.n	800fcdc <performBaroCalibrationCycle+0x40>
 800fcda:	3307      	adds	r3, #7
 800fcdc:	10db      	asrs	r3, r3, #3
 800fcde:	ee07 3a90 	vmov	s15, r3
 800fce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fce6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800fd54 <performBaroCalibrationCycle+0xb8>
 800fcea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fcee:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800fd58 <performBaroCalibrationCycle+0xbc>
 800fcf2:	eeb0 0a47 	vmov.f32	s0, s14
 800fcf6:	f7fa fd7b 	bl	800a7f0 <pow_approx>
 800fcfa:	eef0 7a40 	vmov.f32	s15, s0
 800fcfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd06:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fd5c <performBaroCalibrationCycle+0xc0>
 800fd0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd12:	ee17 2a90 	vmov	r2, s15
 800fd16:	4b12      	ldr	r3, [pc, #72]	; (800fd60 <performBaroCalibrationCycle+0xc4>)
 800fd18:	601a      	str	r2, [r3, #0]

    if (baroGroundPressure == savedGroundPressure) {
 800fd1a:	4b0b      	ldr	r3, [pc, #44]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <performBaroCalibrationCycle+0xc8>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d103      	bne.n	800fd2e <performBaroCalibrationCycle+0x92>
        calibratingB = 0;
 800fd26:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <performBaroCalibrationCycle+0xcc>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	801a      	strh	r2, [r3, #0]
    } else {
        calibratingB--;
        savedGroundPressure = baroGroundPressure;
    }
}
 800fd2c:	e009      	b.n	800fd42 <performBaroCalibrationCycle+0xa6>
        calibratingB--;
 800fd2e:	4b0e      	ldr	r3, [pc, #56]	; (800fd68 <performBaroCalibrationCycle+0xcc>)
 800fd30:	881b      	ldrh	r3, [r3, #0]
 800fd32:	3b01      	subs	r3, #1
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	4b0c      	ldr	r3, [pc, #48]	; (800fd68 <performBaroCalibrationCycle+0xcc>)
 800fd38:	801a      	strh	r2, [r3, #0]
        savedGroundPressure = baroGroundPressure;
 800fd3a:	4b03      	ldr	r3, [pc, #12]	; (800fd48 <performBaroCalibrationCycle+0xac>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4a09      	ldr	r2, [pc, #36]	; (800fd64 <performBaroCalibrationCycle+0xc8>)
 800fd40:	6013      	str	r3, [r2, #0]
}
 800fd42:	bf00      	nop
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	20000348 	.word	0x20000348
 800fd4c:	20000f18 	.word	0x20000f18
 800fd50:	2000034c 	.word	0x2000034c
 800fd54:	47c5e680 	.word	0x47c5e680
 800fd58:	3e42d341 	.word	0x3e42d341
 800fd5c:	4a8748d0 	.word	0x4a8748d0
 800fd60:	20000f14 	.word	0x20000f14
 800fd64:	20001010 	.word	0x20001010
 800fd68:	20003e92 	.word	0x20003e92

0800fd6c <calculateEstimatedAltitude>:

//static bool altitudeOffsetSetBaro = false;
//static bool altitudeOffsetSetGPS = false;

void calculateEstimatedAltitude(uint32_t currentTimeUs)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    static uint32_t previousTimeUs = 0;
    //static int32_t baroAltOffset = 0;
    //static int32_t gpsAltOffset = 0;

    const uint32_t dTime = currentTimeUs - previousTimeUs;
 800fd74:	4b16      	ldr	r3, [pc, #88]	; (800fdd0 <calculateEstimatedAltitude+0x64>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	613b      	str	r3, [r7, #16]
    if (dTime < BARO_UPDATE_FREQUENCY_40HZ) {
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d802      	bhi.n	800fd8e <calculateEstimatedAltitude+0x22>
        schedulerIgnoreTaskExecTime();
 800fd88:	f7fe fc54 	bl	800e634 <schedulerIgnoreTaskExecTime>
        return;
 800fd8c:	e01c      	b.n	800fdc8 <calculateEstimatedAltitude+0x5c>
    }
    previousTimeUs = currentTimeUs;
 800fd8e:	4a10      	ldr	r2, [pc, #64]	; (800fdd0 <calculateEstimatedAltitude+0x64>)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6013      	str	r3, [r2, #0]

    int32_t baroAlt = 0;
 800fd94:	2300      	movs	r3, #0
 800fd96:	617b      	str	r3, [r7, #20]
    //int32_t gpsAlt = 0;
    //uint8_t gpsNumSat = 0;

    //float gpsTrust = 0.3; //conservative default
    bool haveBaroAlt = false;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73fb      	strb	r3, [r7, #15]
    //bool haveGpsAlt = false;

    if (!baroIsCalibrationComplete()) {
 800fd9c:	f7ff fd8e 	bl	800f8bc <baroIsCalibrationComplete>
 800fda0:	4603      	mov	r3, r0
 800fda2:	f083 0301 	eor.w	r3, r3, #1
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <calculateEstimatedAltitude+0x46>
        performBaroCalibrationCycle();
 800fdac:	f7ff ff76 	bl	800fc9c <performBaroCalibrationCycle>
 800fdb0:	e004      	b.n	800fdbc <calculateEstimatedAltitude+0x50>
    } else {
        baroAlt = baroCalculateAltitude();
 800fdb2:	f7ff ff0b 	bl	800fbcc <baroCalculateAltitude>
 800fdb6:	6178      	str	r0, [r7, #20]
        haveBaroAlt = true;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	73fb      	strb	r3, [r7, #15]
    //     altitudeOffsetSetBaro = false;
    // }

    // baroAlt -= baroAltOffset;

    estimatedAltitudeCm = baroAlt;
 800fdbc:	4a05      	ldr	r2, [pc, #20]	; (800fdd4 <calculateEstimatedAltitude+0x68>)
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	6013      	str	r3, [r2, #0]
    baro.BaroAlt = baroAlt;
 800fdc2:	4a05      	ldr	r2, [pc, #20]	; (800fdd8 <calculateEstimatedAltitude+0x6c>)
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	6253      	str	r3, [r2, #36]	; 0x24

    //cliPrintf("BARO : %u cm \n\r", baroAlt);
    //DEBUG_SET(DEBUG_ALTITUDE, 0, (int32_t)(100 * gpsTrust));
    //DEBUG_SET(DEBUG_ALTITUDE, 1, baroAlt);
    //DEBUG_SET(DEBUG_ALTITUDE, 2, gpsAlt);
}
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	20001014 	.word	0x20001014
 800fdd4:	20000f1c 	.word	0x20000f1c
 800fdd8:	20000edc 	.word	0x20000edc

0800fddc <cliDps310>:

#ifdef _USE_HW_CLI
void cliDps310(cli_args_t *args)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800fde4:	2300      	movs	r3, #0
 800fde6:	75fb      	strb	r3, [r7, #23]

if (args->argc == 1 && args->isStr(0, "baro_show") == true)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	881b      	ldrh	r3, [r3, #0]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d11d      	bne.n	800fe2c <cliDps310+0x50>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	4933      	ldr	r1, [pc, #204]	; (800fec4 <cliDps310+0xe8>)
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	4798      	blx	r3
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d015      	beq.n	800fe2c <cliDps310+0x50>
{
    uint32_t pre_time;
    pre_time = millis();
 800fe00:	f7f9 fa11 	bl	8009226 <millis>
 800fe04:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800fe06:	e00a      	b.n	800fe1e <cliDps310+0x42>
    {
        if (millis()-pre_time >= 1000)
 800fe08:	f7f9 fa0d 	bl	8009226 <millis>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe16:	d302      	bcc.n	800fe1e <cliDps310+0x42>
        {
            pre_time = millis();
 800fe18:	f7f9 fa05 	bl	8009226 <millis>
 800fe1c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800fe1e:	f002 fc0f 	bl	8012640 <cliKeepLoop>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1ef      	bne.n	800fe08 <cliDps310+0x2c>
            // cliPrintf("acc x: %d, y: %d, z: %d\n\r", x, y, z);
        }
    }
    ret = true;
 800fe28:	2301      	movs	r3, #1
 800fe2a:	75fb      	strb	r3, [r7, #23]
    }

  if (args->argc == 3 && args->isStr(0, "mem_read") == true)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d119      	bne.n	800fe68 <cliDps310+0x8c>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	4923      	ldr	r1, [pc, #140]	; (800fec8 <cliDps310+0xec>)
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	4798      	blx	r3
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d011      	beq.n	800fe68 <cliDps310+0x8c>
  {
    uint8_t ch;
    uint8_t addr;

    ch   = (uint8_t)args->getData(1);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	2001      	movs	r0, #1
 800fe4a:	4798      	blx	r3
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73fb      	strb	r3, [r7, #15]
    addr = (uint8_t)args->getData(2);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	2002      	movs	r0, #2
 800fe56:	4798      	blx	r3
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73bb      	strb	r3, [r7, #14]
    addr |= 0x80;
 800fe5c:	7bbb      	ldrb	r3, [r7, #14]
 800fe5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe62:	73bb      	strb	r3, [r7, #14]

    ret = true;
 800fe64:	2301      	movs	r3, #1
 800fe66:	75fb      	strb	r3, [r7, #23]
  }

    if (args->argc == 4 && args->isStr(0, "mem_write") == true)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	881b      	ldrh	r3, [r3, #0]
 800fe6c:	2b04      	cmp	r3, #4
 800fe6e:	d115      	bne.n	800fe9c <cliDps310+0xc0>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	695b      	ldr	r3, [r3, #20]
 800fe74:	4915      	ldr	r1, [pc, #84]	; (800fecc <cliDps310+0xf0>)
 800fe76:	2000      	movs	r0, #0
 800fe78:	4798      	blx	r3
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00d      	beq.n	800fe9c <cliDps310+0xc0>
  {
    uint8_t ch;
    uint8_t addr;

    ch     = (uint8_t)args->getData(1);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	2001      	movs	r0, #1
 800fe86:	4798      	blx	r3
 800fe88:	4603      	mov	r3, r0
 800fe8a:	737b      	strb	r3, [r7, #13]
    addr   = (uint8_t)args->getData(2);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	2002      	movs	r0, #2
 800fe92:	4798      	blx	r3
 800fe94:	4603      	mov	r3, r0
 800fe96:	733b      	strb	r3, [r7, #12]

    ret = true;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
 800fe9e:	f083 0301 	eor.w	r3, r3, #1
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d008      	beq.n	800feba <cliDps310+0xde>
  {
    cliPrintf("dsp310 baro_show \n\r");
 800fea8:	4809      	ldr	r0, [pc, #36]	; (800fed0 <cliDps310+0xf4>)
 800feaa:	f002 facf 	bl	801244c <cliPrintf>
    cliPrintf("dsp310 mem_read ch0:1, addr \n\r");
 800feae:	4809      	ldr	r0, [pc, #36]	; (800fed4 <cliDps310+0xf8>)
 800feb0:	f002 facc 	bl	801244c <cliPrintf>
    cliPrintf("dsp310 mem_write ch0:1, addr data \n\r");
 800feb4:	4808      	ldr	r0, [pc, #32]	; (800fed8 <cliDps310+0xfc>)
 800feb6:	f002 fac9 	bl	801244c <cliPrintf>
  }
}
 800feba:	bf00      	nop
 800febc:	3718      	adds	r7, #24
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	0802bd2c 	.word	0x0802bd2c
 800fec8:	0802bd38 	.word	0x0802bd38
 800fecc:	0802bd44 	.word	0x0802bd44
 800fed0:	0802bd50 	.word	0x0802bd50
 800fed4:	0802bd64 	.word	0x0802bd64
 800fed8:	0802bd84 	.word	0x0802bd84

0800fedc <compassDetect>:
#endif
}


bool compassDetect(magDev_t *magDev)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
    magSensor_e magHardware = MAG_NONE;
 800fee4:	2301      	movs	r3, #1
 800fee6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_MAG_DATA_READY_SIGNAL
    magDev->magIntExtiTag = compassConfig()->interruptTag;
#endif

    if (qmc5883lDetect(magDev)) {
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f006 fd01 	bl	80168f0 <qmc5883lDetect>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <compassDetect+0x1c>

        //*alignment = MAG_QMC5883L_ALIGN;

        magHardware = MAG_QMC5883;
 800fef4:	2305      	movs	r3, #5
 800fef6:	73fb      	strb	r3, [r7, #15]
    }

    if (magHardware == MAG_NONE) {
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d101      	bne.n	800ff02 <compassDetect+0x26>
        return false;
 800fefe:	2300      	movs	r3, #0
 800ff00:	e000      	b.n	800ff04 <compassDetect+0x28>
    }

    // detectedSensors[SENSOR_INDEX_MAG] = magHardware;
    // sensorsSet(SENSOR_MAG);
    return true;
 800ff02:	2301      	movs	r3, #1
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <compassInit>:

bool compassInit(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)

    //sensor_align_e alignment;

    if (!compassDetect(&magDev)) {
 800ff10:	480c      	ldr	r0, [pc, #48]	; (800ff44 <compassInit+0x38>)
 800ff12:	f7ff ffe3 	bl	800fedc <compassDetect>
 800ff16:	4603      	mov	r3, r0
 800ff18:	f083 0301 	eor.w	r3, r3, #1
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <compassInit+0x1a>
        return false;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e00b      	b.n	800ff3e <compassInit+0x32>
    }

    //LED1_ON;
    magDev.init(&magDev);
 800ff26:	4b07      	ldr	r3, [pc, #28]	; (800ff44 <compassInit+0x38>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4806      	ldr	r0, [pc, #24]	; (800ff44 <compassInit+0x38>)
 800ff2c:	4798      	blx	r3
    //LED1_OFF;
    magInit = 1;
 800ff2e:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <compassInit+0x3c>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	701a      	strb	r2, [r3, #0]

    #ifdef _USE_HW_CLI
    cliAdd("qmc5883l", cliQmc5883l);
 800ff34:	4905      	ldr	r1, [pc, #20]	; (800ff4c <compassInit+0x40>)
 800ff36:	4806      	ldr	r0, [pc, #24]	; (800ff50 <compassInit+0x44>)
 800ff38:	f002 fb98 	bl	801266c <cliAdd>
    //     magDev.magAlignment = compassConfig()->mag_alignment;
    // }

    //buildRotationMatrixFromAlignment(&compassConfig()->mag_customAlignment, &magDev.rotationMatrix);

    return true;
 800ff3c:	2301      	movs	r3, #1
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	20001018 	.word	0x20001018
 800ff48:	20003eb8 	.word	0x20003eb8
 800ff4c:	0800ff55 	.word	0x0800ff55
 800ff50:	0802bdac 	.word	0x0802bdac

0800ff54 <cliQmc5883l>:
    return TASK_PERIOD_HZ(10);
}

#ifdef _USE_HW_CLI
void cliQmc5883l(cli_args_t *args)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	75fb      	strb	r3, [r7, #23]

if (args->argc == 1 && args->isStr(0, "compass_show") == true)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d11d      	bne.n	800ffa4 <cliQmc5883l+0x50>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	695b      	ldr	r3, [r3, #20]
 800ff6c:	4933      	ldr	r1, [pc, #204]	; (801003c <cliQmc5883l+0xe8>)
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4798      	blx	r3
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d015      	beq.n	800ffa4 <cliQmc5883l+0x50>
{
    uint32_t pre_time;
    pre_time = millis();
 800ff78:	f7f9 f955 	bl	8009226 <millis>
 800ff7c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800ff7e:	e00a      	b.n	800ff96 <cliQmc5883l+0x42>
    {
        if (millis()-pre_time >= 1000)
 800ff80:	f7f9 f951 	bl	8009226 <millis>
 800ff84:	4602      	mov	r2, r0
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff8e:	d302      	bcc.n	800ff96 <cliQmc5883l+0x42>
        {
            pre_time = millis();
 800ff90:	f7f9 f949 	bl	8009226 <millis>
 800ff94:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800ff96:	f002 fb53 	bl	8012640 <cliKeepLoop>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1ef      	bne.n	800ff80 <cliQmc5883l+0x2c>
            // cliPrintf("acc x: %d, y: %d, z: %d\n\r", x, y, z);
        }
    }
    ret = true;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	75fb      	strb	r3, [r7, #23]
    }

  if (args->argc == 3 && args->isStr(0, "mem_read") == true)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d119      	bne.n	800ffe0 <cliQmc5883l+0x8c>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	695b      	ldr	r3, [r3, #20]
 800ffb0:	4923      	ldr	r1, [pc, #140]	; (8010040 <cliQmc5883l+0xec>)
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	4798      	blx	r3
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d011      	beq.n	800ffe0 <cliQmc5883l+0x8c>
  {
    uint8_t ch;
    uint8_t addr;

    ch   = (uint8_t)args->getData(1);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	4798      	blx	r3
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73fb      	strb	r3, [r7, #15]
    addr = (uint8_t)args->getData(2);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	2002      	movs	r0, #2
 800ffce:	4798      	blx	r3
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	73bb      	strb	r3, [r7, #14]
    addr |= 0x80;
 800ffd4:	7bbb      	ldrb	r3, [r7, #14]
 800ffd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffda:	73bb      	strb	r3, [r7, #14]

    ret = true;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	75fb      	strb	r3, [r7, #23]
  }

    if (args->argc == 4 && args->isStr(0, "mem_write") == true)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	2b04      	cmp	r3, #4
 800ffe6:	d115      	bne.n	8010014 <cliQmc5883l+0xc0>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	4915      	ldr	r1, [pc, #84]	; (8010044 <cliQmc5883l+0xf0>)
 800ffee:	2000      	movs	r0, #0
 800fff0:	4798      	blx	r3
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00d      	beq.n	8010014 <cliQmc5883l+0xc0>
  {
    uint8_t ch;
    uint8_t addr;

    ch     = (uint8_t)args->getData(1);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	2001      	movs	r0, #1
 800fffe:	4798      	blx	r3
 8010000:	4603      	mov	r3, r0
 8010002:	737b      	strb	r3, [r7, #13]
    addr   = (uint8_t)args->getData(2);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	2002      	movs	r0, #2
 801000a:	4798      	blx	r3
 801000c:	4603      	mov	r3, r0
 801000e:	733b      	strb	r3, [r7, #12]

    ret = true;
 8010010:	2301      	movs	r3, #1
 8010012:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	f083 0301 	eor.w	r3, r3, #1
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d008      	beq.n	8010032 <cliQmc5883l+0xde>
  {
    cliPrintf("qmc5883l show \n\r");
 8010020:	4809      	ldr	r0, [pc, #36]	; (8010048 <cliQmc5883l+0xf4>)
 8010022:	f002 fa13 	bl	801244c <cliPrintf>
    cliPrintf("qmc5883l mem_read ch0:1, addr \n\r");
 8010026:	4809      	ldr	r0, [pc, #36]	; (801004c <cliQmc5883l+0xf8>)
 8010028:	f002 fa10 	bl	801244c <cliPrintf>
    cliPrintf("qmc5883l mem_write ch0:1, addr data \n\r");
 801002c:	4808      	ldr	r0, [pc, #32]	; (8010050 <cliQmc5883l+0xfc>)
 801002e:	f002 fa0d 	bl	801244c <cliPrintf>
  }
}
 8010032:	bf00      	nop
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	0802bdb8 	.word	0x0802bdb8
 8010040:	0802bdc8 	.word	0x0802bdc8
 8010044:	0802bdd4 	.word	0x0802bdd4
 8010048:	0802bde0 	.word	0x0802bde0
 801004c:	0802bdf4 	.word	0x0802bdf4
 8010050:	0802be18 	.word	0x0802be18

08010054 <cmpTimeUs>:
#define USE_GYRO_SLEW_LIMITER
#endif

FAST_DATA_ZERO_INIT gyro_t gyro;

static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <isGyroSensorCalibrationComplete>:
//     gyroConfig->simplified_gyro_filter = true;
//     gyroConfig->simplified_gyro_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT;
// }

bool isGyroSensorCalibrationComplete(const gyroSensor_t *gyroSensor)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    return gyroSensor->calibration.cyclesRemaining == 0;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801007e:	2b00      	cmp	r3, #0
 8010080:	bf0c      	ite	eq
 8010082:	2301      	moveq	r3, #1
 8010084:	2300      	movne	r3, #0
 8010086:	b2db      	uxtb	r3, r3
}
 8010088:	4618      	mov	r0, r3
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <isOnFinalGyroCalibrationCycle>:
#endif
    }
}

static bool isOnFinalGyroCalibrationCycle(const gyroCalibration_t *gyroCalibration)
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
    return gyroCalibration->cyclesRemaining == 1;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	bf0c      	ite	eq
 80100a4:	2301      	moveq	r3, #1
 80100a6:	2300      	movne	r3, #0
 80100a8:	b2db      	uxtb	r3, r3
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <gyroCalculateCalibratingCycles>:

static int32_t gyroCalculateCalibratingCycles(void)
{
 80100b8:	b480      	push	{r7}
 80100ba:	af00      	add	r7, sp, #0
    return (p_gyro_pg->gyroCalibrationDuration * 10000) / gyro.sampleLooptime; //gyroCalibrationDuration
 80100bc:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <gyroCalculateCalibratingCycles+0x28>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	8b1b      	ldrh	r3, [r3, #24]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80100c8:	fb02 f303 	mul.w	r3, r2, r3
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <gyroCalculateCalibratingCycles+0x2c>)
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	20000190 	.word	0x20000190
 80100e4:	10000ff4 	.word	0x10000ff4

080100e8 <isOnFirstGyroCalibrationCycle>:

static bool isOnFirstGyroCalibrationCycle(const gyroCalibration_t *gyroCalibration)
{
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
    return gyroCalibration->cyclesRemaining == gyroCalculateCalibratingCycles();
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80100f4:	f7ff ffe0 	bl	80100b8 <gyroCalculateCalibratingCycles>
 80100f8:	4603      	mov	r3, r0
 80100fa:	429c      	cmp	r4, r3
 80100fc:	bf0c      	ite	eq
 80100fe:	2301      	moveq	r3, #1
 8010100:	2300      	movne	r3, #0
 8010102:	b2db      	uxtb	r3, r3
}
 8010104:	4618      	mov	r0, r3
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	bd90      	pop	{r4, r7, pc}

0801010c <gyroSetCalibrationCycles>:

static void gyroSetCalibrationCycles(gyroSensor_t *gyroSensor)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
    if (gyroSensor->gyroDev.gyroHardware == GYRO_FAKE) {
        gyroSensor->calibration.cyclesRemaining = 0;
        return;
    }
#endif
    gyroSensor->calibration.cyclesRemaining = gyroCalculateCalibratingCycles();
 8010114:	f7ff ffd0 	bl	80100b8 <gyroCalculateCalibratingCycles>
 8010118:	4602      	mov	r2, r0
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <gyroStartCalibration>:

void gyroStartCalibration(bool isFirstArmingCalibration)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	4603      	mov	r3, r0
 8010130:	71fb      	strb	r3, [r7, #7]
    if (isFirstArmingCalibration && firstArmingCalibrationWasStarted) {
 8010132:	79fb      	ldrb	r3, [r7, #7]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d003      	beq.n	8010140 <gyroStartCalibration+0x18>
 8010138:	4b08      	ldr	r3, [pc, #32]	; (801015c <gyroStartCalibration+0x34>)
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d109      	bne.n	8010154 <gyroStartCalibration+0x2c>
        return;
    }

    gyroSetCalibrationCycles(&gyro.gyroSensor1);
 8010140:	4807      	ldr	r0, [pc, #28]	; (8010160 <gyroStartCalibration+0x38>)
 8010142:	f7ff ffe3 	bl	801010c <gyroSetCalibrationCycles>
#ifdef USE_MULTI_GYRO
    gyroSetCalibrationCycles(&gyro.gyroSensor2);
#endif

    if (isFirstArmingCalibration) {
 8010146:	79fb      	ldrb	r3, [r7, #7]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d004      	beq.n	8010156 <gyroStartCalibration+0x2e>
        firstArmingCalibrationWasStarted = true;
 801014c:	4b03      	ldr	r3, [pc, #12]	; (801015c <gyroStartCalibration+0x34>)
 801014e:	2201      	movs	r2, #1
 8010150:	701a      	strb	r2, [r3, #0]
 8010152:	e000      	b.n	8010156 <gyroStartCalibration+0x2e>
        return;
 8010154:	bf00      	nop
    }
}
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	20003eb9 	.word	0x20003eb9
 8010160:	10001030 	.word	0x10001030

08010164 <performGyroCalibration>:
{
    return firstArmingCalibrationWasStarted && !gyroIsCalibrationComplete();
}

void performGyroCalibration(gyroSensor_t *gyroSensor, uint8_t gyroMovementCalibrationThreshold)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	ed2d 8b02 	vpush	{d8}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	70fb      	strb	r3, [r7, #3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010174:	2300      	movs	r3, #0
 8010176:	60fb      	str	r3, [r7, #12]
 8010178:	e0c0      	b.n	80102fc <performGyroCalibration+0x198>
        // Reset g[axis] at start of calibration
        if (isOnFirstGyroCalibrationCycle(&gyroSensor->calibration)) {
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	3374      	adds	r3, #116	; 0x74
 801017e:	4618      	mov	r0, r3
 8010180:	f7ff ffb2 	bl	80100e8 <isOnFirstGyroCalibrationCycle>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d01d      	beq.n	80101c6 <performGyroCalibration+0x62>
            gyroSensor->calibration.sum[axis] = 0.0f;
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	331c      	adds	r3, #28
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	3304      	adds	r3, #4
 8010196:	f04f 0200 	mov.w	r2, #0
 801019a:	601a      	str	r2, [r3, #0]
            devClear(&gyroSensor->calibration.var[axis]);
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	4613      	mov	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	4413      	add	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	3378      	adds	r3, #120	; 0x78
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	4413      	add	r3, r2
 80101ac:	3308      	adds	r3, #8
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fb f836 	bl	800b220 <devClear>
            // gyroZero is set to zero until calibration complete
            gyroSensor->gyroDev.gyroZero[axis] = 0.0f;
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	3304      	adds	r3, #4
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	3304      	adds	r3, #4
 80101c0:	f04f 0200 	mov.w	r2, #0
 80101c4:	601a      	str	r2, [r3, #0]
        }

        // Sum up CALIBRATING_GYRO_TIME_US readings
        gyroSensor->calibration.sum[axis] += gyroSensor->gyroDev.gyroADCRaw[axis];
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	331c      	adds	r3, #28
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	3304      	adds	r3, #4
 80101d2:	ed93 7a00 	vldr	s14, [r3]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	68fa      	ldr	r2, [r7, #12]
 80101da:	321c      	adds	r2, #28
 80101dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80101e0:	ee07 3a90 	vmov	s15, r3
 80101e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	331c      	adds	r3, #28
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	3304      	adds	r3, #4
 80101f8:	edc3 7a00 	vstr	s15, [r3]
        devPush(&gyroSensor->calibration.var[axis], gyroSensor->gyroDev.gyroADCRaw[axis]);
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4613      	mov	r3, r2
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	4413      	add	r3, r2
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	3378      	adds	r3, #120	; 0x78
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	4413      	add	r3, r2
 801020c:	f103 0108 	add.w	r1, r3, #8
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	321c      	adds	r2, #28
 8010216:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801021a:	ee07 3a90 	vmov	s15, r3
 801021e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010222:	eeb0 0a67 	vmov.f32	s0, s15
 8010226:	4608      	mov	r0, r1
 8010228:	f7fb f807 	bl	800b23a <devPush>

        if (isOnFinalGyroCalibrationCycle(&gyroSensor->calibration)) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	3374      	adds	r3, #116	; 0x74
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff ff2f 	bl	8010094 <isOnFinalGyroCalibrationCycle>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	d05c      	beq.n	80102f6 <performGyroCalibration+0x192>
            const float stddev = devStandardDeviation(&gyroSensor->calibration.var[axis]);
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	4613      	mov	r3, r2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4413      	add	r3, r2
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	3378      	adds	r3, #120	; 0x78
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	4413      	add	r3, r2
 801024c:	3308      	adds	r3, #8
 801024e:	4618      	mov	r0, r3
 8010250:	f7fb f86e 	bl	800b330 <devStandardDeviation>
 8010254:	ed87 0a02 	vstr	s0, [r7, #8]
            if (axis == X) {
                //DEBUG_SET(DEBUG_GYRO_RAW, DEBUG_GYRO_CALIBRATION, lrintf(stddev));
            }

            // check deviation and startover in case the model was moved
            if (gyroMovementCalibrationThreshold && stddev > gyroMovementCalibrationThreshold) {
 8010258:	78fb      	ldrb	r3, [r7, #3]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00f      	beq.n	801027e <performGyroCalibration+0x11a>
 801025e:	78fb      	ldrb	r3, [r7, #3]
 8010260:	ee07 3a90 	vmov	s15, r3
 8010264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010268:	ed97 7a02 	vldr	s14, [r7, #8]
 801026c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010274:	dd03      	ble.n	801027e <performGyroCalibration+0x11a>
                gyroSetCalibrationCycles(gyroSensor);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff ff48 	bl	801010c <gyroSetCalibrationCycles>
                return;
 801027c:	e054      	b.n	8010328 <performGyroCalibration+0x1c4>
            }

            // please take care with exotic boardalignment !!
            gyroSensor->gyroDev.gyroZero[axis] = gyroSensor->calibration.sum[axis] / gyroCalculateCalibratingCycles();
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	331c      	adds	r3, #28
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4413      	add	r3, r2
 8010288:	3304      	adds	r3, #4
 801028a:	ed93 8a00 	vldr	s16, [r3]
 801028e:	f7ff ff13 	bl	80100b8 <gyroCalculateCalibratingCycles>
 8010292:	ee07 0a90 	vmov	s15, r0
 8010296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801029a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3304      	adds	r3, #4
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4413      	add	r3, r2
 80102a8:	3304      	adds	r3, #4
 80102aa:	edc3 7a00 	vstr	s15, [r3]
            if (axis == Z) {
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d120      	bne.n	80102f6 <performGyroCalibration+0x192>
              gyroSensor->gyroDev.gyroZero[axis] -= (p_gyro_pg->gyro_offset_yaw / 100);//(float)gyroConfig()->gyro_offset_yaw
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	3304      	adds	r3, #4
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	4413      	add	r3, r2
 80102be:	3304      	adds	r3, #4
 80102c0:	ed93 7a00 	vldr	s14, [r3]
 80102c4:	4b1b      	ldr	r3, [pc, #108]	; (8010334 <performGyroCalibration+0x1d0>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80102cc:	4a1a      	ldr	r2, [pc, #104]	; (8010338 <performGyroCalibration+0x1d4>)
 80102ce:	fb82 1203 	smull	r1, r2, r2, r3
 80102d2:	1152      	asrs	r2, r2, #5
 80102d4:	17db      	asrs	r3, r3, #31
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	b21b      	sxth	r3, r3
 80102da:	ee07 3a90 	vmov	s15, r3
 80102de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	3304      	adds	r3, #4
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	3304      	adds	r3, #4
 80102f2:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	3301      	adds	r3, #1
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b02      	cmp	r3, #2
 8010300:	f77f af3b 	ble.w	801017a <performGyroCalibration+0x16>
            }
        }
    }

    if (isOnFinalGyroCalibrationCycle(&gyroSensor->calibration)) {
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	3374      	adds	r3, #116	; 0x74
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff fec3 	bl	8010094 <isOnFinalGyroCalibrationCycle>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d002      	beq.n	801031a <performGyroCalibration+0x1b6>
        schedulerResetTaskStatistics(TASK_SELF); // so calibration cycles do not pollute tasks statistics
 8010314:	2010      	movs	r0, #16
 8010316:	f7fe f9a5 	bl	800e664 <schedulerResetTaskStatistics>
        // if (!firstArmingCalibrationWasStarted || (getArmingDisableFlags() & ~ARMING_DISABLED_CALIBRATING) == 0) {
        //     beeper(BEEPER_GYRO_CALIBRATED);
        // }
    }

    --gyroSensor->calibration.cyclesRemaining;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010320:	1e5a      	subs	r2, r3, #1
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	ecbd 8b02 	vpop	{d8}
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20000190 	.word	0x20000190
 8010338:	51eb851f 	.word	0x51eb851f

0801033c <handleOverflow>:
}
#endif

#ifdef USE_GYRO_OVERFLOW_CHECK
static void handleOverflow(uint32_t currentTimeUs)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
    // This will need to be revised if we ever allow different sensor types to be
    // used simultaneously. In that case the scale might be different between sensors.
    // It's complicated by the fact that we're using filtered gyro data here which is
    // after both sensors are scaled and averaged.
    const float gyroOverflowResetRate = GYRO_OVERFLOW_RESET_THRESHOLD * gyro.scale;
 8010344:	4b21      	ldr	r3, [pc, #132]	; (80103cc <handleOverflow+0x90>)
 8010346:	edd3 7a03 	vldr	s15, [r3, #12]
 801034a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80103d0 <handleOverflow+0x94>
 801034e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010352:	edc7 7a03 	vstr	s15, [r7, #12]

    if ((fabsf(gyro.gyroADCf[X]) < gyroOverflowResetRate)
 8010356:	4b1d      	ldr	r3, [pc, #116]	; (80103cc <handleOverflow+0x90>)
 8010358:	edd3 7a07 	vldr	s15, [r3, #28]
 801035c:	eef0 7ae7 	vabs.f32	s15, s15
 8010360:	ed97 7a03 	vldr	s14, [r7, #12]
 8010364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036c:	dd26      	ble.n	80103bc <handleOverflow+0x80>
          && (fabsf(gyro.gyroADCf[Y]) < gyroOverflowResetRate)
 801036e:	4b17      	ldr	r3, [pc, #92]	; (80103cc <handleOverflow+0x90>)
 8010370:	edd3 7a08 	vldr	s15, [r3, #32]
 8010374:	eef0 7ae7 	vabs.f32	s15, s15
 8010378:	ed97 7a03 	vldr	s14, [r7, #12]
 801037c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	dd1a      	ble.n	80103bc <handleOverflow+0x80>
          && (fabsf(gyro.gyroADCf[Z]) < gyroOverflowResetRate)) {
 8010386:	4b11      	ldr	r3, [pc, #68]	; (80103cc <handleOverflow+0x90>)
 8010388:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801038c:	eef0 7ae7 	vabs.f32	s15, s15
 8010390:	ed97 7a03 	vldr	s14, [r7, #12]
 8010394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039c:	dd0e      	ble.n	80103bc <handleOverflow+0x80>
        // if we have 50ms of consecutive OK gyro vales, then assume yaw readings are OK again and reset overflowDetected
        // reset requires good OK values on all axes
        if (cmpTimeUs(currentTimeUs, overflowTimeUs) > 50000) {
 801039e:	4b0d      	ldr	r3, [pc, #52]	; (80103d4 <handleOverflow+0x98>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4619      	mov	r1, r3
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff fe55 	bl	8010054 <cmpTimeUs>
 80103aa:	4603      	mov	r3, r0
 80103ac:	f24c 3250 	movw	r2, #50000	; 0xc350
 80103b0:	4293      	cmp	r3, r2
 80103b2:	dd07      	ble.n	80103c4 <handleOverflow+0x88>
            overflowDetected = false;
 80103b4:	4b08      	ldr	r3, [pc, #32]	; (80103d8 <handleOverflow+0x9c>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	701a      	strb	r2, [r3, #0]
        if (cmpTimeUs(currentTimeUs, overflowTimeUs) > 50000) {
 80103ba:	e003      	b.n	80103c4 <handleOverflow+0x88>
        }
    } else {
        // not a consecutive OK value, so reset the overflow time
        overflowTimeUs = currentTimeUs;
 80103bc:	4a05      	ldr	r2, [pc, #20]	; (80103d4 <handleOverflow+0x98>)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6013      	str	r3, [r2, #0]
    }
}
 80103c2:	bf00      	nop
 80103c4:	bf00      	nop
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	10000ff4 	.word	0x10000ff4
 80103d0:	46ed0800 	.word	0x46ed0800
 80103d4:	100012f8 	.word	0x100012f8
 80103d8:	100012f4 	.word	0x100012f4

080103dc <checkForOverflow>:

static void checkForOverflow(uint32_t currentTimeUs)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    // check for overflow to handle Yaw Spin To The Moon (YSTTM)
    // ICM gyros are specified to +/- 2000 deg/sec, in a crash they can go out of spec.
    // This can cause an overflow and sign reversal in the output.
    // Overflow and sign reversal seems to result in a gyro value of +1996 or -1996.
    if (overflowDetected) {
 80103e4:	4b2a      	ldr	r3, [pc, #168]	; (8010490 <checkForOverflow+0xb4>)
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <checkForOverflow+0x18>
        handleOverflow(currentTimeUs);
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff ffa5 	bl	801033c <handleOverflow>
            yawSpinDetected = false;
#endif // USE_YAW_SPIN_RECOVERY
        }
#endif // SIMULATOR_BUILD
    }
}
 80103f2:	e048      	b.n	8010486 <checkForOverflow+0xaa>
        gyroOverflow_e overflowCheck = GYRO_OVERFLOW_NONE;
 80103f4:	2300      	movs	r3, #0
 80103f6:	73fb      	strb	r3, [r7, #15]
        const float gyroOverflowTriggerRate = GYRO_OVERFLOW_TRIGGER_THRESHOLD * gyro.scale;
 80103f8:	4b26      	ldr	r3, [pc, #152]	; (8010494 <checkForOverflow+0xb8>)
 80103fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80103fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8010498 <checkForOverflow+0xbc>
 8010402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010406:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fabsf(gyro.gyroADCf[X]) > gyroOverflowTriggerRate) {
 801040a:	4b22      	ldr	r3, [pc, #136]	; (8010494 <checkForOverflow+0xb8>)
 801040c:	edd3 7a07 	vldr	s15, [r3, #28]
 8010410:	eef0 7ae7 	vabs.f32	s15, s15
 8010414:	ed97 7a02 	vldr	s14, [r7, #8]
 8010418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010420:	d503      	bpl.n	801042a <checkForOverflow+0x4e>
            overflowCheck |= GYRO_OVERFLOW_X;
 8010422:	7bfb      	ldrb	r3, [r7, #15]
 8010424:	f043 0301 	orr.w	r3, r3, #1
 8010428:	73fb      	strb	r3, [r7, #15]
        if (fabsf(gyro.gyroADCf[Y]) > gyroOverflowTriggerRate) {
 801042a:	4b1a      	ldr	r3, [pc, #104]	; (8010494 <checkForOverflow+0xb8>)
 801042c:	edd3 7a08 	vldr	s15, [r3, #32]
 8010430:	eef0 7ae7 	vabs.f32	s15, s15
 8010434:	ed97 7a02 	vldr	s14, [r7, #8]
 8010438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010440:	d503      	bpl.n	801044a <checkForOverflow+0x6e>
            overflowCheck |= GYRO_OVERFLOW_Y;
 8010442:	7bfb      	ldrb	r3, [r7, #15]
 8010444:	f043 0302 	orr.w	r3, r3, #2
 8010448:	73fb      	strb	r3, [r7, #15]
        if (fabsf(gyro.gyroADCf[Z]) > gyroOverflowTriggerRate) {
 801044a:	4b12      	ldr	r3, [pc, #72]	; (8010494 <checkForOverflow+0xb8>)
 801044c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010450:	eef0 7ae7 	vabs.f32	s15, s15
 8010454:	ed97 7a02 	vldr	s14, [r7, #8]
 8010458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010460:	d503      	bpl.n	801046a <checkForOverflow+0x8e>
            overflowCheck |= GYRO_OVERFLOW_Z;
 8010462:	7bfb      	ldrb	r3, [r7, #15]
 8010464:	f043 0304 	orr.w	r3, r3, #4
 8010468:	73fb      	strb	r3, [r7, #15]
        if (overflowCheck & gyro.overflowAxisMask) {
 801046a:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <checkForOverflow+0xb8>)
 801046c:	f893 22fd 	ldrb.w	r2, [r3, #765]	; 0x2fd
 8010470:	7bfb      	ldrb	r3, [r7, #15]
 8010472:	4013      	ands	r3, r2
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d005      	beq.n	8010486 <checkForOverflow+0xaa>
            overflowDetected = true;
 801047a:	4b05      	ldr	r3, [pc, #20]	; (8010490 <checkForOverflow+0xb4>)
 801047c:	2201      	movs	r2, #1
 801047e:	701a      	strb	r2, [r3, #0]
            overflowTimeUs = currentTimeUs;
 8010480:	4a06      	ldr	r2, [pc, #24]	; (801049c <checkForOverflow+0xc0>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6013      	str	r3, [r2, #0]
}
 8010486:	bf00      	nop
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	100012f4 	.word	0x100012f4
 8010494:	10000ff4 	.word	0x10000ff4
 8010498:	46f9d800 	.word	0x46f9d800
 801049c:	100012f8 	.word	0x100012f8

080104a0 <gyroUpdateSensor>:
    }
}
#endif // USE_YAW_SPIN_RECOVERY

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]

    gyroSensor->gyroDev.InterruptStatus = bmi270InterruptStatus(gyro.rawSensorDev);
 80104a8:	4b59      	ldr	r3, [pc, #356]	; (8010610 <gyroUpdateSensor+0x170>)
 80104aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f816 	bl	80114e0 <bmi270InterruptStatus>
 80104b4:	4603      	mov	r3, r0
 80104b6:	461a      	mov	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    if(gyroSensor->gyroDev.InterruptStatus & 0x40)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d003      	beq.n	80104d6 <gyroUpdateSensor+0x36>
    {
        gyroSensor->gyroDev.dataReady = true;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }

    if(gyroSensor->gyroDev.InterruptStatus & 0x80)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	b25b      	sxtb	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	da02      	bge.n	80104ea <gyroUpdateSensor+0x4a>
    {
        acc.dev.dataReady = true;
 80104e4:	4b4b      	ldr	r3, [pc, #300]	; (8010614 <gyroUpdateSensor+0x174>)
 80104e6:	2201      	movs	r2, #1
 80104e8:	751a      	strb	r2, [r3, #20]
    }
    
    if(gyroSensor->gyroDev.dataReady)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d037      	beq.n	8010566 <gyroUpdateSensor+0xc6>
    {
        if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	4610      	mov	r0, r2
 80104fe:	4798      	blx	r3
 8010500:	4603      	mov	r3, r0
 8010502:	f083 0301 	eor.w	r3, r3, #1
 8010506:	b2db      	uxtb	r3, r3
 8010508:	2b00      	cmp	r3, #0
 801050a:	d17b      	bne.n	8010604 <gyroUpdateSensor+0x164>
        return;
        }
        gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADCRaw[X] - gyroSensor->gyroDev.gyroZero[X];
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8010512:	ee07 3a90 	vmov	s15, r3
 8010516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	edd3 7a05 	vldr	s15, [r3, #20]
 8010520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	edc3 7a08 	vstr	s15, [r3, #32]
        gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADCRaw[Y] - gyroSensor->gyroDev.gyroZero[Y];
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8010530:	ee07 3a90 	vmov	s15, r3
 8010534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	edd3 7a06 	vldr	s15, [r3, #24]
 801053e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADCRaw[Z] - gyroSensor->gyroDev.gyroZero[Z];
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801054e:	ee07 3a90 	vmov	s15, r3
 8010552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	edd3 7a07 	vldr	s15, [r3, #28]
 801055c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    }
    gyroSensor->gyroDev.dataReady = false;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
 8010578:	4603      	mov	r3, r0
 801057a:	f083 0301 	eor.w	r3, r3, #1
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b00      	cmp	r3, #0
 8010582:	d141      	bne.n	8010608 <gyroUpdateSensor+0x168>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    if (isGyroSensorCalibrationComplete(gyroSensor)) {
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff fd6f 	bl	8010070 <isGyroSensorCalibrationComplete>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d02d      	beq.n	80105f4 <gyroUpdateSensor+0x154>
#if defined(USE_GYRO_SLEW_LIMITER)
        gyroSensor->gyroDev.gyroADC[X] = gyroSlewLimiter(gyroSensor, X) - gyroSensor->gyroDev.gyroZero[X];
        gyroSensor->gyroDev.gyroADC[Y] = gyroSlewLimiter(gyroSensor, Y) - gyroSensor->gyroDev.gyroZero[Y];
        gyroSensor->gyroDev.gyroADC[Z] = gyroSlewLimiter(gyroSensor, Z) - gyroSensor->gyroDev.gyroZero[Z];
#else
        gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADCRaw[X] - gyroSensor->gyroDev.gyroZero[X];
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 801059e:	ee07 3a90 	vmov	s15, r3
 80105a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80105ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	edc3 7a08 	vstr	s15, [r3, #32]
        gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADCRaw[Y] - gyroSensor->gyroDev.gyroZero[Y];
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80105bc:	ee07 3a90 	vmov	s15, r3
 80105c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80105ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADCRaw[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105da:	ee07 3a90 	vmov	s15, r3
 80105de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80105e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80105f2:	e00a      	b.n	801060a <gyroUpdateSensor+0x16a>
#endif
    }else {
        performGyroCalibration(gyroSensor, p_gyro_pg->gyroMovementCalibrationThreshold);
 80105f4:	4b08      	ldr	r3, [pc, #32]	; (8010618 <gyroUpdateSensor+0x178>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff fdb1 	bl	8010164 <performGyroCalibration>
 8010602:	e002      	b.n	801060a <gyroUpdateSensor+0x16a>
        return;
 8010604:	bf00      	nop
 8010606:	e000      	b.n	801060a <gyroUpdateSensor+0x16a>
        return;
 8010608:	bf00      	nop
    }
}
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	10000ff4 	.word	0x10000ff4
 8010614:	10000f2c 	.word	0x10000f2c
 8010618:	20000190 	.word	0x20000190

0801061c <gyroUpdate>:

void gyroUpdate(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
    switch (gyro.gyroToUse) {
 8010620:	4b46      	ldr	r3, [pc, #280]	; (801073c <gyroUpdate+0x120>)
 8010622:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 8010626:	2b00      	cmp	r3, #0
 8010628:	d12a      	bne.n	8010680 <gyroUpdate+0x64>
    case GYRO_CONFIG_USE_GYRO_1:
        gyroUpdateSensor(&gyro.gyroSensor1);
 801062a:	4845      	ldr	r0, [pc, #276]	; (8010740 <gyroUpdate+0x124>)
 801062c:	f7ff ff38 	bl	80104a0 <gyroUpdateSensor>
        if (isGyroSensorCalibrationComplete(&gyro.gyroSensor1)) {
 8010630:	4843      	ldr	r0, [pc, #268]	; (8010740 <gyroUpdate+0x124>)
 8010632:	f7ff fd1d 	bl	8010070 <isGyroSensorCalibrationComplete>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d020      	beq.n	801067e <gyroUpdate+0x62>
            gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 801063c:	4b3f      	ldr	r3, [pc, #252]	; (801073c <gyroUpdate+0x120>)
 801063e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8010642:	4b3e      	ldr	r3, [pc, #248]	; (801073c <gyroUpdate+0x120>)
 8010644:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010648:	ee67 7a27 	vmul.f32	s15, s14, s15
 801064c:	4b3b      	ldr	r3, [pc, #236]	; (801073c <gyroUpdate+0x120>)
 801064e:	edc3 7a04 	vstr	s15, [r3, #16]
            gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 8010652:	4b3a      	ldr	r3, [pc, #232]	; (801073c <gyroUpdate+0x120>)
 8010654:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8010658:	4b38      	ldr	r3, [pc, #224]	; (801073c <gyroUpdate+0x120>)
 801065a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801065e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010662:	4b36      	ldr	r3, [pc, #216]	; (801073c <gyroUpdate+0x120>)
 8010664:	edc3 7a05 	vstr	s15, [r3, #20]
            gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 8010668:	4b34      	ldr	r3, [pc, #208]	; (801073c <gyroUpdate+0x120>)
 801066a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 801066e:	4b33      	ldr	r3, [pc, #204]	; (801073c <gyroUpdate+0x120>)
 8010670:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010678:	4b30      	ldr	r3, [pc, #192]	; (801073c <gyroUpdate+0x120>)
 801067a:	edc3 7a06 	vstr	s15, [r3, #24]
        }
        break;
 801067e:	bf00      	nop
        }
        break;
#endif
    }

    if (gyro.downsampleFilterEnabled) {
 8010680:	4b2e      	ldr	r3, [pc, #184]	; (801073c <gyroUpdate+0x120>)
 8010682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010686:	2b00      	cmp	r3, #0
 8010688:	d02d      	beq.n	80106e6 <gyroUpdate+0xca>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 801068a:	4b2c      	ldr	r3, [pc, #176]	; (801073c <gyroUpdate+0x120>)
 801068c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010690:	4a2a      	ldr	r2, [pc, #168]	; (801073c <gyroUpdate+0x120>)
 8010692:	edd2 7a04 	vldr	s15, [r2, #16]
 8010696:	eeb0 0a67 	vmov.f32	s0, s15
 801069a:	482a      	ldr	r0, [pc, #168]	; (8010744 <gyroUpdate+0x128>)
 801069c:	4798      	blx	r3
 801069e:	eef0 7a40 	vmov.f32	s15, s0
 80106a2:	4b26      	ldr	r3, [pc, #152]	; (801073c <gyroUpdate+0x120>)
 80106a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 80106a8:	4b24      	ldr	r3, [pc, #144]	; (801073c <gyroUpdate+0x120>)
 80106aa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80106ae:	4a23      	ldr	r2, [pc, #140]	; (801073c <gyroUpdate+0x120>)
 80106b0:	edd2 7a05 	vldr	s15, [r2, #20]
 80106b4:	eeb0 0a67 	vmov.f32	s0, s15
 80106b8:	4823      	ldr	r0, [pc, #140]	; (8010748 <gyroUpdate+0x12c>)
 80106ba:	4798      	blx	r3
 80106bc:	eef0 7a40 	vmov.f32	s15, s0
 80106c0:	4b1e      	ldr	r3, [pc, #120]	; (801073c <gyroUpdate+0x120>)
 80106c2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 80106c6:	4b1d      	ldr	r3, [pc, #116]	; (801073c <gyroUpdate+0x120>)
 80106c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80106cc:	4a1b      	ldr	r2, [pc, #108]	; (801073c <gyroUpdate+0x120>)
 80106ce:	edd2 7a06 	vldr	s15, [r2, #24]
 80106d2:	eeb0 0a67 	vmov.f32	s0, s15
 80106d6:	481d      	ldr	r0, [pc, #116]	; (801074c <gyroUpdate+0x130>)
 80106d8:	4798      	blx	r3
 80106da:	eef0 7a40 	vmov.f32	s15, s0
 80106de:	4b17      	ldr	r3, [pc, #92]	; (801073c <gyroUpdate+0x120>)
 80106e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleSum[X] += gyro.gyroADC[X];
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
        gyro.sampleCount++;
    }
}
 80106e4:	e028      	b.n	8010738 <gyroUpdate+0x11c>
        gyro.sampleSum[X] += gyro.gyroADC[X];
 80106e6:	4b15      	ldr	r3, [pc, #84]	; (801073c <gyroUpdate+0x120>)
 80106e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80106ec:	4b13      	ldr	r3, [pc, #76]	; (801073c <gyroUpdate+0x120>)
 80106ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80106f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106f6:	4b11      	ldr	r3, [pc, #68]	; (801073c <gyroUpdate+0x120>)
 80106f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 80106fc:	4b0f      	ldr	r3, [pc, #60]	; (801073c <gyroUpdate+0x120>)
 80106fe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8010702:	4b0e      	ldr	r3, [pc, #56]	; (801073c <gyroUpdate+0x120>)
 8010704:	edd3 7a05 	vldr	s15, [r3, #20]
 8010708:	ee77 7a27 	vadd.f32	s15, s14, s15
 801070c:	4b0b      	ldr	r3, [pc, #44]	; (801073c <gyroUpdate+0x120>)
 801070e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 8010712:	4b0a      	ldr	r3, [pc, #40]	; (801073c <gyroUpdate+0x120>)
 8010714:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8010718:	4b08      	ldr	r3, [pc, #32]	; (801073c <gyroUpdate+0x120>)
 801071a:	edd3 7a06 	vldr	s15, [r3, #24]
 801071e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010722:	4b06      	ldr	r3, [pc, #24]	; (801073c <gyroUpdate+0x120>)
 8010724:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <gyroUpdate+0x120>)
 801072a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801072e:	3301      	adds	r3, #1
 8010730:	b2da      	uxtb	r2, r3
 8010732:	4b02      	ldr	r3, [pc, #8]	; (801073c <gyroUpdate+0x120>)
 8010734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8010738:	bf00      	nop
 801073a:	bd80      	pop	{r7, pc}
 801073c:	10000ff4 	.word	0x10000ff4
 8010740:	10001030 	.word	0x10001030
 8010744:	10001174 	.word	0x10001174
 8010748:	1000119c 	.word	0x1000119c
 801074c:	100011c4 	.word	0x100011c4

08010750 <filterGyro>:

#include "axis.h"
#include "sensors.h"

static void GYRO_FILTER_FUNCTION_NAME(void)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010756:	2300      	movs	r3, #0
 8010758:	607b      	str	r3, [r7, #4]
 801075a:	e085      	b.n	8010868 <filterGyro+0x118>

        // DEBUG_GYRO_SAMPLE(0) Record the pre-downsample value for the selected debug axis (same as DEBUG_GYRO_SCALED)
        //GYRO_FILTER_AXIS_DEBUG_SET(axis, DEBUG_GYRO_SAMPLE, 0, lrintf(gyro.gyroADC[axis]));

        // downsample the individual gyro samples
        float gyroADCf = 0;
 801075c:	f04f 0300 	mov.w	r3, #0
 8010760:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 8010762:	4b47      	ldr	r3, [pc, #284]	; (8010880 <filterGyro+0x130>)
 8010764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010768:	2b00      	cmp	r3, #0
 801076a:	d008      	beq.n	801077e <filterGyro+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 801076c:	4a44      	ldr	r2, [pc, #272]	; (8010880 <filterGyro+0x130>)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	330a      	adds	r3, #10
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	3304      	adds	r3, #4
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	603b      	str	r3, [r7, #0]
 801077c:	e020      	b.n	80107c0 <filterGyro+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 801077e:	4b40      	ldr	r3, [pc, #256]	; (8010880 <filterGyro+0x130>)
 8010780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010784:	2b00      	cmp	r3, #0
 8010786:	d012      	beq.n	80107ae <filterGyro+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 8010788:	4a3d      	ldr	r2, [pc, #244]	; (8010880 <filterGyro+0x130>)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	330a      	adds	r3, #10
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4413      	add	r3, r2
 8010792:	3304      	adds	r3, #4
 8010794:	edd3 6a00 	vldr	s13, [r3]
 8010798:	4b39      	ldr	r3, [pc, #228]	; (8010880 <filterGyro+0x130>)
 801079a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801079e:	ee07 3a90 	vmov	s15, r3
 80107a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80107a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107aa:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 80107ae:	4a34      	ldr	r2, [pc, #208]	; (8010880 <filterGyro+0x130>)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	330a      	adds	r3, #10
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	4413      	add	r3, r2
 80107b8:	3304      	adds	r3, #4
 80107ba:	f04f 0200 	mov.w	r2, #0
 80107be:	601a      	str	r2, [r3, #0]

        // DEBUG_GYRO_SAMPLE(2) Record the post-RPM Filter value for the selected debug axis
        //GYRO_FILTER_AXIS_DEBUG_SET(axis, DEBUG_GYRO_SAMPLE, 2, lrintf(gyroADCf));

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 80107c0:	4b2f      	ldr	r3, [pc, #188]	; (8010880 <filterGyro+0x130>)
 80107c2:	f8d3 11f8 	ldr.w	r1, [r3, #504]	; 0x1f8
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	4613      	mov	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4413      	add	r3, r2
 80107ce:	00db      	lsls	r3, r3, #3
 80107d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80107d4:	4a2a      	ldr	r2, [pc, #168]	; (8010880 <filterGyro+0x130>)
 80107d6:	4413      	add	r3, r2
 80107d8:	3304      	adds	r3, #4
 80107da:	ed97 0a00 	vldr	s0, [r7]
 80107de:	4618      	mov	r0, r3
 80107e0:	4788      	blx	r1
 80107e2:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 80107e6:	4b26      	ldr	r3, [pc, #152]	; (8010880 <filterGyro+0x130>)
 80107e8:	f8d3 1274 	ldr.w	r1, [r3, #628]	; 0x274
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	4613      	mov	r3, r2
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	4413      	add	r3, r2
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80107fa:	4a21      	ldr	r2, [pc, #132]	; (8010880 <filterGyro+0x130>)
 80107fc:	4413      	add	r3, r2
 80107fe:	ed97 0a00 	vldr	s0, [r7]
 8010802:	4618      	mov	r0, r3
 8010804:	4788      	blx	r1
 8010806:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 801080a:	4b1d      	ldr	r3, [pc, #116]	; (8010880 <filterGyro+0x130>)
 801080c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	4613      	mov	r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	00db      	lsls	r3, r3, #3
 801081a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801081e:	4a18      	ldr	r2, [pc, #96]	; (8010880 <filterGyro+0x130>)
 8010820:	4413      	add	r3, r2
 8010822:	3304      	adds	r3, #4
 8010824:	ed97 0a00 	vldr	s0, [r7]
 8010828:	4618      	mov	r0, r3
 801082a:	4788      	blx	r1
 801082c:	ed87 0a00 	vstr	s0, [r7]

        // DEBUG_GYRO_SAMPLE(3) Record the post-static notch and lowpass filter value for the selected debug axis
        //GYRO_FILTER_AXIS_DEBUG_SET(axis, DEBUG_GYRO_SAMPLE, 3, lrintf(gyroADCf));

#ifdef USE_DYN_NOTCH_FILTER
        if (isDynNotchActive()) {
 8010830:	f7f9 fee0 	bl	800a5f4 <isDynNotchActive>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00b      	beq.n	8010852 <filterGyro+0x102>
                //GYRO_FILTER_DEBUG_SET(DEBUG_FFT, 0, lrintf(gyroADCf));
                //GYRO_FILTER_DEBUG_SET(DEBUG_FFT_FREQ, 3, lrintf(gyroADCf));
                //GYRO_FILTER_DEBUG_SET(DEBUG_DYN_LPF, 0, lrintf(gyroADCf));
            }

            dynNotchPush(axis, gyroADCf);
 801083a:	ed97 0a00 	vldr	s0, [r7]
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7f9 fac0 	bl	8009dc4 <dynNotchPush>
            gyroADCf = dynNotchFilter(axis, gyroADCf);
 8010844:	ed97 0a00 	vldr	s0, [r7]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7f9 fea3 	bl	800a594 <dynNotchFilter>
 801084e:	ed87 0a00 	vstr	s0, [r7]
#endif

        // DEBUG_GYRO_FILTERED records the scaled, filtered, after all software filtering has been applied.
        //GYRO_FILTER_DEBUG_SET(DEBUG_GYRO_FILTERED, axis, lrintf(gyroADCf));

        gyro.gyroADCf[axis] = gyroADCf;
 8010852:	4a0b      	ldr	r2, [pc, #44]	; (8010880 <filterGyro+0x130>)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	3306      	adds	r3, #6
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	4413      	add	r3, r2
 801085c:	3304      	adds	r3, #4
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	3301      	adds	r3, #1
 8010866:	607b      	str	r3, [r7, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b02      	cmp	r3, #2
 801086c:	f77f af76 	ble.w	801075c <filterGyro+0xc>
    }
    gyro.sampleCount = 0;
 8010870:	4b03      	ldr	r3, [pc, #12]	; (8010880 <filterGyro+0x130>)
 8010872:	2200      	movs	r2, #0
 8010874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8010878:	bf00      	nop
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	10000ff4 	.word	0x10000ff4

08010884 <gyroFiltering>:
// #undef GYRO_FILTER_FUNCTION_NAME
// #undef GYRO_FILTER_DEBUG_SET
// #undef GYRO_FILTER_AXIS_DEBUG_SET

void gyroFiltering(uint32_t currentTimeUs)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
    //if (gyro.gyroDebugMode == DEBUG_NONE) {
        filterGyro();
 801088c:	f7ff ff60 	bl	8010750 <filterGyro>
    //} else {
    //    filterGyroDebug();
    //}

#ifdef USE_DYN_NOTCH_FILTER
    if (isDynNotchActive()) {
 8010890:	f7f9 feb0 	bl	800a5f4 <isDynNotchActive>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <gyroFiltering+0x1a>
        dynNotchUpdate();
 801089a:	f7f9 fab1 	bl	8009e00 <dynNotchUpdate>
// #endif
//         }
//     }

#ifdef USE_GYRO_OVERFLOW_CHECK
    if (p_gyro_pg->checkOverflow && !gyro.gyroHasOverflowProtection) {
 801089e:	4b2f      	ldr	r3, [pc, #188]	; (801095c <gyroFiltering+0xd8>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	7c9b      	ldrb	r3, [r3, #18]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00a      	beq.n	80108be <gyroFiltering+0x3a>
 80108a8:	4b2d      	ldr	r3, [pc, #180]	; (8010960 <gyroFiltering+0xdc>)
 80108aa:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
 80108ae:	f083 0301 	eor.w	r3, r3, #1
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <gyroFiltering+0x3a>
        checkForOverflow(currentTimeUs);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff fd8f 	bl	80103dc <checkForOverflow>
    if (yawSpinRecoveryEnabled) {
        checkForYawSpin(currentTimeUs);
    }
#endif

    if (!overflowDetected) {
 80108be:	4b29      	ldr	r3, [pc, #164]	; (8010964 <gyroFiltering+0xe0>)
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	f083 0301 	eor.w	r3, r3, #1
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d043      	beq.n	8010954 <gyroFiltering+0xd0>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	e038      	b.n	8010944 <gyroFiltering+0xc0>
            // integrate using trapezium rule to avoid bias
            accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 80108d2:	4a25      	ldr	r2, [pc, #148]	; (8010968 <gyroFiltering+0xe4>)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	4413      	add	r3, r2
 80108da:	ed93 7a00 	vldr	s14, [r3]
 80108de:	4a23      	ldr	r2, [pc, #140]	; (801096c <gyroFiltering+0xe8>)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	edd3 6a00 	vldr	s13, [r3]
 80108ea:	4a1d      	ldr	r2, [pc, #116]	; (8010960 <gyroFiltering+0xdc>)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	3306      	adds	r3, #6
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4413      	add	r3, r2
 80108f4:	3304      	adds	r3, #4
 80108f6:	edd3 7a00 	vldr	s15, [r3]
 80108fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010902:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010906:	4b16      	ldr	r3, [pc, #88]	; (8010960 <gyroFiltering+0xdc>)
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	ee07 3a90 	vmov	s15, r3
 801090e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010916:	ee77 7a27 	vadd.f32	s15, s14, s15
 801091a:	4a13      	ldr	r2, [pc, #76]	; (8010968 <gyroFiltering+0xe4>)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	4413      	add	r3, r2
 8010922:	edc3 7a00 	vstr	s15, [r3]
            gyroPrevious[axis] = gyro.gyroADCf[axis];
 8010926:	4a0e      	ldr	r2, [pc, #56]	; (8010960 <gyroFiltering+0xdc>)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	3306      	adds	r3, #6
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4413      	add	r3, r2
 8010930:	3304      	adds	r3, #4
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	490d      	ldr	r1, [pc, #52]	; (801096c <gyroFiltering+0xe8>)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	440b      	add	r3, r1
 801093c:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3301      	adds	r3, #1
 8010942:	60fb      	str	r3, [r7, #12]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b02      	cmp	r3, #2
 8010948:	ddc3      	ble.n	80108d2 <gyroFiltering+0x4e>
        }
        accumulatedMeasurementCount++;
 801094a:	4b09      	ldr	r3, [pc, #36]	; (8010970 <gyroFiltering+0xec>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3301      	adds	r3, #1
 8010950:	4a07      	ldr	r2, [pc, #28]	; (8010970 <gyroFiltering+0xec>)
 8010952:	6013      	str	r3, [r2, #0]
    }

#if !defined(USE_GYRO_OVERFLOW_CHECK) && !defined(USE_YAW_SPIN_RECOVERY)
    UNUSED(currentTimeUs);
#endif
}
 8010954:	bf00      	nop
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	20000190 	.word	0x20000190
 8010960:	10000ff4 	.word	0x10000ff4
 8010964:	100012f4 	.word	0x100012f4
 8010968:	100012fc 	.word	0x100012fc
 801096c:	10001308 	.word	0x10001308
 8010970:	10001314 	.word	0x10001314

08010974 <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 8010974:	b480      	push	{r7}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 801097c:	4b24      	ldr	r3, [pc, #144]	; (8010a10 <gyroGetAccumulationAverage+0x9c>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d02e      	beq.n	80109e2 <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const uint32_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 8010984:	4b23      	ldr	r3, [pc, #140]	; (8010a14 <gyroGetAccumulationAverage+0xa0>)
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	4a21      	ldr	r2, [pc, #132]	; (8010a10 <gyroGetAccumulationAverage+0x9c>)
 801098a:	6812      	ldr	r2, [r2, #0]
 801098c:	fb02 f303 	mul.w	r3, r2, r3
 8010990:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010992:	2300      	movs	r3, #0
 8010994:	617b      	str	r3, [r7, #20]
 8010996:	e01c      	b.n	80109d2 <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 8010998:	4a1f      	ldr	r2, [pc, #124]	; (8010a18 <gyroGetAccumulationAverage+0xa4>)
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	4413      	add	r3, r2
 80109a0:	edd3 6a00 	vldr	s13, [r3]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	ee07 3a90 	vmov	s15, r3
 80109aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	4413      	add	r3, r2
 80109b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ba:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 80109be:	4a16      	ldr	r2, [pc, #88]	; (8010a18 <gyroGetAccumulationAverage+0xa4>)
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	4413      	add	r3, r2
 80109c6:	f04f 0200 	mov.w	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	3301      	adds	r3, #1
 80109d0:	617b      	str	r3, [r7, #20]
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	dddf      	ble.n	8010998 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 80109d8:	4b0d      	ldr	r3, [pc, #52]	; (8010a10 <gyroGetAccumulationAverage+0x9c>)
 80109da:	2200      	movs	r2, #0
 80109dc:	601a      	str	r2, [r3, #0]
        return true;
 80109de:	2301      	movs	r3, #1
 80109e0:	e010      	b.n	8010a04 <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80109e2:	2300      	movs	r3, #0
 80109e4:	613b      	str	r3, [r7, #16]
 80109e6:	e009      	b.n	80109fc <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	4413      	add	r3, r2
 80109f0:	f04f 0200 	mov.w	r2, #0
 80109f4:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	3301      	adds	r3, #1
 80109fa:	613b      	str	r3, [r7, #16]
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	ddf2      	ble.n	80109e8 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 8010a02:	2300      	movs	r3, #0
    }
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	371c      	adds	r7, #28
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr
 8010a10:	10001314 	.word	0x10001314
 8010a14:	10000ff4 	.word	0x10000ff4
 8010a18:	100012fc 	.word	0x100012fc

08010a1c <calculateNyquistAdjustedNotchHz>:
#define GYRO_BUF_SIZE 32

static gyroDetectionFlags_t gyroDetectionFlags = GYRO_NONE_MASK;

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	4603      	mov	r3, r0
 8010a24:	460a      	mov	r2, r1
 8010a26:	80fb      	strh	r3, [r7, #6]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8010a2c:	4b0c      	ldr	r3, [pc, #48]	; (8010a60 <calculateNyquistAdjustedNotchHz+0x44>)
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	4a0c      	ldr	r2, [pc, #48]	; (8010a64 <calculateNyquistAdjustedNotchHz+0x48>)
 8010a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a36:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8010a38:	88fb      	ldrh	r3, [r7, #6]
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d208      	bcs.n	8010a52 <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8010a40:	88bb      	ldrh	r3, [r7, #4]
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d902      	bls.n	8010a4e <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	80fb      	strh	r3, [r7, #6]
 8010a4c:	e001      	b.n	8010a52 <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8010a52:	88fb      	ldrh	r3, [r7, #6]
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3714      	adds	r7, #20
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr
 8010a60:	10000ff4 	.word	0x10000ff4
 8010a64:	0007a120 	.word	0x0007a120

08010a68 <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	460a      	mov	r2, r1
 8010a72:	80fb      	strh	r3, [r7, #6]
 8010a74:	4613      	mov	r3, r2
 8010a76:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 8010a78:	4b27      	ldr	r3, [pc, #156]	; (8010b18 <gyroInitFilterNotch1+0xb0>)
 8010a7a:	4a28      	ldr	r2, [pc, #160]	; (8010b1c <gyroInitFilterNotch1+0xb4>)
 8010a7c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8010a80:	88ba      	ldrh	r2, [r7, #4]
 8010a82:	88fb      	ldrh	r3, [r7, #6]
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff ffc8 	bl	8010a1c <calculateNyquistAdjustedNotchHz>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8010a90:	88fb      	ldrh	r3, [r7, #6]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d03c      	beq.n	8010b10 <gyroInitFilterNotch1+0xa8>
 8010a96:	88bb      	ldrh	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d039      	beq.n	8010b10 <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8010a9c:	4b1e      	ldr	r3, [pc, #120]	; (8010b18 <gyroInitFilterNotch1+0xb0>)
 8010a9e:	4a20      	ldr	r2, [pc, #128]	; (8010b20 <gyroInitFilterNotch1+0xb8>)
 8010aa0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8010aa4:	88fb      	ldrh	r3, [r7, #6]
 8010aa6:	ee07 3a90 	vmov	s15, r3
 8010aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aae:	88bb      	ldrh	r3, [r7, #4]
 8010ab0:	ee07 3a10 	vmov	s14, r3
 8010ab4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010ab8:	eef0 0a47 	vmov.f32	s1, s14
 8010abc:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac0:	f7f9 ffdd 	bl	800aa7e <filterGetNotchQ>
 8010ac4:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	e01d      	b.n	8010b0a <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010adc:	4a0e      	ldr	r2, [pc, #56]	; (8010b18 <gyroInitFilterNotch1+0xb0>)
 8010ade:	4413      	add	r3, r2
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	88fa      	ldrh	r2, [r7, #6]
 8010ae4:	ee07 2a90 	vmov	s15, r2
 8010ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aec:	4a0a      	ldr	r2, [pc, #40]	; (8010b18 <gyroInitFilterNotch1+0xb0>)
 8010aee:	6851      	ldr	r1, [r2, #4]
 8010af0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8010af4:	2201      	movs	r2, #1
 8010af6:	edd7 0a02 	vldr	s1, [r7, #8]
 8010afa:	eeb0 0a67 	vmov.f32	s0, s15
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7f9 fff8 	bl	800aaf4 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	3301      	adds	r3, #1
 8010b08:	60fb      	str	r3, [r7, #12]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	ddde      	ble.n	8010ace <gyroInitFilterNotch1+0x66>
        }
    }
}
 8010b10:	bf00      	nop
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	10000ff4 	.word	0x10000ff4
 8010b1c:	0800a829 	.word	0x0800a829
 8010b20:	0800adcf 	.word	0x0800adcf

08010b24 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	460a      	mov	r2, r1
 8010b2e:	80fb      	strh	r3, [r7, #6]
 8010b30:	4613      	mov	r3, r2
 8010b32:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 8010b34:	4b27      	ldr	r3, [pc, #156]	; (8010bd4 <gyroInitFilterNotch2+0xb0>)
 8010b36:	4a28      	ldr	r2, [pc, #160]	; (8010bd8 <gyroInitFilterNotch2+0xb4>)
 8010b38:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8010b3c:	88ba      	ldrh	r2, [r7, #4]
 8010b3e:	88fb      	ldrh	r3, [r7, #6]
 8010b40:	4611      	mov	r1, r2
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff ff6a 	bl	8010a1c <calculateNyquistAdjustedNotchHz>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d03b      	beq.n	8010bca <gyroInitFilterNotch2+0xa6>
 8010b52:	88bb      	ldrh	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d038      	beq.n	8010bca <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8010b58:	4b1e      	ldr	r3, [pc, #120]	; (8010bd4 <gyroInitFilterNotch2+0xb0>)
 8010b5a:	4a20      	ldr	r2, [pc, #128]	; (8010bdc <gyroInitFilterNotch2+0xb8>)
 8010b5c:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8010b60:	88fb      	ldrh	r3, [r7, #6]
 8010b62:	ee07 3a90 	vmov	s15, r3
 8010b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b6a:	88bb      	ldrh	r3, [r7, #4]
 8010b6c:	ee07 3a10 	vmov	s14, r3
 8010b70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010b74:	eef0 0a47 	vmov.f32	s1, s14
 8010b78:	eeb0 0a67 	vmov.f32	s0, s15
 8010b7c:	f7f9 ff7f 	bl	800aa7e <filterGetNotchQ>
 8010b80:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010b84:	2300      	movs	r3, #0
 8010b86:	60fb      	str	r3, [r7, #12]
 8010b88:	e01c      	b.n	8010bc4 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4413      	add	r3, r2
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010b98:	4a0e      	ldr	r2, [pc, #56]	; (8010bd4 <gyroInitFilterNotch2+0xb0>)
 8010b9a:	4413      	add	r3, r2
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	ee07 2a90 	vmov	s15, r2
 8010ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ba6:	4a0b      	ldr	r2, [pc, #44]	; (8010bd4 <gyroInitFilterNotch2+0xb0>)
 8010ba8:	6851      	ldr	r1, [r2, #4]
 8010baa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8010bae:	2201      	movs	r2, #1
 8010bb0:	edd7 0a02 	vldr	s1, [r7, #8]
 8010bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7f9 ff9b 	bl	800aaf4 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	dddf      	ble.n	8010b8a <gyroInitFilterNotch2+0x66>
        }
    }
}
 8010bca:	bf00      	nop
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	10000ff4 	.word	0x10000ff4
 8010bd8:	0800a829 	.word	0x0800a829
 8010bdc:	0800adcf 	.word	0x0800adcf

08010be0 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08e      	sub	sp, #56	; 0x38
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	603b      	str	r3, [r7, #0]
 8010bec:	4613      	mov	r3, r2
 8010bee:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d003      	beq.n	8010c02 <gyroInitLowpassFilterLpf+0x22>
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d005      	beq.n	8010c0c <gyroInitLowpassFilterLpf+0x2c>
 8010c00:	e009      	b.n	8010c16 <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 8010c02:	4b65      	ldr	r3, [pc, #404]	; (8010d98 <gyroInitLowpassFilterLpf+0x1b8>)
 8010c04:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 8010c06:	4b65      	ldr	r3, [pc, #404]	; (8010d9c <gyroInitLowpassFilterLpf+0x1bc>)
 8010c08:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8010c0a:	e006      	b.n	8010c1a <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8010c0c:	4b64      	ldr	r3, [pc, #400]	; (8010da0 <gyroInitLowpassFilterLpf+0x1c0>)
 8010c0e:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8010c10:	4b64      	ldr	r3, [pc, #400]	; (8010da4 <gyroInitLowpassFilterLpf+0x1c4>)
 8010c12:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8010c14:	e001      	b.n	8010c1a <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e0b9      	b.n	8010d8e <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8010c20:	4a61      	ldr	r2, [pc, #388]	; (8010da8 <gyroInitLowpassFilterLpf+0x1c8>)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c28:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	ee07 3a90 	vmov	s15, r3
 8010c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c34:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8010dac <gyroInitLowpassFilterLpf+0x1cc>
 8010c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c3c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8010c40:	88fb      	ldrh	r3, [r7, #6]
 8010c42:	ee07 3a90 	vmov	s15, r3
 8010c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c4a:	edd7 0a05 	vldr	s1, [r7, #20]
 8010c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8010c52:	f7f9 fdf9 	bl	800a848 <pt1FilterGain>
 8010c56:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8010c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5c:	4a54      	ldr	r2, [pc, #336]	; (8010db0 <gyroInitLowpassFilterLpf+0x1d0>)
 8010c5e:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8010c60:	88fb      	ldrh	r3, [r7, #6]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f000 808e 	beq.w	8010d84 <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b03      	cmp	r3, #3
 8010c6c:	f200 808d 	bhi.w	8010d8a <gyroInitLowpassFilterLpf+0x1aa>
 8010c70:	a201      	add	r2, pc, #4	; (adr r2, 8010c78 <gyroInitLowpassFilterLpf+0x98>)
 8010c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c76:	bf00      	nop
 8010c78:	08010c89 	.word	0x08010c89
 8010c7c:	08010cc3 	.word	0x08010cc3
 8010c80:	08010d11 	.word	0x08010d11
 8010c84:	08010d4b 	.word	0x08010d4b
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 8010c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8a:	4a4a      	ldr	r2, [pc, #296]	; (8010db4 <gyroInitLowpassFilterLpf+0x1d4>)
 8010c8c:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010c8e:	2300      	movs	r3, #0
 8010c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c92:	e00f      	b.n	8010cb4 <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 8010c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c96:	4613      	mov	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4413      	add	r3, r2
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	4413      	add	r3, r2
 8010ca4:	ed97 0a04 	vldr	s0, [r7, #16]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f9 fdf5 	bl	800a898 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	ddec      	ble.n	8010c94 <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010cc0:	e063      	b.n	8010d8a <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 8010cc2:	88fb      	ldrh	r3, [r7, #6]
 8010cc4:	69ba      	ldr	r2, [r7, #24]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d35e      	bcc.n	8010d88 <gyroInitLowpassFilterLpf+0x1a8>
#ifdef USE_DYN_LPF
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApplyDF1;
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	4a3a      	ldr	r2, [pc, #232]	; (8010db8 <gyroInitLowpassFilterLpf+0x1d8>)
 8010cce:	601a      	str	r2, [r3, #0]
#else
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
#endif
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd4:	e015      	b.n	8010d02 <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 8010cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd8:	4613      	mov	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4413      	add	r3, r2
 8010cde:	00db      	lsls	r3, r3, #3
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	4413      	add	r3, r2
 8010ce6:	88fa      	ldrh	r2, [r7, #6]
 8010ce8:	ee07 2a90 	vmov	s15, r2
 8010cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cf0:	6839      	ldr	r1, [r7, #0]
 8010cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7f9 fee4 	bl	800aac4 <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfe:	3301      	adds	r3, #1
 8010d00:	627b      	str	r3, [r7, #36]	; 0x24
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	2b02      	cmp	r3, #2
 8010d06:	dde6      	ble.n	8010cd6 <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8010d0e:	e03b      	b.n	8010d88 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8010d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d12:	4a2a      	ldr	r2, [pc, #168]	; (8010dbc <gyroInitLowpassFilterLpf+0x1dc>)
 8010d14:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010d16:	2300      	movs	r3, #0
 8010d18:	623b      	str	r3, [r7, #32]
 8010d1a:	e00f      	b.n	8010d3c <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8010d1c:	6a3a      	ldr	r2, [r7, #32]
 8010d1e:	4613      	mov	r3, r2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	4413      	add	r3, r2
 8010d24:	00db      	lsls	r3, r3, #3
 8010d26:	461a      	mov	r2, r3
 8010d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2a:	4413      	add	r3, r2
 8010d2c:	ed97 0a04 	vldr	s0, [r7, #16]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7f9 fde9 	bl	800a908 <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010d36:	6a3b      	ldr	r3, [r7, #32]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	623b      	str	r3, [r7, #32]
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	2b02      	cmp	r3, #2
 8010d40:	ddec      	ble.n	8010d1c <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 8010d42:	2301      	movs	r3, #1
 8010d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010d48:	e01f      	b.n	8010d8a <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	4a1c      	ldr	r2, [pc, #112]	; (8010dc0 <gyroInitLowpassFilterLpf+0x1e0>)
 8010d4e:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010d50:	2300      	movs	r3, #0
 8010d52:	61fb      	str	r3, [r7, #28]
 8010d54:	e00f      	b.n	8010d76 <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 8010d56:	69fa      	ldr	r2, [r7, #28]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	4413      	add	r3, r2
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	461a      	mov	r2, r3
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	4413      	add	r3, r2
 8010d66:	ed97 0a04 	vldr	s0, [r7, #16]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7f9 fe1d 	bl	800a9aa <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	3301      	adds	r3, #1
 8010d74:	61fb      	str	r3, [r7, #28]
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	ddec      	ble.n	8010d56 <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8010d82:	e002      	b.n	8010d8a <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 8010d84:	bf00      	nop
 8010d86:	e000      	b.n	8010d8a <gyroInitLowpassFilterLpf+0x1aa>
            break;
 8010d88:	bf00      	nop
    return ret;
 8010d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3738      	adds	r7, #56	; 0x38
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	100010f4 	.word	0x100010f4
 8010d9c:	100010f8 	.word	0x100010f8
 8010da0:	10001170 	.word	0x10001170
 8010da4:	10001174 	.word	0x10001174
 8010da8:	0007a120 	.word	0x0007a120
 8010dac:	358637bd 	.word	0x358637bd
 8010db0:	0800a829 	.word	0x0800a829
 8010db4:	0800a8bf 	.word	0x0800a8bf
 8010db8:	0800ad31 	.word	0x0800ad31
 8010dbc:	0800a937 	.word	0x0800a937
 8010dc0:	0800a9e1 	.word	0x0800a9e1

08010dc4 <dynLpfFilterInit>:

#ifdef USE_DYN_LPF
static void dynLpfFilterInit()
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	af00      	add	r7, sp, #0
    if (p_gyro_pg->gyro_lpf1_dyn_min_hz > 0) {
 8010dc8:	4b25      	ldr	r3, [pc, #148]	; (8010e60 <dynLpfFilterInit+0x9c>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	8b5b      	ldrh	r3, [r3, #26]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d029      	beq.n	8010e26 <dynLpfFilterInit+0x62>
        switch (p_gyro_pg->gyro_lpf1_type) {
 8010dd2:	4b23      	ldr	r3, [pc, #140]	; (8010e60 <dynLpfFilterInit+0x9c>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	7cdb      	ldrb	r3, [r3, #19]
 8010dd8:	2b03      	cmp	r3, #3
 8010dda:	d81f      	bhi.n	8010e1c <dynLpfFilterInit+0x58>
 8010ddc:	a201      	add	r2, pc, #4	; (adr r2, 8010de4 <dynLpfFilterInit+0x20>)
 8010dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de2:	bf00      	nop
 8010de4:	08010df5 	.word	0x08010df5
 8010de8:	08010dff 	.word	0x08010dff
 8010dec:	08010e09 	.word	0x08010e09
 8010df0:	08010e13 	.word	0x08010e13
        case FILTER_PT1:
            gyro.dynLpfFilter = DYN_LPF_PT1;
 8010df4:	4b1b      	ldr	r3, [pc, #108]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010df6:	2201      	movs	r2, #1
 8010df8:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
            break;
 8010dfc:	e017      	b.n	8010e2e <dynLpfFilterInit+0x6a>
        case FILTER_BIQUAD:
            gyro.dynLpfFilter = DYN_LPF_BIQUAD;
 8010dfe:	4b19      	ldr	r3, [pc, #100]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e00:	2202      	movs	r2, #2
 8010e02:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
            break;
 8010e06:	e012      	b.n	8010e2e <dynLpfFilterInit+0x6a>
        case FILTER_PT2:
            gyro.dynLpfFilter = DYN_LPF_PT2;
 8010e08:	4b16      	ldr	r3, [pc, #88]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e0a:	2203      	movs	r2, #3
 8010e0c:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
            break;
 8010e10:	e00d      	b.n	8010e2e <dynLpfFilterInit+0x6a>
        case FILTER_PT3:
            gyro.dynLpfFilter = DYN_LPF_PT3;
 8010e12:	4b14      	ldr	r3, [pc, #80]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e14:	2204      	movs	r2, #4
 8010e16:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
            break;
 8010e1a:	e008      	b.n	8010e2e <dynLpfFilterInit+0x6a>
        default:
            gyro.dynLpfFilter = DYN_LPF_NONE;
 8010e1c:	4b11      	ldr	r3, [pc, #68]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
            break;
 8010e24:	e003      	b.n	8010e2e <dynLpfFilterInit+0x6a>
        }
    } else {
        gyro.dynLpfFilter = DYN_LPF_NONE;
 8010e26:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
    }
    gyro.dynLpfMin = p_gyro_pg->gyro_lpf1_dyn_min_hz;
 8010e2e:	4b0c      	ldr	r3, [pc, #48]	; (8010e60 <dynLpfFilterInit+0x9c>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	8b5a      	ldrh	r2, [r3, #26]
 8010e34:	4b0b      	ldr	r3, [pc, #44]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e36:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    gyro.dynLpfMax = p_gyro_pg->gyro_lpf1_dyn_max_hz;
 8010e3a:	4b09      	ldr	r3, [pc, #36]	; (8010e60 <dynLpfFilterInit+0x9c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	8b9a      	ldrh	r2, [r3, #28]
 8010e40:	4b08      	ldr	r3, [pc, #32]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e42:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
    gyro.dynLpfCurveExpo = p_gyro_pg->gyro_lpf1_dyn_expo;
 8010e46:	4b06      	ldr	r3, [pc, #24]	; (8010e60 <dynLpfFilterInit+0x9c>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010e4e:	4b05      	ldr	r3, [pc, #20]	; (8010e64 <dynLpfFilterInit+0xa0>)
 8010e50:	f883 22fc 	strb.w	r2, [r3, #764]	; 0x2fc
}
 8010e54:	bf00      	nop
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	20000190 	.word	0x20000190
 8010e64:	10000ff4 	.word	0x10000ff4

08010e68 <gyroInitFilters>:
#endif

void gyroInitFilters(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
    uint16_t gyro_lpf1_init_hz = p_gyro_pg->gyro_lpf1_static_hz;
 8010e6e:	4b25      	ldr	r3, [pc, #148]	; (8010f04 <gyroInitFilters+0x9c>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	889b      	ldrh	r3, [r3, #4]
 8010e74:	80fb      	strh	r3, [r7, #6]

#ifdef USE_DYN_LPF
    if (p_gyro_pg->gyro_lpf1_dyn_min_hz > 0) {
 8010e76:	4b23      	ldr	r3, [pc, #140]	; (8010f04 <gyroInitFilters+0x9c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	8b5b      	ldrh	r3, [r3, #26]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d003      	beq.n	8010e88 <gyroInitFilters+0x20>
        gyro_lpf1_init_hz = p_gyro_pg->gyro_lpf1_dyn_min_hz;
 8010e80:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <gyroInitFilters+0x9c>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	8b5b      	ldrh	r3, [r3, #26]
 8010e86:	80fb      	strh	r3, [r7, #6]
    }
#endif

    gyroInitLowpassFilterLpf(
      FILTER_LPF1,
      p_gyro_pg->gyro_lpf1_type,
 8010e88:	4b1e      	ldr	r3, [pc, #120]	; (8010f04 <gyroInitFilters+0x9c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	7cdb      	ldrb	r3, [r3, #19]
    gyroInitLowpassFilterLpf(
 8010e8e:	4619      	mov	r1, r3
 8010e90:	4b1d      	ldr	r3, [pc, #116]	; (8010f08 <gyroInitFilters+0xa0>)
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	88fa      	ldrh	r2, [r7, #6]
 8010e96:	2000      	movs	r0, #0
 8010e98:	f7ff fea2 	bl	8010be0 <gyroInitLowpassFilterLpf>
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
      FILTER_LPF2,
      p_gyro_pg->gyro_lpf2_type,
 8010e9c:	4b19      	ldr	r3, [pc, #100]	; (8010f04 <gyroInitFilters+0x9c>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	7d1b      	ldrb	r3, [r3, #20]
    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8010ea2:	4619      	mov	r1, r3
      p_gyro_pg->gyro_lpf2_static_hz,
 8010ea4:	4b17      	ldr	r3, [pc, #92]	; (8010f04 <gyroInitFilters+0x9c>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8010ea8:	88da      	ldrh	r2, [r3, #6]
 8010eaa:	4b17      	ldr	r3, [pc, #92]	; (8010f08 <gyroInitFilters+0xa0>)
 8010eac:	689b      	ldr	r3, [r3, #8]
 8010eae:	2001      	movs	r0, #1
 8010eb0:	f7ff fe96 	bl	8010be0 <gyroInitLowpassFilterLpf>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4b13      	ldr	r3, [pc, #76]	; (8010f08 <gyroInitFilters+0xa0>)
 8010eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(p_gyro_pg->gyro_soft_notch_hz_1, p_gyro_pg->gyro_soft_notch_cutoff_1);
 8010ebe:	4b11      	ldr	r3, [pc, #68]	; (8010f04 <gyroInitFilters+0x9c>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	891a      	ldrh	r2, [r3, #8]
 8010ec4:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <gyroInitFilters+0x9c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	895b      	ldrh	r3, [r3, #10]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	4610      	mov	r0, r2
 8010ece:	f7ff fdcb 	bl	8010a68 <gyroInitFilterNotch1>
    gyroInitFilterNotch2(p_gyro_pg->gyro_soft_notch_hz_2, p_gyro_pg->gyro_soft_notch_cutoff_2);
 8010ed2:	4b0c      	ldr	r3, [pc, #48]	; (8010f04 <gyroInitFilters+0x9c>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	899a      	ldrh	r2, [r3, #12]
 8010ed8:	4b0a      	ldr	r3, [pc, #40]	; (8010f04 <gyroInitFilters+0x9c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	89db      	ldrh	r3, [r3, #14]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7ff fe1f 	bl	8010b24 <gyroInitFilterNotch2>
#ifdef USE_DYN_LPF
    dynLpfFilterInit();
 8010ee6:	f7ff ff6d 	bl	8010dc4 <dynLpfFilterInit>
#endif
#ifdef USE_DYN_NOTCH_FILTER
    dynNotchInit(p_notch_pg, gyro.targetLooptime);
 8010eea:	4b08      	ldr	r3, [pc, #32]	; (8010f0c <gyroInitFilters+0xa4>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a06      	ldr	r2, [pc, #24]	; (8010f08 <gyroInitFilters+0xa0>)
 8010ef0:	6852      	ldr	r2, [r2, #4]
 8010ef2:	4611      	mov	r1, r2
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f8 fdb7 	bl	8009a68 <dynNotchInit>
#endif
}
 8010efa:	bf00      	nop
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	20000190 	.word	0x20000190
 8010f08:	10000ff4 	.word	0x10000ff4
 8010f0c:	20000198 	.word	0x20000198

08010f10 <gyroInit>:
//     gyroPreInitSensor(gyroDeviceConfig(1));
// #endif
// }

bool gyroInit(void)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
#ifdef USE_GYRO_OVERFLOW_CHECK
    if (p_gyro_pg->checkOverflow == GYRO_OVERFLOW_CHECK_YAW) {
 8010f16:	4b2d      	ldr	r3, [pc, #180]	; (8010fcc <gyroInit+0xbc>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	7c9b      	ldrb	r3, [r3, #18]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d104      	bne.n	8010f2a <gyroInit+0x1a>
        gyro.overflowAxisMask = GYRO_OVERFLOW_Z;
 8010f20:	4b2b      	ldr	r3, [pc, #172]	; (8010fd0 <gyroInit+0xc0>)
 8010f22:	2204      	movs	r2, #4
 8010f24:	f883 22fd 	strb.w	r2, [r3, #765]	; 0x2fd
 8010f28:	e00d      	b.n	8010f46 <gyroInit+0x36>
    } else if (p_gyro_pg->checkOverflow == GYRO_OVERFLOW_CHECK_ALL_AXES) {
 8010f2a:	4b28      	ldr	r3, [pc, #160]	; (8010fcc <gyroInit+0xbc>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	7c9b      	ldrb	r3, [r3, #18]
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d104      	bne.n	8010f3e <gyroInit+0x2e>
        gyro.overflowAxisMask = GYRO_OVERFLOW_X | GYRO_OVERFLOW_Y | GYRO_OVERFLOW_Z;
 8010f34:	4b26      	ldr	r3, [pc, #152]	; (8010fd0 <gyroInit+0xc0>)
 8010f36:	2207      	movs	r2, #7
 8010f38:	f883 22fd 	strb.w	r2, [r3, #765]	; 0x2fd
 8010f3c:	e003      	b.n	8010f46 <gyroInit+0x36>
    } else {
        gyro.overflowAxisMask = 0;
 8010f3e:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <gyroInit+0xc0>)
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 22fd 	strb.w	r2, [r3, #765]	; 0x2fd
    }
#endif

    gyro.gyroDebugMode = 0;//DEBUG_NONE;
 8010f46:	4b22      	ldr	r3, [pc, #136]	; (8010fd0 <gyroInit+0xc0>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
    gyro.useDualGyroDebugging = false;
 8010f4e:	4b20      	ldr	r3, [pc, #128]	; (8010fd0 <gyroInit+0xc0>)
 8010f50:	2200      	movs	r2, #0
 8010f52:	f883 22f5 	strb.w	r2, [r3, #757]	; 0x2f5
    gyro.gyroHasOverflowProtection = true;
 8010f56:	4b1e      	ldr	r3, [pc, #120]	; (8010fd0 <gyroInit+0xc0>)
 8010f58:	2201      	movs	r2, #1
 8010f5a:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

    gyroDetectionFlags = GYRO_NONE_MASK;
 8010f5e:	4b1d      	ldr	r3, [pc, #116]	; (8010fd4 <gyroInit+0xc4>)
 8010f60:	2200      	movs	r2, #0
 8010f62:	701a      	strb	r2, [r3, #0]
    uint8_t gyrosToScan = p_gyro_pg->gyrosDetected;
 8010f64:	4b19      	ldr	r3, [pc, #100]	; (8010fcc <gyroInit+0xbc>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	7fdb      	ldrb	r3, [r3, #31]
 8010f6a:	71fb      	strb	r3, [r7, #7]

    gyro.gyroToUse = p_gyro_pg->gyro_to_use;
 8010f6c:	4b17      	ldr	r3, [pc, #92]	; (8010fcc <gyroInit+0xbc>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	78da      	ldrb	r2, [r3, #3]
 8010f72:	4b17      	ldr	r3, [pc, #92]	; (8010fd0 <gyroInit+0xc0>)
 8010f74:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gyro.gyroDebugAxis = p_gyro_pg->gyro_filter_debug_axis;
 8010f78:	4b14      	ldr	r3, [pc, #80]	; (8010fcc <gyroInit+0xbc>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	7f9a      	ldrb	r2, [r3, #30]
 8010f7e:	4b14      	ldr	r3, [pc, #80]	; (8010fd0 <gyroInit+0xc0>)
 8010f80:	f883 22f6 	strb.w	r2, [r3, #758]	; 0x2f6

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = GYRO_SCALE_2000DPS;
 8010f84:	4b12      	ldr	r3, [pc, #72]	; (8010fd0 <gyroInit+0xc0>)
 8010f86:	4a14      	ldr	r2, [pc, #80]	; (8010fd8 <gyroInit+0xc8>)
 8010f88:	60da      	str	r2, [r3, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 8010f8a:	4b11      	ldr	r3, [pc, #68]	; (8010fd0 <gyroInit+0xc0>)
 8010f8c:	4a13      	ldr	r2, [pc, #76]	; (8010fdc <gyroInit+0xcc>)
 8010f8e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        gyro.scale = gyro.gyroSensor2.gyroDev.scale;
        gyro.rawSensorDev = &gyro.gyroSensor2.gyroDev;
    }
#endif

    if (gyro.rawSensorDev) {
 8010f92:	4b0f      	ldr	r3, [pc, #60]	; (8010fd0 <gyroInit+0xc0>)
 8010f94:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d009      	beq.n	8010fb0 <gyroInit+0xa0>
        gyro.sampleRateHz = 3200;
 8010f9c:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <gyroInit+0xc0>)
 8010f9e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8010fa2:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 800;
 8010fa4:	4b0a      	ldr	r3, [pc, #40]	; (8010fd0 <gyroInit+0xc0>)
 8010fa6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010faa:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 8010fae:	e006      	b.n	8010fbe <gyroInit+0xae>
    } else {
        gyro.sampleRateHz = 0;
 8010fb0:	4b07      	ldr	r3, [pc, #28]	; (8010fd0 <gyroInit+0xc0>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8010fb6:	4b06      	ldr	r3, [pc, #24]	; (8010fd0 <gyroInit+0xc0>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }

    return true;
 8010fbe:	2301      	movs	r3, #1
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	20000190 	.word	0x20000190
 8010fd0:	10000ff4 	.word	0x10000ff4
 8010fd4:	20003eba 	.word	0x20003eba
 8010fd8:	3d7a0000 	.word	0x3d7a0000
 8010fdc:	10001030 	.word	0x10001030

08010fe0 <gyroSetTargetLooptime>:
{
    return gyroDetectionFlags;
}

void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8010fe0:	b5b0      	push	{r4, r5, r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8010fea:	4a27      	ldr	r2, [pc, #156]	; (8011088 <gyroSetTargetLooptime+0xa8>)
 8010fec:	79fb      	ldrb	r3, [r7, #7]
 8010fee:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8010ff0:	4b26      	ldr	r3, [pc, #152]	; (801108c <gyroSetTargetLooptime+0xac>)
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d037      	beq.n	8011068 <gyroSetTargetLooptime+0x88>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8010ff8:	4b24      	ldr	r3, [pc, #144]	; (801108c <gyroSetTargetLooptime+0xac>)
 8010ffa:	881b      	ldrh	r3, [r3, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f7 f9d9 	bl	80083b4 <__aeabi_i2d>
 8011002:	4602      	mov	r2, r0
 8011004:	460b      	mov	r3, r1
 8011006:	a11e      	add	r1, pc, #120	; (adr r1, 8011080 <gyroSetTargetLooptime+0xa0>)
 8011008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801100c:	f7f7 fb66 	bl	80086dc <__aeabi_ddiv>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	4610      	mov	r0, r2
 8011016:	4619      	mov	r1, r3
 8011018:	f7f7 fce6 	bl	80089e8 <__aeabi_d2uiz>
 801101c:	4603      	mov	r3, r0
 801101e:	4a1b      	ldr	r2, [pc, #108]	; (801108c <gyroSetTargetLooptime+0xac>)
 8011020:	6093      	str	r3, [r2, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8011022:	4b19      	ldr	r3, [pc, #100]	; (8011088 <gyroSetTargetLooptime+0xa8>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	4618      	mov	r0, r3
 8011028:	f7f7 f9c4 	bl	80083b4 <__aeabi_i2d>
 801102c:	a314      	add	r3, pc, #80	; (adr r3, 8011080 <gyroSetTargetLooptime+0xa0>)
 801102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011032:	f7f7 fa29 	bl	8008488 <__aeabi_dmul>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4614      	mov	r4, r2
 801103c:	461d      	mov	r5, r3
 801103e:	4b13      	ldr	r3, [pc, #76]	; (801108c <gyroSetTargetLooptime+0xac>)
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	4618      	mov	r0, r3
 8011044:	f7f7 f9b6 	bl	80083b4 <__aeabi_i2d>
 8011048:	4602      	mov	r2, r0
 801104a:	460b      	mov	r3, r1
 801104c:	4620      	mov	r0, r4
 801104e:	4629      	mov	r1, r5
 8011050:	f7f7 fb44 	bl	80086dc <__aeabi_ddiv>
 8011054:	4602      	mov	r2, r0
 8011056:	460b      	mov	r3, r1
 8011058:	4610      	mov	r0, r2
 801105a:	4619      	mov	r1, r3
 801105c:	f7f7 fcc4 	bl	80089e8 <__aeabi_d2uiz>
 8011060:	4603      	mov	r3, r0
 8011062:	4a0a      	ldr	r2, [pc, #40]	; (801108c <gyroSetTargetLooptime+0xac>)
 8011064:	6053      	str	r3, [r2, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8011066:	e005      	b.n	8011074 <gyroSetTargetLooptime+0x94>
        gyro.sampleLooptime = 0;
 8011068:	4b08      	ldr	r3, [pc, #32]	; (801108c <gyroSetTargetLooptime+0xac>)
 801106a:	2200      	movs	r2, #0
 801106c:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 801106e:	4b07      	ldr	r3, [pc, #28]	; (801108c <gyroSetTargetLooptime+0xac>)
 8011070:	2200      	movs	r2, #0
 8011072:	605a      	str	r2, [r3, #4]
}
 8011074:	bf00      	nop
 8011076:	3708      	adds	r7, #8
 8011078:	46bd      	mov	sp, r7
 801107a:	bdb0      	pop	{r4, r5, r7, pc}
 801107c:	f3af 8000 	nop.w
 8011080:	00000000 	.word	0x00000000
 8011084:	412e8480 	.word	0x412e8480
 8011088:	10000000 	.word	0x10000000
 801108c:	10000ff4 	.word	0x10000ff4

08011090 <gyroActiveDev>:


gyroDev_t *gyroActiveDev(void)
{
 8011090:	b480      	push	{r7}
 8011092:	af00      	add	r7, sp, #0
    return &ACTIVE_GYRO->gyroDev;
 8011094:	4b02      	ldr	r3, [pc, #8]	; (80110a0 <gyroActiveDev+0x10>)
}
 8011096:	4618      	mov	r0, r3
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr
 80110a0:	10001030 	.word	0x10001030

080110a4 <crc8_calc>:
    }
    sbufWriteU16(dst, crc);
}

uint8_t crc8_calc(uint8_t crc, unsigned char a, uint8_t poly)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	71fb      	strb	r3, [r7, #7]
 80110ae:	460b      	mov	r3, r1
 80110b0:	71bb      	strb	r3, [r7, #6]
 80110b2:	4613      	mov	r3, r2
 80110b4:	717b      	strb	r3, [r7, #5]
    crc ^= a;
 80110b6:	79fa      	ldrb	r2, [r7, #7]
 80110b8:	79bb      	ldrb	r3, [r7, #6]
 80110ba:	4053      	eors	r3, r2
 80110bc:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii) {
 80110be:	2300      	movs	r3, #0
 80110c0:	60fb      	str	r3, [r7, #12]
 80110c2:	e012      	b.n	80110ea <crc8_calc+0x46>
        if (crc & 0x80) {
 80110c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	da08      	bge.n	80110de <crc8_calc+0x3a>
            crc = (crc << 1) ^ poly;
 80110cc:	79fb      	ldrb	r3, [r7, #7]
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	b25a      	sxtb	r2, r3
 80110d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80110d6:	4053      	eors	r3, r2
 80110d8:	b25b      	sxtb	r3, r3
 80110da:	71fb      	strb	r3, [r7, #7]
 80110dc:	e002      	b.n	80110e4 <crc8_calc+0x40>
        } else {
            crc = crc << 1;
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii) {
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	3301      	adds	r3, #1
 80110e8:	60fb      	str	r3, [r7, #12]
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2b07      	cmp	r3, #7
 80110ee:	dde9      	ble.n	80110c4 <crc8_calc+0x20>
        }
    }
    return crc;
 80110f0:	79fb      	ldrb	r3, [r7, #7]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3714      	adds	r7, #20
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr

080110fe <bmi270EnableSPI>:
#endif

// Toggle the CS to switch the device into SPI mode.
// Device switches initializes as I2C and switches to SPI on a low to high CS transition
static void bmi270EnableSPI(uint8_t ch)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b082      	sub	sp, #8
 8011102:	af00      	add	r7, sp, #0
 8011104:	4603      	mov	r3, r0
 8011106:	71fb      	strb	r3, [r7, #7]
    gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8011108:	2100      	movs	r1, #0
 801110a:	2000      	movs	r0, #0
 801110c:	f002 f982 	bl	8013414 <gpioPinWrite>
    delay(1);
 8011110:	2001      	movs	r0, #1
 8011112:	f7f8 f87d 	bl	8009210 <delay>
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8011116:	2101      	movs	r1, #1
 8011118:	2000      	movs	r0, #0
 801111a:	f002 f97b 	bl	8013414 <gpioPinWrite>
    delay(10);
 801111e:	200a      	movs	r0, #10
 8011120:	f7f8 f876 	bl	8009210 <delay>
}
 8011124:	bf00      	nop
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <bmi270UploadConfig>:

static void bmi270UploadConfig(uint8_t ch)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	71fb      	strb	r3, [r7, #7]
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_PWR_CONF, 0, 1);
 8011136:	2301      	movs	r3, #1
 8011138:	2200      	movs	r2, #0
 801113a:	217c      	movs	r1, #124	; 0x7c
 801113c:	2000      	movs	r0, #0
 801113e:	f003 fd4d 	bl	8014bdc <SPI_RegisterWrite>
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_INIT_CTRL, 0, 1);
 8011142:	2301      	movs	r3, #1
 8011144:	2200      	movs	r2, #0
 8011146:	2159      	movs	r1, #89	; 0x59
 8011148:	2000      	movs	r0, #0
 801114a:	f003 fd47 	bl	8014bdc <SPI_RegisterWrite>

    // Transfer the config file
    SPI_ByteWrite(_DEF_SPI1, BMI270_REG_INIT_DATA, (uint8_t *)bmi270_maximum_fifo_config_file, sizeof(bmi270_maximum_fifo_config_file));
 801114e:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8011152:	4a09      	ldr	r2, [pc, #36]	; (8011178 <bmi270UploadConfig+0x4c>)
 8011154:	215e      	movs	r1, #94	; 0x5e
 8011156:	2000      	movs	r0, #0
 8011158:	f003 fd0e 	bl	8014b78 <SPI_ByteWrite>

    delay(10);
 801115c:	200a      	movs	r0, #10
 801115e:	f7f8 f857 	bl	8009210 <delay>
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_INIT_CTRL, 1, 1);
 8011162:	2301      	movs	r3, #1
 8011164:	2201      	movs	r2, #1
 8011166:	2159      	movs	r1, #89	; 0x59
 8011168:	2000      	movs	r0, #0
 801116a:	f003 fd37 	bl	8014bdc <SPI_RegisterWrite>
}
 801116e:	bf00      	nop
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	0802c990 	.word	0x0802c990

0801117c <bmi270Config>:


static void bmi270Config(void)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
    // If running in hardware_lpf experimental mode then switch to FIFO-based,
    // 6.4KHz sampling, unfiltered data vs. the default 3.2KHz with hardware filtering
#ifdef USE_GYRO_DLPF_EXPERIMENTAL
    const bool fifoMode = (gyro->hardware_lpf == GYRO_HARDWARE_LPF_EXPERIMENTAL);
#else
    const bool fifoMode = false;
 8011182:	2300      	movs	r3, #0
 8011184:	71fb      	strb	r3, [r7, #7]
#endif

    // Perform a soft reset to set all configuration to default
    // Delay 100ms before continuing configuration
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_CMD, BMI270_VAL_CMD_SOFTRESET, 100);
 8011186:	2364      	movs	r3, #100	; 0x64
 8011188:	22b6      	movs	r2, #182	; 0xb6
 801118a:	217e      	movs	r1, #126	; 0x7e
 801118c:	2000      	movs	r0, #0
 801118e:	f003 fd25 	bl	8014bdc <SPI_RegisterWrite>
    // Toggle the chip into SPI mode
    bmi270EnableSPI(0);
 8011192:	2000      	movs	r0, #0
 8011194:	f7ff ffb3 	bl	80110fe <bmi270EnableSPI>

    bmi270UploadConfig(_DEF_SPI1);
 8011198:	2000      	movs	r0, #0
 801119a:	f7ff ffc7 	bl	801112c <bmi270UploadConfig>

    // Configure the FIFO
    if (fifoMode) {
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01d      	beq.n	80111e0 <bmi270Config+0x64>
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_FIFO_CONFIG_0, BMI270_VAL_FIFO_CONFIG_0, 1);
 80111a4:	2301      	movs	r3, #1
 80111a6:	2200      	movs	r2, #0
 80111a8:	2148      	movs	r1, #72	; 0x48
 80111aa:	2000      	movs	r0, #0
 80111ac:	f003 fd16 	bl	8014bdc <SPI_RegisterWrite>
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_FIFO_CONFIG_1, BMI270_VAL_FIFO_CONFIG_1, 1);
 80111b0:	2301      	movs	r3, #1
 80111b2:	2280      	movs	r2, #128	; 0x80
 80111b4:	2149      	movs	r1, #73	; 0x49
 80111b6:	2000      	movs	r0, #0
 80111b8:	f003 fd10 	bl	8014bdc <SPI_RegisterWrite>
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_FIFO_DOWNS, BMI270_VAL_FIFO_DOWNS, 1);
 80111bc:	2301      	movs	r3, #1
 80111be:	2200      	movs	r2, #0
 80111c0:	2145      	movs	r1, #69	; 0x45
 80111c2:	2000      	movs	r0, #0
 80111c4:	f003 fd0a 	bl	8014bdc <SPI_RegisterWrite>
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_FIFO_WTM_0, BMI270_VAL_FIFO_WTM_0, 1);
 80111c8:	2301      	movs	r3, #1
 80111ca:	2206      	movs	r2, #6
 80111cc:	2146      	movs	r1, #70	; 0x46
 80111ce:	2000      	movs	r0, #0
 80111d0:	f003 fd04 	bl	8014bdc <SPI_RegisterWrite>
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_FIFO_WTM_1, BMI270_VAL_FIFO_WTM_1, 1);
 80111d4:	2301      	movs	r3, #1
 80111d6:	2200      	movs	r2, #0
 80111d8:	2147      	movs	r1, #71	; 0x47
 80111da:	2000      	movs	r0, #0
 80111dc:	f003 fcfe 	bl	8014bdc <SPI_RegisterWrite>
    }

    // Configure the accelerometer
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_ACC_CONF, (BMI270_VAL_ACC_CONF_HP << 7) | (BMI270_VAL_ACC_CONF_BWP << 4) | BMI270_VAL_ACC_CONF_ODR800, 1);
 80111e0:	2301      	movs	r3, #1
 80111e2:	22ab      	movs	r2, #171	; 0xab
 80111e4:	2140      	movs	r1, #64	; 0x40
 80111e6:	2000      	movs	r0, #0
 80111e8:	f003 fcf8 	bl	8014bdc <SPI_RegisterWrite>

    // Configure the accelerometer full-scale range
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_ACC_RANGE, BMI270_VAL_ACC_RANGE_16G, 1);
 80111ec:	2301      	movs	r3, #1
 80111ee:	2203      	movs	r2, #3
 80111f0:	2141      	movs	r1, #65	; 0x41
 80111f2:	2000      	movs	r0, #0
 80111f4:	f003 fcf2 	bl	8014bdc <SPI_RegisterWrite>

    // Configure the gyro
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_GYRO_CONF, (BMI270_VAL_GYRO_CONF_FILTER_PERF << 7) | (BMI270_VAL_GYRO_CONF_NOISE_PERF << 6) | (BMI270_VAL_GYRO_CONF_BWP_OSR4 << 4) | BMI270_VAL_GYRO_CONF_ODR3200, 1);
 80111f8:	2301      	movs	r3, #1
 80111fa:	22cd      	movs	r2, #205	; 0xcd
 80111fc:	2142      	movs	r1, #66	; 0x42
 80111fe:	2000      	movs	r0, #0
 8011200:	f003 fcec 	bl	8014bdc <SPI_RegisterWrite>

    // Configure the gyro full-range scale
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_GYRO_RANGE, BMI270_VAL_GYRO_RANGE_2000DPS, 1);
 8011204:	2301      	movs	r3, #1
 8011206:	2208      	movs	r2, #8
 8011208:	2143      	movs	r1, #67	; 0x43
 801120a:	2000      	movs	r0, #0
 801120c:	f003 fce6 	bl	8014bdc <SPI_RegisterWrite>

    // Configure the gyro data ready interrupt
    if (fifoMode) {
 8011210:	79fb      	ldrb	r3, [r7, #7]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d006      	beq.n	8011224 <bmi270Config+0xa8>
        // Interrupt driven by FIFO watermark level
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_INT_MAP_DATA, BMI270_VAL_INT_MAP_FIFO_WM_INT1, 1);
 8011216:	2301      	movs	r3, #1
 8011218:	2202      	movs	r2, #2
 801121a:	2158      	movs	r1, #88	; 0x58
 801121c:	2000      	movs	r0, #0
 801121e:	f003 fcdd 	bl	8014bdc <SPI_RegisterWrite>
 8011222:	e005      	b.n	8011230 <bmi270Config+0xb4>
    } else {
        // Interrupt driven by data ready
        SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_INT_MAP_DATA, BMI270_VAL_INT_MAP_DATA_DRDY_INT1, 1);
 8011224:	2301      	movs	r3, #1
 8011226:	2204      	movs	r2, #4
 8011228:	2158      	movs	r1, #88	; 0x58
 801122a:	2000      	movs	r0, #0
 801122c:	f003 fcd6 	bl	8014bdc <SPI_RegisterWrite>
    }

    // Configure the behavior of the INT1 pin
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_INT1_IO_CTRL, BMI270_VAL_INT1_IO_CTRL_PINMODE, 1);
 8011230:	2301      	movs	r3, #1
 8011232:	220a      	movs	r2, #10
 8011234:	2153      	movs	r1, #83	; 0x53
 8011236:	2000      	movs	r0, #0
 8011238:	f003 fcd0 	bl	8014bdc <SPI_RegisterWrite>

    // Configure the device for  performance mode
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_PWR_CONF, BMI270_VAL_PWR_CONF, 1);
 801123c:	2301      	movs	r3, #1
 801123e:	2202      	movs	r2, #2
 8011240:	217c      	movs	r1, #124	; 0x7c
 8011242:	2000      	movs	r0, #0
 8011244:	f003 fcca 	bl	8014bdc <SPI_RegisterWrite>

    // Enable the gyro, accelerometer and temperature sensor - disable aux interface
    SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_PWR_CTRL, BMI270_VAL_PWR_CTRL, 1);
 8011248:	2301      	movs	r3, #1
 801124a:	220e      	movs	r2, #14
 801124c:	217d      	movs	r1, #125	; 0x7d
 801124e:	2000      	movs	r0, #0
 8011250:	f003 fcc4 	bl	8014bdc <SPI_RegisterWrite>

    // Flush the FIFO
    if (fifoMode) {
 8011254:	79fb      	ldrb	r3, [r7, #7]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d005      	beq.n	8011266 <bmi270Config+0xea>
      SPI_RegisterWrite(_DEF_SPI1, BMI270_REG_CMD, BMI270_VAL_CMD_FIFOFLUSH, 1);
 801125a:	2301      	movs	r3, #1
 801125c:	22b0      	movs	r2, #176	; 0xb0
 801125e:	217e      	movs	r1, #126	; 0x7e
 8011260:	2000      	movs	r0, #0
 8011262:	f003 fcbb 	bl	8014bdc <SPI_RegisterWrite>
    }
}
 8011266:	bf00      	nop
 8011268:	3708      	adds	r7, #8
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <bmi270SpiAccInit>:

static void bmi270SpiAccInit(accDev_t *acc)
{
 801126e:	b480      	push	{r7}
 8011270:	b083      	sub	sp, #12
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
    // sensor is configured during gyro init
    acc->acc_1G = 512 * 4;   // 16G sensor scale
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801127c:	819a      	strh	r2, [r3, #12]
}
 801127e:	bf00      	nop
 8011280:	370c      	adds	r7, #12
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
	...

0801128c <bmi270SpiAccDetect>:

bool bmi270SpiAccDetect(accDev_t *acc)
{
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]

    acc->initFn = bmi270SpiAccInit;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a06      	ldr	r2, [pc, #24]	; (80112b0 <bmi270SpiAccDetect+0x24>)
 8011298:	605a      	str	r2, [r3, #4]
    acc->readFn = bmi270SpiAccRead;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4a05      	ldr	r2, [pc, #20]	; (80112b4 <bmi270SpiAccDetect+0x28>)
 801129e:	609a      	str	r2, [r3, #8]

    return true;
 80112a0:	2301      	movs	r3, #1
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	0801126f 	.word	0x0801126f
 80112b4:	080113c9 	.word	0x080113c9

080112b8 <bmi270SpiGyroDetect>:


static bool bmi270SpiGyroDetect(gyroDev_t *gyro)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    gyro->initFn = bmi270Config;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4a07      	ldr	r2, [pc, #28]	; (80112e0 <bmi270SpiGyroDetect+0x28>)
 80112c4:	605a      	str	r2, [r3, #4]
    gyro->readFn = bmi270SpiGyroRead;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a06      	ldr	r2, [pc, #24]	; (80112e4 <bmi270SpiGyroDetect+0x2c>)
 80112ca:	609a      	str	r2, [r3, #8]
    gyro->scale = GYRO_SCALE_2000DPS;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a06      	ldr	r2, [pc, #24]	; (80112e8 <bmi270SpiGyroDetect+0x30>)
 80112d0:	611a      	str	r2, [r3, #16]

    return true;
 80112d2:	2301      	movs	r3, #1
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	0801117d 	.word	0x0801117d
 80112e4:	08011469 	.word	0x08011469
 80112e8:	3d7a0000 	.word	0x3d7a0000

080112ec <bmi270_Init>:

bool bmi270_Init(void)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
    bool ret = true;
 80112f2:	2301      	movs	r3, #1
 80112f4:	70fb      	strb	r3, [r7, #3]

    bmi270EnableSPI(0);
 80112f6:	2000      	movs	r0, #0
 80112f8:	f7ff ff01 	bl	80110fe <bmi270EnableSPI>
    // Allow 100ms before attempting to access gyro's SPI bus
    // Do this once here rather than in each detection routine to speed boot
    while (millis() < 100);
 80112fc:	bf00      	nop
 80112fe:	f7f7 ff92 	bl	8009226 <millis>
 8011302:	4603      	mov	r3, r0
 8011304:	2b63      	cmp	r3, #99	; 0x63
 8011306:	d9fa      	bls.n	80112fe <bmi270_Init+0x12>
    delay(35);
 8011308:	2023      	movs	r0, #35	; 0x23
 801130a:	f7f7 ff81 	bl	8009210 <delay>

    gyroInit();
 801130e:	f7ff fdff 	bl	8010f10 <gyroInit>
    gyroSetTargetLooptime(activePidLoopDenom);
 8011312:	4b19      	ldr	r3, [pc, #100]	; (8011378 <bmi270_Init+0x8c>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff fe62 	bl	8010fe0 <gyroSetTargetLooptime>
    gyroStartCalibration(false);
 801131c:	2000      	movs	r0, #0
 801131e:	f7fe ff03 	bl	8010128 <gyroStartCalibration>

    bmi270SpiGyroDetect(&gyro.gyroSensor1.gyroDev);
 8011322:	4816      	ldr	r0, [pc, #88]	; (801137c <bmi270_Init+0x90>)
 8011324:	f7ff ffc8 	bl	80112b8 <bmi270SpiGyroDetect>

    accInit(gyro.accSampleRateHz);
 8011328:	4b15      	ldr	r3, [pc, #84]	; (8011380 <bmi270_Init+0x94>)
 801132a:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 801132e:	4618      	mov	r0, r3
 8011330:	f7fe f9ac 	bl	800f68c <accInit>

    accStartCalibration();
 8011334:	f7fe f9e4 	bl	800f700 <accStartCalibration>
    
    //gyro_instace = gyro;

    bmi270Config();
 8011338:	f7ff ff20 	bl	801117c <bmi270Config>

    for(int i = 0; i > 5; i++)
 801133c:	2300      	movs	r3, #0
 801133e:	607b      	str	r3, [r7, #4]
 8011340:	e00e      	b.n	8011360 <bmi270_Init+0x74>
    {
        if (bmi270Detect(_DEF_SPI1))
 8011342:	2000      	movs	r0, #0
 8011344:	f000 f822 	bl	801138c <bmi270Detect>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d002      	beq.n	8011354 <bmi270_Init+0x68>
        {
            bmi270Config();
 801134e:	f7ff ff15 	bl	801117c <bmi270Config>
            break;
 8011352:	e008      	b.n	8011366 <bmi270_Init+0x7a>
        }
        delay(100);
 8011354:	2064      	movs	r0, #100	; 0x64
 8011356:	f7f7 ff5b 	bl	8009210 <delay>
    for(int i = 0; i > 5; i++)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	3301      	adds	r3, #1
 801135e:	607b      	str	r3, [r7, #4]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b05      	cmp	r3, #5
 8011364:	dced      	bgt.n	8011342 <bmi270_Init+0x56>
    }

    #ifdef _USE_HW_CLI
        cliAdd("bmi270", cliBmi270);
 8011366:	4907      	ldr	r1, [pc, #28]	; (8011384 <bmi270_Init+0x98>)
 8011368:	4807      	ldr	r0, [pc, #28]	; (8011388 <bmi270_Init+0x9c>)
 801136a:	f001 f97f 	bl	801266c <cliAdd>
    #endif

    return ret;
 801136e:	78fb      	ldrb	r3, [r7, #3]
}
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	10000000 	.word	0x10000000
 801137c:	10001030 	.word	0x10001030
 8011380:	10000ff4 	.word	0x10000ff4
 8011384:	08011535 	.word	0x08011535
 8011388:	0802be40 	.word	0x0802be40

0801138c <bmi270Detect>:

bool bmi270Detect(uint8_t ch)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	4603      	mov	r3, r0
 8011394:	71fb      	strb	r3, [r7, #7]
    memset(_buffer, 0x00, 7);
 8011396:	2207      	movs	r2, #7
 8011398:	2100      	movs	r1, #0
 801139a:	480a      	ldr	r0, [pc, #40]	; (80113c4 <bmi270Detect+0x38>)
 801139c:	f016 fe6a 	bl	8028074 <memset>
    SPI_ByteRead(ch, BMI270_REG_CHIP_ID | 0x80, _buffer, 2);
 80113a0:	79f8      	ldrb	r0, [r7, #7]
 80113a2:	2302      	movs	r3, #2
 80113a4:	4a07      	ldr	r2, [pc, #28]	; (80113c4 <bmi270Detect+0x38>)
 80113a6:	2180      	movs	r1, #128	; 0x80
 80113a8:	f003 fbb2 	bl	8014b10 <SPI_ByteRead>
    if (_buffer[1] == BMI270_CHIP_ID)
 80113ac:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <bmi270Detect+0x38>)
 80113ae:	785b      	ldrb	r3, [r3, #1]
 80113b0:	2b24      	cmp	r3, #36	; 0x24
 80113b2:	d101      	bne.n	80113b8 <bmi270Detect+0x2c>
    {
        return true;
 80113b4:	2301      	movs	r3, #1
 80113b6:	e000      	b.n	80113ba <bmi270Detect+0x2e>
    }
    return false;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20001050 	.word	0x20001050

080113c8 <bmi270SpiAccRead>:

bool bmi270SpiAccRead(accDev_t *acc)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73fb      	strb	r3, [r7, #15]
    uint8_t data_status[2] = {0, 0};
 80113d4:	2300      	movs	r3, #0
 80113d6:	81bb      	strh	r3, [r7, #12]
    static uint32_t test = 0;
    SPI_ByteRead(_DEF_SPI1, BMI270_REG_STATUS | 0x80, data_status, 2);
 80113d8:	f107 020c 	add.w	r2, r7, #12
 80113dc:	2302      	movs	r3, #2
 80113de:	2183      	movs	r1, #131	; 0x83
 80113e0:	2000      	movs	r0, #0
 80113e2:	f003 fb95 	bl	8014b10 <SPI_ByteRead>
    //memset(_buffer, 0x00, 7);
    if(data_status[1] & 0x80)
 80113e6:	7b7b      	ldrb	r3, [r7, #13]
 80113e8:	b25b      	sxtb	r3, r3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	da29      	bge.n	8011442 <bmi270SpiAccRead+0x7a>
    {
        status = SPI_ByteRead(_DEF_SPI1, BMI270_REG_ACC_DATA_X_LSB | 0x80, _buffer, 7);
 80113ee:	2307      	movs	r3, #7
 80113f0:	4a1b      	ldr	r2, [pc, #108]	; (8011460 <bmi270SpiAccRead+0x98>)
 80113f2:	218c      	movs	r1, #140	; 0x8c
 80113f4:	2000      	movs	r0, #0
 80113f6:	f003 fb8b 	bl	8014b10 <SPI_ByteRead>
 80113fa:	4603      	mov	r3, r0
 80113fc:	73fb      	strb	r3, [r7, #15]
        acc->ADCRaw[X] = (int16_t)((uint16_t)_buffer[2]<<8 | (uint16_t)_buffer[1]);
 80113fe:	4b18      	ldr	r3, [pc, #96]	; (8011460 <bmi270SpiAccRead+0x98>)
 8011400:	789b      	ldrb	r3, [r3, #2]
 8011402:	021b      	lsls	r3, r3, #8
 8011404:	b21a      	sxth	r2, r3
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <bmi270SpiAccRead+0x98>)
 8011408:	785b      	ldrb	r3, [r3, #1]
 801140a:	b21b      	sxth	r3, r3
 801140c:	4313      	orrs	r3, r2
 801140e:	b21a      	sxth	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	81da      	strh	r2, [r3, #14]
        acc->ADCRaw[Y] = (int16_t)((uint16_t)_buffer[4]<<8 | (uint16_t)_buffer[3]);
 8011414:	4b12      	ldr	r3, [pc, #72]	; (8011460 <bmi270SpiAccRead+0x98>)
 8011416:	791b      	ldrb	r3, [r3, #4]
 8011418:	021b      	lsls	r3, r3, #8
 801141a:	b21a      	sxth	r2, r3
 801141c:	4b10      	ldr	r3, [pc, #64]	; (8011460 <bmi270SpiAccRead+0x98>)
 801141e:	78db      	ldrb	r3, [r3, #3]
 8011420:	b21b      	sxth	r3, r3
 8011422:	4313      	orrs	r3, r2
 8011424:	b21a      	sxth	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	821a      	strh	r2, [r3, #16]
        acc->ADCRaw[Z] = (int16_t)((uint16_t)_buffer[6]<<8 | (uint16_t)_buffer[5]);
 801142a:	4b0d      	ldr	r3, [pc, #52]	; (8011460 <bmi270SpiAccRead+0x98>)
 801142c:	799b      	ldrb	r3, [r3, #6]
 801142e:	021b      	lsls	r3, r3, #8
 8011430:	b21a      	sxth	r2, r3
 8011432:	4b0b      	ldr	r3, [pc, #44]	; (8011460 <bmi270SpiAccRead+0x98>)
 8011434:	795b      	ldrb	r3, [r3, #5]
 8011436:	b21b      	sxth	r3, r3
 8011438:	4313      	orrs	r3, r2
 801143a:	b21a      	sxth	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	825a      	strh	r2, [r3, #18]
 8011440:	e004      	b.n	801144c <bmi270SpiAccRead+0x84>
    }else
    {
        test +=1;
 8011442:	4b08      	ldr	r3, [pc, #32]	; (8011464 <bmi270SpiAccRead+0x9c>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	4a06      	ldr	r2, [pc, #24]	; (8011464 <bmi270SpiAccRead+0x9c>)
 801144a:	6013      	str	r3, [r2, #0]
    }
    

    if(status == HAL_OK)
 801144c:	7bfb      	ldrb	r3, [r7, #15]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <bmi270SpiAccRead+0x8e>
    {
        return true;
 8011452:	2301      	movs	r3, #1
 8011454:	e000      	b.n	8011458 <bmi270SpiAccRead+0x90>
    }
    return false;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}
 8011460:	20001050 	.word	0x20001050
 8011464:	20001060 	.word	0x20001060

08011468 <bmi270SpiGyroRead>:
bool bmi270SpiGyroRead(gyroDev_t *gyro)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = 0;
 8011470:	2300      	movs	r3, #0
 8011472:	73fb      	strb	r3, [r7, #15]
    //memset(_buffer, 0x00, 7);
    status = SPI_ByteRead(_DEF_SPI1, BMI270_REG_GYR_DATA_X_LSB | 0x80, _buffer, 7);
 8011474:	2307      	movs	r3, #7
 8011476:	4a19      	ldr	r2, [pc, #100]	; (80114dc <bmi270SpiGyroRead+0x74>)
 8011478:	2192      	movs	r1, #146	; 0x92
 801147a:	2000      	movs	r0, #0
 801147c:	f003 fb48 	bl	8014b10 <SPI_ByteRead>
 8011480:	4603      	mov	r3, r0
 8011482:	73fb      	strb	r3, [r7, #15]
    gyro->gyroADCRaw[X] = (int16_t)((uint16_t)_buffer[2]<<8 | (uint16_t)_buffer[1]);
 8011484:	4b15      	ldr	r3, [pc, #84]	; (80114dc <bmi270SpiGyroRead+0x74>)
 8011486:	789b      	ldrb	r3, [r3, #2]
 8011488:	021b      	lsls	r3, r3, #8
 801148a:	b21a      	sxth	r2, r3
 801148c:	4b13      	ldr	r3, [pc, #76]	; (80114dc <bmi270SpiGyroRead+0x74>)
 801148e:	785b      	ldrb	r3, [r3, #1]
 8011490:	b21b      	sxth	r3, r3
 8011492:	4313      	orrs	r3, r2
 8011494:	b21a      	sxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	871a      	strh	r2, [r3, #56]	; 0x38
    gyro->gyroADCRaw[Y] = (int16_t)((uint16_t)_buffer[4]<<8 | (uint16_t)_buffer[3]);
 801149a:	4b10      	ldr	r3, [pc, #64]	; (80114dc <bmi270SpiGyroRead+0x74>)
 801149c:	791b      	ldrb	r3, [r3, #4]
 801149e:	021b      	lsls	r3, r3, #8
 80114a0:	b21a      	sxth	r2, r3
 80114a2:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <bmi270SpiGyroRead+0x74>)
 80114a4:	78db      	ldrb	r3, [r3, #3]
 80114a6:	b21b      	sxth	r3, r3
 80114a8:	4313      	orrs	r3, r2
 80114aa:	b21a      	sxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	875a      	strh	r2, [r3, #58]	; 0x3a
    gyro->gyroADCRaw[Z] = (int16_t)((uint16_t)_buffer[6]<<8 | (uint16_t)_buffer[5]);
 80114b0:	4b0a      	ldr	r3, [pc, #40]	; (80114dc <bmi270SpiGyroRead+0x74>)
 80114b2:	799b      	ldrb	r3, [r3, #6]
 80114b4:	021b      	lsls	r3, r3, #8
 80114b6:	b21a      	sxth	r2, r3
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <bmi270SpiGyroRead+0x74>)
 80114ba:	795b      	ldrb	r3, [r3, #5]
 80114bc:	b21b      	sxth	r3, r3
 80114be:	4313      	orrs	r3, r2
 80114c0:	b21a      	sxth	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	879a      	strh	r2, [r3, #60]	; 0x3c
    if(status == HAL_OK)
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <bmi270SpiGyroRead+0x68>
    {
        return true;
 80114cc:	2301      	movs	r3, #1
 80114ce:	e000      	b.n	80114d2 <bmi270SpiGyroRead+0x6a>
    }
    return false;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	20001050 	.word	0x20001050

080114e0 <bmi270InterruptStatus>:

  return true;
}

uint8_t bmi270InterruptStatus(gyroDev_t *gyro)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2] = {0, 0};
 80114e8:	2300      	movs	r3, #0
 80114ea:	81bb      	strh	r3, [r7, #12]
    SPI_ByteRead(gyro->gyro_bus_ch, BMI270_REG_INT_STATUS_1 | 0x80, buffer, 2);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	7818      	ldrb	r0, [r3, #0]
 80114f0:	f107 020c 	add.w	r2, r7, #12
 80114f4:	2302      	movs	r3, #2
 80114f6:	219d      	movs	r1, #157	; 0x9d
 80114f8:	f003 fb0a 	bl	8014b10 <SPI_ByteRead>
    return buffer[1];
 80114fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
	...

08011508 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
 801150e:	4603      	mov	r3, r0
 8011510:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin==GPIO_PIN_4)
 8011512:	88fb      	ldrh	r3, [r7, #6]
 8011514:	2b10      	cmp	r3, #16
 8011516:	d105      	bne.n	8011524 <HAL_GPIO_EXTI_Callback+0x1c>
    {
        gyro.rawSensorDev->dataReady = true;
 8011518:	4b05      	ldr	r3, [pc, #20]	; (8011530 <HAL_GPIO_EXTI_Callback+0x28>)
 801151a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801151e:	2201      	movs	r2, #1
 8011520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        //gyro_instace->imuDev.InterruptStatus = bmi270InterruptStatus(gyro_instace);
    }
}
 8011524:	bf00      	nop
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr
 8011530:	10000ff4 	.word	0x10000ff4

08011534 <cliBmi270>:

#ifdef _USE_HW_CLI
void cliBmi270(cli_args_t *args)
{
 8011534:	b590      	push	{r4, r7, lr}
 8011536:	b08f      	sub	sp, #60	; 0x3c
 8011538:	af02      	add	r7, sp, #8
 801153a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 801153c:	2300      	movs	r3, #0
 801153e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

if (args->argc == 1 && args->isStr(0, "gyro_show") == true)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	2b01      	cmp	r3, #1
 8011548:	d153      	bne.n	80115f2 <cliBmi270+0xbe>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	499f      	ldr	r1, [pc, #636]	; (80117cc <cliBmi270+0x298>)
 8011550:	2000      	movs	r0, #0
 8011552:	4798      	blx	r3
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d04b      	beq.n	80115f2 <cliBmi270+0xbe>
  {
    uint32_t pre_time;
 	pre_time = millis();
 801155a:	f7f7 fe64 	bl	8009226 <millis>
 801155e:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t x=0, y=0, z=0;
 8011560:	2300      	movs	r3, #0
 8011562:	847b      	strh	r3, [r7, #34]	; 0x22
 8011564:	2300      	movs	r3, #0
 8011566:	843b      	strh	r3, [r7, #32]
 8011568:	2300      	movs	r3, #0
 801156a:	83fb      	strh	r3, [r7, #30]
    while(cliKeepLoop())
 801156c:	e039      	b.n	80115e2 <cliBmi270+0xae>
    {
        if (millis()-pre_time >= 1000)
 801156e:	f7f7 fe5a 	bl	8009226 <millis>
 8011572:	4602      	mov	r2, r0
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801157c:	d331      	bcc.n	80115e2 <cliBmi270+0xae>
    	{
     		pre_time = millis();
 801157e:	f7f7 fe52 	bl	8009226 <millis>
 8011582:	62b8      	str	r0, [r7, #40]	; 0x28
			memset(_buffer, 0x00, 7);
 8011584:	2207      	movs	r2, #7
 8011586:	2100      	movs	r1, #0
 8011588:	4891      	ldr	r0, [pc, #580]	; (80117d0 <cliBmi270+0x29c>)
 801158a:	f016 fd73 	bl	8028074 <memset>
            SPI_ByteRead(_DEF_SPI1, (BMI270_REG_GYR_DATA_X_LSB | 0x80), _buffer, 7);
 801158e:	2307      	movs	r3, #7
 8011590:	4a8f      	ldr	r2, [pc, #572]	; (80117d0 <cliBmi270+0x29c>)
 8011592:	2192      	movs	r1, #146	; 0x92
 8011594:	2000      	movs	r0, #0
 8011596:	f003 fabb 	bl	8014b10 <SPI_ByteRead>
            x = (uint16_t)_buffer[2]<<8 | (uint16_t)_buffer[1];
 801159a:	4b8d      	ldr	r3, [pc, #564]	; (80117d0 <cliBmi270+0x29c>)
 801159c:	789b      	ldrb	r3, [r3, #2]
 801159e:	021b      	lsls	r3, r3, #8
 80115a0:	b21a      	sxth	r2, r3
 80115a2:	4b8b      	ldr	r3, [pc, #556]	; (80117d0 <cliBmi270+0x29c>)
 80115a4:	785b      	ldrb	r3, [r3, #1]
 80115a6:	b21b      	sxth	r3, r3
 80115a8:	4313      	orrs	r3, r2
 80115aa:	847b      	strh	r3, [r7, #34]	; 0x22
            y = (uint16_t)_buffer[4]<<8 | (uint16_t)_buffer[3];
 80115ac:	4b88      	ldr	r3, [pc, #544]	; (80117d0 <cliBmi270+0x29c>)
 80115ae:	791b      	ldrb	r3, [r3, #4]
 80115b0:	021b      	lsls	r3, r3, #8
 80115b2:	b21a      	sxth	r2, r3
 80115b4:	4b86      	ldr	r3, [pc, #536]	; (80117d0 <cliBmi270+0x29c>)
 80115b6:	78db      	ldrb	r3, [r3, #3]
 80115b8:	b21b      	sxth	r3, r3
 80115ba:	4313      	orrs	r3, r2
 80115bc:	843b      	strh	r3, [r7, #32]
            z = (uint16_t)_buffer[6]<<8 | (uint16_t)_buffer[5];
 80115be:	4b84      	ldr	r3, [pc, #528]	; (80117d0 <cliBmi270+0x29c>)
 80115c0:	799b      	ldrb	r3, [r3, #6]
 80115c2:	021b      	lsls	r3, r3, #8
 80115c4:	b21a      	sxth	r2, r3
 80115c6:	4b82      	ldr	r3, [pc, #520]	; (80117d0 <cliBmi270+0x29c>)
 80115c8:	795b      	ldrb	r3, [r3, #5]
 80115ca:	b21b      	sxth	r3, r3
 80115cc:	4313      	orrs	r3, r2
 80115ce:	83fb      	strh	r3, [r7, #30]
            cliPrintf("gyro x: %d, y: %d, z: %d\n\r", x, y, z);
 80115d0:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 80115d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80115dc:	487d      	ldr	r0, [pc, #500]	; (80117d4 <cliBmi270+0x2a0>)
 80115de:	f000 ff35 	bl	801244c <cliPrintf>
    while(cliKeepLoop())
 80115e2:	f001 f82d 	bl	8012640 <cliKeepLoop>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1c0      	bne.n	801156e <cliBmi270+0x3a>
    	}
    }
    ret = true;
 80115ec:	2301      	movs	r3, #1
 80115ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

if (args->argc == 1 && args->isStr(0, "acc_show") == true)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d153      	bne.n	80116a2 <cliBmi270+0x16e>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	4976      	ldr	r1, [pc, #472]	; (80117d8 <cliBmi270+0x2a4>)
 8011600:	2000      	movs	r0, #0
 8011602:	4798      	blx	r3
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d04b      	beq.n	80116a2 <cliBmi270+0x16e>
{
    uint32_t pre_time;
    pre_time = millis();
 801160a:	f7f7 fe0c 	bl	8009226 <millis>
 801160e:	6278      	str	r0, [r7, #36]	; 0x24
    int16_t x=0, y=0, z=0;
 8011610:	2300      	movs	r3, #0
 8011612:	83bb      	strh	r3, [r7, #28]
 8011614:	2300      	movs	r3, #0
 8011616:	837b      	strh	r3, [r7, #26]
 8011618:	2300      	movs	r3, #0
 801161a:	833b      	strh	r3, [r7, #24]
while(cliKeepLoop())
 801161c:	e039      	b.n	8011692 <cliBmi270+0x15e>
{
    if (millis()-pre_time >= 1000)
 801161e:	f7f7 fe02 	bl	8009226 <millis>
 8011622:	4602      	mov	r2, r0
 8011624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011626:	1ad3      	subs	r3, r2, r3
 8011628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801162c:	d331      	bcc.n	8011692 <cliBmi270+0x15e>
    {
        pre_time = millis();
 801162e:	f7f7 fdfa 	bl	8009226 <millis>
 8011632:	6278      	str	r0, [r7, #36]	; 0x24
        memset(_buffer, 0x00, 7);
 8011634:	2207      	movs	r2, #7
 8011636:	2100      	movs	r1, #0
 8011638:	4865      	ldr	r0, [pc, #404]	; (80117d0 <cliBmi270+0x29c>)
 801163a:	f016 fd1b 	bl	8028074 <memset>
        SPI_ByteRead(_DEF_SPI1, (BMI270_REG_ACC_DATA_X_LSB | 0x80), _buffer, 7);
 801163e:	2307      	movs	r3, #7
 8011640:	4a63      	ldr	r2, [pc, #396]	; (80117d0 <cliBmi270+0x29c>)
 8011642:	218c      	movs	r1, #140	; 0x8c
 8011644:	2000      	movs	r0, #0
 8011646:	f003 fa63 	bl	8014b10 <SPI_ByteRead>
        x = (uint16_t)_buffer[2]<<8 | (uint16_t)_buffer[1];
 801164a:	4b61      	ldr	r3, [pc, #388]	; (80117d0 <cliBmi270+0x29c>)
 801164c:	789b      	ldrb	r3, [r3, #2]
 801164e:	021b      	lsls	r3, r3, #8
 8011650:	b21a      	sxth	r2, r3
 8011652:	4b5f      	ldr	r3, [pc, #380]	; (80117d0 <cliBmi270+0x29c>)
 8011654:	785b      	ldrb	r3, [r3, #1]
 8011656:	b21b      	sxth	r3, r3
 8011658:	4313      	orrs	r3, r2
 801165a:	83bb      	strh	r3, [r7, #28]
        y = (uint16_t)_buffer[4]<<8 | (uint16_t)_buffer[3];
 801165c:	4b5c      	ldr	r3, [pc, #368]	; (80117d0 <cliBmi270+0x29c>)
 801165e:	791b      	ldrb	r3, [r3, #4]
 8011660:	021b      	lsls	r3, r3, #8
 8011662:	b21a      	sxth	r2, r3
 8011664:	4b5a      	ldr	r3, [pc, #360]	; (80117d0 <cliBmi270+0x29c>)
 8011666:	78db      	ldrb	r3, [r3, #3]
 8011668:	b21b      	sxth	r3, r3
 801166a:	4313      	orrs	r3, r2
 801166c:	837b      	strh	r3, [r7, #26]
        z = (uint16_t)_buffer[6]<<8 | (uint16_t)_buffer[5];
 801166e:	4b58      	ldr	r3, [pc, #352]	; (80117d0 <cliBmi270+0x29c>)
 8011670:	799b      	ldrb	r3, [r3, #6]
 8011672:	021b      	lsls	r3, r3, #8
 8011674:	b21a      	sxth	r2, r3
 8011676:	4b56      	ldr	r3, [pc, #344]	; (80117d0 <cliBmi270+0x29c>)
 8011678:	795b      	ldrb	r3, [r3, #5]
 801167a:	b21b      	sxth	r3, r3
 801167c:	4313      	orrs	r3, r2
 801167e:	833b      	strh	r3, [r7, #24]
        cliPrintf("acc x: %d, y: %d, z: %d\n\r", x, y, z);
 8011680:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8011684:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011688:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801168c:	4853      	ldr	r0, [pc, #332]	; (80117dc <cliBmi270+0x2a8>)
 801168e:	f000 fedd 	bl	801244c <cliPrintf>
while(cliKeepLoop())
 8011692:	f000 ffd5 	bl	8012640 <cliKeepLoop>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d1c0      	bne.n	801161e <cliBmi270+0xea>
    }
}
ret = true;
 801169c:	2301      	movs	r3, #1
 801169e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}

  if (args->argc == 3 && args->isStr(0, "mem_read") == true)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	881b      	ldrh	r3, [r3, #0]
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d13b      	bne.n	8011722 <cliBmi270+0x1ee>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	695b      	ldr	r3, [r3, #20]
 80116ae:	494c      	ldr	r1, [pc, #304]	; (80117e0 <cliBmi270+0x2ac>)
 80116b0:	2000      	movs	r0, #0
 80116b2:	4798      	blx	r3
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d033      	beq.n	8011722 <cliBmi270+0x1ee>
  {
    uint8_t ch;
    uint8_t addr;
    uint8_t buffer[2] = {0, 0};
 80116ba:	2300      	movs	r3, #0
 80116bc:	823b      	strh	r3, [r7, #16]
    HAL_StatusTypeDef status;

    ch   = (uint8_t)args->getData(1);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	2001      	movs	r0, #1
 80116c4:	4798      	blx	r3
 80116c6:	4603      	mov	r3, r0
 80116c8:	75fb      	strb	r3, [r7, #23]
    addr = (uint8_t)args->getData(2);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	2002      	movs	r0, #2
 80116d0:	4798      	blx	r3
 80116d2:	4603      	mov	r3, r0
 80116d4:	75bb      	strb	r3, [r7, #22]
    addr |= 0x80;
 80116d6:	7dbb      	ldrb	r3, [r7, #22]
 80116d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116dc:	75bb      	strb	r3, [r7, #22]

    status = SPI_ByteRead(ch, addr, buffer, 2);
 80116de:	f107 0210 	add.w	r2, r7, #16
 80116e2:	7db9      	ldrb	r1, [r7, #22]
 80116e4:	7df8      	ldrb	r0, [r7, #23]
 80116e6:	2302      	movs	r3, #2
 80116e8:	f003 fa12 	bl	8014b10 <SPI_ByteRead>
 80116ec:	4603      	mov	r3, r0
 80116ee:	757b      	strb	r3, [r7, #21]

    if(status == HAL_OK)
 80116f0:	7d7b      	ldrb	r3, [r7, #21]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d10d      	bne.n	8011712 <cliBmi270+0x1de>
    {
        cliPrintf("bmi270 mem_read : ch (%d), addr (0x%X), data[0] : (0x%X), data[1] : (0x%X), status (%d)\n", ch, addr, buffer[0], buffer[1], status);
 80116f6:	7df9      	ldrb	r1, [r7, #23]
 80116f8:	7dba      	ldrb	r2, [r7, #22]
 80116fa:	7c3b      	ldrb	r3, [r7, #16]
 80116fc:	461c      	mov	r4, r3
 80116fe:	7c7b      	ldrb	r3, [r7, #17]
 8011700:	4618      	mov	r0, r3
 8011702:	7d7b      	ldrb	r3, [r7, #21]
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	9000      	str	r0, [sp, #0]
 8011708:	4623      	mov	r3, r4
 801170a:	4836      	ldr	r0, [pc, #216]	; (80117e4 <cliBmi270+0x2b0>)
 801170c:	f000 fe9e 	bl	801244c <cliPrintf>
 8011710:	e004      	b.n	801171c <cliBmi270+0x1e8>
    }else
    {
        cliPrintf("bmi270 read - Fail(%d) \n", status);
 8011712:	7d7b      	ldrb	r3, [r7, #21]
 8011714:	4619      	mov	r1, r3
 8011716:	4834      	ldr	r0, [pc, #208]	; (80117e8 <cliBmi270+0x2b4>)
 8011718:	f000 fe98 	bl	801244c <cliPrintf>
    }
    ret = true;
 801171c:	2301      	movs	r3, #1
 801171e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

    if (args->argc == 4 && args->isStr(0, "mem_write") == true)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	2b04      	cmp	r3, #4
 8011728:	d139      	bne.n	801179e <cliBmi270+0x26a>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	492f      	ldr	r1, [pc, #188]	; (80117ec <cliBmi270+0x2b8>)
 8011730:	2000      	movs	r0, #0
 8011732:	4798      	blx	r3
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d031      	beq.n	801179e <cliBmi270+0x26a>
    uint8_t ch;
    uint8_t addr;
    uint8_t buffer;
    HAL_StatusTypeDef status;

    ch     = (uint8_t)args->getData(1);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	2001      	movs	r0, #1
 8011740:	4798      	blx	r3
 8011742:	4603      	mov	r3, r0
 8011744:	753b      	strb	r3, [r7, #20]
    addr   = (uint8_t)args->getData(2);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	2002      	movs	r0, #2
 801174c:	4798      	blx	r3
 801174e:	4603      	mov	r3, r0
 8011750:	74fb      	strb	r3, [r7, #19]
    buffer = (uint8_t)args->getData(3);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	2003      	movs	r0, #3
 8011758:	4798      	blx	r3
 801175a:	4603      	mov	r3, r0
 801175c:	b2db      	uxtb	r3, r3
 801175e:	73fb      	strb	r3, [r7, #15]

    status = SPI_ByteWrite(ch, addr, &buffer, 1);
 8011760:	f107 020f 	add.w	r2, r7, #15
 8011764:	7cf9      	ldrb	r1, [r7, #19]
 8011766:	7d38      	ldrb	r0, [r7, #20]
 8011768:	2301      	movs	r3, #1
 801176a:	f003 fa05 	bl	8014b78 <SPI_ByteWrite>
 801176e:	4603      	mov	r3, r0
 8011770:	74bb      	strb	r3, [r7, #18]

    if(status == HAL_OK)
 8011772:	7cbb      	ldrb	r3, [r7, #18]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10a      	bne.n	801178e <cliBmi270+0x25a>
    {
        cliPrintf("bmi270 mem_write : ch (%d), addr (0x%X), data : (0x%X), status (%d)\n", ch, addr, buffer, status);
 8011778:	7d39      	ldrb	r1, [r7, #20]
 801177a:	7cfa      	ldrb	r2, [r7, #19]
 801177c:	7bfb      	ldrb	r3, [r7, #15]
 801177e:	4618      	mov	r0, r3
 8011780:	7cbb      	ldrb	r3, [r7, #18]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4603      	mov	r3, r0
 8011786:	481a      	ldr	r0, [pc, #104]	; (80117f0 <cliBmi270+0x2bc>)
 8011788:	f000 fe60 	bl	801244c <cliPrintf>
 801178c:	e004      	b.n	8011798 <cliBmi270+0x264>
    }else
    {
        cliPrintf("bmi270 write - Fail(%d) \n", status);
 801178e:	7cbb      	ldrb	r3, [r7, #18]
 8011790:	4619      	mov	r1, r3
 8011792:	4818      	ldr	r0, [pc, #96]	; (80117f4 <cliBmi270+0x2c0>)
 8011794:	f000 fe5a 	bl	801244c <cliPrintf>
    }
    ret = true;
 8011798:	2301      	movs	r3, #1
 801179a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 801179e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117a2:	f083 0301 	eor.w	r3, r3, #1
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d00b      	beq.n	80117c4 <cliBmi270+0x290>
  {
    cliPrintf("bmi270 gyro_show \n\r");
 80117ac:	4812      	ldr	r0, [pc, #72]	; (80117f8 <cliBmi270+0x2c4>)
 80117ae:	f000 fe4d 	bl	801244c <cliPrintf>
    cliPrintf("bmi270 acc_show \n\r");
 80117b2:	4812      	ldr	r0, [pc, #72]	; (80117fc <cliBmi270+0x2c8>)
 80117b4:	f000 fe4a 	bl	801244c <cliPrintf>
    cliPrintf("bmi270 mem_read ch0:1, addr \n\r");
 80117b8:	4811      	ldr	r0, [pc, #68]	; (8011800 <cliBmi270+0x2cc>)
 80117ba:	f000 fe47 	bl	801244c <cliPrintf>
    cliPrintf("bmi270 mem_write ch0:1, addr data \n\r");
 80117be:	4811      	ldr	r0, [pc, #68]	; (8011804 <cliBmi270+0x2d0>)
 80117c0:	f000 fe44 	bl	801244c <cliPrintf>
  }
}
 80117c4:	bf00      	nop
 80117c6:	3734      	adds	r7, #52	; 0x34
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd90      	pop	{r4, r7, pc}
 80117cc:	0802be48 	.word	0x0802be48
 80117d0:	20001050 	.word	0x20001050
 80117d4:	0802be54 	.word	0x0802be54
 80117d8:	0802be70 	.word	0x0802be70
 80117dc:	0802be7c 	.word	0x0802be7c
 80117e0:	0802be98 	.word	0x0802be98
 80117e4:	0802bea4 	.word	0x0802bea4
 80117e8:	0802bf00 	.word	0x0802bf00
 80117ec:	0802bf1c 	.word	0x0802bf1c
 80117f0:	0802bf28 	.word	0x0802bf28
 80117f4:	0802bf70 	.word	0x0802bf70
 80117f8:	0802bf8c 	.word	0x0802bf8c
 80117fc:	0802bfa0 	.word	0x0802bfa0
 8011800:	0802bfb4 	.word	0x0802bfb4
 8011804:	0802bfd4 	.word	0x0802bfd4

08011808 <adcInit>:
    return ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_2);
}
#endif

bool adcInit(void)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b086      	sub	sp, #24
 801180c:	af00      	add	r7, sp, #0
  bool ret = true;
 801180e:	2301      	movs	r3, #1
 8011810:	75fb      	strb	r3, [r7, #23]
  ADC_ChannelConfTypeDef sConfig = {0};
 8011812:	1d3b      	adds	r3, r7, #4
 8011814:	2200      	movs	r2, #0
 8011816:	601a      	str	r2, [r3, #0]
 8011818:	605a      	str	r2, [r3, #4]
 801181a:	609a      	str	r2, [r3, #8]
 801181c:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 801181e:	4b2a      	ldr	r3, [pc, #168]	; (80118c8 <adcInit+0xc0>)
 8011820:	4a2a      	ldr	r2, [pc, #168]	; (80118cc <adcInit+0xc4>)
 8011822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8011824:	4b28      	ldr	r3, [pc, #160]	; (80118c8 <adcInit+0xc0>)
 8011826:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801182a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801182c:	4b26      	ldr	r3, [pc, #152]	; (80118c8 <adcInit+0xc0>)
 801182e:	2200      	movs	r2, #0
 8011830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8011832:	4b25      	ldr	r3, [pc, #148]	; (80118c8 <adcInit+0xc0>)
 8011834:	2201      	movs	r2, #1
 8011836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8011838:	4b23      	ldr	r3, [pc, #140]	; (80118c8 <adcInit+0xc0>)
 801183a:	2201      	movs	r2, #1
 801183c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801183e:	4b22      	ldr	r3, [pc, #136]	; (80118c8 <adcInit+0xc0>)
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011846:	4b20      	ldr	r3, [pc, #128]	; (80118c8 <adcInit+0xc0>)
 8011848:	2200      	movs	r2, #0
 801184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801184c:	4b1e      	ldr	r3, [pc, #120]	; (80118c8 <adcInit+0xc0>)
 801184e:	2200      	movs	r2, #0
 8011850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011852:	4b1d      	ldr	r3, [pc, #116]	; (80118c8 <adcInit+0xc0>)
 8011854:	2200      	movs	r2, #0
 8011856:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8011858:	4b1b      	ldr	r3, [pc, #108]	; (80118c8 <adcInit+0xc0>)
 801185a:	2202      	movs	r2, #2
 801185c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801185e:	4b1a      	ldr	r3, [pc, #104]	; (80118c8 <adcInit+0xc0>)
 8011860:	2200      	movs	r2, #0
 8011862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011866:	4b18      	ldr	r3, [pc, #96]	; (80118c8 <adcInit+0xc0>)
 8011868:	2201      	movs	r2, #1
 801186a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801186c:	4816      	ldr	r0, [pc, #88]	; (80118c8 <adcInit+0xc0>)
 801186e:	f006 fbff 	bl	8018070 <HAL_ADC_Init>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <adcInit+0x74>
  {
    Error_Handler();
 8011878:	f7f7 fd8c 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 801187c:	230a      	movs	r3, #10
 801187e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8011880:	2301      	movs	r3, #1
 8011882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8011884:	2307      	movs	r3, #7
 8011886:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011888:	1d3b      	adds	r3, r7, #4
 801188a:	4619      	mov	r1, r3
 801188c:	480e      	ldr	r0, [pc, #56]	; (80118c8 <adcInit+0xc0>)
 801188e:	f006 fd61 	bl	8018354 <HAL_ADC_ConfigChannel>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <adcInit+0x94>
  {
    Error_Handler();
 8011898:	f7f7 fd7c 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 801189c:	230b      	movs	r3, #11
 801189e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 80118a0:	2302      	movs	r3, #2
 80118a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80118a4:	2307      	movs	r3, #7
 80118a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80118a8:	1d3b      	adds	r3, r7, #4
 80118aa:	4619      	mov	r1, r3
 80118ac:	4806      	ldr	r0, [pc, #24]	; (80118c8 <adcInit+0xc0>)
 80118ae:	f006 fd51 	bl	8018354 <HAL_ADC_ConfigChannel>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <adcInit+0xb4>
  {
    Error_Handler();
 80118b8:	f7f7 fd6c 	bl	8009394 <Error_Handler>
//     xDMA_Init(adc.dmaResource, &DMA_InitStructure);
//     xDMA_Cmd(adc.dmaResource, ENABLE);
// #endif

//     ADC_SoftwareStartConv(adc.ADCx);
    return ret;
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3718      	adds	r7, #24
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	20001064 	.word	0x20001064
 80118cc:	40012000 	.word	0x40012000

080118d0 <HAL_ADC_MspInit>:
    return ((((int32_t)((tempAdcValue * vrefValue) / TEMPSENSOR_CAL_VREFANALOG) - adcTSCAL1) * adcTSSlopeK) + 500) / 1000 + TEMPSENSOR_CAL1_TEMP;
}
#endif // USE_ADC_INTERNAL

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b08a      	sub	sp, #40	; 0x28
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118d8:	f107 0314 	add.w	r3, r7, #20
 80118dc:	2200      	movs	r2, #0
 80118de:	601a      	str	r2, [r3, #0]
 80118e0:	605a      	str	r2, [r3, #4]
 80118e2:	609a      	str	r2, [r3, #8]
 80118e4:	60da      	str	r2, [r3, #12]
 80118e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4a33      	ldr	r2, [pc, #204]	; (80119bc <HAL_ADC_MspInit+0xec>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d160      	bne.n	80119b4 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80118f2:	2300      	movs	r3, #0
 80118f4:	613b      	str	r3, [r7, #16]
 80118f6:	4b32      	ldr	r3, [pc, #200]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 80118f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fa:	4a31      	ldr	r2, [pc, #196]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 80118fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011900:	6453      	str	r3, [r2, #68]	; 0x44
 8011902:	4b2f      	ldr	r3, [pc, #188]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 8011904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801190a:	613b      	str	r3, [r7, #16]
 801190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801190e:	2300      	movs	r3, #0
 8011910:	60fb      	str	r3, [r7, #12]
 8011912:	4b2b      	ldr	r3, [pc, #172]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 8011914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011916:	4a2a      	ldr	r2, [pc, #168]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 8011918:	f043 0304 	orr.w	r3, r3, #4
 801191c:	6313      	str	r3, [r2, #48]	; 0x30
 801191e:	4b28      	ldr	r3, [pc, #160]	; (80119c0 <HAL_ADC_MspInit+0xf0>)
 8011920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011922:	f003 0304 	and.w	r3, r3, #4
 8011926:	60fb      	str	r3, [r7, #12]
 8011928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801192a:	2303      	movs	r3, #3
 801192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801192e:	2303      	movs	r3, #3
 8011930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011932:	2300      	movs	r3, #0
 8011934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011936:	f107 0314 	add.w	r3, r7, #20
 801193a:	4619      	mov	r1, r3
 801193c:	4821      	ldr	r0, [pc, #132]	; (80119c4 <HAL_ADC_MspInit+0xf4>)
 801193e:	f007 ff31 	bl	80197a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8011942:	4b21      	ldr	r3, [pc, #132]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011944:	4a21      	ldr	r2, [pc, #132]	; (80119cc <HAL_ADC_MspInit+0xfc>)
 8011946:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8011948:	4b1f      	ldr	r3, [pc, #124]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801194a:	2200      	movs	r2, #0
 801194c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801194e:	4b1e      	ldr	r3, [pc, #120]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011950:	2200      	movs	r2, #0
 8011952:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8011954:	4b1c      	ldr	r3, [pc, #112]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011956:	2200      	movs	r2, #0
 8011958:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801195a:	4b1b      	ldr	r3, [pc, #108]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801195c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011960:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011962:	4b19      	ldr	r3, [pc, #100]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011968:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801196a:	4b17      	ldr	r3, [pc, #92]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801196c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011970:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8011972:	4b15      	ldr	r3, [pc, #84]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011978:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 801197a:	4b13      	ldr	r3, [pc, #76]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801197c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8011980:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8011982:	4b11      	ldr	r3, [pc, #68]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 8011984:	2200      	movs	r2, #0
 8011986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011988:	480f      	ldr	r0, [pc, #60]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801198a:	f007 f823 	bl	80189d4 <HAL_DMA_Init>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d001      	beq.n	8011998 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8011994:	f7f7 fcfe 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	4a0b      	ldr	r2, [pc, #44]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 801199c:	639a      	str	r2, [r3, #56]	; 0x38
 801199e:	4a0a      	ldr	r2, [pc, #40]	; (80119c8 <HAL_ADC_MspInit+0xf8>)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80119a4:	2200      	movs	r2, #0
 80119a6:	2100      	movs	r1, #0
 80119a8:	2012      	movs	r0, #18
 80119aa:	f006 ffd6 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80119ae:	2012      	movs	r0, #18
 80119b0:	f006 ffef 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80119b4:	bf00      	nop
 80119b6:	3728      	adds	r7, #40	; 0x28
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	40012000 	.word	0x40012000
 80119c0:	40023800 	.word	0x40023800
 80119c4:	40020800 	.word	0x40020800
 80119c8:	200010ac 	.word	0x200010ac
 80119cc:	40026410 	.word	0x40026410

080119d0 <cliInit>:
void cliBootloader(cli_args_t *args);
#endif


bool cliInit(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80119d4:	4b1d      	ldr	r3, [pc, #116]	; (8011a4c <cliInit+0x7c>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80119da:	4b1c      	ldr	r3, [pc, #112]	; (8011a4c <cliInit+0x7c>)
 80119dc:	2200      	movs	r2, #0
 80119de:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80119e0:	4b1a      	ldr	r3, [pc, #104]	; (8011a4c <cliInit+0x7c>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80119e6:	4b19      	ldr	r3, [pc, #100]	; (8011a4c <cliInit+0x7c>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80119ee:	4b17      	ldr	r3, [pc, #92]	; (8011a4c <cliInit+0x7c>)
 80119f0:	2200      	movs	r2, #0
 80119f2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80119f6:	4b15      	ldr	r3, [pc, #84]	; (8011a4c <cliInit+0x7c>)
 80119f8:	2200      	movs	r2, #0
 80119fa:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80119fe:	4b13      	ldr	r3, [pc, #76]	; (8011a4c <cliInit+0x7c>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8011a06:	4b11      	ldr	r3, [pc, #68]	; (8011a4c <cliInit+0x7c>)
 8011a08:	4a11      	ldr	r2, [pc, #68]	; (8011a50 <cliInit+0x80>)
 8011a0a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8011a0e:	4b0f      	ldr	r3, [pc, #60]	; (8011a4c <cliInit+0x7c>)
 8011a10:	4a10      	ldr	r2, [pc, #64]	; (8011a54 <cliInit+0x84>)
 8011a12:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8011a16:	4b0d      	ldr	r3, [pc, #52]	; (8011a4c <cliInit+0x7c>)
 8011a18:	4a0f      	ldr	r2, [pc, #60]	; (8011a58 <cliInit+0x88>)
 8011a1a:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8011a1e:	4b0b      	ldr	r3, [pc, #44]	; (8011a4c <cliInit+0x7c>)
 8011a20:	4a0e      	ldr	r2, [pc, #56]	; (8011a5c <cliInit+0x8c>)
 8011a22:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 8011a26:	4809      	ldr	r0, [pc, #36]	; (8011a4c <cliInit+0x7c>)
 8011a28:	f000 fb66 	bl	80120f8 <cliLineClean>


  cliAdd("help", cliShowList);
 8011a2c:	490c      	ldr	r1, [pc, #48]	; (8011a60 <cliInit+0x90>)
 8011a2e:	480d      	ldr	r0, [pc, #52]	; (8011a64 <cliInit+0x94>)
 8011a30:	f000 fe1c 	bl	801266c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8011a34:	490c      	ldr	r1, [pc, #48]	; (8011a68 <cliInit+0x98>)
 8011a36:	480d      	ldr	r0, [pc, #52]	; (8011a6c <cliInit+0x9c>)
 8011a38:	f000 fe18 	bl	801266c <cliAdd>
  cliAdd("task"  , cliTaskList);
 8011a3c:	490c      	ldr	r1, [pc, #48]	; (8011a70 <cliInit+0xa0>)
 8011a3e:	480d      	ldr	r0, [pc, #52]	; (8011a74 <cliInit+0xa4>)
 8011a40:	f000 fe14 	bl	801266c <cliAdd>
  #ifdef _USE_HW_RTC
  cliAdd("bl"  , cliBootloader);
  #endif

  return true;
 8011a44:	2301      	movs	r3, #1
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	2000110c 	.word	0x2000110c
 8011a50:	080124fd 	.word	0x080124fd
 8011a54:	0801254d 	.word	0x0801254d
 8011a58:	080125a5 	.word	0x080125a5
 8011a5c:	080125ed 	.word	0x080125ed
 8011a60:	08012701 	.word	0x08012701
 8011a64:	0802bffc 	.word	0x0802bffc
 8011a68:	08012771 	.word	0x08012771
 8011a6c:	0802c004 	.word	0x0802c004
 8011a70:	080128b5 	.word	0x080128b5
 8011a74:	0802c008 	.word	0x0802c008

08011a78 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	4603      	mov	r3, r0
 8011a80:	6039      	str	r1, [r7, #0]
 8011a82:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8011a84:	4a0a      	ldr	r2, [pc, #40]	; (8011ab0 <cliOpen+0x38>)
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8011a8a:	4a09      	ldr	r2, [pc, #36]	; (8011ab0 <cliOpen+0x38>)
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8011a90:	79fb      	ldrb	r3, [r7, #7]
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f003 fac1 	bl	801501c <uartOpen>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	4b04      	ldr	r3, [pc, #16]	; (8011ab0 <cliOpen+0x38>)
 8011aa0:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8011aa2:	4b03      	ldr	r3, [pc, #12]	; (8011ab0 <cliOpen+0x38>)
 8011aa4:	7a1b      	ldrb	r3, [r3, #8]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3708      	adds	r7, #8
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	2000110c 	.word	0x2000110c

08011ab4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8011abc:	4b34      	ldr	r3, [pc, #208]	; (8011b90 <cliShowLog+0xdc>)
 8011abe:	7a5b      	ldrb	r3, [r3, #9]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d061      	beq.n	8011b88 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	7a98      	ldrb	r0, [r3, #10]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4930      	ldr	r1, [pc, #192]	; (8011b94 <cliShowLog+0xe0>)
 8011ad2:	f003 ff1c 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7a98      	ldrb	r0, [r3, #10]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	492d      	ldr	r1, [pc, #180]	; (8011b98 <cliShowLog+0xe4>)
 8011ae4:	f003 ff13 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	7a98      	ldrb	r0, [r3, #10]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8011af2:	461a      	mov	r2, r3
 8011af4:	4929      	ldr	r1, [pc, #164]	; (8011b9c <cliShowLog+0xe8>)
 8011af6:	f003 ff0a 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	7a98      	ldrb	r0, [r3, #10]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011b04:	461a      	mov	r2, r3
 8011b06:	4926      	ldr	r1, [pc, #152]	; (8011ba0 <cliShowLog+0xec>)
 8011b08:	f003 ff01 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7a98      	ldrb	r0, [r3, #10]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8011b16:	461a      	mov	r2, r3
 8011b18:	4922      	ldr	r1, [pc, #136]	; (8011ba4 <cliShowLog+0xf0>)
 8011b1a:	f003 fef8 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	7a98      	ldrb	r0, [r3, #10]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8011b28:	461a      	mov	r2, r3
 8011b2a:	491f      	ldr	r1, [pc, #124]	; (8011ba8 <cliShowLog+0xf4>)
 8011b2c:	f003 feef 	bl	801590e <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7a98      	ldrb	r0, [r3, #10]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	491b      	ldr	r1, [pc, #108]	; (8011bac <cliShowLog+0xf8>)
 8011b3e:	f003 fee6 	bl	801590e <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8011b42:	2300      	movs	r3, #0
 8011b44:	60fb      	str	r3, [r7, #12]
 8011b46:	e012      	b.n	8011b6e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7a98      	ldrb	r0, [r3, #10]
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	4413      	add	r3, r2
 8011b54:	00da      	lsls	r2, r3, #3
 8011b56:	1ad2      	subs	r2, r2, r3
 8011b58:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	4413      	add	r3, r2
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	4913      	ldr	r1, [pc, #76]	; (8011bb0 <cliShowLog+0xfc>)
 8011b64:	f003 fed3 	bl	801590e <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8011b74:	461a      	mov	r2, r3
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	dbe5      	blt.n	8011b48 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	7a9b      	ldrb	r3, [r3, #10]
 8011b80:	490c      	ldr	r1, [pc, #48]	; (8011bb4 <cliShowLog+0x100>)
 8011b82:	4618      	mov	r0, r3
 8011b84:	f003 fec3 	bl	801590e <uartPrintf>
  }
}
 8011b88:	bf00      	nop
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	2000110c 	.word	0x2000110c
 8011b94:	0802c010 	.word	0x0802c010
 8011b98:	0802c020 	.word	0x0802c020
 8011b9c:	0802c030 	.word	0x0802c030
 8011ba0:	0802c040 	.word	0x0802c040
 8011ba4:	0802c050 	.word	0x0802c050
 8011ba8:	0802c060 	.word	0x0802c060
 8011bac:	0802c070 	.word	0x0802c070
 8011bb0:	0802c080 	.word	0x0802c080
 8011bb4:	0802c090 	.word	0x0802c090

08011bb8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	4906      	ldr	r1, [pc, #24]	; (8011be0 <cliShowPrompt+0x28>)
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f003 fea1 	bl	801590e <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	4904      	ldr	r1, [pc, #16]	; (8011be4 <cliShowPrompt+0x2c>)
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f003 fe9b 	bl	801590e <uartPrintf>
}
 8011bd8:	bf00      	nop
 8011bda:	3708      	adds	r7, #8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	0802c094 	.word	0x0802c094
 8011be4:	0802c098 	.word	0x0802c098

08011be8 <cliMain>:

bool cliMain(void)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8011bec:	4b0e      	ldr	r3, [pc, #56]	; (8011c28 <cliMain+0x40>)
 8011bee:	7a1b      	ldrb	r3, [r3, #8]
 8011bf0:	f083 0301 	eor.w	r3, r3, #1
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d001      	beq.n	8011bfe <cliMain+0x16>
  {
    return false;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	e012      	b.n	8011c24 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8011bfe:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <cliMain+0x40>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f003 fc82 	bl	801550c <uartAvailable>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d009      	beq.n	8011c22 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8011c0e:	4b06      	ldr	r3, [pc, #24]	; (8011c28 <cliMain+0x40>)
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f003 fd6a 	bl	80156ec <uartRead>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4802      	ldr	r0, [pc, #8]	; (8011c28 <cliMain+0x40>)
 8011c1e:	f000 f805 	bl	8011c2c <cliUpdate>
  }

  return true;
 8011c22:	2301      	movs	r3, #1
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	2000110c 	.word	0x2000110c

08011c2c <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b08c      	sub	sp, #48	; 0x30
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	460b      	mov	r3, r1
 8011c36:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011c44:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	7c1b      	ldrb	r3, [r3, #16]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f040 8168 	bne.w	8011f20 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 8011c50:	78fb      	ldrb	r3, [r7, #3]
 8011c52:	2b7f      	cmp	r3, #127	; 0x7f
 8011c54:	d02a      	beq.n	8011cac <cliUpdate+0x80>
 8011c56:	2b7f      	cmp	r3, #127	; 0x7f
 8011c58:	f300 80da 	bgt.w	8011e10 <cliUpdate+0x1e4>
 8011c5c:	2b1b      	cmp	r3, #27
 8011c5e:	d021      	beq.n	8011ca4 <cliUpdate+0x78>
 8011c60:	2b1b      	cmp	r3, #27
 8011c62:	f300 80d5 	bgt.w	8011e10 <cliUpdate+0x1e4>
 8011c66:	2b08      	cmp	r3, #8
 8011c68:	d062      	beq.n	8011d30 <cliUpdate+0x104>
 8011c6a:	2b0d      	cmp	r3, #13
 8011c6c:	f040 80d0 	bne.w	8011e10 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d005      	beq.n	8011c86 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fa56 	bl	801212c <cliLineAdd>
          cliRunCmd(p_cli);
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fb41 	bl	8012308 <cliRunCmd>
        }

        line->count = 0;
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7ff ff8b 	bl	8011bb8 <cliShowPrompt>
        break;
 8011ca2:	e144      	b.n	8011f2e <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	741a      	strb	r2, [r3, #16]
        break;
 8011caa:	e140      	b.n	8011f2e <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	f080 8133 	bcs.w	8011f24 <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8011cce:	2301      	movs	r3, #1
 8011cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cd2:	e013      	b.n	8011cfc <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011cda:	461a      	mov	r2, r3
 8011cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cde:	441a      	add	r2, r3
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cea:	440b      	add	r3, r1
 8011cec:	3b01      	subs	r3, #1
 8011cee:	69f9      	ldr	r1, [r7, #28]
 8011cf0:	5c89      	ldrb	r1, [r1, r2]
 8011cf2:	69fa      	ldr	r2, [r7, #28]
 8011cf4:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8011cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cfc:	7efb      	ldrb	r3, [r7, #27]
 8011cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d00:	429a      	cmp	r2, r3
 8011d02:	dbe7      	blt.n	8011cd4 <cliUpdate+0xa8>
          }

          line->count--;
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	b2da      	uxtb	r2, r3
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	2100      	movs	r1, #0
 8011d20:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	498e      	ldr	r1, [pc, #568]	; (8011f60 <cliUpdate+0x334>)
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f003 fdf0 	bl	801590e <uartPrintf>
        }
        break;
 8011d2e:	e0f9      	b.n	8011f24 <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d055      	beq.n	8011de6 <cliUpdate+0x1ba>
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d050      	beq.n	8011de6 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d10e      	bne.n	8011d72 <cliUpdate+0x146>
          {
            line->count--;
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	2100      	movs	r1, #0
 8011d70:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8011d72:	69fb      	ldr	r3, [r7, #28]
 8011d74:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d231      	bcs.n	8011de6 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8011d92:	2300      	movs	r3, #0
 8011d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d96:	e013      	b.n	8011dc0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011d9e:	461a      	mov	r2, r3
 8011da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da2:	441a      	add	r2, r3
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011daa:	4619      	mov	r1, r3
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	440b      	add	r3, r1
 8011db0:	3b01      	subs	r3, #1
 8011db2:	69f9      	ldr	r1, [r7, #28]
 8011db4:	5c89      	ldrb	r1, [r1, r2]
 8011db6:	69fa      	ldr	r2, [r7, #28]
 8011db8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8011dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dc0:	7ebb      	ldrb	r3, [r7, #26]
 8011dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	dbe7      	blt.n	8011d98 <cliUpdate+0x16c>
            }

            line->count--;
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011dde:	461a      	mov	r2, r3
 8011de0:	69fb      	ldr	r3, [r7, #28]
 8011de2:	2100      	movs	r1, #0
 8011de4:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 809b 	beq.w	8011f28 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011df8:	3b01      	subs	r3, #1
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	4957      	ldr	r1, [pc, #348]	; (8011f64 <cliUpdate+0x338>)
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f003 fd80 	bl	801590e <uartPrintf>
        }
        break;
 8011e0e:	e08b      	b.n	8011f28 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e16:	3301      	adds	r3, #1
 8011e18:	69fa      	ldr	r2, [r7, #28]
 8011e1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	f280 8084 	bge.w	8011f2c <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d124      	bne.n	8011e7e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	1cf9      	adds	r1, r7, #3
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f003 fcc3 	bl	80157c8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011e48:	461a      	mov	r2, r3
 8011e4a:	78f9      	ldrb	r1, [r7, #3]
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e56:	3301      	adds	r3, #1
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8011e60:	69fb      	ldr	r3, [r7, #28]
 8011e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011e66:	3301      	adds	r3, #1
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e76:	461a      	mov	r2, r3
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d24e      	bcs.n	8011f2c <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011e9a:	1ad3      	subs	r3, r2, r3
 8011e9c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ea2:	e013      	b.n	8011ecc <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011eaa:	461a      	mov	r2, r3
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	1e5a      	subs	r2, r3, #1
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011eb8:	4619      	mov	r1, r3
 8011eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebc:	1acb      	subs	r3, r1, r3
 8011ebe:	69f9      	ldr	r1, [r7, #28]
 8011ec0:	5c89      	ldrb	r1, [r1, r2]
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec8:	3301      	adds	r3, #1
 8011eca:	627b      	str	r3, [r7, #36]	; 0x24
 8011ecc:	7e7b      	ldrb	r3, [r7, #25]
 8011ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	dbe7      	blt.n	8011ea4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011eda:	461a      	mov	r2, r3
 8011edc:	78f9      	ldrb	r1, [r7, #3]
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	5499      	strb	r1, [r3, r2]
            line->count++;
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011ee8:	3301      	adds	r3, #1
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011ef8:	3301      	adds	r3, #1
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011f08:	461a      	mov	r2, r3
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	2100      	movs	r1, #0
 8011f0e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	78fa      	ldrb	r2, [r7, #3]
 8011f16:	4914      	ldr	r1, [pc, #80]	; (8011f68 <cliUpdate+0x33c>)
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f003 fcf8 	bl	801590e <uartPrintf>
          }
        }
        break;
 8011f1e:	e005      	b.n	8011f2c <cliUpdate+0x300>
    }
  }
 8011f20:	bf00      	nop
 8011f22:	e004      	b.n	8011f2e <cliUpdate+0x302>
        break;
 8011f24:	bf00      	nop
 8011f26:	e002      	b.n	8011f2e <cliUpdate+0x302>
        break;
 8011f28:	bf00      	nop
 8011f2a:	e000      	b.n	8011f2e <cliUpdate+0x302>
        break;
 8011f2c:	bf00      	nop

  switch(p_cli->state)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	7c1b      	ldrb	r3, [r3, #16]
 8011f32:	3b01      	subs	r3, #1
 8011f34:	2b03      	cmp	r3, #3
 8011f36:	f200 80d2 	bhi.w	80120de <cliUpdate+0x4b2>
 8011f3a:	a201      	add	r2, pc, #4	; (adr r2, 8011f40 <cliUpdate+0x314>)
 8011f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f40:	08011f51 	.word	0x08011f51
 8011f44:	08011f59 	.word	0x08011f59
 8011f48:	08011f6d 	.word	0x08011f6d
 8011f4c:	080120d5 	.word	0x080120d5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2202      	movs	r2, #2
 8011f54:	741a      	strb	r2, [r3, #16]
      break;
 8011f56:	e0c2      	b.n	80120de <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2203      	movs	r2, #3
 8011f5c:	741a      	strb	r2, [r3, #16]
      break;
 8011f5e:	e0be      	b.n	80120de <cliUpdate+0x4b2>
 8011f60:	0802c0a0 	.word	0x0802c0a0
 8011f64:	0802c0a8 	.word	0x0802c0a8
 8011f68:	0802c0b0 	.word	0x0802c0b0

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8011f72:	78fb      	ldrb	r3, [r7, #3]
 8011f74:	2b44      	cmp	r3, #68	; 0x44
 8011f76:	d11a      	bne.n	8011fae <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d015      	beq.n	8011fae <cliUpdate+0x382>
        {
          line->cursor--;
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	b2da      	uxtb	r2, r3
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8011f92:	231b      	movs	r3, #27
 8011f94:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8011f96:	235b      	movs	r3, #91	; 0x5b
 8011f98:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8011f9a:	78fb      	ldrb	r3, [r7, #3]
 8011f9c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f107 010c 	add.w	r1, r7, #12
 8011fa6:	2203      	movs	r2, #3
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f003 fc0d 	bl	80157c8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8011fae:	78fb      	ldrb	r3, [r7, #3]
 8011fb0:	2b43      	cmp	r3, #67	; 0x43
 8011fb2:	d11d      	bne.n	8011ff0 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->buf_len)
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d215      	bcs.n	8011ff0 <cliUpdate+0x3c4>
        {
          line->cursor++;
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011fca:	3301      	adds	r3, #1
 8011fcc:	b2da      	uxtb	r2, r3
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8011fd4:	231b      	movs	r3, #27
 8011fd6:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8011fd8:	235b      	movs	r3, #91	; 0x5b
 8011fda:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8011fdc:	78fb      	ldrb	r3, [r7, #3]
 8011fde:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f107 010c 	add.w	r1, r7, #12
 8011fe8:	2203      	movs	r2, #3
 8011fea:	4618      	mov	r0, r3
 8011fec:	f003 fbec 	bl	80157c8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8011ff0:	78fb      	ldrb	r3, [r7, #3]
 8011ff2:	2b41      	cmp	r3, #65	; 0x41
 8011ff4:	d10c      	bne.n	8012010 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 f8eb 	bl	80121d4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	781a      	ldrb	r2, [r3, #0]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8012008:	4619      	mov	r1, r3
 801200a:	4610      	mov	r0, r2
 801200c:	f003 fc7f 	bl	801590e <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8012010:	78fb      	ldrb	r3, [r7, #3]
 8012012:	2b42      	cmp	r3, #66	; 0x42
 8012014:	d10c      	bne.n	8012030 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8012016:	2100      	movs	r1, #0
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 f8db 	bl	80121d4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	781a      	ldrb	r2, [r3, #0]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8012028:	4619      	mov	r1, r3
 801202a:	4610      	mov	r0, r2
 801202c:	f003 fc6f 	bl	801590e <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8012030:	78fb      	ldrb	r3, [r7, #3]
 8012032:	2b31      	cmp	r3, #49	; 0x31
 8012034:	d10f      	bne.n	8012056 <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	7818      	ldrb	r0, [r3, #0]
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012040:	461a      	mov	r2, r3
 8012042:	492b      	ldr	r1, [pc, #172]	; (80120f0 <cliUpdate+0x4c4>)
 8012044:	f003 fc63 	bl	801590e <uartPrintf>
        line->cursor = 0;
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	2200      	movs	r2, #0
 801204c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2204      	movs	r2, #4
 8012054:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8012056:	78fb      	ldrb	r3, [r7, #3]
 8012058:	2b34      	cmp	r3, #52	; 0x34
 801205a:	d13f      	bne.n	80120dc <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012068:	429a      	cmp	r2, r3
 801206a:	d210      	bcs.n	801208e <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012072:	b29a      	uxth	r2, r3
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801207a:	b29b      	uxth	r3, r3
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	8afa      	ldrh	r2, [r7, #22]
 8012086:	491b      	ldr	r1, [pc, #108]	; (80120f4 <cliUpdate+0x4c8>)
 8012088:	4618      	mov	r0, r3
 801208a:	f003 fc40 	bl	801590e <uartPrintf>
        }
        if (line->cursor > line->count)
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801209a:	429a      	cmp	r2, r3
 801209c:	d910      	bls.n	80120c0 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	1ad3      	subs	r3, r2, r3
 80120b0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	8afa      	ldrh	r2, [r7, #22]
 80120b8:	490d      	ldr	r1, [pc, #52]	; (80120f0 <cliUpdate+0x4c4>)
 80120ba:	4618      	mov	r0, r3
 80120bc:	f003 fc27 	bl	801590e <uartPrintf>
        }
        line->cursor = line->count;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2204      	movs	r2, #4
 80120d0:	741a      	strb	r2, [r3, #16]
      }
      break;
 80120d2:	e003      	b.n	80120dc <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	741a      	strb	r2, [r3, #16]
      break;
 80120da:	e000      	b.n	80120de <cliUpdate+0x4b2>
      break;
 80120dc:	bf00      	nop
  }



  cliShowLog(p_cli);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7ff fce8 	bl	8011ab4 <cliShowLog>

  return ret;
 80120e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3730      	adds	r7, #48	; 0x30
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	0802c0bc 	.word	0x0802c0bc
 80120f4:	0802c0c4 	.word	0x0802c0c4

080120f8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2200      	movs	r2, #0
 8012104:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2200      	movs	r2, #0
 801210c:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	221f      	movs	r2, #31
 8012114:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8012120:	bf00      	nop
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 801212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 801213a:	461a      	mov	r2, r3
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	4613      	mov	r3, r2
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	00da      	lsls	r2, r3, #3
 8012146:	1ad2      	subs	r2, r2, r3
 8012148:	188b      	adds	r3, r1, r2
 801214a:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8012154:	4694      	mov	ip, r2
 8012156:	f104 0e20 	add.w	lr, r4, #32
 801215a:	4665      	mov	r5, ip
 801215c:	4626      	mov	r6, r4
 801215e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012160:	6028      	str	r0, [r5, #0]
 8012162:	6069      	str	r1, [r5, #4]
 8012164:	60aa      	str	r2, [r5, #8]
 8012166:	60eb      	str	r3, [r5, #12]
 8012168:	3410      	adds	r4, #16
 801216a:	f10c 0c10 	add.w	ip, ip, #16
 801216e:	4574      	cmp	r4, lr
 8012170:	d1f3      	bne.n	801215a <cliLineAdd+0x2e>
 8012172:	4663      	mov	r3, ip
 8012174:	4622      	mov	r2, r4
 8012176:	8811      	ldrh	r1, [r2, #0]
 8012178:	7892      	ldrb	r2, [r2, #2]
 801217a:	8019      	strh	r1, [r3, #0]
 801217c:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8012184:	2b03      	cmp	r3, #3
 8012186:	d807      	bhi.n	8012198 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 801218e:	3301      	adds	r3, #1
 8012190:	b2da      	uxtb	r2, r3
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 801219e:	b25a      	sxtb	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80121ac:	3301      	adds	r3, #1
 80121ae:	425a      	negs	r2, r3
 80121b0:	f003 0303 	and.w	r3, r3, #3
 80121b4:	f002 0203 	and.w	r2, r2, #3
 80121b8:	bf58      	it	pl
 80121ba:	4253      	negpl	r3, r2
 80121bc:	b2da      	uxtb	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2201      	movs	r2, #1
 80121c8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80121cc:	bf00      	nop
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121d4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80121d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121d6:	b085      	sub	sp, #20
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f000 8086 	beq.w	80122f8 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d008      	beq.n	8012208 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7818      	ldrb	r0, [r3, #0]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8012200:	461a      	mov	r2, r3
 8012202:	493f      	ldr	r1, [pc, #252]	; (8012300 <cliLineChange+0x12c>)
 8012204:	f003 fb83 	bl	801590e <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 801220e:	2b00      	cmp	r3, #0
 8012210:	d008      	beq.n	8012224 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	7818      	ldrb	r0, [r3, #0]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 801221c:	461a      	mov	r2, r3
 801221e:	4939      	ldr	r1, [pc, #228]	; (8012304 <cliLineChange+0x130>)
 8012220:	f003 fb75 	bl	801590e <uartPrintf>
  }


  if (key_up == true)
 8012224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d125      	bne.n	8012278 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8012232:	2b00      	cmp	r3, #0
 8012234:	d006      	beq.n	8012244 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 801223c:	b25a      	sxtb	r2, r3
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 801224a:	461a      	mov	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8012252:	4413      	add	r3, r2
 8012254:	3b01      	subs	r3, #1
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 801225c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012260:	fb01 f202 	mul.w	r2, r1, r2
 8012264:	1a9b      	subs	r3, r3, r2
 8012266:	b25a      	sxtb	r2, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8012274:	73fb      	strb	r3, [r7, #15]
 8012276:	e013      	b.n	80122a0 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 801227e:	3301      	adds	r3, #1
 8012280:	687a      	ldr	r2, [r7, #4]
 8012282:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8012286:	fb93 f1f2 	sdiv	r1, r3, r2
 801228a:	fb01 f202 	mul.w	r2, r1, r2
 801228e:	1a9b      	subs	r3, r3, r2
 8012290:	b25a      	sxtb	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 801229e:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80122a0:	7bfa      	ldrb	r2, [r7, #15]
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	4613      	mov	r3, r2
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	4413      	add	r3, r2
 80122ac:	00da      	lsls	r2, r3, #3
 80122ae:	1ad2      	subs	r2, r2, r3
 80122b0:	1883      	adds	r3, r0, r2
 80122b2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80122b6:	461c      	mov	r4, r3
 80122b8:	f501 7609 	add.w	r6, r1, #548	; 0x224
 80122bc:	f104 0c20 	add.w	ip, r4, #32
 80122c0:	4635      	mov	r5, r6
 80122c2:	4623      	mov	r3, r4
 80122c4:	6818      	ldr	r0, [r3, #0]
 80122c6:	6859      	ldr	r1, [r3, #4]
 80122c8:	689a      	ldr	r2, [r3, #8]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80122ce:	3410      	adds	r4, #16
 80122d0:	3610      	adds	r6, #16
 80122d2:	4564      	cmp	r4, ip
 80122d4:	d1f4      	bne.n	80122c0 <cliLineChange+0xec>
 80122d6:	4633      	mov	r3, r6
 80122d8:	4622      	mov	r2, r4
 80122da:	8811      	ldrh	r1, [r2, #0]
 80122dc:	7892      	ldrb	r2, [r2, #2]
 80122de:	8019      	strh	r1, [r3, #0]
 80122e0:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80122f6:	e000      	b.n	80122fa <cliLineChange+0x126>
    return;
 80122f8:	bf00      	nop
}
 80122fa:	3714      	adds	r7, #20
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012300:	0802c0bc 	.word	0x0802c0bc
 8012304:	0802c0cc 	.word	0x0802c0cc

08012308 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8012310:	2300      	movs	r3, #0
 8012312:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f851 	bl	80123bc <cliParseArgs>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d046      	beq.n	80123ae <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8012320:	4825      	ldr	r0, [pc, #148]	; (80123b8 <cliRunCmd+0xb0>)
 8012322:	f000 f893 	bl	801244c <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801232c:	4618      	mov	r0, r3
 801232e:	f000 f8b1 	bl	8012494 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8012332:	2300      	movs	r3, #0
 8012334:	60fb      	str	r3, [r7, #12]
 8012336:	e033      	b.n	80123a0 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 801233e:	68fa      	ldr	r2, [r7, #12]
 8012340:	4613      	mov	r3, r2
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	4413      	add	r3, r2
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	4619      	mov	r1, r3
 8012354:	f7f5 fe74 	bl	8008040 <strcmp>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d11d      	bne.n	801239a <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8012364:	3b01      	subs	r3, #1
 8012366:	b29a      	uxth	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 801237a:	6879      	ldr	r1, [r7, #4]
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	4613      	mov	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	4413      	add	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	440b      	add	r3, r1
 8012388:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	687a      	ldr	r2, [r7, #4]
 8012390:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8012394:	4610      	mov	r0, r2
 8012396:	4798      	blx	r3
        break;
 8012398:	e009      	b.n	80123ae <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	3301      	adds	r3, #1
 801239e:	60fb      	str	r3, [r7, #12]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80123a6:	461a      	mov	r2, r3
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	4293      	cmp	r3, r2
 80123ac:	dbc4      	blt.n	8012338 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80123ae:	7afb      	ldrb	r3, [r7, #11]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3710      	adds	r7, #16
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}
 80123b8:	0802c0d4 	.word	0x0802c0d4

080123bc <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b088      	sub	sp, #32
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80123c4:	2300      	movs	r3, #0
 80123c6:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80123c8:	2300      	movs	r3, #0
 80123ca:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80123da:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80123e2:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80123e4:	8afb      	ldrh	r3, [r7, #22]
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	4413      	add	r3, r2
 80123ec:	2200      	movs	r2, #0
 80123ee:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80123f0:	4b15      	ldr	r3, [pc, #84]	; (8012448 <cliParseArgs+0x8c>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f107 0208 	add.w	r2, r7, #8
 80123f8:	4619      	mov	r1, r3
 80123fa:	6938      	ldr	r0, [r7, #16]
 80123fc:	f016 fcfe 	bl	8028dfc <strtok_r>
 8012400:	61b8      	str	r0, [r7, #24]
 8012402:	e010      	b.n	8012426 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8012404:	8afb      	ldrh	r3, [r7, #22]
 8012406:	1c5a      	adds	r2, r3, #1
 8012408:	82fa      	strh	r2, [r7, #22]
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	4413      	add	r3, r2
 8012410:	69ba      	ldr	r2, [r7, #24]
 8012412:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8012414:	4b0c      	ldr	r3, [pc, #48]	; (8012448 <cliParseArgs+0x8c>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f107 0208 	add.w	r2, r7, #8
 801241c:	4619      	mov	r1, r3
 801241e:	2000      	movs	r0, #0
 8012420:	f016 fcec 	bl	8028dfc <strtok_r>
 8012424:	61b8      	str	r0, [r7, #24]
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d1eb      	bne.n	8012404 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	8afa      	ldrh	r2, [r7, #22]
 8012430:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 8012434:	8afb      	ldrh	r3, [r7, #22]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <cliParseArgs+0x82>
  {
    ret = true;
 801243a:	2301      	movs	r3, #1
 801243c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 801243e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3720      	adds	r7, #32
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	20000354 	.word	0x20000354

0801244c <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 801244c:	b40f      	push	{r0, r1, r2, r3}
 801244e:	b580      	push	{r7, lr}
 8012450:	b084      	sub	sp, #16
 8012452:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8012454:	f107 031c 	add.w	r3, r7, #28
 8012458:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 801245a:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <cliPrintf+0x44>)
 801245c:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f103 0011 	add.w	r0, r3, #17
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	69ba      	ldr	r2, [r7, #24]
 8012468:	21ff      	movs	r1, #255	; 0xff
 801246a:	f016 fd73 	bl	8028f54 <vsniprintf>
 801246e:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	7818      	ldrb	r0, [r3, #0]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	3311      	adds	r3, #17
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	4619      	mov	r1, r3
 801247c:	f003 f9a4 	bl	80157c8 <uartWrite>
}
 8012480:	bf00      	nop
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801248a:	b004      	add	sp, #16
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	2000110c 	.word	0x2000110c

08012494 <cliToUpper>:

void cliToUpper(char *str)
{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 801249c:	2300      	movs	r3, #0
 801249e:	81fb      	strh	r3, [r7, #14]
 80124a0:	e018      	b.n	80124d4 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80124a2:	89fb      	ldrh	r3, [r7, #14]
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	4413      	add	r3, r2
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80124ac:	7b7b      	ldrb	r3, [r7, #13]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d014      	beq.n	80124dc <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80124b2:	7b7b      	ldrb	r3, [r7, #13]
 80124b4:	2b60      	cmp	r3, #96	; 0x60
 80124b6:	d905      	bls.n	80124c4 <cliToUpper+0x30>
 80124b8:	7b7b      	ldrb	r3, [r7, #13]
 80124ba:	2b7a      	cmp	r3, #122	; 0x7a
 80124bc:	d802      	bhi.n	80124c4 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80124be:	7b7b      	ldrb	r3, [r7, #13]
 80124c0:	3b20      	subs	r3, #32
 80124c2:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80124c4:	89fb      	ldrh	r3, [r7, #14]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	4413      	add	r3, r2
 80124ca:	7b7a      	ldrb	r2, [r7, #13]
 80124cc:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80124ce:	89fb      	ldrh	r3, [r7, #14]
 80124d0:	3301      	adds	r3, #1
 80124d2:	81fb      	strh	r3, [r7, #14]
 80124d4:	89fb      	ldrh	r3, [r7, #14]
 80124d6:	2b0f      	cmp	r3, #15
 80124d8:	d9e3      	bls.n	80124a2 <cliToUpper+0xe>
 80124da:	e000      	b.n	80124de <cliToUpper+0x4a>
      break;
 80124dc:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80124de:	89fb      	ldrh	r3, [r7, #14]
 80124e0:	2b10      	cmp	r3, #16
 80124e2:	d105      	bne.n	80124f0 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80124e4:	89fb      	ldrh	r3, [r7, #14]
 80124e6:	3b01      	subs	r3, #1
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	4413      	add	r3, r2
 80124ec:	2200      	movs	r2, #0
 80124ee:	701a      	strb	r2, [r3, #0]
  }
}
 80124f0:	bf00      	nop
 80124f2:	3714      	adds	r7, #20
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	4603      	mov	r3, r0
 8012504:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 801250a:	4b0f      	ldr	r3, [pc, #60]	; (8012548 <cliArgsGetData+0x4c>)
 801250c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 801250e:	79fb      	ldrb	r3, [r7, #7]
 8012510:	b29a      	uxth	r2, r3
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8012518:	429a      	cmp	r2, r3
 801251a:	d301      	bcc.n	8012520 <cliArgsGetData+0x24>
  {
    return 0;
 801251c:	2300      	movs	r3, #0
 801251e:	e00e      	b.n	801253e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	4413      	add	r3, r2
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2200      	movs	r2, #0
 8012530:	2100      	movs	r1, #0
 8012532:	4618      	mov	r0, r3
 8012534:	f016 fcd8 	bl	8028ee8 <strtoul>
 8012538:	4603      	mov	r3, r0
 801253a:	60fb      	str	r3, [r7, #12]

  return ret;
 801253c:	68fb      	ldr	r3, [r7, #12]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	2000110c 	.word	0x2000110c

0801254c <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	4603      	mov	r3, r0
 8012554:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8012556:	f04f 0300 	mov.w	r3, #0
 801255a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 801255c:	4b10      	ldr	r3, [pc, #64]	; (80125a0 <cliArgsGetFloat+0x54>)
 801255e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8012560:	79fb      	ldrb	r3, [r7, #7]
 8012562:	b29a      	uxth	r2, r3
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 801256a:	429a      	cmp	r2, r3
 801256c:	d302      	bcc.n	8012574 <cliArgsGetFloat+0x28>
  {
    return 0;
 801256e:	f04f 0300 	mov.w	r3, #0
 8012572:	e00d      	b.n	8012590 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 801257a:	79fb      	ldrb	r3, [r7, #7]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2100      	movs	r1, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f016 fbb5 	bl	8028cf4 <strtof>
 801258a:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 801258e:	68fb      	ldr	r3, [r7, #12]
}
 8012590:	ee07 3a90 	vmov	s15, r3
 8012594:	eeb0 0a67 	vmov.f32	s0, s15
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	2000110c 	.word	0x2000110c

080125a4 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	4603      	mov	r3, r0
 80125ac:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80125ae:	2300      	movs	r3, #0
 80125b0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80125b2:	4b0d      	ldr	r3, [pc, #52]	; (80125e8 <cliArgsGetStr+0x44>)
 80125b4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80125b6:	79fb      	ldrb	r3, [r7, #7]
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d301      	bcc.n	80125c8 <cliArgsGetStr+0x24>
  {
    return 0;
 80125c4:	2300      	movs	r3, #0
 80125c6:	e008      	b.n	80125da <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 80125ce:	79fb      	ldrb	r3, [r7, #7]
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60fb      	str	r3, [r7, #12]

  return ret;
 80125d8:	68fb      	ldr	r3, [r7, #12]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3714      	adds	r7, #20
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	2000110c 	.word	0x2000110c

080125ec <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	4603      	mov	r3, r0
 80125f4:	6039      	str	r1, [r7, #0]
 80125f6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80125f8:	2300      	movs	r3, #0
 80125fa:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80125fc:	4b0f      	ldr	r3, [pc, #60]	; (801263c <cliArgsIsStr+0x50>)
 80125fe:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8012600:	79fb      	ldrb	r3, [r7, #7]
 8012602:	b29a      	uxth	r2, r3
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 801260a:	429a      	cmp	r2, r3
 801260c:	d301      	bcc.n	8012612 <cliArgsIsStr+0x26>
  {
    return 0;
 801260e:	2300      	movs	r3, #0
 8012610:	e010      	b.n	8012634 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8012618:	79fb      	ldrb	r3, [r7, #7]
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	4413      	add	r3, r2
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4619      	mov	r1, r3
 8012622:	6838      	ldr	r0, [r7, #0]
 8012624:	f7f5 fd0c 	bl	8008040 <strcmp>
 8012628:	4603      	mov	r3, r0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d101      	bne.n	8012632 <cliArgsIsStr+0x46>
  {
    ret = true;
 801262e:	2301      	movs	r3, #1
 8012630:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012632:	7bfb      	ldrb	r3, [r7, #15]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3710      	adds	r7, #16
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	2000110c 	.word	0x2000110c

08012640 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8012646:	4b08      	ldr	r3, [pc, #32]	; (8012668 <cliKeepLoop+0x28>)
 8012648:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	4618      	mov	r0, r3
 8012650:	f002 ff5c 	bl	801550c <uartAvailable>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <cliKeepLoop+0x1e>
  {
    return true;
 801265a:	2301      	movs	r3, #1
 801265c:	e000      	b.n	8012660 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 801265e:	2300      	movs	r3, #0
  }
}
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	2000110c 	.word	0x2000110c

0801266c <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b086      	sub	sp, #24
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8012676:	2301      	movs	r3, #1
 8012678:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 801267a:	4b20      	ldr	r3, [pc, #128]	; (80126fc <cliAdd+0x90>)
 801267c:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8012684:	2b0f      	cmp	r3, #15
 8012686:	d901      	bls.n	801268c <cliAdd+0x20>
  {
    return false;
 8012688:	2300      	movs	r3, #0
 801268a:	e032      	b.n	80126f2 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8012692:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8012694:	89fa      	ldrh	r2, [r7, #14]
 8012696:	4613      	mov	r3, r2
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	4413      	add	r3, r2
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80126a2:	693a      	ldr	r2, [r7, #16]
 80126a4:	4413      	add	r3, r2
 80126a6:	3304      	adds	r3, #4
 80126a8:	6879      	ldr	r1, [r7, #4]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f015 fcf7 	bl	802809e <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80126b0:	89fa      	ldrh	r2, [r7, #14]
 80126b2:	6939      	ldr	r1, [r7, #16]
 80126b4:	4613      	mov	r3, r2
 80126b6:	009b      	lsls	r3, r3, #2
 80126b8:	4413      	add	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	440b      	add	r3, r1
 80126be:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80126c2:	683a      	ldr	r2, [r7, #0]
 80126c4:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80126c6:	89fa      	ldrh	r2, [r7, #14]
 80126c8:	4613      	mov	r3, r2
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	4413      	add	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80126d4:	693a      	ldr	r2, [r7, #16]
 80126d6:	4413      	add	r3, r2
 80126d8:	3304      	adds	r3, #4
 80126da:	4618      	mov	r0, r3
 80126dc:	f7ff feda 	bl	8012494 <cliToUpper>

  p_cli->cmd_count++;
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80126e6:	3301      	adds	r3, #1
 80126e8:	b29a      	uxth	r2, r3
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3718      	adds	r7, #24
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	2000110c 	.word	0x2000110c

08012700 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b084      	sub	sp, #16
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8012708:	4b15      	ldr	r3, [pc, #84]	; (8012760 <cliShowList+0x60>)
 801270a:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 801270c:	4815      	ldr	r0, [pc, #84]	; (8012764 <cliShowList+0x64>)
 801270e:	f7ff fe9d 	bl	801244c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8012712:	4815      	ldr	r0, [pc, #84]	; (8012768 <cliShowList+0x68>)
 8012714:	f7ff fe9a 	bl	801244c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8012718:	2300      	movs	r3, #0
 801271a:	60fb      	str	r3, [r7, #12]
 801271c:	e012      	b.n	8012744 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	4613      	mov	r3, r2
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	4413      	add	r3, r2
 8012726:	009b      	lsls	r3, r3, #2
 8012728:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801272c:	68ba      	ldr	r2, [r7, #8]
 801272e:	4413      	add	r3, r2
 8012730:	3304      	adds	r3, #4
 8012732:	4618      	mov	r0, r3
 8012734:	f7ff fe8a 	bl	801244c <cliPrintf>
    cliPrintf("\r\n");
 8012738:	480a      	ldr	r0, [pc, #40]	; (8012764 <cliShowList+0x64>)
 801273a:	f7ff fe87 	bl	801244c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	3301      	adds	r3, #1
 8012742:	60fb      	str	r3, [r7, #12]
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 801274a:	461a      	mov	r2, r3
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	4293      	cmp	r3, r2
 8012750:	dbe5      	blt.n	801271e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8012752:	4806      	ldr	r0, [pc, #24]	; (801276c <cliShowList+0x6c>)
 8012754:	f7ff fe7a 	bl	801244c <cliPrintf>
}
 8012758:	bf00      	nop
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	2000110c 	.word	0x2000110c
 8012764:	0802c0d4 	.word	0x0802c0d4
 8012768:	0802c0d8 	.word	0x0802c0d8
 801276c:	0802c0f8 	.word	0x0802c0f8

08012770 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08c      	sub	sp, #48	; 0x30
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8012778:	2310      	movs	r3, #16
 801277a:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	881b      	ldrh	r3, [r3, #0]
 8012780:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8012790:	4840      	ldr	r0, [pc, #256]	; (8012894 <cliMemoryDump+0x124>)
 8012792:	f7ff fe5b 	bl	801244c <cliPrintf>
 8012796:	e07a      	b.n	801288e <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2b01      	cmp	r3, #1
 801279c:	dd09      	ble.n	80127b2 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	3304      	adds	r3, #4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2200      	movs	r2, #0
 80127a6:	2100      	movs	r1, #0
 80127a8:	4618      	mov	r0, r3
 80127aa:	f016 fb9d 	bl	8028ee8 <strtoul>
 80127ae:	4603      	mov	r3, r0
 80127b0:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2200      	movs	r2, #0
 80127b8:	2100      	movs	r1, #0
 80127ba:	4618      	mov	r0, r3
 80127bc:	f016 fb94 	bl	8028ee8 <strtoul>
 80127c0:	4603      	mov	r3, r0
 80127c2:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80127c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c6:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80127c8:	4833      	ldr	r0, [pc, #204]	; (8012898 <cliMemoryDump+0x128>)
 80127ca:	f7ff fe3f 	bl	801244c <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80127ce:	2300      	movs	r3, #0
 80127d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127d2:	e058      	b.n	8012886 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80127d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d6:	f003 0303 	and.w	r3, r3, #3
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d104      	bne.n	80127e8 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80127de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e0:	4619      	mov	r1, r3
 80127e2:	482e      	ldr	r0, [pc, #184]	; (801289c <cliMemoryDump+0x12c>)
 80127e4:	f7ff fe32 	bl	801244c <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80127e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4619      	mov	r1, r3
 80127ee:	482c      	ldr	r0, [pc, #176]	; (80128a0 <cliMemoryDump+0x130>)
 80127f0:	f7ff fe2c 	bl	801244c <cliPrintf>

    if ((idx%4) == 3)
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	425a      	negs	r2, r3
 80127f8:	f003 0303 	and.w	r3, r3, #3
 80127fc:	f002 0203 	and.w	r2, r2, #3
 8012800:	bf58      	it	pl
 8012802:	4253      	negpl	r3, r2
 8012804:	2b03      	cmp	r3, #3
 8012806:	d138      	bne.n	801287a <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8012808:	4826      	ldr	r0, [pc, #152]	; (80128a4 <cliMemoryDump+0x134>)
 801280a:	f7ff fe1f 	bl	801244c <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 801280e:	2300      	movs	r3, #0
 8012810:	623b      	str	r3, [r7, #32]
 8012812:	e02c      	b.n	801286e <cliMemoryDump+0xfe>
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8012818:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 801281a:	2300      	movs	r3, #0
 801281c:	61fb      	str	r3, [r7, #28]
 801281e:	e01d      	b.n	801285c <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8012820:	f107 020c 	add.w	r2, r7, #12
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	4413      	add	r3, r2
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	2b1f      	cmp	r3, #31
 801282c:	d910      	bls.n	8012850 <cliMemoryDump+0xe0>
 801282e:	f107 020c 	add.w	r2, r7, #12
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	4413      	add	r3, r2
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b7e      	cmp	r3, #126	; 0x7e
 801283a:	d809      	bhi.n	8012850 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 801283c:	f107 020c 	add.w	r2, r7, #12
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	4619      	mov	r1, r3
 8012848:	4817      	ldr	r0, [pc, #92]	; (80128a8 <cliMemoryDump+0x138>)
 801284a:	f7ff fdff 	bl	801244c <cliPrintf>
 801284e:	e002      	b.n	8012856 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8012850:	4816      	ldr	r0, [pc, #88]	; (80128ac <cliMemoryDump+0x13c>)
 8012852:	f7ff fdfb 	bl	801244c <cliPrintf>
        for (i=0;i<4;i++)
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	3301      	adds	r3, #1
 801285a:	61fb      	str	r3, [r7, #28]
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	2b03      	cmp	r3, #3
 8012860:	ddde      	ble.n	8012820 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	3304      	adds	r3, #4
 8012866:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	3301      	adds	r3, #1
 801286c:	623b      	str	r3, [r7, #32]
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	2b03      	cmp	r3, #3
 8012872:	ddcf      	ble.n	8012814 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8012874:	480e      	ldr	r0, [pc, #56]	; (80128b0 <cliMemoryDump+0x140>)
 8012876:	f7ff fde9 	bl	801244c <cliPrintf>
    }
    addr++;
 801287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287c:	3304      	adds	r3, #4
 801287e:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	3301      	adds	r3, #1
 8012884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288a:	429a      	cmp	r2, r3
 801288c:	dba2      	blt.n	80127d4 <cliMemoryDump+0x64>
  }
}
 801288e:	3730      	adds	r7, #48	; 0x30
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	0802c118 	.word	0x0802c118
 8012898:	0802c12c 	.word	0x0802c12c
 801289c:	0802c134 	.word	0x0802c134
 80128a0:	0802c140 	.word	0x0802c140
 80128a4:	0802c148 	.word	0x0802c148
 80128a8:	0802c14c 	.word	0x0802c14c
 80128ac:	0802c150 	.word	0x0802c150
 80128b0:	0802c154 	.word	0x0802c154

080128b4 <cliTaskList>:

void cliTaskList(cli_args_t *args)
{
 80128b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128b6:	b0a3      	sub	sp, #140	; 0x8c
 80128b8:	af08      	add	r7, sp, #32
 80128ba:	60f8      	str	r0, [r7, #12]
  int averageLoadSum = 0;
 80128bc:	2300      	movs	r3, #0
 80128be:	667b      	str	r3, [r7, #100]	; 0x64

  cliPrintf("Task list             rate/hz  max/us  avg/us maxload avgload  total/ms   late    run reqd/us\r\n");
 80128c0:	4869      	ldr	r0, [pc, #420]	; (8012a68 <cliTaskList+0x1b4>)
 80128c2:	f7ff fdc3 	bl	801244c <cliPrintf>

    for (taskId_e taskId = 0; taskId < TASK_COUNT; taskId++) {
 80128c6:	2300      	movs	r3, #0
 80128c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80128cc:	e09a      	b.n	8012a04 <cliTaskList+0x150>
        taskInfo_t taskInfo;
        getTaskInfo(taskId, &taskInfo);
 80128ce:	f107 0210 	add.w	r2, r7, #16
 80128d2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80128d6:	4611      	mov	r1, r2
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fb fd9d 	bl	800e418 <getTaskInfo>
        if (taskInfo.isEnabled) {
 80128de:	7e3b      	ldrb	r3, [r7, #24]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 808a 	beq.w	80129fa <cliTaskList+0x146>
            int taskFrequency = taskInfo.averageDeltaTime10thUs == 0 ? 0 : lrintf(1e7f / taskInfo.averageDeltaTime10thUs);
 80128e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00e      	beq.n	801290a <cliTaskList+0x56>
 80128ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ee:	ee07 3a90 	vmov	s15, r3
 80128f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128f6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8012a6c <cliTaskList+0x1b8>
 80128fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128fe:	eeb0 0a47 	vmov.f32	s0, s14
 8012902:	f018 fd47 	bl	802b394 <lrintf>
 8012906:	4603      	mov	r3, r0
 8012908:	e000      	b.n	801290c <cliTaskList+0x58>
 801290a:	2300      	movs	r3, #0
 801290c:	65fb      	str	r3, [r7, #92]	; 0x5c
            cliPrintf("%02d - (%15s) ", taskId, taskInfo.taskName);
 801290e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012912:	693a      	ldr	r2, [r7, #16]
 8012914:	4619      	mov	r1, r3
 8012916:	4856      	ldr	r0, [pc, #344]	; (8012a70 <cliTaskList+0x1bc>)
 8012918:	f7ff fd98 	bl	801244c <cliPrintf>
            const int maxLoad = taskInfo.maxExecutionTimeUs == 0 ? 0 : (taskInfo.maxExecutionTimeUs * taskFrequency) / 1000;
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	2b00      	cmp	r3, #0
 8012920:	d008      	beq.n	8012934 <cliTaskList+0x80>
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012926:	fb02 f303 	mul.w	r3, r2, r3
 801292a:	4a52      	ldr	r2, [pc, #328]	; (8012a74 <cliTaskList+0x1c0>)
 801292c:	fba2 2303 	umull	r2, r3, r2, r3
 8012930:	099b      	lsrs	r3, r3, #6
 8012932:	e000      	b.n	8012936 <cliTaskList+0x82>
 8012934:	2300      	movs	r3, #0
 8012936:	65bb      	str	r3, [r7, #88]	; 0x58
            const int averageLoad = taskInfo.averageExecutionTime10thUs == 0 ? 0 : (taskInfo.averageExecutionTime10thUs * taskFrequency) / 10000;
 8012938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293a:	2b00      	cmp	r3, #0
 801293c:	d008      	beq.n	8012950 <cliTaskList+0x9c>
 801293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012942:	fb02 f303 	mul.w	r3, r2, r3
 8012946:	4a4c      	ldr	r2, [pc, #304]	; (8012a78 <cliTaskList+0x1c4>)
 8012948:	fba2 2303 	umull	r2, r3, r2, r3
 801294c:	0b5b      	lsrs	r3, r3, #13
 801294e:	e000      	b.n	8012952 <cliTaskList+0x9e>
 8012950:	2300      	movs	r3, #0
 8012952:	657b      	str	r3, [r7, #84]	; 0x54
            if (taskId != TASK_SERIAL) {
 8012954:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012958:	2b08      	cmp	r3, #8
 801295a:	d003      	beq.n	8012964 <cliTaskList+0xb0>
                averageLoadSum += averageLoad;
 801295c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801295e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012960:	4413      	add	r3, r2
 8012962:	667b      	str	r3, [r7, #100]	; 0x64
            }
            if (true) { // systemConfig()->task_statistics
              cliPrintf("%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d %6d %6d %7d\r\n",
 8012964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012966:	60bb      	str	r3, [r7, #8]
                      taskFrequency, taskInfo.maxExecutionTimeUs, taskInfo.averageExecutionTime10thUs / 10,
 8012968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
              cliPrintf("%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d %6d %6d %7d\r\n",
 801296a:	4a44      	ldr	r2, [pc, #272]	; (8012a7c <cliTaskList+0x1c8>)
 801296c:	fba2 1303 	umull	r1, r3, r2, r3
 8012970:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8012974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012976:	4a42      	ldr	r2, [pc, #264]	; (8012a80 <cliTaskList+0x1cc>)
 8012978:	fb82 1203 	smull	r1, r2, r2, r3
 801297c:	1092      	asrs	r2, r2, #2
 801297e:	17db      	asrs	r3, r3, #31
 8012980:	1ad4      	subs	r4, r2, r3
 8012982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012984:	4b3e      	ldr	r3, [pc, #248]	; (8012a80 <cliTaskList+0x1cc>)
 8012986:	fb83 0301 	smull	r0, r3, r3, r1
 801298a:	109a      	asrs	r2, r3, #2
 801298c:	17cb      	asrs	r3, r1, #31
 801298e:	1ad2      	subs	r2, r2, r3
 8012990:	4613      	mov	r3, r2
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	005b      	lsls	r3, r3, #1
 8012998:	1aca      	subs	r2, r1, r3
 801299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801299c:	4938      	ldr	r1, [pc, #224]	; (8012a80 <cliTaskList+0x1cc>)
 801299e:	fb81 0103 	smull	r0, r1, r1, r3
 80129a2:	1089      	asrs	r1, r1, #2
 80129a4:	17db      	asrs	r3, r3, #31
 80129a6:	1acd      	subs	r5, r1, r3
 80129a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80129aa:	4b35      	ldr	r3, [pc, #212]	; (8012a80 <cliTaskList+0x1cc>)
 80129ac:	fb83 1300 	smull	r1, r3, r3, r0
 80129b0:	1099      	asrs	r1, r3, #2
 80129b2:	17c3      	asrs	r3, r0, #31
 80129b4:	1ac9      	subs	r1, r1, r3
 80129b6:	460b      	mov	r3, r1
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	440b      	add	r3, r1
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	1ac1      	subs	r1, r0, r3
                      maxLoad/10, maxLoad%10, averageLoad/10, averageLoad%10,
                      taskInfo.totalExecutionTimeUs / 1000,
 80129c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
              cliPrintf("%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d %6d %6d %7d\r\n",
 80129c2:	482c      	ldr	r0, [pc, #176]	; (8012a74 <cliTaskList+0x1c0>)
 80129c4:	fba0 0303 	umull	r0, r3, r0, r3
 80129c8:	099b      	lsrs	r3, r3, #6
 80129ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80129cc:	6078      	str	r0, [r7, #4]
 80129ce:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 80129d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80129d2:	9007      	str	r0, [sp, #28]
 80129d4:	9606      	str	r6, [sp, #24]
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	9005      	str	r0, [sp, #20]
 80129da:	9304      	str	r3, [sp, #16]
 80129dc:	9103      	str	r1, [sp, #12]
 80129de:	9502      	str	r5, [sp, #8]
 80129e0:	9201      	str	r2, [sp, #4]
 80129e2:	9400      	str	r4, [sp, #0]
 80129e4:	4663      	mov	r3, ip
 80129e6:	68ba      	ldr	r2, [r7, #8]
 80129e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80129ea:	4826      	ldr	r0, [pc, #152]	; (8012a84 <cliTaskList+0x1d0>)
 80129ec:	f7ff fd2e 	bl	801244c <cliPrintf>
                      taskInfo.lateCount, taskInfo.runCount, taskInfo.execTime);
              schedulerResetTaskMaxExecutionTime(taskId);
 80129f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fb fe73 	bl	800e6e0 <schedulerResetTaskMaxExecutionTime>
    for (taskId_e taskId = 0; taskId < TASK_COUNT; taskId++) {
 80129fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80129fe:	3301      	adds	r3, #1
 8012a00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8012a04:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012a08:	2b0e      	cmp	r3, #14
 8012a0a:	f67f af60 	bls.w	80128ce <cliTaskList+0x1a>
            }
    }
    }
    if (true) { // systemConfig()->task_statistics
        cfCheckFuncInfo_t checkFuncInfo;
        getCheckFuncInfo(&checkFuncInfo);
 8012a0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fb fcdc 	bl	800e3d0 <getCheckFuncInfo>
        cliPrintf("RX Check Function %19d %7d %25d\r\n", checkFuncInfo.maxExecutionTimeUs, checkFuncInfo.averageExecutionTimeUs, checkFuncInfo.totalExecutionTimeUs / 1000);
 8012a18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a1e:	4815      	ldr	r0, [pc, #84]	; (8012a74 <cliTaskList+0x1c0>)
 8012a20:	fba0 0303 	umull	r0, r3, r0, r3
 8012a24:	099b      	lsrs	r3, r3, #6
 8012a26:	4818      	ldr	r0, [pc, #96]	; (8012a88 <cliTaskList+0x1d4>)
 8012a28:	f7ff fd10 	bl	801244c <cliPrintf>
        cliPrintf("Total (excluding SERIAL) %33d.%1d%%\r\n", averageLoadSum/10, averageLoadSum%10);
 8012a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a2e:	4a14      	ldr	r2, [pc, #80]	; (8012a80 <cliTaskList+0x1cc>)
 8012a30:	fb82 1203 	smull	r1, r2, r2, r3
 8012a34:	1092      	asrs	r2, r2, #2
 8012a36:	17db      	asrs	r3, r3, #31
 8012a38:	1ad0      	subs	r0, r2, r3
 8012a3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012a3c:	4b10      	ldr	r3, [pc, #64]	; (8012a80 <cliTaskList+0x1cc>)
 8012a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8012a42:	1099      	asrs	r1, r3, #2
 8012a44:	17d3      	asrs	r3, r2, #31
 8012a46:	1ac9      	subs	r1, r1, r3
 8012a48:	460b      	mov	r3, r1
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	440b      	add	r3, r1
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	1ad1      	subs	r1, r2, r3
 8012a52:	460a      	mov	r2, r1
 8012a54:	4601      	mov	r1, r0
 8012a56:	480d      	ldr	r0, [pc, #52]	; (8012a8c <cliTaskList+0x1d8>)
 8012a58:	f7ff fcf8 	bl	801244c <cliPrintf>
        schedulerResetCheckFunctionMaxExecutionTime();
 8012a5c:	f7fb fe64 	bl	800e728 <schedulerResetCheckFunctionMaxExecutionTime>
    }
}
 8012a60:	bf00      	nop
 8012a62:	376c      	adds	r7, #108	; 0x6c
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a68:	0802c15c 	.word	0x0802c15c
 8012a6c:	4b189680 	.word	0x4b189680
 8012a70:	0802c1bc 	.word	0x0802c1bc
 8012a74:	10624dd3 	.word	0x10624dd3
 8012a78:	d1b71759 	.word	0xd1b71759
 8012a7c:	cccccccd 	.word	0xcccccccd
 8012a80:	66666667 	.word	0x66666667
 8012a84:	0802c1cc 	.word	0x0802c1cc
 8012a88:	0802c200 	.word	0x0802c200
 8012a8c:	0802c224 	.word	0x0802c224

08012a90 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
  bool ret = true;
 8012a96:	2301      	movs	r3, #1
 8012a98:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8012a9a:	490d      	ldr	r1, [pc, #52]	; (8012ad0 <fatfsInit+0x40>)
 8012a9c:	480d      	ldr	r0, [pc, #52]	; (8012ad4 <fatfsInit+0x44>)
 8012a9e:	f014 fc17 	bl	80272d0 <FATFS_LinkDriver>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d10a      	bne.n	8012abe <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	4909      	ldr	r1, [pc, #36]	; (8012ad0 <fatfsInit+0x40>)
 8012aac:	480a      	ldr	r0, [pc, #40]	; (8012ad8 <fatfsInit+0x48>)
 8012aae:	f013 f839 	bl	8025b24 <f_mount>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d102      	bne.n	8012abe <fatfsInit+0x2e>
    {
      is_init = true;
 8012ab8:	4b08      	ldr	r3, [pc, #32]	; (8012adc <fatfsInit+0x4c>)
 8012aba:	2201      	movs	r2, #1
 8012abc:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8012abe:	4908      	ldr	r1, [pc, #32]	; (8012ae0 <fatfsInit+0x50>)
 8012ac0:	4808      	ldr	r0, [pc, #32]	; (8012ae4 <fatfsInit+0x54>)
 8012ac2:	f7ff fdd3 	bl	801266c <cliAdd>
#endif

  return ret;
 8012ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	200016e0 	.word	0x200016e0
 8012ad4:	200003b8 	.word	0x200003b8
 8012ad8:	200014b0 	.word	0x200014b0
 8012adc:	20003ebb 	.word	0x20003ebb
 8012ae0:	08012b81 	.word	0x08012b81
 8012ae4:	0802c254 	.word	0x0802c254

08012ae8 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b096      	sub	sp, #88	; 0x58
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8012af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012af4:	6879      	ldr	r1, [r7, #4]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f013 ff7d 	bl	80269f6 <f_opendir>
 8012afc:	4603      	mov	r3, r0
 8012afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (res == FR_OK)
 8012b02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d130      	bne.n	8012b6c <fatfsDir+0x84>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8012b0a:	f107 020c 	add.w	r2, r7, #12
 8012b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f014 f807 	bl	8026b28 <f_readdir>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8012b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d11c      	bne.n	8012b62 <fatfsDir+0x7a>
 8012b28:	7d7b      	ldrb	r3, [r7, #21]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d019      	beq.n	8012b62 <fatfsDir+0x7a>
      if (fno.fattrib & AM_DIR)
 8012b2e:	7d3b      	ldrb	r3, [r7, #20]
 8012b30:	f003 0310 	and.w	r3, r3, #16
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d008      	beq.n	8012b4a <fatfsDir+0x62>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n\r", path, fno.fname);
 8012b38:	f107 030c 	add.w	r3, r7, #12
 8012b3c:	3309      	adds	r3, #9
 8012b3e:	461a      	mov	r2, r3
 8012b40:	6879      	ldr	r1, [r7, #4]
 8012b42:	480d      	ldr	r0, [pc, #52]	; (8012b78 <fatfsDir+0x90>)
 8012b44:	f7ff fc82 	bl	801244c <cliPrintf>
 8012b48:	e7df      	b.n	8012b0a <fatfsDir+0x22>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n\r", path, fno.fname, (int)fno.fsize);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	f107 030c 	add.w	r3, r7, #12
 8012b52:	f103 0209 	add.w	r2, r3, #9
 8012b56:	460b      	mov	r3, r1
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	4808      	ldr	r0, [pc, #32]	; (8012b7c <fatfsDir+0x94>)
 8012b5c:	f7ff fc76 	bl	801244c <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8012b60:	e7d3      	b.n	8012b0a <fatfsDir+0x22>
      }
    }
    f_closedir(&dir);
 8012b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b66:	4618      	mov	r0, r3
 8012b68:	f013 ffb8 	bl	8026adc <f_closedir>
  }

  return res;
 8012b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3758      	adds	r7, #88	; 0x58
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	0802c25c 	.word	0x0802c25c
 8012b7c:	0802c268 	.word	0x0802c268

08012b80 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b8c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012b90:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8012b92:	2300      	movs	r3, #0
 8012b94:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8012b98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012b9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d14d      	bne.n	8012c44 <cliFatfs+0xc4>
 8012ba8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012bac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	695b      	ldr	r3, [r3, #20]
 8012bb4:	4990      	ldr	r1, [pc, #576]	; (8012df8 <cliFatfs+0x278>)
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	4798      	blx	r3
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d041      	beq.n	8012c44 <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n\r", is_init);
 8012bc0:	4b8e      	ldr	r3, [pc, #568]	; (8012dfc <cliFatfs+0x27c>)
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	488e      	ldr	r0, [pc, #568]	; (8012e00 <cliFatfs+0x280>)
 8012bc8:	f7ff fc40 	bl	801244c <cliPrintf>

    if (is_init == true)
 8012bcc:	4b8b      	ldr	r3, [pc, #556]	; (8012dfc <cliFatfs+0x27c>)
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d034      	beq.n	8012c3e <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8012bd4:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8012bd8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8012bdc:	4619      	mov	r1, r3
 8012bde:	4889      	ldr	r0, [pc, #548]	; (8012e04 <cliFatfs+0x284>)
 8012be0:	f013 ffdf 	bl	8026ba2 <f_getfree>
 8012be4:	4603      	mov	r3, r0
 8012be6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8012bea:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d11f      	bne.n	8012c32 <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8012bf2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012bf6:	695b      	ldr	r3, [r3, #20]
 8012bf8:	3b02      	subs	r3, #2
 8012bfa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8012bfe:	8952      	ldrh	r2, [r2, #10]
 8012c00:	fb02 f303 	mul.w	r3, r2, r3
 8012c04:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8012c08:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012c0c:	895b      	ldrh	r3, [r3, #10]
 8012c0e:	461a      	mov	r2, r3
 8012c10:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8012c14:	fb02 f303 	mul.w	r3, r2, r3
 8012c18:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n\r%10lu KiB available.\n\r", tot_sect / 2, fre_sect / 2);
 8012c1c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8012c20:	0859      	lsrs	r1, r3, #1
 8012c22:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8012c26:	085b      	lsrs	r3, r3, #1
 8012c28:	461a      	mov	r2, r3
 8012c2a:	4877      	ldr	r0, [pc, #476]	; (8012e08 <cliFatfs+0x288>)
 8012c2c:	f7ff fc0e 	bl	801244c <cliPrintf>
 8012c30:	e005      	b.n	8012c3e <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n\r", res);
 8012c32:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012c36:	4619      	mov	r1, r3
 8012c38:	4874      	ldr	r0, [pc, #464]	; (8012e0c <cliFatfs+0x28c>)
 8012c3a:	f7ff fc07 	bl	801244c <cliPrintf>
       }
    }

    ret = true;
 8012c3e:	2301      	movs	r3, #1
 8012c40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8012c44:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c48:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d11e      	bne.n	8012c92 <cliFatfs+0x112>
 8012c54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c58:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	695b      	ldr	r3, [r3, #20]
 8012c60:	496b      	ldr	r1, [pc, #428]	; (8012e10 <cliFatfs+0x290>)
 8012c62:	2000      	movs	r0, #0
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d012      	beq.n	8012c92 <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 8012c6c:	4869      	ldr	r0, [pc, #420]	; (8012e14 <cliFatfs+0x294>)
 8012c6e:	f7ff ff3b 	bl	8012ae8 <fatfsDir>
 8012c72:	4603      	mov	r3, r0
 8012c74:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8012c78:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d005      	beq.n	8012c8c <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n\r", res);
 8012c80:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8012c84:	4619      	mov	r1, r3
 8012c86:	4861      	ldr	r0, [pc, #388]	; (8012e0c <cliFatfs+0x28c>)
 8012c88:	f7ff fbe0 	bl	801244c <cliPrintf>
    }

    ret = true;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8012c92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012c96:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	2b01      	cmp	r3, #1
 8012ca0:	f040 8095 	bne.w	8012dce <cliFatfs+0x24e>
 8012ca4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012ca8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	695b      	ldr	r3, [r3, #20]
 8012cb0:	4959      	ldr	r1, [pc, #356]	; (8012e18 <cliFatfs+0x298>)
 8012cb2:	2000      	movs	r0, #0
 8012cb4:	4798      	blx	r3
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f000 8088 	beq.w	8012dce <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8012cbe:	f7f6 fab2 	bl	8009226 <millis>
 8012cc2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "12.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8012cc6:	f107 0308 	add.w	r3, r7, #8
 8012cca:	220b      	movs	r2, #11
 8012ccc:	4953      	ldr	r1, [pc, #332]	; (8012e1c <cliFatfs+0x29c>)
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f012 ff6e 	bl	8025bb0 <f_open>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 8012cda:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d165      	bne.n	8012dae <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 8012ce2:	f107 0308 	add.w	r3, r7, #8
 8012ce6:	494e      	ldr	r1, [pc, #312]	; (8012e20 <cliFatfs+0x2a0>)
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f014 f887 	bl	8026dfc <f_printf>
      f_printf(&log_file, "test2, ");
 8012cee:	f107 0308 	add.w	r3, r7, #8
 8012cf2:	494c      	ldr	r1, [pc, #304]	; (8012e24 <cliFatfs+0x2a4>)
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f014 f881 	bl	8026dfc <f_printf>
      f_printf(&log_file, "test3, ");
 8012cfa:	f107 0308 	add.w	r3, r7, #8
 8012cfe:	494a      	ldr	r1, [pc, #296]	; (8012e28 <cliFatfs+0x2a8>)
 8012d00:	4618      	mov	r0, r3
 8012d02:	f014 f87b 	bl	8026dfc <f_printf>
      f_printf(&log_file, ", ");
 8012d06:	f107 0308 	add.w	r3, r7, #8
 8012d0a:	4948      	ldr	r1, [pc, #288]	; (8012e2c <cliFatfs+0x2ac>)
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f014 f875 	bl	8026dfc <f_printf>
      f_printf(&log_file, "\n\r");
 8012d12:	f107 0308 	add.w	r3, r7, #8
 8012d16:	4946      	ldr	r1, [pc, #280]	; (8012e30 <cliFatfs+0x2b0>)
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f014 f86f 	bl	8026dfc <f_printf>

      for (int i=0; i<256; i++)
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8012d24:	e00c      	b.n	8012d40 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 8012d26:	f107 0308 	add.w	r3, r7, #8
 8012d2a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8012d2e:	4941      	ldr	r1, [pc, #260]	; (8012e34 <cliFatfs+0x2b4>)
 8012d30:	4618      	mov	r0, r3
 8012d32:	f014 f863 	bl	8026dfc <f_printf>
      for (int i=0; i<256; i++)
 8012d36:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8012d40:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012d44:	2bff      	cmp	r3, #255	; 0xff
 8012d46:	ddee      	ble.n	8012d26 <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 8012d48:	f107 0308 	add.w	r3, r7, #8
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f013 fc48 	bl	80265e4 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8012d54:	e01c      	b.n	8012d90 <cliFatfs+0x210>
      {
        len = 0;
 8012d56:	2300      	movs	r3, #0
 8012d58:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 8012d5c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8012d60:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8012d64:	f107 0008 	add.w	r0, r7, #8
 8012d68:	2201      	movs	r2, #1
 8012d6a:	f013 f8df 	bl	8025f2c <f_read>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 8012d74:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d10f      	bne.n	8012d9c <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 8012d7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00d      	beq.n	8012da0 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 8012d84:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8012d88:	4619      	mov	r1, r3
 8012d8a:	482b      	ldr	r0, [pc, #172]	; (8012e38 <cliFatfs+0x2b8>)
 8012d8c:	f7ff fb5e 	bl	801244c <cliPrintf>
      while(cliKeepLoop())
 8012d90:	f7ff fc56 	bl	8012640 <cliKeepLoop>
 8012d94:	4603      	mov	r3, r0
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1dd      	bne.n	8012d56 <cliFatfs+0x1d6>
 8012d9a:	e002      	b.n	8012da2 <cliFatfs+0x222>
          break;
 8012d9c:	bf00      	nop
 8012d9e:	e000      	b.n	8012da2 <cliFatfs+0x222>
          break;
 8012da0:	bf00      	nop
      }

      f_close(&log_file);
 8012da2:	f107 0308 	add.w	r3, r7, #8
 8012da6:	4618      	mov	r0, r3
 8012da8:	f013 fbf2 	bl	8026590 <f_close>
 8012dac:	e002      	b.n	8012db4 <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8012dae:	4823      	ldr	r0, [pc, #140]	; (8012e3c <cliFatfs+0x2bc>)
 8012db0:	f7ff fb4c 	bl	801244c <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8012db4:	f7f6 fa37 	bl	8009226 <millis>
 8012db8:	4602      	mov	r2, r0
 8012dba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	481f      	ldr	r0, [pc, #124]	; (8012e40 <cliFatfs+0x2c0>)
 8012dc4:	f7ff fb42 	bl	801244c <cliPrintf>

    ret = true;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8012dce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012dd2:	f083 0301 	eor.w	r3, r3, #1
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d008      	beq.n	8012dee <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n\r");
 8012ddc:	4819      	ldr	r0, [pc, #100]	; (8012e44 <cliFatfs+0x2c4>)
 8012dde:	f7ff fb35 	bl	801244c <cliPrintf>
    cliPrintf("fatfs dir\n\r");
 8012de2:	4819      	ldr	r0, [pc, #100]	; (8012e48 <cliFatfs+0x2c8>)
 8012de4:	f7ff fb32 	bl	801244c <cliPrintf>
    cliPrintf("fatfs test\n\r");
 8012de8:	4818      	ldr	r0, [pc, #96]	; (8012e4c <cliFatfs+0x2cc>)
 8012dea:	f7ff fb2f 	bl	801244c <cliPrintf>
  }
}
 8012dee:	bf00      	nop
 8012df0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	0802c280 	.word	0x0802c280
 8012dfc:	20003ebb 	.word	0x20003ebb
 8012e00:	0802c288 	.word	0x0802c288
 8012e04:	0802c29c 	.word	0x0802c29c
 8012e08:	0802c2a0 	.word	0x0802c2a0
 8012e0c:	0802c2d8 	.word	0x0802c2d8
 8012e10:	0802c2e4 	.word	0x0802c2e4
 8012e14:	0802c2e8 	.word	0x0802c2e8
 8012e18:	0802c2ec 	.word	0x0802c2ec
 8012e1c:	0802c2f4 	.word	0x0802c2f4
 8012e20:	0802c2fc 	.word	0x0802c2fc
 8012e24:	0802c304 	.word	0x0802c304
 8012e28:	0802c30c 	.word	0x0802c30c
 8012e2c:	0802c314 	.word	0x0802c314
 8012e30:	0802c318 	.word	0x0802c318
 8012e34:	0802c31c 	.word	0x0802c31c
 8012e38:	0802c324 	.word	0x0802c324
 8012e3c:	0802c328 	.word	0x0802c328
 8012e40:	0802c338 	.word	0x0802c338
 8012e44:	0802c340 	.word	0x0802c340
 8012e48:	0802c350 	.word	0x0802c350
 8012e4c:	0802c35c 	.word	0x0802c35c

08012e50 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 8012e54:	4903      	ldr	r1, [pc, #12]	; (8012e64 <flashInit+0x14>)
 8012e56:	4804      	ldr	r0, [pc, #16]	; (8012e68 <flashInit+0x18>)
 8012e58:	f7ff fc08 	bl	801266c <cliAdd>
#endif

  return true;
 8012e5c:	2301      	movs	r3, #1
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	0801302d 	.word	0x0801302d
 8012e68:	0802c36c 	.word	0x0802c36c

08012e6c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b08c      	sub	sp, #48	; 0x30
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8012e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e80:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8012e82:	2300      	movs	r3, #0
 8012e84:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8012e86:	2300      	movs	r3, #0
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
 8012e8a:	e015      	b.n	8012eb8 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	683a      	ldr	r2, [r7, #0]
 8012e92:	6879      	ldr	r1, [r7, #4]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f000 f871 	bl	8012f7c <flashInSector>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d008      	beq.n	8012eb2 <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8012ea0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	da01      	bge.n	8012eac <flashErase+0x40>
      {
        start_sector_num = i;
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8012eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eae:	3301      	adds	r3, #1
 8012eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eba:	2b07      	cmp	r3, #7
 8012ebc:	dde6      	ble.n	8012e8c <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8012ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d020      	beq.n	8012f06 <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 8012ec4:	f006 f9ea 	bl	801929c <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 8012ecc:	2301      	movs	r3, #1
 8012ece:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8012ed0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012ed4:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8012eda:	2302      	movs	r3, #2
 8012edc:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8012ede:	f107 0208 	add.w	r2, r7, #8
 8012ee2:	f107 030c 	add.w	r3, r7, #12
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f006 fb39 	bl	8019560 <HAL_FLASHEx_Erase>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8012ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d102      	bne.n	8012f02 <flashErase+0x96>
    {
      ret = true;
 8012efc:	2301      	movs	r3, #1
 8012efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8012f02:	f006 f9ed 	bl	80192e0 <HAL_FLASH_Lock>
  }

  return ret;
 8012f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3730      	adds	r7, #48	; 0x30
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8012f12:	b5b0      	push	{r4, r5, r7, lr}
 8012f14:	b088      	sub	sp, #32
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	60f8      	str	r0, [r7, #12]
 8012f1a:	60b9      	str	r1, [r7, #8]
 8012f1c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 8012f22:	f006 f9bb 	bl	801929c <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8012f26:	2300      	movs	r3, #0
 8012f28:	61bb      	str	r3, [r7, #24]
 8012f2a:	e01b      	b.n	8012f64 <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	68ba      	ldr	r2, [r7, #8]
 8012f30:	4413      	add	r3, r2
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8012f36:	69ba      	ldr	r2, [r7, #24]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	18d1      	adds	r1, r2, r3
 8012f3c:	8afb      	ldrh	r3, [r7, #22]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	461c      	mov	r4, r3
 8012f42:	4615      	mov	r5, r2
 8012f44:	4622      	mov	r2, r4
 8012f46:	462b      	mov	r3, r5
 8012f48:	2000      	movs	r0, #0
 8012f4a:	f006 f953 	bl	80191f4 <HAL_FLASH_Program>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8012f52:	7d7b      	ldrb	r3, [r7, #21]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <flashWrite+0x4c>
    {
      ret = false;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	77fb      	strb	r3, [r7, #31]
      break;
 8012f5c:	e006      	b.n	8012f6c <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	3301      	adds	r3, #1
 8012f62:	61bb      	str	r3, [r7, #24]
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d8df      	bhi.n	8012f2c <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8012f6c:	f006 f9b8 	bl	80192e0 <HAL_FLASH_Lock>

  return ret;
 8012f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3720      	adds	r7, #32
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012f7c <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b08b      	sub	sp, #44	; 0x2c
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
 8012f88:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 8012f90:	89fb      	ldrh	r3, [r7, #14]
 8012f92:	4a25      	ldr	r2, [pc, #148]	; (8013028 <flashInSector+0xac>)
 8012f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012f98:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8012f9a:	89fb      	ldrh	r3, [r7, #14]
 8012f9c:	4a22      	ldr	r2, [pc, #136]	; (8013028 <flashInSector+0xac>)
 8012f9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012fa2:	89fb      	ldrh	r3, [r7, #14]
 8012fa4:	4920      	ldr	r1, [pc, #128]	; (8013028 <flashInSector+0xac>)
 8012fa6:	00db      	lsls	r3, r3, #3
 8012fa8:	440b      	add	r3, r1
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	4413      	add	r3, r2
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	4413      	add	r3, r2
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8012fc0:	6a3a      	ldr	r2, [r7, #32]
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d306      	bcc.n	8012fd6 <flashInSector+0x5a>
 8012fc8:	6a3a      	ldr	r2, [r7, #32]
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d802      	bhi.n	8012fd6 <flashInSector+0x5a>
  {
    ret = true;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8012fd6:	69fa      	ldr	r2, [r7, #28]
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d306      	bcc.n	8012fec <flashInSector+0x70>
 8012fde:	69fa      	ldr	r2, [r7, #28]
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d802      	bhi.n	8012fec <flashInSector+0x70>
  {
    ret = true;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8012fec:	69ba      	ldr	r2, [r7, #24]
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d306      	bcc.n	8013002 <flashInSector+0x86>
 8012ff4:	69ba      	ldr	r2, [r7, #24]
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d802      	bhi.n	8013002 <flashInSector+0x86>
  {
    ret = true;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8013002:	697a      	ldr	r2, [r7, #20]
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	429a      	cmp	r2, r3
 8013008:	d306      	bcc.n	8013018 <flashInSector+0x9c>
 801300a:	697a      	ldr	r2, [r7, #20]
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	429a      	cmp	r2, r3
 8013010:	d802      	bhi.n	8013018 <flashInSector+0x9c>
  {
    ret = true;
 8013012:	2301      	movs	r3, #1
 8013014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8013018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801301c:	4618      	mov	r0, r3
 801301e:	372c      	adds	r7, #44	; 0x2c
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr
 8013028:	20000358 	.word	0x20000358

0801302c <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b08c      	sub	sp, #48	; 0x30
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013034:	2300      	movs	r3, #0
 8013036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d121      	bne.n	8013086 <cliFlash+0x5a>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
 8013046:	495c      	ldr	r1, [pc, #368]	; (80131b8 <cliFlash+0x18c>)
 8013048:	2000      	movs	r0, #0
 801304a:	4798      	blx	r3
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d019      	beq.n	8013086 <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8013052:	2300      	movs	r3, #0
 8013054:	62bb      	str	r3, [r7, #40]	; 0x28
 8013056:	e010      	b.n	801307a <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8013058:	4a58      	ldr	r2, [pc, #352]	; (80131bc <cliFlash+0x190>)
 801305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801305c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013060:	4a56      	ldr	r2, [pc, #344]	; (80131bc <cliFlash+0x190>)
 8013062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013064:	00db      	lsls	r3, r3, #3
 8013066:	4413      	add	r3, r2
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	0a9b      	lsrs	r3, r3, #10
 801306c:	461a      	mov	r2, r3
 801306e:	4854      	ldr	r0, [pc, #336]	; (80131c0 <cliFlash+0x194>)
 8013070:	f7ff f9ec 	bl	801244c <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8013074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013076:	3301      	adds	r3, #1
 8013078:	62bb      	str	r3, [r7, #40]	; 0x28
 801307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307c:	2b07      	cmp	r3, #7
 801307e:	ddeb      	ble.n	8013058 <cliFlash+0x2c>
    }

    ret = true;
 8013080:	2301      	movs	r3, #1
 8013082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	2b03      	cmp	r3, #3
 801308c:	d12b      	bne.n	80130e6 <cliFlash+0xba>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	695b      	ldr	r3, [r3, #20]
 8013092:	494c      	ldr	r1, [pc, #304]	; (80131c4 <cliFlash+0x198>)
 8013094:	2000      	movs	r0, #0
 8013096:	4798      	blx	r3
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d023      	beq.n	80130e6 <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	2001      	movs	r0, #1
 80130a4:	4798      	blx	r3
 80130a6:	4603      	mov	r3, r0
 80130a8:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	2002      	movs	r0, #2
 80130b0:	4798      	blx	r3
 80130b2:	4603      	mov	r3, r0
 80130b4:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 80130b6:	2300      	movs	r3, #0
 80130b8:	627b      	str	r3, [r7, #36]	; 0x24
 80130ba:	e00d      	b.n	80130d8 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 80130bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	18d1      	adds	r1, r2, r3
 80130c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	4413      	add	r3, r2
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	461a      	mov	r2, r3
 80130cc:	483e      	ldr	r0, [pc, #248]	; (80131c8 <cliFlash+0x19c>)
 80130ce:	f7ff f9bd 	bl	801244c <cliPrintf>
    for (int i=0; i<length; i++)
 80130d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d4:	3301      	adds	r3, #1
 80130d6:	627b      	str	r3, [r7, #36]	; 0x24
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	69fa      	ldr	r2, [r7, #28]
 80130dc:	429a      	cmp	r2, r3
 80130de:	d8ed      	bhi.n	80130bc <cliFlash+0x90>
    }

    ret = true;
 80130e0:	2301      	movs	r3, #1
 80130e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	881b      	ldrh	r3, [r3, #0]
 80130ea:	2b03      	cmp	r3, #3
 80130ec:	d121      	bne.n	8013132 <cliFlash+0x106>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	695b      	ldr	r3, [r3, #20]
 80130f2:	4936      	ldr	r1, [pc, #216]	; (80131cc <cliFlash+0x1a0>)
 80130f4:	2000      	movs	r0, #0
 80130f6:	4798      	blx	r3
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d019      	beq.n	8013132 <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	2001      	movs	r0, #1
 8013104:	4798      	blx	r3
 8013106:	4603      	mov	r3, r0
 8013108:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	2002      	movs	r0, #2
 8013110:	4798      	blx	r3
 8013112:	4603      	mov	r3, r0
 8013114:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8013116:	6979      	ldr	r1, [r7, #20]
 8013118:	69b8      	ldr	r0, [r7, #24]
 801311a:	f7ff fea7 	bl	8012e6c <flashErase>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d003      	beq.n	801312c <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 8013124:	482a      	ldr	r0, [pc, #168]	; (80131d0 <cliFlash+0x1a4>)
 8013126:	f7ff f991 	bl	801244c <cliPrintf>
 801312a:	e002      	b.n	8013132 <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 801312c:	4829      	ldr	r0, [pc, #164]	; (80131d4 <cliFlash+0x1a8>)
 801312e:	f7ff f98d 	bl	801244c <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	2b03      	cmp	r3, #3
 8013138:	d127      	bne.n	801318a <cliFlash+0x15e>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	695b      	ldr	r3, [r3, #20]
 801313e:	4926      	ldr	r1, [pc, #152]	; (80131d8 <cliFlash+0x1ac>)
 8013140:	2000      	movs	r0, #0
 8013142:	4798      	blx	r3
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d01f      	beq.n	801318a <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	2001      	movs	r0, #1
 8013150:	4798      	blx	r3
 8013152:	4603      	mov	r3, r0
 8013154:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	689b      	ldr	r3, [r3, #8]
 801315a:	2002      	movs	r0, #2
 801315c:	4798      	blx	r3
 801315e:	4603      	mov	r3, r0
 8013160:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8013162:	f107 030c 	add.w	r3, r7, #12
 8013166:	2204      	movs	r2, #4
 8013168:	4619      	mov	r1, r3
 801316a:	6938      	ldr	r0, [r7, #16]
 801316c:	f7ff fed1 	bl	8012f12 <flashWrite>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d003      	beq.n	801317e <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8013176:	4819      	ldr	r0, [pc, #100]	; (80131dc <cliFlash+0x1b0>)
 8013178:	f7ff f968 	bl	801244c <cliPrintf>
 801317c:	e002      	b.n	8013184 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 801317e:	4818      	ldr	r0, [pc, #96]	; (80131e0 <cliFlash+0x1b4>)
 8013180:	f7ff f964 	bl	801244c <cliPrintf>
    }

    ret = true;
 8013184:	2301      	movs	r3, #1
 8013186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 801318a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801318e:	f083 0301 	eor.w	r3, r3, #1
 8013192:	b2db      	uxtb	r3, r3
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00b      	beq.n	80131b0 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8013198:	4812      	ldr	r0, [pc, #72]	; (80131e4 <cliFlash+0x1b8>)
 801319a:	f7ff f957 	bl	801244c <cliPrintf>
    cliPrintf("flash read  addr length\n");
 801319e:	4812      	ldr	r0, [pc, #72]	; (80131e8 <cliFlash+0x1bc>)
 80131a0:	f7ff f954 	bl	801244c <cliPrintf>
    cliPrintf("flash erase addr length\n");
 80131a4:	4811      	ldr	r0, [pc, #68]	; (80131ec <cliFlash+0x1c0>)
 80131a6:	f7ff f951 	bl	801244c <cliPrintf>
    cliPrintf("flash write addr data\n");
 80131aa:	4811      	ldr	r0, [pc, #68]	; (80131f0 <cliFlash+0x1c4>)
 80131ac:	f7ff f94e 	bl	801244c <cliPrintf>
  }
}
 80131b0:	bf00      	nop
 80131b2:	3730      	adds	r7, #48	; 0x30
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	0802c374 	.word	0x0802c374
 80131bc:	20000358 	.word	0x20000358
 80131c0:	0802c37c 	.word	0x0802c37c
 80131c4:	0802c38c 	.word	0x0802c38c
 80131c8:	0802c394 	.word	0x0802c394
 80131cc:	0802c3a4 	.word	0x0802c3a4
 80131d0:	0802c3ac 	.word	0x0802c3ac
 80131d4:	0802c3b8 	.word	0x0802c3b8
 80131d8:	0802c3c4 	.word	0x0802c3c4
 80131dc:	0802c3cc 	.word	0x0802c3cc
 80131e0:	0802c3d8 	.word	0x0802c3d8
 80131e4:	0802c3e4 	.word	0x0802c3e4
 80131e8:	0802c3f0 	.word	0x0802c3f0
 80131ec:	0802c40c 	.word	0x0802c40c
 80131f0:	0802c428 	.word	0x0802c428

080131f4 <gpioInit>:
#ifdef _USE_HW_CLI
static void cliGpio(cli_args_t *args);
#endif

bool gpioInit(void)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b086      	sub	sp, #24
 80131f8:	af00      	add	r7, sp, #0
  bool ret = true;
 80131fa:	2301      	movs	r3, #1
 80131fc:	74fb      	strb	r3, [r7, #19]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80131fe:	2300      	movs	r3, #0
 8013200:	60fb      	str	r3, [r7, #12]
 8013202:	4b3e      	ldr	r3, [pc, #248]	; (80132fc <gpioInit+0x108>)
 8013204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013206:	4a3d      	ldr	r2, [pc, #244]	; (80132fc <gpioInit+0x108>)
 8013208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801320c:	6313      	str	r3, [r2, #48]	; 0x30
 801320e:	4b3b      	ldr	r3, [pc, #236]	; (80132fc <gpioInit+0x108>)
 8013210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013216:	60fb      	str	r3, [r7, #12]
 8013218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801321a:	2300      	movs	r3, #0
 801321c:	60bb      	str	r3, [r7, #8]
 801321e:	4b37      	ldr	r3, [pc, #220]	; (80132fc <gpioInit+0x108>)
 8013220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013222:	4a36      	ldr	r2, [pc, #216]	; (80132fc <gpioInit+0x108>)
 8013224:	f043 0301 	orr.w	r3, r3, #1
 8013228:	6313      	str	r3, [r2, #48]	; 0x30
 801322a:	4b34      	ldr	r3, [pc, #208]	; (80132fc <gpioInit+0x108>)
 801322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801322e:	f003 0301 	and.w	r3, r3, #1
 8013232:	60bb      	str	r3, [r7, #8]
 8013234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013236:	2300      	movs	r3, #0
 8013238:	607b      	str	r3, [r7, #4]
 801323a:	4b30      	ldr	r3, [pc, #192]	; (80132fc <gpioInit+0x108>)
 801323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801323e:	4a2f      	ldr	r2, [pc, #188]	; (80132fc <gpioInit+0x108>)
 8013240:	f043 0304 	orr.w	r3, r3, #4
 8013244:	6313      	str	r3, [r2, #48]	; 0x30
 8013246:	4b2d      	ldr	r3, [pc, #180]	; (80132fc <gpioInit+0x108>)
 8013248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801324a:	f003 0304 	and.w	r3, r3, #4
 801324e:	607b      	str	r3, [r7, #4]
 8013250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013252:	2300      	movs	r3, #0
 8013254:	603b      	str	r3, [r7, #0]
 8013256:	4b29      	ldr	r3, [pc, #164]	; (80132fc <gpioInit+0x108>)
 8013258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801325a:	4a28      	ldr	r2, [pc, #160]	; (80132fc <gpioInit+0x108>)
 801325c:	f043 0302 	orr.w	r3, r3, #2
 8013260:	6313      	str	r3, [r2, #48]	; 0x30
 8013262:	4b26      	ldr	r3, [pc, #152]	; (80132fc <gpioInit+0x108>)
 8013264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013266:	f003 0302 	and.w	r3, r3, #2
 801326a:	603b      	str	r3, [r7, #0]
 801326c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 801326e:	2201      	movs	r2, #1
 8013270:	2110      	movs	r1, #16
 8013272:	4823      	ldr	r0, [pc, #140]	; (8013300 <gpioInit+0x10c>)
 8013274:	f006 fc4a 	bl	8019b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8013278:	2200      	movs	r2, #0
 801327a:	2108      	movs	r1, #8
 801327c:	4821      	ldr	r0, [pc, #132]	; (8013304 <gpioInit+0x110>)
 801327e:	f006 fc45 	bl	8019b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8013282:	2200      	movs	r2, #0
 8013284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013288:	481e      	ldr	r0, [pc, #120]	; (8013304 <gpioInit+0x110>)
 801328a:	f006 fc3f 	bl	8019b0c <HAL_GPIO_WritePin>

  for (int i=0; i<GPIO_MAX_CH; i++)
 801328e:	2300      	movs	r3, #0
 8013290:	617b      	str	r3, [r7, #20]
 8013292:	e01e      	b.n	80132d2 <gpioInit+0xde>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	b2d8      	uxtb	r0, r3
 8013298:	491b      	ldr	r1, [pc, #108]	; (8013308 <gpioInit+0x114>)
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	4613      	mov	r3, r2
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	4413      	add	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	440b      	add	r3, r1
 80132a6:	3308      	adds	r3, #8
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	4619      	mov	r1, r3
 80132ac:	f000 f832 	bl	8013314 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	b2d8      	uxtb	r0, r3
 80132b4:	4914      	ldr	r1, [pc, #80]	; (8013308 <gpioInit+0x114>)
 80132b6:	697a      	ldr	r2, [r7, #20]
 80132b8:	4613      	mov	r3, r2
 80132ba:	005b      	lsls	r3, r3, #1
 80132bc:	4413      	add	r3, r2
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	440b      	add	r3, r1
 80132c2:	330b      	adds	r3, #11
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	4619      	mov	r1, r3
 80132c8:	f000 f8a4 	bl	8013414 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	3301      	adds	r3, #1
 80132d0:	617b      	str	r3, [r7, #20]
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	2b03      	cmp	r3, #3
 80132d6:	dddd      	ble.n	8013294 <gpioInit+0xa0>
  }

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80132d8:	2200      	movs	r2, #0
 80132da:	2100      	movs	r1, #0
 80132dc:	200a      	movs	r0, #10
 80132de:	f005 fb3c 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80132e2:	200a      	movs	r0, #10
 80132e4:	f005 fb55 	bl	8018992 <HAL_NVIC_EnableIRQ>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80132e8:	4908      	ldr	r1, [pc, #32]	; (801330c <gpioInit+0x118>)
 80132ea:	4809      	ldr	r0, [pc, #36]	; (8013310 <gpioInit+0x11c>)
 80132ec:	f7ff f9be 	bl	801266c <cliAdd>
#endif

  return ret;
 80132f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3718      	adds	r7, #24
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	40023800 	.word	0x40023800
 8013300:	40020000 	.word	0x40020000
 8013304:	40020800 	.word	0x40020800
 8013308:	0802caf0 	.word	0x0802caf0
 801330c:	08013529 	.word	0x08013529
 8013310:	0802c440 	.word	0x0802c440

08013314 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b088      	sub	sp, #32
 8013318:	af00      	add	r7, sp, #0
 801331a:	4603      	mov	r3, r0
 801331c:	460a      	mov	r2, r1
 801331e:	71fb      	strb	r3, [r7, #7]
 8013320:	4613      	mov	r3, r2
 8013322:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8013324:	2301      	movs	r3, #1
 8013326:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013328:	f107 0308 	add.w	r3, r7, #8
 801332c:	2200      	movs	r2, #0
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	605a      	str	r2, [r3, #4]
 8013332:	609a      	str	r2, [r3, #8]
 8013334:	60da      	str	r2, [r3, #12]
 8013336:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8013338:	79fb      	ldrb	r3, [r7, #7]
 801333a:	2b03      	cmp	r3, #3
 801333c:	d901      	bls.n	8013342 <gpioPinMode+0x2e>
  {
    return false;
 801333e:	2300      	movs	r3, #0
 8013340:	e062      	b.n	8013408 <gpioPinMode+0xf4>
  }

  switch(mode)
 8013342:	79bb      	ldrb	r3, [r7, #6]
 8013344:	2b07      	cmp	r3, #7
 8013346:	d846      	bhi.n	80133d6 <gpioPinMode+0xc2>
 8013348:	a201      	add	r2, pc, #4	; (adr r2, 8013350 <gpioPinMode+0x3c>)
 801334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334e:	bf00      	nop
 8013350:	08013371 	.word	0x08013371
 8013354:	0801337b 	.word	0x0801337b
 8013358:	08013389 	.word	0x08013389
 801335c:	08013393 	.word	0x08013393
 8013360:	0801339f 	.word	0x0801339f
 8013364:	080133ad 	.word	0x080133ad
 8013368:	080133bb 	.word	0x080133bb
 801336c:	080133c5 	.word	0x080133c5
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013370:	2300      	movs	r3, #0
 8013372:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013374:	2300      	movs	r3, #0
 8013376:	613b      	str	r3, [r7, #16]
      break;
 8013378:	e02d      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801337a:	2300      	movs	r3, #0
 801337c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 801337e:	2301      	movs	r3, #1
 8013380:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013382:	2303      	movs	r3, #3
 8013384:	617b      	str	r3, [r7, #20]
      break;
 8013386:	e026      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013388:	2300      	movs	r3, #0
 801338a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801338c:	2302      	movs	r3, #2
 801338e:	613b      	str	r3, [r7, #16]
      break;
 8013390:	e021      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_INPUT_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013392:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8013396:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013398:	2300      	movs	r3, #0
 801339a:	613b      	str	r3, [r7, #16]
      break;
 801339c:	e01b      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801339e:	2301      	movs	r3, #1
 80133a0:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133a2:	2300      	movs	r3, #0
 80133a4:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133a6:	2303      	movs	r3, #3
 80133a8:	617b      	str	r3, [r7, #20]
      break;
 80133aa:	e014      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133ac:	2301      	movs	r3, #1
 80133ae:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80133b0:	2301      	movs	r3, #1
 80133b2:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133b4:	2303      	movs	r3, #3
 80133b6:	617b      	str	r3, [r7, #20]
      break;
 80133b8:	e00d      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133ba:	2301      	movs	r3, #1
 80133bc:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80133be:	2302      	movs	r3, #2
 80133c0:	613b      	str	r3, [r7, #16]
      break;
 80133c2:	e008      	b.n	80133d6 <gpioPinMode+0xc2>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133c4:	2302      	movs	r3, #2
 80133c6:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133c8:	2300      	movs	r3, #0
 80133ca:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133cc:	2300      	movs	r3, #0
 80133ce:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80133d0:	2302      	movs	r3, #2
 80133d2:	61bb      	str	r3, [r7, #24]
      break;
 80133d4:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80133d6:	79fa      	ldrb	r2, [r7, #7]
 80133d8:	490d      	ldr	r1, [pc, #52]	; (8013410 <gpioPinMode+0xfc>)
 80133da:	4613      	mov	r3, r2
 80133dc:	005b      	lsls	r3, r3, #1
 80133de:	4413      	add	r3, r2
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	440b      	add	r3, r1
 80133e4:	3304      	adds	r3, #4
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80133ea:	79fa      	ldrb	r2, [r7, #7]
 80133ec:	4908      	ldr	r1, [pc, #32]	; (8013410 <gpioPinMode+0xfc>)
 80133ee:	4613      	mov	r3, r2
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	4413      	add	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	440b      	add	r3, r1
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f107 0208 	add.w	r2, r7, #8
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f006 f9cf 	bl	80197a4 <HAL_GPIO_Init>

  return ret;
 8013406:	7ffb      	ldrb	r3, [r7, #31]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3720      	adds	r7, #32
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	0802caf0 	.word	0x0802caf0

08013414 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8013414:	b590      	push	{r4, r7, lr}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	4603      	mov	r3, r0
 801341c:	460a      	mov	r2, r1
 801341e:	71fb      	strb	r3, [r7, #7]
 8013420:	4613      	mov	r3, r2
 8013422:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b03      	cmp	r3, #3
 8013428:	d840      	bhi.n	80134ac <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 801342a:	79bb      	ldrb	r3, [r7, #6]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d01e      	beq.n	801346e <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8013430:	79fa      	ldrb	r2, [r7, #7]
 8013432:	4920      	ldr	r1, [pc, #128]	; (80134b4 <gpioPinWrite+0xa0>)
 8013434:	4613      	mov	r3, r2
 8013436:	005b      	lsls	r3, r3, #1
 8013438:	4413      	add	r3, r2
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	440b      	add	r3, r1
 801343e:	6818      	ldr	r0, [r3, #0]
 8013440:	79fa      	ldrb	r2, [r7, #7]
 8013442:	491c      	ldr	r1, [pc, #112]	; (80134b4 <gpioPinWrite+0xa0>)
 8013444:	4613      	mov	r3, r2
 8013446:	005b      	lsls	r3, r3, #1
 8013448:	4413      	add	r3, r2
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	440b      	add	r3, r1
 801344e:	3304      	adds	r3, #4
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	b299      	uxth	r1, r3
 8013454:	79fa      	ldrb	r2, [r7, #7]
 8013456:	4c17      	ldr	r4, [pc, #92]	; (80134b4 <gpioPinWrite+0xa0>)
 8013458:	4613      	mov	r3, r2
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	4413      	add	r3, r2
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	4423      	add	r3, r4
 8013462:	3309      	adds	r3, #9
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	461a      	mov	r2, r3
 8013468:	f006 fb50 	bl	8019b0c <HAL_GPIO_WritePin>
 801346c:	e01f      	b.n	80134ae <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 801346e:	79fa      	ldrb	r2, [r7, #7]
 8013470:	4910      	ldr	r1, [pc, #64]	; (80134b4 <gpioPinWrite+0xa0>)
 8013472:	4613      	mov	r3, r2
 8013474:	005b      	lsls	r3, r3, #1
 8013476:	4413      	add	r3, r2
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	440b      	add	r3, r1
 801347c:	6818      	ldr	r0, [r3, #0]
 801347e:	79fa      	ldrb	r2, [r7, #7]
 8013480:	490c      	ldr	r1, [pc, #48]	; (80134b4 <gpioPinWrite+0xa0>)
 8013482:	4613      	mov	r3, r2
 8013484:	005b      	lsls	r3, r3, #1
 8013486:	4413      	add	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	440b      	add	r3, r1
 801348c:	3304      	adds	r3, #4
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	b299      	uxth	r1, r3
 8013492:	79fa      	ldrb	r2, [r7, #7]
 8013494:	4c07      	ldr	r4, [pc, #28]	; (80134b4 <gpioPinWrite+0xa0>)
 8013496:	4613      	mov	r3, r2
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	4423      	add	r3, r4
 80134a0:	330a      	adds	r3, #10
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	461a      	mov	r2, r3
 80134a6:	f006 fb31 	bl	8019b0c <HAL_GPIO_WritePin>
 80134aa:	e000      	b.n	80134ae <gpioPinWrite+0x9a>
    return;
 80134ac:	bf00      	nop
  }
}
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd90      	pop	{r4, r7, pc}
 80134b4:	0802caf0 	.word	0x0802caf0

080134b8 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	4603      	mov	r3, r0
 80134c0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80134c2:	2300      	movs	r3, #0
 80134c4:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80134c6:	79fb      	ldrb	r3, [r7, #7]
 80134c8:	2b03      	cmp	r3, #3
 80134ca:	d901      	bls.n	80134d0 <gpioPinRead+0x18>
  {
    return false;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e024      	b.n	801351a <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80134d0:	79fa      	ldrb	r2, [r7, #7]
 80134d2:	4914      	ldr	r1, [pc, #80]	; (8013524 <gpioPinRead+0x6c>)
 80134d4:	4613      	mov	r3, r2
 80134d6:	005b      	lsls	r3, r3, #1
 80134d8:	4413      	add	r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	440b      	add	r3, r1
 80134de:	6818      	ldr	r0, [r3, #0]
 80134e0:	79fa      	ldrb	r2, [r7, #7]
 80134e2:	4910      	ldr	r1, [pc, #64]	; (8013524 <gpioPinRead+0x6c>)
 80134e4:	4613      	mov	r3, r2
 80134e6:	005b      	lsls	r3, r3, #1
 80134e8:	4413      	add	r3, r2
 80134ea:	009b      	lsls	r3, r3, #2
 80134ec:	440b      	add	r3, r1
 80134ee:	3304      	adds	r3, #4
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	4619      	mov	r1, r3
 80134f6:	f006 faf1 	bl	8019adc <HAL_GPIO_ReadPin>
 80134fa:	4603      	mov	r3, r0
 80134fc:	4618      	mov	r0, r3
 80134fe:	79fa      	ldrb	r2, [r7, #7]
 8013500:	4908      	ldr	r1, [pc, #32]	; (8013524 <gpioPinRead+0x6c>)
 8013502:	4613      	mov	r3, r2
 8013504:	005b      	lsls	r3, r3, #1
 8013506:	4413      	add	r3, r2
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	440b      	add	r3, r1
 801350c:	3309      	adds	r3, #9
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	4298      	cmp	r0, r3
 8013512:	d101      	bne.n	8013518 <gpioPinRead+0x60>
  {
    ret = true;
 8013514:	2301      	movs	r3, #1
 8013516:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013518:	7bfb      	ldrb	r3, [r7, #15]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	0802caf0 	.word	0x0802caf0

08013528 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b087      	sub	sp, #28
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013530:	2300      	movs	r3, #0
 8013532:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	881b      	ldrh	r3, [r3, #0]
 8013538:	2b01      	cmp	r3, #1
 801353a:	d128      	bne.n	801358e <cliGpio+0x66>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	695b      	ldr	r3, [r3, #20]
 8013540:	4947      	ldr	r1, [pc, #284]	; (8013660 <cliGpio+0x138>)
 8013542:	2000      	movs	r0, #0
 8013544:	4798      	blx	r3
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d020      	beq.n	801358e <cliGpio+0x66>
  {
    while(cliKeepLoop())
 801354c:	e018      	b.n	8013580 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 801354e:	2300      	movs	r3, #0
 8013550:	613b      	str	r3, [r7, #16]
 8013552:	e00c      	b.n	801356e <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	b2db      	uxtb	r3, r3
 8013558:	4618      	mov	r0, r3
 801355a:	f7ff ffad 	bl	80134b8 <gpioPinRead>
 801355e:	4603      	mov	r3, r0
 8013560:	4619      	mov	r1, r3
 8013562:	4840      	ldr	r0, [pc, #256]	; (8013664 <cliGpio+0x13c>)
 8013564:	f7fe ff72 	bl	801244c <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	3301      	adds	r3, #1
 801356c:	613b      	str	r3, [r7, #16]
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	2b03      	cmp	r3, #3
 8013572:	ddef      	ble.n	8013554 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8013574:	483c      	ldr	r0, [pc, #240]	; (8013668 <cliGpio+0x140>)
 8013576:	f7fe ff69 	bl	801244c <cliPrintf>
      delay(100);
 801357a:	2064      	movs	r0, #100	; 0x64
 801357c:	f7f5 fe48 	bl	8009210 <delay>
    while(cliKeepLoop())
 8013580:	f7ff f85e 	bl	8012640 <cliKeepLoop>
 8013584:	4603      	mov	r3, r0
 8013586:	2b00      	cmp	r3, #0
 8013588:	d1e1      	bne.n	801354e <cliGpio+0x26>
    }
    ret = true;
 801358a:	2301      	movs	r3, #1
 801358c:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	881b      	ldrh	r3, [r3, #0]
 8013592:	2b02      	cmp	r3, #2
 8013594:	d123      	bne.n	80135de <cliGpio+0xb6>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	4934      	ldr	r1, [pc, #208]	; (801366c <cliGpio+0x144>)
 801359c:	2000      	movs	r0, #0
 801359e:	4798      	blx	r3
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d01b      	beq.n	80135de <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	2001      	movs	r0, #1
 80135ac:	4798      	blx	r3
 80135ae:	4603      	mov	r3, r0
 80135b0:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80135b2:	e00d      	b.n	80135d0 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80135b4:	7bfc      	ldrb	r4, [r7, #15]
 80135b6:	7bfb      	ldrb	r3, [r7, #15]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff ff7d 	bl	80134b8 <gpioPinRead>
 80135be:	4603      	mov	r3, r0
 80135c0:	461a      	mov	r2, r3
 80135c2:	4621      	mov	r1, r4
 80135c4:	482a      	ldr	r0, [pc, #168]	; (8013670 <cliGpio+0x148>)
 80135c6:	f7fe ff41 	bl	801244c <cliPrintf>
      delay(100);
 80135ca:	2064      	movs	r0, #100	; 0x64
 80135cc:	f7f5 fe20 	bl	8009210 <delay>
    while(cliKeepLoop())
 80135d0:	f7ff f836 	bl	8012640 <cliKeepLoop>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1ec      	bne.n	80135b4 <cliGpio+0x8c>
    }

    ret = true;
 80135da:	2301      	movs	r3, #1
 80135dc:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	2b03      	cmp	r3, #3
 80135e4:	d126      	bne.n	8013634 <cliGpio+0x10c>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	695b      	ldr	r3, [r3, #20]
 80135ea:	4922      	ldr	r1, [pc, #136]	; (8013674 <cliGpio+0x14c>)
 80135ec:	2000      	movs	r0, #0
 80135ee:	4798      	blx	r3
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d01e      	beq.n	8013634 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	2001      	movs	r0, #1
 80135fc:	4798      	blx	r3
 80135fe:	4603      	mov	r3, r0
 8013600:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	689b      	ldr	r3, [r3, #8]
 8013606:	2002      	movs	r0, #2
 8013608:	4798      	blx	r3
 801360a:	4603      	mov	r3, r0
 801360c:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 801360e:	7b7b      	ldrb	r3, [r7, #13]
 8013610:	2b00      	cmp	r3, #0
 8013612:	bf14      	ite	ne
 8013614:	2301      	movne	r3, #1
 8013616:	2300      	moveq	r3, #0
 8013618:	b2da      	uxtb	r2, r3
 801361a:	7bbb      	ldrb	r3, [r7, #14]
 801361c:	4611      	mov	r1, r2
 801361e:	4618      	mov	r0, r3
 8013620:	f7ff fef8 	bl	8013414 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8013624:	7bbb      	ldrb	r3, [r7, #14]
 8013626:	7b7a      	ldrb	r2, [r7, #13]
 8013628:	4619      	mov	r1, r3
 801362a:	4813      	ldr	r0, [pc, #76]	; (8013678 <cliGpio+0x150>)
 801362c:	f7fe ff0e 	bl	801244c <cliPrintf>
    ret = true;
 8013630:	2301      	movs	r3, #1
 8013632:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	f083 0301 	eor.w	r3, r3, #1
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2b00      	cmp	r3, #0
 801363e:	d00a      	beq.n	8013656 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8013640:	480e      	ldr	r0, [pc, #56]	; (801367c <cliGpio+0x154>)
 8013642:	f7fe ff03 	bl	801244c <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8013646:	2103      	movs	r1, #3
 8013648:	480d      	ldr	r0, [pc, #52]	; (8013680 <cliGpio+0x158>)
 801364a:	f7fe feff 	bl	801244c <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 801364e:	2103      	movs	r1, #3
 8013650:	480c      	ldr	r0, [pc, #48]	; (8013684 <cliGpio+0x15c>)
 8013652:	f7fe fefb 	bl	801244c <cliPrintf>
  }
}
 8013656:	bf00      	nop
 8013658:	371c      	adds	r7, #28
 801365a:	46bd      	mov	sp, r7
 801365c:	bd90      	pop	{r4, r7, pc}
 801365e:	bf00      	nop
 8013660:	0802c448 	.word	0x0802c448
 8013664:	0802c450 	.word	0x0802c450
 8013668:	0802c454 	.word	0x0802c454
 801366c:	0802c458 	.word	0x0802c458
 8013670:	0802c460 	.word	0x0802c460
 8013674:	0802c474 	.word	0x0802c474
 8013678:	0802c47c 	.word	0x0802c47c
 801367c:	0802c490 	.word	0x0802c490
 8013680:	0802c49c 	.word	0x0802c49c
 8013684:	0802c4b0 	.word	0x0802c4b0

08013688 <i2cInit>:
I2C_HandleTypeDef hi2c2;

static void cliI2C(cli_args_t *args);

bool i2cInit(void)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
  bool ret = true;
 801368e:	2301      	movs	r3, #1
 8013690:	71fb      	strb	r3, [r7, #7]

  hi2c2.Instance = I2C2;
 8013692:	4b16      	ldr	r3, [pc, #88]	; (80136ec <i2cInit+0x64>)
 8013694:	4a16      	ldr	r2, [pc, #88]	; (80136f0 <i2cInit+0x68>)
 8013696:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8013698:	4b14      	ldr	r3, [pc, #80]	; (80136ec <i2cInit+0x64>)
 801369a:	4a16      	ldr	r2, [pc, #88]	; (80136f4 <i2cInit+0x6c>)
 801369c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801369e:	4b13      	ldr	r3, [pc, #76]	; (80136ec <i2cInit+0x64>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80136a4:	4b11      	ldr	r3, [pc, #68]	; (80136ec <i2cInit+0x64>)
 80136a6:	2200      	movs	r2, #0
 80136a8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80136aa:	4b10      	ldr	r3, [pc, #64]	; (80136ec <i2cInit+0x64>)
 80136ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80136b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80136b2:	4b0e      	ldr	r3, [pc, #56]	; (80136ec <i2cInit+0x64>)
 80136b4:	2200      	movs	r2, #0
 80136b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80136b8:	4b0c      	ldr	r3, [pc, #48]	; (80136ec <i2cInit+0x64>)
 80136ba:	2200      	movs	r2, #0
 80136bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80136be:	4b0b      	ldr	r3, [pc, #44]	; (80136ec <i2cInit+0x64>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80136c4:	4b09      	ldr	r3, [pc, #36]	; (80136ec <i2cInit+0x64>)
 80136c6:	2200      	movs	r2, #0
 80136c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80136ca:	4808      	ldr	r0, [pc, #32]	; (80136ec <i2cInit+0x64>)
 80136cc:	f006 fa6a 	bl	8019ba4 <HAL_I2C_Init>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d001      	beq.n	80136da <i2cInit+0x52>
  {
    Error_Handler();
 80136d6:	f7f5 fe5d 	bl	8009394 <Error_Handler>
  }
  cliAdd("i2c", cliI2C);
 80136da:	4907      	ldr	r1, [pc, #28]	; (80136f8 <i2cInit+0x70>)
 80136dc:	4807      	ldr	r0, [pc, #28]	; (80136fc <i2cInit+0x74>)
 80136de:	f7fe ffc5 	bl	801266c <cliAdd>
  return ret;
 80136e2:	79fb      	ldrb	r3, [r7, #7]
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	200016e4 	.word	0x200016e4
 80136f0:	40005800 	.word	0x40005800
 80136f4:	00061a80 	.word	0x00061a80
 80136f8:	08013899 	.word	0x08013899
 80136fc:	0802c4cc 	.word	0x0802c4cc

08013700 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

bool I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b088      	sub	sp, #32
 8013704:	af04      	add	r7, sp, #16
 8013706:	607b      	str	r3, [r7, #4]
 8013708:	4603      	mov	r3, r0
 801370a:	81fb      	strh	r3, [r7, #14]
 801370c:	460b      	mov	r3, r1
 801370e:	81bb      	strh	r3, [r7, #12]
 8013710:	4613      	mov	r3, r2
 8013712:	817b      	strh	r3, [r7, #10]
  HAL_I2C_Mem_Read(&hi2c2, DevAddress<<1, MemAddress, MemAddSize, pData, Size, 1);
 8013714:	89fb      	ldrh	r3, [r7, #14]
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	b299      	uxth	r1, r3
 801371a:	8978      	ldrh	r0, [r7, #10]
 801371c:	89ba      	ldrh	r2, [r7, #12]
 801371e:	2301      	movs	r3, #1
 8013720:	9302      	str	r3, [sp, #8]
 8013722:	8b3b      	ldrh	r3, [r7, #24]
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	4603      	mov	r3, r0
 801372c:	4803      	ldr	r0, [pc, #12]	; (801373c <I2C_ByteRead+0x3c>)
 801372e:	f006 fc77 	bl	801a020 <HAL_I2C_Mem_Read>
  return true;
 8013732:	2301      	movs	r3, #1
}
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	200016e4 	.word	0x200016e4

08013740 <I2C_ByteWrite_HAL>:

bool I2C_ByteWrite_HAL(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b088      	sub	sp, #32
 8013744:	af04      	add	r7, sp, #16
 8013746:	607b      	str	r3, [r7, #4]
 8013748:	4603      	mov	r3, r0
 801374a:	81fb      	strh	r3, [r7, #14]
 801374c:	460b      	mov	r3, r1
 801374e:	81bb      	strh	r3, [r7, #12]
 8013750:	4613      	mov	r3, r2
 8013752:	817b      	strh	r3, [r7, #10]
  HAL_I2C_Mem_Write(&hi2c2, DevAddress<<1, MemAddress, MemAddSize, pData, Size, 1);
 8013754:	89fb      	ldrh	r3, [r7, #14]
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	b299      	uxth	r1, r3
 801375a:	8978      	ldrh	r0, [r7, #10]
 801375c:	89ba      	ldrh	r2, [r7, #12]
 801375e:	2301      	movs	r3, #1
 8013760:	9302      	str	r3, [sp, #8]
 8013762:	8b3b      	ldrh	r3, [r7, #24]
 8013764:	9301      	str	r3, [sp, #4]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	9300      	str	r3, [sp, #0]
 801376a:	4603      	mov	r3, r0
 801376c:	4803      	ldr	r0, [pc, #12]	; (801377c <I2C_ByteWrite_HAL+0x3c>)
 801376e:	f006 fb5d 	bl	8019e2c <HAL_I2C_Mem_Write>
  return true;
 8013772:	2301      	movs	r3, #1
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	200016e4 	.word	0x200016e4

08013780 <i2cIsDeviceReady>:
    HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
  }
}

bool i2cIsDeviceReady(uint8_t dev_addr)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	4603      	mov	r3, r0
 8013788:	71fb      	strb	r3, [r7, #7]

  if (HAL_I2C_IsDeviceReady(&hi2c2, dev_addr << 1, 10, 10) == HAL_OK)
 801378a:	79fb      	ldrb	r3, [r7, #7]
 801378c:	b29b      	uxth	r3, r3
 801378e:	005b      	lsls	r3, r3, #1
 8013790:	b299      	uxth	r1, r3
 8013792:	230a      	movs	r3, #10
 8013794:	220a      	movs	r2, #10
 8013796:	4807      	ldr	r0, [pc, #28]	; (80137b4 <i2cIsDeviceReady+0x34>)
 8013798:	f006 fe68 	bl	801a46c <HAL_I2C_IsDeviceReady>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d103      	bne.n	80137aa <i2cIsDeviceReady+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 80137a2:	b662      	cpsie	i
}
 80137a4:	bf00      	nop
  {
    __enable_irq();
    return true;
 80137a6:	2301      	movs	r3, #1
 80137a8:	e000      	b.n	80137ac <i2cIsDeviceReady+0x2c>
  }

  return false;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	200016e4 	.word	0x200016e4

080137b8 <busBusy>:

// Returns true if bus is still busy
bool busBusy(void)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
  bool ret = false;
 80137be:	2300      	movs	r3, #0
 80137c0:	71fb      	strb	r3, [r7, #7]
  volatile HAL_I2C_StateTypeDef *status = &hi2c2.State;
 80137c2:	4b08      	ldr	r3, [pc, #32]	; (80137e4 <busBusy+0x2c>)
 80137c4:	603b      	str	r3, [r7, #0]

  if(*status == HAL_I2C_STATE_BUSY)
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	2b24      	cmp	r3, #36	; 0x24
 80137ce:	d101      	bne.n	80137d4 <busBusy+0x1c>
  {
    ret = true;
 80137d0:	2301      	movs	r3, #1
 80137d2:	71fb      	strb	r3, [r7, #7]
  }
  return ret;
 80137d4:	79fb      	ldrb	r3, [r7, #7]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	370c      	adds	r7, #12
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	20001721 	.word	0x20001721

080137e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b08a      	sub	sp, #40	; 0x28
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137f0:	f107 0314 	add.w	r3, r7, #20
 80137f4:	2200      	movs	r2, #0
 80137f6:	601a      	str	r2, [r3, #0]
 80137f8:	605a      	str	r2, [r3, #4]
 80137fa:	609a      	str	r2, [r3, #8]
 80137fc:	60da      	str	r2, [r3, #12]
 80137fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a21      	ldr	r2, [pc, #132]	; (801388c <HAL_I2C_MspInit+0xa4>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d13c      	bne.n	8013884 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801380a:	2300      	movs	r3, #0
 801380c:	613b      	str	r3, [r7, #16]
 801380e:	4b20      	ldr	r3, [pc, #128]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 8013810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013812:	4a1f      	ldr	r2, [pc, #124]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 8013814:	f043 0302 	orr.w	r3, r3, #2
 8013818:	6313      	str	r3, [r2, #48]	; 0x30
 801381a:	4b1d      	ldr	r3, [pc, #116]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 801381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801381e:	f003 0302 	and.w	r3, r3, #2
 8013822:	613b      	str	r3, [r7, #16]
 8013824:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8013826:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801382a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801382c:	2312      	movs	r3, #18
 801382e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013830:	2301      	movs	r3, #1
 8013832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013834:	2303      	movs	r3, #3
 8013836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013838:	2304      	movs	r3, #4
 801383a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801383c:	f107 0314 	add.w	r3, r7, #20
 8013840:	4619      	mov	r1, r3
 8013842:	4814      	ldr	r0, [pc, #80]	; (8013894 <HAL_I2C_MspInit+0xac>)
 8013844:	f005 ffae 	bl	80197a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013848:	2300      	movs	r3, #0
 801384a:	60fb      	str	r3, [r7, #12]
 801384c:	4b10      	ldr	r3, [pc, #64]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 801384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013850:	4a0f      	ldr	r2, [pc, #60]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 8013852:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013856:	6413      	str	r3, [r2, #64]	; 0x40
 8013858:	4b0d      	ldr	r3, [pc, #52]	; (8013890 <HAL_I2C_MspInit+0xa8>)
 801385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013860:	60fb      	str	r3, [r7, #12]
 8013862:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8013864:	2200      	movs	r2, #0
 8013866:	2100      	movs	r1, #0
 8013868:	2021      	movs	r0, #33	; 0x21
 801386a:	f005 f876 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 801386e:	2021      	movs	r0, #33	; 0x21
 8013870:	f005 f88f 	bl	8018992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8013874:	2200      	movs	r2, #0
 8013876:	2100      	movs	r1, #0
 8013878:	2022      	movs	r0, #34	; 0x22
 801387a:	f005 f86e 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 801387e:	2022      	movs	r0, #34	; 0x22
 8013880:	f005 f887 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013884:	bf00      	nop
 8013886:	3728      	adds	r7, #40	; 0x28
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	40005800 	.word	0x40005800
 8013890:	40023800 	.word	0x40023800
 8013894:	40020400 	.word	0x40020400

08013898 <cliI2C>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

void cliI2C(cli_args_t *args)
{
 8013898:	b5b0      	push	{r4, r5, r7, lr}
 801389a:	b0aa      	sub	sp, #168	; 0xa8
 801389c:	af02      	add	r7, sp, #8
 801389e:	6078      	str	r0, [r7, #4]
  bool ret = true;
 80138a0:	2301      	movs	r3, #1
 80138a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 1)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	881b      	ldrh	r3, [r3, #0]
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d125      	bne.n	80138fa <cliI2C+0x62>
  {

    if(args->isStr(0, "scan") == true)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	695b      	ldr	r3, [r3, #20]
 80138b2:	496b      	ldr	r1, [pc, #428]	; (8013a60 <cliI2C+0x1c8>)
 80138b4:	2000      	movs	r0, #0
 80138b6:	4798      	blx	r3
 80138b8:	4603      	mov	r3, r0
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	f000 80bc 	beq.w	8013a38 <cliI2C+0x1a0>
    {
      for (i=0x00; i<= 0x7F; i++)
 80138c0:	2300      	movs	r3, #0
 80138c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80138c6:	e013      	b.n	80138f0 <cliI2C+0x58>
      {
        if (i2cIsDeviceReady(i) == true)
 80138c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7ff ff56 	bl	8013780 <i2cIsDeviceReady>
 80138d4:	4603      	mov	r3, r0
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d005      	beq.n	80138e6 <cliI2C+0x4e>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n\r", 2, i);
 80138da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80138de:	2102      	movs	r1, #2
 80138e0:	4860      	ldr	r0, [pc, #384]	; (8013a64 <cliI2C+0x1cc>)
 80138e2:	f7fe fdb3 	bl	801244c <cliPrintf>
      for (i=0x00; i<= 0x7F; i++)
 80138e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138ea:	3301      	adds	r3, #1
 80138ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80138f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138f4:	2b7f      	cmp	r3, #127	; 0x7f
 80138f6:	d9e7      	bls.n	80138c8 <cliI2C+0x30>
 80138f8:	e09e      	b.n	8013a38 <cliI2C+0x1a0>
        }
      }
    }
  }
  else if (args->argc == 4)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	2b04      	cmp	r3, #4
 8013900:	f040 8097 	bne.w	8013a32 <cliI2C+0x19a>
  {
    dev_addr = (uint16_t) args->getData(1);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	689b      	ldr	r3, [r3, #8]
 8013908:	2001      	movs	r0, #1
 801390a:	4798      	blx	r3
 801390c:	4603      	mov	r3, r0
 801390e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    reg_addr = (uint16_t) args->getData(2);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	2002      	movs	r0, #2
 8013918:	4798      	blx	r3
 801391a:	4603      	mov	r3, r0
 801391c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    length   = (uint16_t) args->getData(3);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	2003      	movs	r0, #3
 8013926:	4798      	blx	r3
 8013928:	4603      	mov	r3, r0
 801392a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    if(args->isStr(0, "read") == true)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	695b      	ldr	r3, [r3, #20]
 8013932:	494d      	ldr	r1, [pc, #308]	; (8013a68 <cliI2C+0x1d0>)
 8013934:	2000      	movs	r0, #0
 8013936:	4798      	blx	r3
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d038      	beq.n	80139b0 <cliI2C+0x118>
    {
      for (i=0; i<length; i++)
 801393e:	2300      	movs	r3, #0
 8013940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013944:	e02d      	b.n	80139a2 <cliI2C+0x10a>
      {
        i2c_ret = I2C_ByteRead(dev_addr<<1, reg_addr+i, I2C_MEMADD_SIZE_8BIT, i2c_data, 1);
 8013946:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801394a:	005b      	lsls	r3, r3, #1
 801394c:	b298      	uxth	r0, r3
 801394e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013952:	b29a      	uxth	r2, r3
 8013954:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8013958:	4413      	add	r3, r2
 801395a:	b299      	uxth	r1, r3
 801395c:	f107 0308 	add.w	r3, r7, #8
 8013960:	2201      	movs	r2, #1
 8013962:	9200      	str	r2, [sp, #0]
 8013964:	2201      	movs	r2, #1
 8013966:	f7ff fecb 	bl	8013700 <I2C_ByteRead>
 801396a:	4603      	mov	r3, r0
 801396c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if (i2c_ret == true)
 8013970:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00a      	beq.n	801398e <cliI2C+0xf6>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n\r", reg_addr+i, i2c_data[0]);
 8013978:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 801397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013980:	4413      	add	r3, r2
 8013982:	7a3a      	ldrb	r2, [r7, #8]
 8013984:	4619      	mov	r1, r3
 8013986:	4839      	ldr	r0, [pc, #228]	; (8013a6c <cliI2C+0x1d4>)
 8013988:	f7fe fd60 	bl	801244c <cliPrintf>
 801398c:	e004      	b.n	8013998 <cliI2C+0x100>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n\r", 2);
 801398e:	2102      	movs	r1, #2
 8013990:	4837      	ldr	r0, [pc, #220]	; (8013a70 <cliI2C+0x1d8>)
 8013992:	f7fe fd5b 	bl	801244c <cliPrintf>
          break;
 8013996:	e04f      	b.n	8013a38 <cliI2C+0x1a0>
      for (i=0; i<length; i++)
 8013998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801399c:	3301      	adds	r3, #1
 801399e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80139a2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80139a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d3cb      	bcc.n	8013946 <cliI2C+0xae>
 80139ae:	e043      	b.n	8013a38 <cliI2C+0x1a0>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	695b      	ldr	r3, [r3, #20]
 80139b4:	492f      	ldr	r1, [pc, #188]	; (8013a74 <cliI2C+0x1dc>)
 80139b6:	2000      	movs	r0, #0
 80139b8:	4798      	blx	r3
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d034      	beq.n	8013a2a <cliI2C+0x192>
    {
      pre_time = millis();
 80139c0:	f7f5 fc31 	bl	8009226 <millis>
 80139c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      data = (uint8_t) length;
 80139c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
      i2c_ret = I2C_ByteWrite_HAL(dev_addr<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1);
 80139d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80139d6:	005b      	lsls	r3, r3, #1
 80139d8:	b298      	uxth	r0, r3
 80139da:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80139de:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80139e2:	2201      	movs	r2, #1
 80139e4:	9200      	str	r2, [sp, #0]
 80139e6:	2201      	movs	r2, #1
 80139e8:	f7ff feaa 	bl	8013740 <I2C_ByteWrite_HAL>
 80139ec:	4603      	mov	r3, r0
 80139ee:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      if (i2c_ret == true)
 80139f2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d012      	beq.n	8013a20 <cliI2C+0x188>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n\r", 2, reg_addr, data, millis()-pre_time);
 80139fa:	f8b7 4094 	ldrh.w	r4, [r7, #148]	; 0x94
 80139fe:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8013a02:	461d      	mov	r5, r3
 8013a04:	f7f5 fc0f 	bl	8009226 <millis>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	462b      	mov	r3, r5
 8013a14:	4622      	mov	r2, r4
 8013a16:	2102      	movs	r1, #2
 8013a18:	4817      	ldr	r0, [pc, #92]	; (8013a78 <cliI2C+0x1e0>)
 8013a1a:	f7fe fd17 	bl	801244c <cliPrintf>
 8013a1e:	e00b      	b.n	8013a38 <cliI2C+0x1a0>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n\r", 2);
 8013a20:	2102      	movs	r1, #2
 8013a22:	4813      	ldr	r0, [pc, #76]	; (8013a70 <cliI2C+0x1d8>)
 8013a24:	f7fe fd12 	bl	801244c <cliPrintf>
 8013a28:	e006      	b.n	8013a38 <cliI2C+0x1a0>
      }
    }
    else
    {
      ret = false;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8013a30:	e002      	b.n	8013a38 <cliI2C+0x1a0>
    }
  }
  else
  {
    ret = false;
 8013a32:	2300      	movs	r3, #0
 8013a34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  }

  if (ret == false)
 8013a38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013a3c:	f083 0301 	eor.w	r3, r3, #1
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d008      	beq.n	8013a58 <cliI2C+0x1c0>
  {
    cliPrintf( "i2c scan\n\r");
 8013a46:	480d      	ldr	r0, [pc, #52]	; (8013a7c <cliI2C+0x1e4>)
 8013a48:	f7fe fd00 	bl	801244c <cliPrintf>
    cliPrintf( "i2c read dev_addr reg_addr length\n\r");
 8013a4c:	480c      	ldr	r0, [pc, #48]	; (8013a80 <cliI2C+0x1e8>)
 8013a4e:	f7fe fcfd 	bl	801244c <cliPrintf>
    cliPrintf( "i2c write dev_addr reg_addr data\n\r");
 8013a52:	480c      	ldr	r0, [pc, #48]	; (8013a84 <cliI2C+0x1ec>)
 8013a54:	f7fe fcfa 	bl	801244c <cliPrintf>
  }
}
 8013a58:	bf00      	nop
 8013a5a:	37a0      	adds	r7, #160	; 0xa0
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a60:	0802c4d0 	.word	0x0802c4d0
 8013a64:	0802c4d8 	.word	0x0802c4d8
 8013a68:	0802c4f4 	.word	0x0802c4f4
 8013a6c:	0802c4fc 	.word	0x0802c4fc
 8013a70:	0802c518 	.word	0x0802c518
 8013a74:	0802c52c 	.word	0x0802c52c
 8013a78:	0802c534 	.word	0x0802c534
 8013a7c:	0802c558 	.word	0x0802c558
 8013a80:	0802c564 	.word	0x0802c564
 8013a84:	0802c588 	.word	0x0802c588

08013a88 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b088      	sub	sp, #32
 8013a8c:	af00      	add	r7, sp, #0
  bool ret = true;
 8013a8e:	2301      	movs	r3, #1
 8013a90:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a92:	1d3b      	adds	r3, r7, #4
 8013a94:	2200      	movs	r2, #0
 8013a96:	601a      	str	r2, [r3, #0]
 8013a98:	605a      	str	r2, [r3, #4]
 8013a9a:	609a      	str	r2, [r3, #8]
 8013a9c:	60da      	str	r2, [r3, #12]
 8013a9e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	603b      	str	r3, [r7, #0]
 8013aa4:	4b1a      	ldr	r3, [pc, #104]	; (8013b10 <ledInit+0x88>)
 8013aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa8:	4a19      	ldr	r2, [pc, #100]	; (8013b10 <ledInit+0x88>)
 8013aaa:	f043 0304 	orr.w	r3, r3, #4
 8013aae:	6313      	str	r3, [r2, #48]	; 0x30
 8013ab0:	4b17      	ldr	r3, [pc, #92]	; (8013b10 <ledInit+0x88>)
 8013ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab4:	f003 0304 	and.w	r3, r3, #4
 8013ab8:	603b      	str	r3, [r7, #0]
 8013aba:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013abc:	2301      	movs	r3, #1
 8013abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	61fb      	str	r3, [r7, #28]
 8013acc:	e00f      	b.n	8013aee <ledInit+0x66>
  {
    GPIO_InitStruct.Pin |= led_tbl[i].pin;
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	4910      	ldr	r1, [pc, #64]	; (8013b14 <ledInit+0x8c>)
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	00db      	lsls	r3, r3, #3
 8013ad6:	440b      	add	r3, r1
 8013ad8:	889b      	ldrh	r3, [r3, #4]
 8013ada:	4313      	orrs	r3, r2
 8013adc:	607b      	str	r3, [r7, #4]
    ledOff(i);
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f000 f81e 	bl	8013b24 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	3301      	adds	r3, #1
 8013aec:	61fb      	str	r3, [r7, #28]
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	ddec      	ble.n	8013ace <ledInit+0x46>
  }

   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013af4:	1d3b      	adds	r3, r7, #4
 8013af6:	4619      	mov	r1, r3
 8013af8:	4807      	ldr	r0, [pc, #28]	; (8013b18 <ledInit+0x90>)
 8013afa:	f005 fe53 	bl	80197a4 <HAL_GPIO_Init>

	#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8013afe:	4907      	ldr	r1, [pc, #28]	; (8013b1c <ledInit+0x94>)
 8013b00:	4807      	ldr	r0, [pc, #28]	; (8013b20 <ledInit+0x98>)
 8013b02:	f7fe fdb3 	bl	801266c <cliAdd>
	#endif

  return ret;
 8013b06:	7efb      	ldrb	r3, [r7, #27]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3720      	adds	r7, #32
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}
 8013b10:	40023800 	.word	0x40023800
 8013b14:	20000398 	.word	0x20000398
 8013b18:	40020800 	.word	0x40020800
 8013b1c:	08013b9d 	.word	0x08013b9d
 8013b20:	0802c5ac 	.word	0x0802c5ac

08013b24 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8013b2e:	79fb      	ldrb	r3, [r7, #7]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d111      	bne.n	8013b58 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8013b34:	79fb      	ldrb	r3, [r7, #7]
 8013b36:	4a0a      	ldr	r2, [pc, #40]	; (8013b60 <ledOff+0x3c>)
 8013b38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b3c:	79fb      	ldrb	r3, [r7, #7]
 8013b3e:	4a08      	ldr	r2, [pc, #32]	; (8013b60 <ledOff+0x3c>)
 8013b40:	00db      	lsls	r3, r3, #3
 8013b42:	4413      	add	r3, r2
 8013b44:	8899      	ldrh	r1, [r3, #4]
 8013b46:	79fb      	ldrb	r3, [r7, #7]
 8013b48:	4a05      	ldr	r2, [pc, #20]	; (8013b60 <ledOff+0x3c>)
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	4413      	add	r3, r2
 8013b4e:	79db      	ldrb	r3, [r3, #7]
 8013b50:	461a      	mov	r2, r3
 8013b52:	f005 ffdb 	bl	8019b0c <HAL_GPIO_WritePin>
 8013b56:	e000      	b.n	8013b5a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8013b58:	bf00      	nop
}
 8013b5a:	3708      	adds	r7, #8
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}
 8013b60:	20000398 	.word	0x20000398

08013b64 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8013b6e:	79fb      	ldrb	r3, [r7, #7]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10d      	bne.n	8013b90 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8013b74:	79fb      	ldrb	r3, [r7, #7]
 8013b76:	4a08      	ldr	r2, [pc, #32]	; (8013b98 <ledToggle+0x34>)
 8013b78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013b7c:	79fb      	ldrb	r3, [r7, #7]
 8013b7e:	4906      	ldr	r1, [pc, #24]	; (8013b98 <ledToggle+0x34>)
 8013b80:	00db      	lsls	r3, r3, #3
 8013b82:	440b      	add	r3, r1
 8013b84:	889b      	ldrh	r3, [r3, #4]
 8013b86:	4619      	mov	r1, r3
 8013b88:	4610      	mov	r0, r2
 8013b8a:	f005 ffd8 	bl	8019b3e <HAL_GPIO_TogglePin>
 8013b8e:	e000      	b.n	8013b92 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8013b90:	bf00      	nop
}
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	20000398 	.word	0x20000398

08013b9c <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d133      	bne.n	8013c18 <cliLed+0x7c>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	695b      	ldr	r3, [r3, #20]
 8013bb4:	491f      	ldr	r1, [pc, #124]	; (8013c34 <cliLed+0x98>)
 8013bb6:	2000      	movs	r0, #0
 8013bb8:	4798      	blx	r3
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d02b      	beq.n	8013c18 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	4798      	blx	r3
 8013bc8:	4603      	mov	r3, r0
 8013bca:	75bb      	strb	r3, [r7, #22]
    toggle_time = args->getData(2);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	2002      	movs	r0, #2
 8013bd2:	4798      	blx	r3
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8013bd8:	7dbb      	ldrb	r3, [r7, #22]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d002      	beq.n	8013be4 <cliLed+0x48>
    {
      led_ch--;
 8013bde:	7dbb      	ldrb	r3, [r7, #22]
 8013be0:	3b01      	subs	r3, #1
 8013be2:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8013be4:	f7f5 fb1f 	bl	8009226 <millis>
 8013be8:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8013bea:	e00e      	b.n	8013c0a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8013bec:	f7f5 fb1b 	bl	8009226 <millis>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	1ad3      	subs	r3, r2, r3
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d806      	bhi.n	8013c0a <cliLed+0x6e>
      {
        pre_time = millis();
 8013bfc:	f7f5 fb13 	bl	8009226 <millis>
 8013c00:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8013c02:	7dbb      	ldrb	r3, [r7, #22]
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff ffad 	bl	8013b64 <ledToggle>
    while(cliKeepLoop())
 8013c0a:	f7fe fd19 	bl	8012640 <cliKeepLoop>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d1eb      	bne.n	8013bec <cliLed+0x50>
      }
    }
    ret = true;
 8013c14:	2301      	movs	r3, #1
 8013c16:	75fb      	strb	r3, [r7, #23]
  }



  if (ret != true)
 8013c18:	7dfb      	ldrb	r3, [r7, #23]
 8013c1a:	f083 0301 	eor.w	r3, r3, #1
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d003      	beq.n	8013c2c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 8013c24:	2101      	movs	r1, #1
 8013c26:	4804      	ldr	r0, [pc, #16]	; (8013c38 <cliLed+0x9c>)
 8013c28:	f7fe fc10 	bl	801244c <cliPrintf>
  }
}
 8013c2c:	bf00      	nop
 8013c2e:	3718      	adds	r7, #24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	0802c5b0 	.word	0x0802c5b0
 8013c38:	0802c5b8 	.word	0x0802c5b8

08013c3c <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
  bool ret = false;
 8013c42:	2300      	movs	r3, #0
 8013c44:	71fb      	strb	r3, [r7, #7]

  if (spiIsBegin(spi_ch) != true)
 8013c46:	4b2b      	ldr	r3, [pc, #172]	; (8013cf4 <sdInit+0xb8>)
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fec8 	bl	80149e0 <spiIsBegin>
 8013c50:	4603      	mov	r3, r0
 8013c52:	f083 0301 	eor.w	r3, r3, #1
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d004      	beq.n	8013c66 <sdInit+0x2a>
  {
    spiBegin(spi_ch);
 8013c5c:	4b25      	ldr	r3, [pc, #148]	; (8013cf4 <sdInit+0xb8>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 fe17 	bl	8014894 <spiBegin>
  }

  is_detected = true;
 8013c66:	4b24      	ldr	r3, [pc, #144]	; (8013cf8 <sdInit+0xbc>)
 8013c68:	2201      	movs	r2, #1
 8013c6a:	701a      	strb	r2, [r3, #0]
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	f7ff fc23 	bl	80134b8 <gpioPinRead>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <sdInit+0x42>
  {
    is_detected = true;
 8013c78:	4b1f      	ldr	r3, [pc, #124]	; (8013cf8 <sdInit+0xbc>)
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	701a      	strb	r2, [r3, #0]
  }

  sd_info.card_type         = 0;
 8013c7e:	4b1f      	ldr	r3, [pc, #124]	; (8013cfc <sdInit+0xc0>)
 8013c80:	2200      	movs	r2, #0
 8013c82:	601a      	str	r2, [r3, #0]
  sd_info.card_version      = 0;
 8013c84:	4b1d      	ldr	r3, [pc, #116]	; (8013cfc <sdInit+0xc0>)
 8013c86:	2200      	movs	r2, #0
 8013c88:	605a      	str	r2, [r3, #4]
  sd_info.card_class        = 0;
 8013c8a:	4b1c      	ldr	r3, [pc, #112]	; (8013cfc <sdInit+0xc0>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	609a      	str	r2, [r3, #8]
  sd_info.rel_card_Add      = 0;
 8013c90:	4b1a      	ldr	r3, [pc, #104]	; (8013cfc <sdInit+0xc0>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	60da      	str	r2, [r3, #12]
  sd_info.block_numbers     = 0;
 8013c96:	4b19      	ldr	r3, [pc, #100]	; (8013cfc <sdInit+0xc0>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	611a      	str	r2, [r3, #16]
  sd_info.block_size        = 0;
 8013c9c:	4b17      	ldr	r3, [pc, #92]	; (8013cfc <sdInit+0xc0>)
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	615a      	str	r2, [r3, #20]
  sd_info.log_block_numbers = 0;
 8013ca2:	4b16      	ldr	r3, [pc, #88]	; (8013cfc <sdInit+0xc0>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	619a      	str	r2, [r3, #24]
  sd_info.log_block_size    = 512;
 8013ca8:	4b14      	ldr	r3, [pc, #80]	; (8013cfc <sdInit+0xc0>)
 8013caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cae:	61da      	str	r2, [r3, #28]
  sd_info.card_size         = 0;
 8013cb0:	4b12      	ldr	r3, [pc, #72]	; (8013cfc <sdInit+0xc0>)
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	621a      	str	r2, [r3, #32]

  if (is_detected == true)
 8013cb6:	4b10      	ldr	r3, [pc, #64]	; (8013cf8 <sdInit+0xbc>)
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d003      	beq.n	8013cc6 <sdInit+0x8a>
  {
    ret = sdSpiInitialize();
 8013cbe:	f000 fad5 	bl	801426c <sdSpiInitialize>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	71fb      	strb	r3, [r7, #7]
  }

  is_init = ret;
 8013cc6:	4a0e      	ldr	r2, [pc, #56]	; (8013d00 <sdInit+0xc4>)
 8013cc8:	79fb      	ldrb	r3, [r7, #7]
 8013cca:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  if (is_cli_init != true)
 8013ccc:	4b0d      	ldr	r3, [pc, #52]	; (8013d04 <sdInit+0xc8>)
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	f083 0301 	eor.w	r3, r3, #1
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d006      	beq.n	8013ce8 <sdInit+0xac>
  {
    cliAdd("sd", cliSd);
 8013cda:	490b      	ldr	r1, [pc, #44]	; (8013d08 <sdInit+0xcc>)
 8013cdc:	480b      	ldr	r0, [pc, #44]	; (8013d0c <sdInit+0xd0>)
 8013cde:	f7fe fcc5 	bl	801266c <cliAdd>
    is_cli_init = true;
 8013ce2:	4b08      	ldr	r3, [pc, #32]	; (8013d04 <sdInit+0xc8>)
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	701a      	strb	r2, [r3, #0]
  }
#endif

  return ret;
 8013ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	200003a0 	.word	0x200003a0
 8013cf8:	20003ebd 	.word	0x20003ebd
 8013cfc:	20001738 	.word	0x20001738
 8013d00:	20003ebc 	.word	0x20003ebc
 8013d04:	20003ebe 	.word	0x20003ebe
 8013d08:	08014541 	.word	0x08014541
 8013d0c:	0802c5d8 	.word	0x0802c5d8

08013d10 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8013d10:	b480      	push	{r7}
 8013d12:	af00      	add	r7, sp, #0
  return is_init;
 8013d14:	4b03      	ldr	r3, [pc, #12]	; (8013d24 <sdIsInit+0x14>)
 8013d16:	781b      	ldrb	r3, [r3, #0]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	20003ebc 	.word	0x20003ebc

08013d28 <sdIsDetected>:

bool sdIsDetected(void)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	f7ff fbc3 	bl	80134b8 <gpioPinRead>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d003      	beq.n	8013d40 <sdIsDetected+0x18>
  {
    is_detected = true;
 8013d38:	4b05      	ldr	r3, [pc, #20]	; (8013d50 <sdIsDetected+0x28>)
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	701a      	strb	r2, [r3, #0]
 8013d3e:	e002      	b.n	8013d46 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8013d40:	4b03      	ldr	r3, [pc, #12]	; (8013d50 <sdIsDetected+0x28>)
 8013d42:	2200      	movs	r2, #0
 8013d44:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8013d46:	4b02      	ldr	r3, [pc, #8]	; (8013d50 <sdIsDetected+0x28>)
 8013d48:	781b      	ldrb	r3, [r3, #0]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	20003ebd 	.word	0x20003ebd

08013d54 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8013d54:	b4b0      	push	{r4, r5, r7}
 8013d56:	b085      	sub	sp, #20
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	73fb      	strb	r3, [r7, #15]


  if (is_init == true)
 8013d60:	4b0a      	ldr	r3, [pc, #40]	; (8013d8c <sdGetInfo+0x38>)
 8013d62:	781b      	ldrb	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d00b      	beq.n	8013d80 <sdGetInfo+0x2c>
  {
    *p_info = sd_info;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	4a09      	ldr	r2, [pc, #36]	; (8013d90 <sdGetInfo+0x3c>)
 8013d6c:	461c      	mov	r4, r3
 8013d6e:	4615      	mov	r5, r2
 8013d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d78:	682b      	ldr	r3, [r5, #0]
 8013d7a:	6023      	str	r3, [r4, #0]
    ret = true;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3714      	adds	r7, #20
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bcb0      	pop	{r4, r5, r7}
 8013d8a:	4770      	bx	lr
 8013d8c:	20003ebc 	.word	0x20003ebc
 8013d90:	20001738 	.word	0x20001738

08013d94 <sdReadBlocks>:

  return false;
}

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b086      	sub	sp, #24
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	607a      	str	r2, [r7, #4]
 8013da0:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8013da2:	2300      	movs	r3, #0
 8013da4:	75fb      	strb	r3, [r7, #23]

  if (!(CardType & 4))
 8013da6:	4b29      	ldr	r3, [pc, #164]	; (8013e4c <sdReadBlocks+0xb8>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	f003 0304 	and.w	r3, r3, #4
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d102      	bne.n	8013db8 <sdReadBlocks+0x24>
  {
    block_addr *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	025b      	lsls	r3, r3, #9
 8013db6:	60fb      	str	r3, [r7, #12]
  }

  sdSpiCS(false);
 8013db8:	2000      	movs	r0, #0
 8013dba:	f000 f8bd 	bl	8013f38 <sdSpiCS>

  if (num_of_blocks == 1)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2b01      	cmp	r3, #1
 8013dc2:	d111      	bne.n	8013de8 <sdReadBlocks+0x54>
  {
    /* 싱글 블록 읽기 */
    if ((sdSpiSendCmd(CMD17, block_addr) == 0) && sdSpiRxDataBlock(p_data, 512))
 8013dc4:	68f9      	ldr	r1, [r7, #12]
 8013dc6:	2051      	movs	r0, #81	; 0x51
 8013dc8:	f000 f9fe 	bl	80141c8 <sdSpiSendCmd>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d12c      	bne.n	8013e2c <sdReadBlocks+0x98>
 8013dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013dd6:	68b8      	ldr	r0, [r7, #8]
 8013dd8:	f000 f964 	bl	80140a4 <sdSpiRxDataBlock>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d024      	beq.n	8013e2c <sdReadBlocks+0x98>
    {
      num_of_blocks = 0;
 8013de2:	2300      	movs	r3, #0
 8013de4:	607b      	str	r3, [r7, #4]
 8013de6:	e021      	b.n	8013e2c <sdReadBlocks+0x98>
    }
  }
  else
  {
    /* 다중 블록 읽기 */
    if (sdSpiSendCmd(CMD18, block_addr) == 0)
 8013de8:	68f9      	ldr	r1, [r7, #12]
 8013dea:	2052      	movs	r0, #82	; 0x52
 8013dec:	f000 f9ec 	bl	80141c8 <sdSpiSendCmd>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d11a      	bne.n	8013e2c <sdReadBlocks+0x98>
    {
      do
      {
        if (!sdSpiRxDataBlock(p_data, 512))
 8013df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013dfa:	68b8      	ldr	r0, [r7, #8]
 8013dfc:	f000 f952 	bl	80140a4 <sdSpiRxDataBlock>
 8013e00:	4603      	mov	r3, r0
 8013e02:	f083 0301 	eor.w	r3, r3, #1
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10a      	bne.n	8013e22 <sdReadBlocks+0x8e>
        {
          break;
        }

        p_data += 512;
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013e12:	60bb      	str	r3, [r7, #8]
      } while (--num_of_blocks);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	3b01      	subs	r3, #1
 8013e18:	607b      	str	r3, [r7, #4]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d1ea      	bne.n	8013df6 <sdReadBlocks+0x62>
 8013e20:	e000      	b.n	8013e24 <sdReadBlocks+0x90>
          break;
 8013e22:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      sdSpiSendCmd(CMD12, 0);
 8013e24:	2100      	movs	r1, #0
 8013e26:	204c      	movs	r0, #76	; 0x4c
 8013e28:	f000 f9ce 	bl	80141c8 <sdSpiSendCmd>
    }
  }

  sdSpiCS(true);
 8013e2c:	2001      	movs	r0, #1
 8013e2e:	f000 f883 	bl	8013f38 <sdSpiCS>
  sdSpiRxByte(); /* Idle 상태(Release DO) */
 8013e32:	f000 f8a7 	bl	8013f84 <sdSpiRxByte>

  if (num_of_blocks == 0)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d101      	bne.n	8013e40 <sdReadBlocks+0xac>
  {
    ret = true;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3718      	adds	r7, #24
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	20003ebf 	.word	0x20003ebf

08013e50 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b086      	sub	sp, #24
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	60b9      	str	r1, [r7, #8]
 8013e5a:	607a      	str	r2, [r7, #4]
 8013e5c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	75fb      	strb	r3, [r7, #23]

  if (!(CardType & 4))
 8013e62:	4b34      	ldr	r3, [pc, #208]	; (8013f34 <sdWriteBlocks+0xe4>)
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	f003 0304 	and.w	r3, r3, #4
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d102      	bne.n	8013e74 <sdWriteBlocks+0x24>
  {
    block_addr *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	025b      	lsls	r3, r3, #9
 8013e72:	60fb      	str	r3, [r7, #12]
  }


  sdSpiCS(false);
 8013e74:	2000      	movs	r0, #0
 8013e76:	f000 f85f 	bl	8013f38 <sdSpiCS>

  if (num_of_blocks == 1)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d110      	bne.n	8013ea2 <sdWriteBlocks+0x52>
  {
    /* 싱글 블록 쓰기 */
    if ((sdSpiSendCmd(CMD24, block_addr) == 0) && sdSpiTxDataBlock(p_data, 0xFE))
 8013e80:	68f9      	ldr	r1, [r7, #12]
 8013e82:	2058      	movs	r0, #88	; 0x58
 8013e84:	f000 f9a0 	bl	80141c8 <sdSpiSendCmd>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d140      	bne.n	8013f10 <sdWriteBlocks+0xc0>
 8013e8e:	21fe      	movs	r1, #254	; 0xfe
 8013e90:	68b8      	ldr	r0, [r7, #8]
 8013e92:	f000 f943 	bl	801411c <sdSpiTxDataBlock>
 8013e96:	4603      	mov	r3, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d039      	beq.n	8013f10 <sdWriteBlocks+0xc0>
    {
      num_of_blocks = 0;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	607b      	str	r3, [r7, #4]
 8013ea0:	e036      	b.n	8013f10 <sdWriteBlocks+0xc0>
    }
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8013ea2:	4b24      	ldr	r3, [pc, #144]	; (8013f34 <sdWriteBlocks+0xe4>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	f003 0302 	and.w	r3, r3, #2
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d007      	beq.n	8013ebe <sdWriteBlocks+0x6e>
    {
      sdSpiSendCmd(CMD55, 0);
 8013eae:	2100      	movs	r1, #0
 8013eb0:	2077      	movs	r0, #119	; 0x77
 8013eb2:	f000 f989 	bl	80141c8 <sdSpiSendCmd>
      sdSpiSendCmd(CMD23, num_of_blocks); /* ACMD23 */
 8013eb6:	6879      	ldr	r1, [r7, #4]
 8013eb8:	2057      	movs	r0, #87	; 0x57
 8013eba:	f000 f985 	bl	80141c8 <sdSpiSendCmd>
    }

    if (sdSpiSendCmd(CMD25, block_addr) == 0)
 8013ebe:	68f9      	ldr	r1, [r7, #12]
 8013ec0:	2059      	movs	r0, #89	; 0x59
 8013ec2:	f000 f981 	bl	80141c8 <sdSpiSendCmd>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d121      	bne.n	8013f10 <sdWriteBlocks+0xc0>
    {
      do {
        if(!sdSpiTxDataBlock(p_data, 0xFC))
 8013ecc:	21fc      	movs	r1, #252	; 0xfc
 8013ece:	68b8      	ldr	r0, [r7, #8]
 8013ed0:	f000 f924 	bl	801411c <sdSpiTxDataBlock>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	f083 0301 	eor.w	r3, r3, #1
 8013eda:	b2db      	uxtb	r3, r3
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10a      	bne.n	8013ef6 <sdWriteBlocks+0xa6>
          break;

        p_data += 512;
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013ee6:	60bb      	str	r3, [r7, #8]
      } while (--num_of_blocks);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	3b01      	subs	r3, #1
 8013eec:	607b      	str	r3, [r7, #4]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1eb      	bne.n	8013ecc <sdWriteBlocks+0x7c>
 8013ef4:	e000      	b.n	8013ef8 <sdWriteBlocks+0xa8>
          break;
 8013ef6:	bf00      	nop

      if(!sdSpiTxDataBlock(0, 0xFD))
 8013ef8:	21fd      	movs	r1, #253	; 0xfd
 8013efa:	2000      	movs	r0, #0
 8013efc:	f000 f90e 	bl	801411c <sdSpiTxDataBlock>
 8013f00:	4603      	mov	r3, r0
 8013f02:	f083 0301 	eor.w	r3, r3, #1
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d001      	beq.n	8013f10 <sdWriteBlocks+0xc0>
      {
        num_of_blocks = 1;
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	607b      	str	r3, [r7, #4]
      }
    }
  }

  sdSpiCS(true);
 8013f10:	2001      	movs	r0, #1
 8013f12:	f000 f811 	bl	8013f38 <sdSpiCS>
  sdSpiRxByte();
 8013f16:	f000 f835 	bl	8013f84 <sdSpiRxByte>

  if (num_of_blocks == 0)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d102      	bne.n	8013f26 <sdWriteBlocks+0xd6>
  {
    ret = true;
 8013f20:	2301      	movs	r3, #1
 8013f22:	75fb      	strb	r3, [r7, #23]
 8013f24:	e001      	b.n	8013f2a <sdWriteBlocks+0xda>
  }
  else
  {
    ret = false;
 8013f26:	2300      	movs	r3, #0
 8013f28:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	20003ebf 	.word	0x20003ebf

08013f38 <sdSpiCS>:
}



void sdSpiCS(bool enable)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	4603      	mov	r3, r0
 8013f40:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_SDCARD_CS, enable);
 8013f42:	79fb      	ldrb	r3, [r7, #7]
 8013f44:	4619      	mov	r1, r3
 8013f46:	2003      	movs	r0, #3
 8013f48:	f7ff fa64 	bl	8013414 <gpioPinWrite>
}
 8013f4c:	bf00      	nop
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <sdSpiTxByte>:

bool sdSpiTxByte(uint8_t data)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b086      	sub	sp, #24
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	71fb      	strb	r3, [r7, #7]
  bool ret;

  ret = spiTransfer(spi_ch, &data, NULL, 1, 100);
 8013f5e:	4b08      	ldr	r3, [pc, #32]	; (8013f80 <sdSpiTxByte+0x2c>)
 8013f60:	7818      	ldrb	r0, [r3, #0]
 8013f62:	1df9      	adds	r1, r7, #7
 8013f64:	2364      	movs	r3, #100	; 0x64
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	2301      	movs	r3, #1
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f000 fe56 	bl	8014c1c <spiTransfer>
 8013f70:	4603      	mov	r3, r0
 8013f72:	73fb      	strb	r3, [r7, #15]

  return ret;
 8013f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	200003a0 	.word	0x200003a0

08013f84 <sdSpiRxByte>:

uint8_t sdSpiRxByte(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af02      	add	r7, sp, #8
  uint8_t data = 0xFF;
 8013f8a:	23ff      	movs	r3, #255	; 0xff
 8013f8c:	71fb      	strb	r3, [r7, #7]


  spiTransfer(spi_ch, NULL, &data, 1, 100);
 8013f8e:	4b07      	ldr	r3, [pc, #28]	; (8013fac <sdSpiRxByte+0x28>)
 8013f90:	7818      	ldrb	r0, [r3, #0]
 8013f92:	1dfa      	adds	r2, r7, #7
 8013f94:	2364      	movs	r3, #100	; 0x64
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	2301      	movs	r3, #1
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	f000 fe3e 	bl	8014c1c <spiTransfer>

  return data;
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3708      	adds	r7, #8
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}
 8013faa:	bf00      	nop
 8013fac:	200003a0 	.word	0x200003a0

08013fb0 <sdSpiReadyWait>:

uint8_t sdSpiReadyWait(void)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
  uint8_t res;
  uint32_t pre_time;

  sdSpiRxByte();
 8013fb6:	f7ff ffe5 	bl	8013f84 <sdSpiRxByte>
  pre_time = millis();
 8013fba:	f7f5 f934 	bl	8009226 <millis>
 8013fbe:	6078      	str	r0, [r7, #4]
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = sdSpiRxByte();
 8013fc0:	f7ff ffe0 	bl	8013f84 <sdSpiRxByte>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	70fb      	strb	r3, [r7, #3]
  } while ((res != 0xFF) && (millis()-pre_time < 500));
 8013fc8:	78fb      	ldrb	r3, [r7, #3]
 8013fca:	2bff      	cmp	r3, #255	; 0xff
 8013fcc:	d007      	beq.n	8013fde <sdSpiReadyWait+0x2e>
 8013fce:	f7f5 f92a 	bl	8009226 <millis>
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	1ad3      	subs	r3, r2, r3
 8013fd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013fdc:	d3f0      	bcc.n	8013fc0 <sdSpiReadyWait+0x10>

  return res;
 8013fde:	78fb      	ldrb	r3, [r7, #3]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <sdSpiPowerOn>:

/* 전원 켜기 */
void sdSpiPowerOn(void)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8013fee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8013ff2:	617b      	str	r3, [r7, #20]
  uint8_t rx_data;

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  sdSpiCS(true);
 8013ff4:	2001      	movs	r0, #1
 8013ff6:	f7ff ff9f 	bl	8013f38 <sdSpiCS>

  for(int i = 0; i < 10; i++)
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	613b      	str	r3, [r7, #16]
 8013ffe:	e005      	b.n	801400c <sdSpiPowerOn+0x24>
  {
    sdSpiTxByte(0xFF);
 8014000:	20ff      	movs	r0, #255	; 0xff
 8014002:	f7ff ffa7 	bl	8013f54 <sdSpiTxByte>
  for(int i = 0; i < 10; i++)
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	3301      	adds	r3, #1
 801400a:	613b      	str	r3, [r7, #16]
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	2b09      	cmp	r3, #9
 8014010:	ddf6      	ble.n	8014000 <sdSpiPowerOn+0x18>
  }

  /* SPI Chips Select */
  sdSpiCS(false);
 8014012:	2000      	movs	r0, #0
 8014014:	f7ff ff90 	bl	8013f38 <sdSpiCS>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8014018:	2340      	movs	r3, #64	; 0x40
 801401a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 801401c:	2300      	movs	r3, #0
 801401e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8014020:	2300      	movs	r3, #0
 8014022:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8014024:	2300      	movs	r3, #0
 8014026:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8014028:	2300      	movs	r3, #0
 801402a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 801402c:	2395      	movs	r3, #149	; 0x95
 801402e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8014030:	2300      	movs	r3, #0
 8014032:	60fb      	str	r3, [r7, #12]
 8014034:	e009      	b.n	801404a <sdSpiPowerOn+0x62>
  {
    sdSpiTxByte(cmd_arg[i]);
 8014036:	1d3a      	adds	r2, r7, #4
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	4413      	add	r3, r2
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	4618      	mov	r0, r3
 8014040:	f7ff ff88 	bl	8013f54 <sdSpiTxByte>
  for (int i = 0; i < 6; i++)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	3301      	adds	r3, #1
 8014048:	60fb      	str	r3, [r7, #12]
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2b05      	cmp	r3, #5
 801404e:	ddf2      	ble.n	8014036 <sdSpiPowerOn+0x4e>
  }

  /* 응답 대기 */
  while (((rx_data=sdSpiRxByte()) != 0x01) && Count)
 8014050:	e002      	b.n	8014058 <sdSpiPowerOn+0x70>
  {
    Count--;
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	3b01      	subs	r3, #1
 8014056:	617b      	str	r3, [r7, #20]
  while (((rx_data=sdSpiRxByte()) != 0x01) && Count)
 8014058:	f7ff ff94 	bl	8013f84 <sdSpiRxByte>
 801405c:	4603      	mov	r3, r0
 801405e:	72fb      	strb	r3, [r7, #11]
 8014060:	7afb      	ldrb	r3, [r7, #11]
 8014062:	2b01      	cmp	r3, #1
 8014064:	d002      	beq.n	801406c <sdSpiPowerOn+0x84>
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1f2      	bne.n	8014052 <sdSpiPowerOn+0x6a>
  }

  sdSpiCS(true);
 801406c:	2001      	movs	r0, #1
 801406e:	f7ff ff63 	bl	8013f38 <sdSpiCS>
  sdSpiTxByte(0XFF);
 8014072:	20ff      	movs	r0, #255	; 0xff
 8014074:	f7ff ff6e 	bl	8013f54 <sdSpiTxByte>

  PowerFlag = 1;
 8014078:	4b03      	ldr	r3, [pc, #12]	; (8014088 <sdSpiPowerOn+0xa0>)
 801407a:	2201      	movs	r2, #1
 801407c:	701a      	strb	r2, [r3, #0]
}
 801407e:	bf00      	nop
 8014080:	3718      	adds	r7, #24
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	20003ec0 	.word	0x20003ec0

0801408c <sdSpiPowerOff>:

/* 전원 끄기 */
void sdSpiPowerOff(void)
{
 801408c:	b480      	push	{r7}
 801408e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8014090:	4b03      	ldr	r3, [pc, #12]	; (80140a0 <sdSpiPowerOff+0x14>)
 8014092:	2200      	movs	r2, #0
 8014094:	701a      	strb	r2, [r3, #0]
}
 8014096:	bf00      	nop
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr
 80140a0:	20003ec0 	.word	0x20003ec0

080140a4 <sdSpiRxDataBlock>:
  return PowerFlag;
}

/* 데이터 패킷 수신 */
bool sdSpiRxDataBlock(uint8_t *buff, uint32_t btr)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  uint8_t token;
  uint32_t pre_time;


  /* 응답 대기 */
  pre_time = millis();
 80140ae:	f7f5 f8ba 	bl	8009226 <millis>
 80140b2:	60f8      	str	r0, [r7, #12]
  do
  {
    token = sdSpiRxByte();
 80140b4:	f7ff ff66 	bl	8013f84 <sdSpiRxByte>
 80140b8:	4603      	mov	r3, r0
 80140ba:	72fb      	strb	r3, [r7, #11]
  } while((token == 0xFF) && (millis()-pre_time < 100));
 80140bc:	7afb      	ldrb	r3, [r7, #11]
 80140be:	2bff      	cmp	r3, #255	; 0xff
 80140c0:	d106      	bne.n	80140d0 <sdSpiRxDataBlock+0x2c>
 80140c2:	f7f5 f8b0 	bl	8009226 <millis>
 80140c6:	4602      	mov	r2, r0
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	2b63      	cmp	r3, #99	; 0x63
 80140ce:	d9f1      	bls.n	80140b4 <sdSpiRxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80140d0:	7afb      	ldrb	r3, [r7, #11]
 80140d2:	2bfe      	cmp	r3, #254	; 0xfe
 80140d4:	d001      	beq.n	80140da <sdSpiRxDataBlock+0x36>
    return false;
 80140d6:	2300      	movs	r3, #0
 80140d8:	e01c      	b.n	8014114 <sdSpiRxDataBlock+0x70>

  /* Receive the data block into buffer */
#if 1
  do
  {
    *buff = sdSpiRxByte();
 80140da:	f7ff ff53 	bl	8013f84 <sdSpiRxByte>
 80140de:	4603      	mov	r3, r0
 80140e0:	461a      	mov	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	701a      	strb	r2, [r3, #0]
    buff++;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	3301      	adds	r3, #1
 80140ea:	607b      	str	r3, [r7, #4]
    *buff = sdSpiRxByte();
 80140ec:	f7ff ff4a 	bl	8013f84 <sdSpiRxByte>
 80140f0:	4603      	mov	r3, r0
 80140f2:	461a      	mov	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	701a      	strb	r2, [r3, #0]
    buff++;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3301      	adds	r3, #1
 80140fc:	607b      	str	r3, [r7, #4]
  } while (btr -= 2);
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	3b02      	subs	r3, #2
 8014102:	603b      	str	r3, [r7, #0]
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1e7      	bne.n	80140da <sdSpiRxDataBlock+0x36>
#else
  spiTransfer(spi_ch, NULL, buff, btr, 100);
#endif

  sdSpiRxByte(); /* CRC 무시 */
 801410a:	f7ff ff3b 	bl	8013f84 <sdSpiRxByte>
  sdSpiRxByte();
 801410e:	f7ff ff39 	bl	8013f84 <sdSpiRxByte>

  return true;
 8014112:	2301      	movs	r3, #1
}
 8014114:	4618      	mov	r0, r3
 8014116:	3710      	adds	r7, #16
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <sdSpiTxDataBlock>:

/* 데이터 전송 패킷 */
bool sdSpiTxDataBlock(const uint8_t *buff, uint8_t token)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	460b      	mov	r3, r1
 8014126:	70fb      	strb	r3, [r7, #3]
  uint8_t resp = 0x00;
 8014128:	2300      	movs	r3, #0
 801412a:	73fb      	strb	r3, [r7, #15]
  uint8_t i = 0;
 801412c:	2300      	movs	r3, #0
 801412e:	73bb      	strb	r3, [r7, #14]
  uint8_t wc;


  /* SD카드 준비 대기 */
  if (sdSpiReadyWait() != 0xFF)
 8014130:	f7ff ff3e 	bl	8013fb0 <sdSpiReadyWait>
 8014134:	4603      	mov	r3, r0
 8014136:	2bff      	cmp	r3, #255	; 0xff
 8014138:	d001      	beq.n	801413e <sdSpiTxDataBlock+0x22>
    return false;
 801413a:	2300      	movs	r3, #0
 801413c:	e040      	b.n	80141c0 <sdSpiTxDataBlock+0xa4>

  /* 토큰 전송 */
  sdSpiTxByte(token);
 801413e:	78fb      	ldrb	r3, [r7, #3]
 8014140:	4618      	mov	r0, r3
 8014142:	f7ff ff07 	bl	8013f54 <sdSpiTxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8014146:	78fb      	ldrb	r3, [r7, #3]
 8014148:	2bfd      	cmp	r3, #253	; 0xfd
 801414a:	d031      	beq.n	80141b0 <sdSpiTxDataBlock+0x94>
  {
    /* 512 바이트 데이터 전송 */
    //spiTransfer(spi_ch, (uint8_t *)buff, NULL, 512, 100);
    wc = 0;
 801414c:	2300      	movs	r3, #0
 801414e:	737b      	strb	r3, [r7, #13]
    do
    {
      sdSpiTxByte(*buff++);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	607a      	str	r2, [r7, #4]
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	4618      	mov	r0, r3
 801415a:	f7ff fefb 	bl	8013f54 <sdSpiTxByte>
      sdSpiTxByte(*buff++);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	1c5a      	adds	r2, r3, #1
 8014162:	607a      	str	r2, [r7, #4]
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	4618      	mov	r0, r3
 8014168:	f7ff fef4 	bl	8013f54 <sdSpiTxByte>
    } while (--wc);
 801416c:	7b7b      	ldrb	r3, [r7, #13]
 801416e:	3b01      	subs	r3, #1
 8014170:	737b      	strb	r3, [r7, #13]
 8014172:	7b7b      	ldrb	r3, [r7, #13]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d1eb      	bne.n	8014150 <sdSpiTxDataBlock+0x34>

    sdSpiRxByte();       /* CRC 무시 */
 8014178:	f7ff ff04 	bl	8013f84 <sdSpiRxByte>
    sdSpiRxByte();
 801417c:	f7ff ff02 	bl	8013f84 <sdSpiRxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8014180:	e00b      	b.n	801419a <sdSpiTxDataBlock+0x7e>
    {
      resp = sdSpiRxByte();
 8014182:	f7ff feff 	bl	8013f84 <sdSpiRxByte>
 8014186:	4603      	mov	r3, r0
 8014188:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 801418a:	7bfb      	ldrb	r3, [r7, #15]
 801418c:	f003 031f 	and.w	r3, r3, #31
 8014190:	2b05      	cmp	r3, #5
 8014192:	d006      	beq.n	80141a2 <sdSpiTxDataBlock+0x86>
        break;

      i++;
 8014194:	7bbb      	ldrb	r3, [r7, #14]
 8014196:	3301      	adds	r3, #1
 8014198:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 801419a:	7bbb      	ldrb	r3, [r7, #14]
 801419c:	2b40      	cmp	r3, #64	; 0x40
 801419e:	d9f0      	bls.n	8014182 <sdSpiTxDataBlock+0x66>
 80141a0:	e000      	b.n	80141a4 <sdSpiTxDataBlock+0x88>
        break;
 80141a2:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (sdSpiRxByte() == 0);
 80141a4:	bf00      	nop
 80141a6:	f7ff feed 	bl	8013f84 <sdSpiRxByte>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d0fa      	beq.n	80141a6 <sdSpiTxDataBlock+0x8a>
  }

  if ((resp & 0x1F) == 0x05)
 80141b0:	7bfb      	ldrb	r3, [r7, #15]
 80141b2:	f003 031f 	and.w	r3, r3, #31
 80141b6:	2b05      	cmp	r3, #5
 80141b8:	d101      	bne.n	80141be <sdSpiTxDataBlock+0xa2>
    return true;
 80141ba:	2301      	movs	r3, #1
 80141bc:	e000      	b.n	80141c0 <sdSpiTxDataBlock+0xa4>
  else
    return false;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <sdSpiSendCmd>:

/* CMD 패킷 전송 */
uint8_t sdSpiSendCmd(uint8_t cmd, uint32_t arg)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	4603      	mov	r3, r0
 80141d0:	6039      	str	r1, [r7, #0]
 80141d2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (sdSpiReadyWait() != 0xFF)
 80141d4:	f7ff feec 	bl	8013fb0 <sdSpiReadyWait>
 80141d8:	4603      	mov	r3, r0
 80141da:	2bff      	cmp	r3, #255	; 0xff
 80141dc:	d001      	beq.n	80141e2 <sdSpiSendCmd+0x1a>
    return 0xFF;
 80141de:	23ff      	movs	r3, #255	; 0xff
 80141e0:	e040      	b.n	8014264 <sdSpiSendCmd+0x9c>


  /* 명령 패킷 전송 */
  sdSpiTxByte(cmd);                   /* Command */
 80141e2:	79fb      	ldrb	r3, [r7, #7]
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7ff feb5 	bl	8013f54 <sdSpiTxByte>
  sdSpiTxByte((uint8_t) (arg >> 24)); /* Argument[31..24] */
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	0e1b      	lsrs	r3, r3, #24
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff feaf 	bl	8013f54 <sdSpiTxByte>
  sdSpiTxByte((uint8_t) (arg >> 16)); /* Argument[23..16] */
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	0c1b      	lsrs	r3, r3, #16
 80141fa:	b2db      	uxtb	r3, r3
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7ff fea9 	bl	8013f54 <sdSpiTxByte>
  sdSpiTxByte((uint8_t) (arg >> 8));  /* Argument[15..8] */
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	0a1b      	lsrs	r3, r3, #8
 8014206:	b2db      	uxtb	r3, r3
 8014208:	4618      	mov	r0, r3
 801420a:	f7ff fea3 	bl	8013f54 <sdSpiTxByte>
  sdSpiTxByte((uint8_t) arg);         /* Argument[7..0] */
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	b2db      	uxtb	r3, r3
 8014212:	4618      	mov	r0, r3
 8014214:	f7ff fe9e 	bl	8013f54 <sdSpiTxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8014218:	2300      	movs	r3, #0
 801421a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 801421c:	79fb      	ldrb	r3, [r7, #7]
 801421e:	2b40      	cmp	r3, #64	; 0x40
 8014220:	d101      	bne.n	8014226 <sdSpiSendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8014222:	2395      	movs	r3, #149	; 0x95
 8014224:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8014226:	79fb      	ldrb	r3, [r7, #7]
 8014228:	2b48      	cmp	r3, #72	; 0x48
 801422a:	d101      	bne.n	8014230 <sdSpiSendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 801422c:	2387      	movs	r3, #135	; 0x87
 801422e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  sdSpiTxByte(crc);
 8014230:	7bfb      	ldrb	r3, [r7, #15]
 8014232:	4618      	mov	r0, r3
 8014234:	f7ff fe8e 	bl	8013f54 <sdSpiTxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8014238:	79fb      	ldrb	r3, [r7, #7]
 801423a:	2b4c      	cmp	r3, #76	; 0x4c
 801423c:	d101      	bne.n	8014242 <sdSpiSendCmd+0x7a>
    sdSpiRxByte();
 801423e:	f7ff fea1 	bl	8013f84 <sdSpiRxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8014242:	230a      	movs	r3, #10
 8014244:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = sdSpiRxByte();
 8014246:	f7ff fe9d 	bl	8013f84 <sdSpiRxByte>
 801424a:	4603      	mov	r3, r0
 801424c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801424e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014252:	2b00      	cmp	r3, #0
 8014254:	da05      	bge.n	8014262 <sdSpiSendCmd+0x9a>
 8014256:	7bbb      	ldrb	r3, [r7, #14]
 8014258:	3b01      	subs	r3, #1
 801425a:	73bb      	strb	r3, [r7, #14]
 801425c:	7bbb      	ldrb	r3, [r7, #14]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d1f1      	bne.n	8014246 <sdSpiSendCmd+0x7e>

  return res;
 8014262:	7b7b      	ldrb	r3, [r7, #13]
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <sdSpiInitialize>:


/* SD카드 초기화 */
bool sdSpiInitialize(void)
{
 801426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014270:	b089      	sub	sp, #36	; 0x24
 8014272:	af00      	add	r7, sp, #0
  bool ret = false;
 8014274:	2300      	movs	r3, #0
 8014276:	77fb      	strb	r3, [r7, #31]
  uint32_t pre_time;
  uint8_t csd[16];
  uint32_t csize;

  //spiSetClockDivider(spi_ch, SPI_CLOCK_DIV_16);
  SPI_Set_Speed(spi_ch, SPI_BAUDRATEPRESCALER_16);
 8014278:	4bae      	ldr	r3, [pc, #696]	; (8014534 <sdSpiInitialize+0x2c8>)
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	2118      	movs	r1, #24
 801427e:	4618      	mov	r0, r3
 8014280:	f000 fc28 	bl	8014ad4 <SPI_Set_Speed>

  /* SD카드 Power On */
  sdSpiPowerOn();
 8014284:	f7ff feb0 	bl	8013fe8 <sdSpiPowerOn>

  /* SPI 통신을 위해 Chip Select */
  sdSpiCS(false);
 8014288:	2000      	movs	r0, #0
 801428a:	f7ff fe55 	bl	8013f38 <sdSpiCS>

  /* SD카드 타입변수 초기화 */
  type = 0;
 801428e:	2300      	movs	r3, #0
 8014290:	777b      	strb	r3, [r7, #29]

  /* Idle 상태 진입 */
  if (sdSpiSendCmd(CMD0, 0) == 1)
 8014292:	2100      	movs	r1, #0
 8014294:	2040      	movs	r0, #64	; 0x40
 8014296:	f7ff ff97 	bl	80141c8 <sdSpiSendCmd>
 801429a:	4603      	mov	r3, r0
 801429c:	2b01      	cmp	r3, #1
 801429e:	f040 80b2 	bne.w	8014406 <sdSpiInitialize+0x19a>
  {
    pre_time = millis();
 80142a2:	f7f4 ffc0 	bl	8009226 <millis>
 80142a6:	61b8      	str	r0, [r7, #24]

    /* SD 인터페이스 동작 조건 확인 */
    if (sdSpiSendCmd(CMD8, 0x1AA) == 1)
 80142a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80142ac:	2048      	movs	r0, #72	; 0x48
 80142ae:	f7ff ff8b 	bl	80141c8 <sdSpiSendCmd>
 80142b2:	4603      	mov	r3, r0
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d15f      	bne.n	8014378 <sdSpiInitialize+0x10c>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80142b8:	2300      	movs	r3, #0
 80142ba:	77bb      	strb	r3, [r7, #30]
 80142bc:	e00c      	b.n	80142d8 <sdSpiInitialize+0x6c>
      {
        ocr[n] = sdSpiRxByte();
 80142be:	7fbe      	ldrb	r6, [r7, #30]
 80142c0:	f7ff fe60 	bl	8013f84 <sdSpiRxByte>
 80142c4:	4603      	mov	r3, r0
 80142c6:	461a      	mov	r2, r3
 80142c8:	f106 0320 	add.w	r3, r6, #32
 80142cc:	443b      	add	r3, r7
 80142ce:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (n = 0; n < 4; n++)
 80142d2:	7fbb      	ldrb	r3, [r7, #30]
 80142d4:	3301      	adds	r3, #1
 80142d6:	77bb      	strb	r3, [r7, #30]
 80142d8:	7fbb      	ldrb	r3, [r7, #30]
 80142da:	2b03      	cmp	r3, #3
 80142dc:	d9ef      	bls.n	80142be <sdSpiInitialize+0x52>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80142de:	7cbb      	ldrb	r3, [r7, #18]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	f040 8090 	bne.w	8014406 <sdSpiInitialize+0x19a>
 80142e6:	7cfb      	ldrb	r3, [r7, #19]
 80142e8:	2baa      	cmp	r3, #170	; 0xaa
 80142ea:	f040 808c 	bne.w	8014406 <sdSpiInitialize+0x19a>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (sdSpiSendCmd(CMD55, 0) <= 1 && sdSpiSendCmd(CMD41, 1UL << 30) == 0)
 80142ee:	2100      	movs	r1, #0
 80142f0:	2077      	movs	r0, #119	; 0x77
 80142f2:	f7ff ff69 	bl	80141c8 <sdSpiSendCmd>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d807      	bhi.n	801430c <sdSpiInitialize+0xa0>
 80142fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014300:	2069      	movs	r0, #105	; 0x69
 8014302:	f7ff ff61 	bl	80141c8 <sdSpiSendCmd>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d008      	beq.n	801431e <sdSpiInitialize+0xb2>
            break; /* ACMD41 with HCS bit */
        } while (millis()-pre_time < 1000);
 801430c:	f7f4 ff8b 	bl	8009226 <millis>
 8014310:	4602      	mov	r2, r0
 8014312:	69bb      	ldr	r3, [r7, #24]
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801431a:	d3e8      	bcc.n	80142ee <sdSpiInitialize+0x82>
 801431c:	e000      	b.n	8014320 <sdSpiInitialize+0xb4>
            break; /* ACMD41 with HCS bit */
 801431e:	bf00      	nop

        if ((millis()-pre_time < 1000) && sdSpiSendCmd(CMD58, 0) == 0)
 8014320:	f7f4 ff81 	bl	8009226 <millis>
 8014324:	4602      	mov	r2, r0
 8014326:	69bb      	ldr	r3, [r7, #24]
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801432e:	d26a      	bcs.n	8014406 <sdSpiInitialize+0x19a>
 8014330:	2100      	movs	r1, #0
 8014332:	207a      	movs	r0, #122	; 0x7a
 8014334:	f7ff ff48 	bl	80141c8 <sdSpiSendCmd>
 8014338:	4603      	mov	r3, r0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d163      	bne.n	8014406 <sdSpiInitialize+0x19a>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801433e:	2300      	movs	r3, #0
 8014340:	77bb      	strb	r3, [r7, #30]
 8014342:	e00c      	b.n	801435e <sdSpiInitialize+0xf2>
          {
            ocr[n] = sdSpiRxByte();
 8014344:	7fbe      	ldrb	r6, [r7, #30]
 8014346:	f7ff fe1d 	bl	8013f84 <sdSpiRxByte>
 801434a:	4603      	mov	r3, r0
 801434c:	461a      	mov	r2, r3
 801434e:	f106 0320 	add.w	r3, r6, #32
 8014352:	443b      	add	r3, r7
 8014354:	f803 2c10 	strb.w	r2, [r3, #-16]
          for (n = 0; n < 4; n++)
 8014358:	7fbb      	ldrb	r3, [r7, #30]
 801435a:	3301      	adds	r3, #1
 801435c:	77bb      	strb	r3, [r7, #30]
 801435e:	7fbb      	ldrb	r3, [r7, #30]
 8014360:	2b03      	cmp	r3, #3
 8014362:	d9ef      	bls.n	8014344 <sdSpiInitialize+0xd8>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8014364:	7c3b      	ldrb	r3, [r7, #16]
 8014366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <sdSpiInitialize+0x106>
 801436e:	2306      	movs	r3, #6
 8014370:	e000      	b.n	8014374 <sdSpiInitialize+0x108>
 8014372:	2302      	movs	r3, #2
 8014374:	777b      	strb	r3, [r7, #29]
 8014376:	e046      	b.n	8014406 <sdSpiInitialize+0x19a>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (sdSpiSendCmd(CMD55, 0) <= 1 && sdSpiSendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8014378:	2100      	movs	r1, #0
 801437a:	2077      	movs	r0, #119	; 0x77
 801437c:	f7ff ff24 	bl	80141c8 <sdSpiSendCmd>
 8014380:	4603      	mov	r3, r0
 8014382:	2b01      	cmp	r3, #1
 8014384:	d808      	bhi.n	8014398 <sdSpiInitialize+0x12c>
 8014386:	2100      	movs	r1, #0
 8014388:	2069      	movs	r0, #105	; 0x69
 801438a:	f7ff ff1d 	bl	80141c8 <sdSpiSendCmd>
 801438e:	4603      	mov	r3, r0
 8014390:	2b01      	cmp	r3, #1
 8014392:	d801      	bhi.n	8014398 <sdSpiInitialize+0x12c>
 8014394:	2302      	movs	r3, #2
 8014396:	e000      	b.n	801439a <sdSpiInitialize+0x12e>
 8014398:	2301      	movs	r3, #1
 801439a:	777b      	strb	r3, [r7, #29]

      do {
        if (type == 2)
 801439c:	7f7b      	ldrb	r3, [r7, #29]
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d10e      	bne.n	80143c0 <sdSpiInitialize+0x154>
        {
          if (sdSpiSendCmd(CMD55, 0) <= 1 && sdSpiSendCmd(CMD41, 0) == 0)
 80143a2:	2100      	movs	r1, #0
 80143a4:	2077      	movs	r0, #119	; 0x77
 80143a6:	f7ff ff0f 	bl	80141c8 <sdSpiSendCmd>
 80143aa:	4603      	mov	r3, r0
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d80e      	bhi.n	80143ce <sdSpiInitialize+0x162>
 80143b0:	2100      	movs	r1, #0
 80143b2:	2069      	movs	r0, #105	; 0x69
 80143b4:	f7ff ff08 	bl	80141c8 <sdSpiSendCmd>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d107      	bne.n	80143ce <sdSpiInitialize+0x162>
            break; /* ACMD41 */
 80143be:	e010      	b.n	80143e2 <sdSpiInitialize+0x176>
        }
        else
        {
          if (sdSpiSendCmd(CMD1, 0) == 0)
 80143c0:	2100      	movs	r1, #0
 80143c2:	2041      	movs	r0, #65	; 0x41
 80143c4:	f7ff ff00 	bl	80141c8 <sdSpiSendCmd>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d008      	beq.n	80143e0 <sdSpiInitialize+0x174>
            break; /* CMD1 */
        }
      } while (millis()-pre_time < 1000);
 80143ce:	f7f4 ff2a 	bl	8009226 <millis>
 80143d2:	4602      	mov	r2, r0
 80143d4:	69bb      	ldr	r3, [r7, #24]
 80143d6:	1ad3      	subs	r3, r2, r3
 80143d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80143dc:	d3de      	bcc.n	801439c <sdSpiInitialize+0x130>
 80143de:	e000      	b.n	80143e2 <sdSpiInitialize+0x176>
            break; /* CMD1 */
 80143e0:	bf00      	nop

      if (!(millis()-pre_time < 1000) || sdSpiSendCmd(CMD16, 512) != 0)
 80143e2:	f7f4 ff20 	bl	8009226 <millis>
 80143e6:	4602      	mov	r2, r0
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80143f0:	d207      	bcs.n	8014402 <sdSpiInitialize+0x196>
 80143f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80143f6:	2050      	movs	r0, #80	; 0x50
 80143f8:	f7ff fee6 	bl	80141c8 <sdSpiSendCmd>
 80143fc:	4603      	mov	r3, r0
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d001      	beq.n	8014406 <sdSpiInitialize+0x19a>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8014402:	2300      	movs	r3, #0
 8014404:	777b      	strb	r3, [r7, #29]
      }
    }
  }

  CardType = type;
 8014406:	4a4c      	ldr	r2, [pc, #304]	; (8014538 <sdSpiInitialize+0x2cc>)
 8014408:	7f7b      	ldrb	r3, [r7, #29]
 801440a:	7013      	strb	r3, [r2, #0]
  sd_info.card_type = type;
 801440c:	7f7b      	ldrb	r3, [r7, #29]
 801440e:	4a4b      	ldr	r2, [pc, #300]	; (801453c <sdSpiInitialize+0x2d0>)
 8014410:	6013      	str	r3, [r2, #0]

  sdSpiCS(true);
 8014412:	2001      	movs	r0, #1
 8014414:	f7ff fd90 	bl	8013f38 <sdSpiCS>
  sdSpiRxByte(); /* Idle 상태 전환 (Release DO) */
 8014418:	f7ff fdb4 	bl	8013f84 <sdSpiRxByte>


#if 1
  if (type)
 801441c:	7f7b      	ldrb	r3, [r7, #29]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d074      	beq.n	801450c <sdSpiInitialize+0x2a0>
  {
    sdSpiCS(false);
 8014422:	2000      	movs	r0, #0
 8014424:	f7ff fd88 	bl	8013f38 <sdSpiCS>

    /* SD카드 내 Sector의 개수 (DWORD) */
    if ((sdSpiSendCmd(CMD9, 0) == 0) && sdSpiRxDataBlock(csd, 16))
 8014428:	2100      	movs	r1, #0
 801442a:	2049      	movs	r0, #73	; 0x49
 801442c:	f7ff fecc 	bl	80141c8 <sdSpiSendCmd>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d165      	bne.n	8014502 <sdSpiInitialize+0x296>
 8014436:	463b      	mov	r3, r7
 8014438:	2110      	movs	r1, #16
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff fe32 	bl	80140a4 <sdSpiRxDataBlock>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d05d      	beq.n	8014502 <sdSpiInitialize+0x296>
    {
      if ((csd[0] >> 6) == 1)
 8014446:	783b      	ldrb	r3, [r7, #0]
 8014448:	099b      	lsrs	r3, r3, #6
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b01      	cmp	r3, #1
 801444e:	d10b      	bne.n	8014468 <sdSpiInitialize+0x1fc>
      {
        /* SDC ver 2.00 */
        csize = csd[9] + ((uint32_t) csd[8] << 8) + 1;
 8014450:	7a7b      	ldrb	r3, [r7, #9]
 8014452:	461a      	mov	r2, r3
 8014454:	7a3b      	ldrb	r3, [r7, #8]
 8014456:	021b      	lsls	r3, r3, #8
 8014458:	4413      	add	r3, r2
 801445a:	3301      	adds	r3, #1
 801445c:	617b      	str	r3, [r7, #20]
        sd_info.log_block_numbers = (uint32_t) csize << 10;
 801445e:	697b      	ldr	r3, [r7, #20]
 8014460:	029b      	lsls	r3, r3, #10
 8014462:	4a36      	ldr	r2, [pc, #216]	; (801453c <sdSpiInitialize+0x2d0>)
 8014464:	6193      	str	r3, [r2, #24]
 8014466:	e027      	b.n	80144b8 <sdSpiInitialize+0x24c>
      }
      else
      {
        /* MMC or SDC ver 1.XX */
        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8014468:	797b      	ldrb	r3, [r7, #5]
 801446a:	f003 030f 	and.w	r3, r3, #15
 801446e:	b2da      	uxtb	r2, r3
 8014470:	7abb      	ldrb	r3, [r7, #10]
 8014472:	09db      	lsrs	r3, r3, #7
 8014474:	b2db      	uxtb	r3, r3
 8014476:	4413      	add	r3, r2
 8014478:	b2da      	uxtb	r2, r3
 801447a:	7a7b      	ldrb	r3, [r7, #9]
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	b2db      	uxtb	r3, r3
 8014480:	f003 0306 	and.w	r3, r3, #6
 8014484:	b2db      	uxtb	r3, r3
 8014486:	4413      	add	r3, r2
 8014488:	b2db      	uxtb	r3, r3
 801448a:	3302      	adds	r3, #2
 801448c:	77bb      	strb	r3, [r7, #30]
        csize = (csd[8] >> 6) + ((uint32_t) csd[7] << 2) + ((uint32_t) (csd[6] & 3) << 10) + 1;
 801448e:	7a3b      	ldrb	r3, [r7, #8]
 8014490:	099b      	lsrs	r3, r3, #6
 8014492:	b2db      	uxtb	r3, r3
 8014494:	461a      	mov	r2, r3
 8014496:	79fb      	ldrb	r3, [r7, #7]
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	441a      	add	r2, r3
 801449c:	79bb      	ldrb	r3, [r7, #6]
 801449e:	029b      	lsls	r3, r3, #10
 80144a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80144a4:	4413      	add	r3, r2
 80144a6:	3301      	adds	r3, #1
 80144a8:	617b      	str	r3, [r7, #20]
        sd_info.log_block_numbers = (uint32_t) csize << (n - 9);
 80144aa:	7fbb      	ldrb	r3, [r7, #30]
 80144ac:	3b09      	subs	r3, #9
 80144ae:	697a      	ldr	r2, [r7, #20]
 80144b0:	fa02 f303 	lsl.w	r3, r2, r3
 80144b4:	4a21      	ldr	r2, [pc, #132]	; (801453c <sdSpiInitialize+0x2d0>)
 80144b6:	6193      	str	r3, [r2, #24]
      }

      sd_info.block_numbers = sd_info.log_block_numbers;
 80144b8:	4b20      	ldr	r3, [pc, #128]	; (801453c <sdSpiInitialize+0x2d0>)
 80144ba:	699b      	ldr	r3, [r3, #24]
 80144bc:	4a1f      	ldr	r2, [pc, #124]	; (801453c <sdSpiInitialize+0x2d0>)
 80144be:	6113      	str	r3, [r2, #16]
      sd_info.block_size    = sd_info.log_block_size;
 80144c0:	4b1e      	ldr	r3, [pc, #120]	; (801453c <sdSpiInitialize+0x2d0>)
 80144c2:	69db      	ldr	r3, [r3, #28]
 80144c4:	4a1d      	ldr	r2, [pc, #116]	; (801453c <sdSpiInitialize+0x2d0>)
 80144c6:	6153      	str	r3, [r2, #20]

      sd_info.card_size = (uint32_t)((uint64_t)sd_info.block_numbers * (uint64_t)sd_info.block_size / (uint64_t)1024 / (uint64_t)1024);
 80144c8:	4b1c      	ldr	r3, [pc, #112]	; (801453c <sdSpiInitialize+0x2d0>)
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	2200      	movs	r2, #0
 80144ce:	469a      	mov	sl, r3
 80144d0:	4693      	mov	fp, r2
 80144d2:	4b1a      	ldr	r3, [pc, #104]	; (801453c <sdSpiInitialize+0x2d0>)
 80144d4:	695b      	ldr	r3, [r3, #20]
 80144d6:	2200      	movs	r2, #0
 80144d8:	4698      	mov	r8, r3
 80144da:	4691      	mov	r9, r2
 80144dc:	fb08 f20b 	mul.w	r2, r8, fp
 80144e0:	fb0a f309 	mul.w	r3, sl, r9
 80144e4:	4413      	add	r3, r2
 80144e6:	fbaa 4508 	umull	r4, r5, sl, r8
 80144ea:	442b      	add	r3, r5
 80144ec:	461d      	mov	r5, r3
 80144ee:	f04f 0200 	mov.w	r2, #0
 80144f2:	f04f 0300 	mov.w	r3, #0
 80144f6:	0d22      	lsrs	r2, r4, #20
 80144f8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80144fc:	0d2b      	lsrs	r3, r5, #20
 80144fe:	4b0f      	ldr	r3, [pc, #60]	; (801453c <sdSpiInitialize+0x2d0>)
 8014500:	621a      	str	r2, [r3, #32]
    }


    sdSpiCS(true);
 8014502:	2001      	movs	r0, #1
 8014504:	f7ff fd18 	bl	8013f38 <sdSpiCS>
    sdSpiRxByte(); /* Idle 상태 전환 (Release DO) */
 8014508:	f7ff fd3c 	bl	8013f84 <sdSpiRxByte>
  }
#endif


  if (type)
 801450c:	7f7b      	ldrb	r3, [r7, #29]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d002      	beq.n	8014518 <sdSpiInitialize+0x2ac>
  {
    ret = true;
 8014512:	2301      	movs	r3, #1
 8014514:	77fb      	strb	r3, [r7, #31]
 8014516:	e001      	b.n	801451c <sdSpiInitialize+0x2b0>
  }
  else
  {
    /* Initialization failed */
    sdSpiPowerOff();
 8014518:	f7ff fdb8 	bl	801408c <sdSpiPowerOff>
  }

  SPI_Set_Speed(spi_ch, SPI_BAUDRATEPRESCALER_2);
 801451c:	4b05      	ldr	r3, [pc, #20]	; (8014534 <sdSpiInitialize+0x2c8>)
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	2100      	movs	r1, #0
 8014522:	4618      	mov	r0, r3
 8014524:	f000 fad6 	bl	8014ad4 <SPI_Set_Speed>

  return ret;
 8014528:	7ffb      	ldrb	r3, [r7, #31]
}
 801452a:	4618      	mov	r0, r3
 801452c:	3724      	adds	r7, #36	; 0x24
 801452e:	46bd      	mov	sp, r7
 8014530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014534:	200003a0 	.word	0x200003a0
 8014538:	20003ebf 	.word	0x20003ebf
 801453c:	20001738 	.word	0x20001738

08014540 <cliSd>:

#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8014540:	b590      	push	{r4, r7, lr}
 8014542:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8014546:	af00      	add	r7, sp, #0
 8014548:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801454c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014550:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8014552:	2300      	movs	r3, #0
 8014554:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8014558:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801455c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	881b      	ldrh	r3, [r3, #0]
 8014564:	2b01      	cmp	r3, #1
 8014566:	f040 8094 	bne.w	8014692 <cliSd+0x152>
 801456a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801456e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	695b      	ldr	r3, [r3, #20]
 8014576:	4979      	ldr	r1, [pc, #484]	; (801475c <cliSd+0x21c>)
 8014578:	2000      	movs	r0, #0
 801457a:	4798      	blx	r3
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	f000 8087 	beq.w	8014692 <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n\r", is_init);
 8014584:	4b76      	ldr	r3, [pc, #472]	; (8014760 <cliSd+0x220>)
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	4619      	mov	r1, r3
 801458a:	4876      	ldr	r0, [pc, #472]	; (8014764 <cliSd+0x224>)
 801458c:	f7fd ff5e 	bl	801244c <cliPrintf>
    cliPrintf("sd connected : %d\n\r", is_detected);
 8014590:	4b75      	ldr	r3, [pc, #468]	; (8014768 <cliSd+0x228>)
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	4619      	mov	r1, r3
 8014596:	4875      	ldr	r0, [pc, #468]	; (801476c <cliSd+0x22c>)
 8014598:	f7fd ff58 	bl	801244c <cliPrintf>

    if (is_init == true)
 801459c:	4b70      	ldr	r3, [pc, #448]	; (8014760 <cliSd+0x220>)
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d073      	beq.n	801468c <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 80145a4:	f107 030c 	add.w	r3, r7, #12
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7ff fbd3 	bl	8013d54 <sdGetInfo>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d06b      	beq.n	801468c <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n\r", sd_info.card_type);
 80145b4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	4619      	mov	r1, r3
 80145c0:	486b      	ldr	r0, [pc, #428]	; (8014770 <cliSd+0x230>)
 80145c2:	f7fd ff43 	bl	801244c <cliPrintf>
        cliPrintf("   card_version         : %d\n\r", sd_info.card_version);
 80145c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	4619      	mov	r1, r3
 80145d2:	4868      	ldr	r0, [pc, #416]	; (8014774 <cliSd+0x234>)
 80145d4:	f7fd ff3a 	bl	801244c <cliPrintf>
        cliPrintf("   card_class           : %d\n\r", sd_info.card_class);
 80145d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145dc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	4619      	mov	r1, r3
 80145e4:	4864      	ldr	r0, [pc, #400]	; (8014778 <cliSd+0x238>)
 80145e6:	f7fd ff31 	bl	801244c <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n\r", sd_info.rel_card_Add);
 80145ea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80145f2:	68db      	ldr	r3, [r3, #12]
 80145f4:	4619      	mov	r1, r3
 80145f6:	4861      	ldr	r0, [pc, #388]	; (801477c <cliSd+0x23c>)
 80145f8:	f7fd ff28 	bl	801244c <cliPrintf>
        cliPrintf("   block_numbers        : %d\n\r", sd_info.block_numbers);
 80145fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014600:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	4619      	mov	r1, r3
 8014608:	485d      	ldr	r0, [pc, #372]	; (8014780 <cliSd+0x240>)
 801460a:	f7fd ff1f 	bl	801244c <cliPrintf>
        cliPrintf("   block_size           : %d\n\r", sd_info.block_size);
 801460e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014612:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014616:	695b      	ldr	r3, [r3, #20]
 8014618:	4619      	mov	r1, r3
 801461a:	485a      	ldr	r0, [pc, #360]	; (8014784 <cliSd+0x244>)
 801461c:	f7fd ff16 	bl	801244c <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n\r", sd_info.log_block_numbers);
 8014620:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014624:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014628:	699b      	ldr	r3, [r3, #24]
 801462a:	4619      	mov	r1, r3
 801462c:	4856      	ldr	r0, [pc, #344]	; (8014788 <cliSd+0x248>)
 801462e:	f7fd ff0d 	bl	801244c <cliPrintf>
        cliPrintf("   log_block_size       : %d\n\r", sd_info.log_block_size);
 8014632:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014636:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801463a:	69db      	ldr	r3, [r3, #28]
 801463c:	4619      	mov	r1, r3
 801463e:	4853      	ldr	r0, [pc, #332]	; (801478c <cliSd+0x24c>)
 8014640:	f7fd ff04 	bl	801244c <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n\r", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8014644:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014648:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801464c:	6a18      	ldr	r0, [r3, #32]
 801464e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014652:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014656:	6a1b      	ldr	r3, [r3, #32]
 8014658:	0a9c      	lsrs	r4, r3, #10
 801465a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801465e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8014662:	6a1a      	ldr	r2, [r3, #32]
 8014664:	4613      	mov	r3, r2
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	4413      	add	r3, r2
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	0a99      	lsrs	r1, r3, #10
 801466e:	4b48      	ldr	r3, [pc, #288]	; (8014790 <cliSd+0x250>)
 8014670:	fba3 2301 	umull	r2, r3, r3, r1
 8014674:	08da      	lsrs	r2, r3, #3
 8014676:	4613      	mov	r3, r2
 8014678:	009b      	lsls	r3, r3, #2
 801467a:	4413      	add	r3, r2
 801467c:	005b      	lsls	r3, r3, #1
 801467e:	1aca      	subs	r2, r1, r3
 8014680:	4613      	mov	r3, r2
 8014682:	4622      	mov	r2, r4
 8014684:	4601      	mov	r1, r0
 8014686:	4843      	ldr	r0, [pc, #268]	; (8014794 <cliSd+0x254>)
 8014688:	f7fd fee0 	bl	801244c <cliPrintf>
      }
    }
    ret = true;
 801468c:	2301      	movs	r3, #1
 801468e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8014692:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014696:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	2b02      	cmp	r3, #2
 80146a0:	d146      	bne.n	8014730 <cliSd+0x1f0>
 80146a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80146a6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	695b      	ldr	r3, [r3, #20]
 80146ae:	493a      	ldr	r1, [pc, #232]	; (8014798 <cliSd+0x258>)
 80146b0:	2000      	movs	r0, #0
 80146b2:	4798      	blx	r3
 80146b4:	4603      	mov	r3, r0
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d03a      	beq.n	8014730 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 80146ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80146be:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	2001      	movs	r0, #1
 80146c8:	4798      	blx	r3
 80146ca:	4603      	mov	r3, r0
 80146cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 80146d0:	f107 010c 	add.w	r1, r7, #12
 80146d4:	2364      	movs	r3, #100	; 0x64
 80146d6:	2201      	movs	r2, #1
 80146d8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80146dc:	f7ff fb5a 	bl	8013d94 <sdReadBlocks>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d01e      	beq.n	8014724 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 80146e6:	2300      	movs	r3, #0
 80146e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80146ec:	e015      	b.n	801471a <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 80146ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80146f2:	0099      	lsls	r1, r3, #2
 80146f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80146f8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80146fc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8014700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014704:	460a      	mov	r2, r1
 8014706:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 801470a:	4824      	ldr	r0, [pc, #144]	; (801479c <cliSd+0x25c>)
 801470c:	f7fd fe9e 	bl	801244c <cliPrintf>
      for (int i=0; i<512/4; i++)
 8014710:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014714:	3301      	adds	r3, #1
 8014716:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 801471a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801471e:	2b7f      	cmp	r3, #127	; 0x7f
 8014720:	dde5      	ble.n	80146ee <cliSd+0x1ae>
 8014722:	e002      	b.n	801472a <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n\r");
 8014724:	481e      	ldr	r0, [pc, #120]	; (80147a0 <cliSd+0x260>)
 8014726:	f7fd fe91 	bl	801244c <cliPrintf>
    }

    ret = true;
 801472a:	2301      	movs	r3, #1
 801472c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }


  if (ret != true)
 8014730:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8014734:	f083 0301 	eor.w	r3, r3, #1
 8014738:	b2db      	uxtb	r3, r3
 801473a:	2b00      	cmp	r3, #0
 801473c:	d009      	beq.n	8014752 <cliSd+0x212>
  {
    cliPrintf("sd info\n\r");
 801473e:	4819      	ldr	r0, [pc, #100]	; (80147a4 <cliSd+0x264>)
 8014740:	f7fd fe84 	bl	801244c <cliPrintf>

    if (is_init == true)
 8014744:	4b06      	ldr	r3, [pc, #24]	; (8014760 <cliSd+0x220>)
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d002      	beq.n	8014752 <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n\r");
 801474c:	4816      	ldr	r0, [pc, #88]	; (80147a8 <cliSd+0x268>)
 801474e:	f7fd fe7d 	bl	801244c <cliPrintf>
    }
  }
}
 8014752:	bf00      	nop
 8014754:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8014758:	46bd      	mov	sp, r7
 801475a:	bd90      	pop	{r4, r7, pc}
 801475c:	0802c5dc 	.word	0x0802c5dc
 8014760:	20003ebc 	.word	0x20003ebc
 8014764:	0802c5e4 	.word	0x0802c5e4
 8014768:	20003ebd 	.word	0x20003ebd
 801476c:	0802c5f8 	.word	0x0802c5f8
 8014770:	0802c60c 	.word	0x0802c60c
 8014774:	0802c62c 	.word	0x0802c62c
 8014778:	0802c64c 	.word	0x0802c64c
 801477c:	0802c66c 	.word	0x0802c66c
 8014780:	0802c68c 	.word	0x0802c68c
 8014784:	0802c6ac 	.word	0x0802c6ac
 8014788:	0802c6cc 	.word	0x0802c6cc
 801478c:	0802c6ec 	.word	0x0802c6ec
 8014790:	cccccccd 	.word	0xcccccccd
 8014794:	0802c70c 	.word	0x0802c70c
 8014798:	0802c738 	.word	0x0802c738
 801479c:	0802c740 	.word	0x0802c740
 80147a0:	0802c754 	.word	0x0802c754
 80147a4:	0802c764 	.word	0x0802c764
 80147a8:	0802c770 	.word	0x0802c770

080147ac <spiInit>:
DMA_HandleTypeDef hdma_spi2_rx;

static void cliSPI(cli_args_t *args);

bool spiInit(void)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80147b2:	2301      	movs	r3, #1
 80147b4:	70fb      	strb	r3, [r7, #3]

  for (int i=0; i<SPI_MAX_CH; i++)
 80147b6:	2300      	movs	r3, #0
 80147b8:	607b      	str	r3, [r7, #4]
 80147ba:	e051      	b.n	8014860 <spiInit+0xb4>
  {
    spi_tbl[i].is_open = false;
 80147bc:	4932      	ldr	r1, [pc, #200]	; (8014888 <spiInit+0xdc>)
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	4613      	mov	r3, r2
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4413      	add	r3, r2
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	440b      	add	r3, r1
 80147ca:	2200      	movs	r2, #0
 80147cc:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 80147ce:	492e      	ldr	r1, [pc, #184]	; (8014888 <spiInit+0xdc>)
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	4613      	mov	r3, r2
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4413      	add	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	440b      	add	r3, r1
 80147dc:	3301      	adds	r3, #1
 80147de:	2201      	movs	r2, #1
 80147e0:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_rx_done = true;
 80147e2:	4929      	ldr	r1, [pc, #164]	; (8014888 <spiInit+0xdc>)
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	4613      	mov	r3, r2
 80147e8:	005b      	lsls	r3, r3, #1
 80147ea:	4413      	add	r3, r2
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	440b      	add	r3, r1
 80147f0:	3302      	adds	r3, #2
 80147f2:	2201      	movs	r2, #1
 80147f4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 80147f6:	4924      	ldr	r1, [pc, #144]	; (8014888 <spiInit+0xdc>)
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	4613      	mov	r3, r2
 80147fc:	005b      	lsls	r3, r3, #1
 80147fe:	4413      	add	r3, r2
 8014800:	00db      	lsls	r3, r3, #3
 8014802:	440b      	add	r3, r1
 8014804:	3303      	adds	r3, #3
 8014806:	2200      	movs	r2, #0
 8014808:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 801480a:	491f      	ldr	r1, [pc, #124]	; (8014888 <spiInit+0xdc>)
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	4613      	mov	r3, r2
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	4413      	add	r3, r2
 8014814:	00db      	lsls	r3, r3, #3
 8014816:	440b      	add	r3, r1
 8014818:	3304      	adds	r3, #4
 801481a:	2200      	movs	r2, #0
 801481c:	601a      	str	r2, [r3, #0]
    spi_tbl[i].func_rx = NULL;
 801481e:	491a      	ldr	r1, [pc, #104]	; (8014888 <spiInit+0xdc>)
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	4613      	mov	r3, r2
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	4413      	add	r3, r2
 8014828:	00db      	lsls	r3, r3, #3
 801482a:	440b      	add	r3, r1
 801482c:	3308      	adds	r3, #8
 801482e:	2200      	movs	r2, #0
 8014830:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8014832:	4915      	ldr	r1, [pc, #84]	; (8014888 <spiInit+0xdc>)
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	4613      	mov	r3, r2
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	4413      	add	r3, r2
 801483c:	00db      	lsls	r3, r3, #3
 801483e:	440b      	add	r3, r1
 8014840:	3314      	adds	r3, #20
 8014842:	2200      	movs	r2, #0
 8014844:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8014846:	4910      	ldr	r1, [pc, #64]	; (8014888 <spiInit+0xdc>)
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3310      	adds	r3, #16
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	3301      	adds	r3, #1
 801485e:	607b      	str	r3, [r7, #4]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b01      	cmp	r3, #1
 8014864:	ddaa      	ble.n	80147bc <spiInit+0x10>
  }
  spiBegin(_DEF_SPI1);
 8014866:	2000      	movs	r0, #0
 8014868:	f000 f814 	bl	8014894 <spiBegin>
  spiSetDataMode(_DEF_SPI1, SPI_MODE3);
 801486c:	2103      	movs	r1, #3
 801486e:	2000      	movs	r0, #0
 8014870:	f000 f8cc 	bl	8014a0c <spiSetDataMode>

  cliAdd("spi", cliSPI);
 8014874:	4905      	ldr	r1, [pc, #20]	; (801488c <spiInit+0xe0>)
 8014876:	4806      	ldr	r0, [pc, #24]	; (8014890 <spiInit+0xe4>)
 8014878:	f7fd fef8 	bl	801266c <cliAdd>
  return ret;
 801487c:	78fb      	ldrb	r3, [r7, #3]
}
 801487e:	4618      	mov	r0, r3
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	2000175c 	.word	0x2000175c
 801488c:	08014fa9 	.word	0x08014fa9
 8014890:	0802c788 	.word	0x0802c788

08014894 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	4603      	mov	r3, r0
 801489c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 801489e:	2300      	movs	r3, #0
 80148a0:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 80148a2:	79fa      	ldrb	r2, [r7, #7]
 80148a4:	4613      	mov	r3, r2
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	4413      	add	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	4a43      	ldr	r2, [pc, #268]	; (80149bc <spiBegin+0x128>)
 80148ae:	4413      	add	r3, r2
 80148b0:	60bb      	str	r3, [r7, #8]

  switch(ch)
 80148b2:	79fb      	ldrb	r3, [r7, #7]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d002      	beq.n	80148be <spiBegin+0x2a>
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d03b      	beq.n	8014934 <spiBegin+0xa0>
 80148bc:	e078      	b.n	80149b0 <spiBegin+0x11c>
  {
    case _DEF_SPI1:
      p_spi->h_spi = &hspi1;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	4a3f      	ldr	r2, [pc, #252]	; (80149c0 <spiBegin+0x12c>)
 80148c2:	60da      	str	r2, [r3, #12]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	4a3f      	ldr	r2, [pc, #252]	; (80149c4 <spiBegin+0x130>)
 80148c8:	611a      	str	r2, [r3, #16]
      p_spi->h_dma_rx = &hdma_spi1_rx;
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	4a3e      	ldr	r2, [pc, #248]	; (80149c8 <spiBegin+0x134>)
 80148ce:	615a      	str	r2, [r3, #20]

      hspi1.Instance = SPI1;
 80148d0:	4b3b      	ldr	r3, [pc, #236]	; (80149c0 <spiBegin+0x12c>)
 80148d2:	4a3e      	ldr	r2, [pc, #248]	; (80149cc <spiBegin+0x138>)
 80148d4:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 80148d6:	4b3a      	ldr	r3, [pc, #232]	; (80149c0 <spiBegin+0x12c>)
 80148d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80148dc:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80148de:	4b38      	ldr	r3, [pc, #224]	; (80149c0 <spiBegin+0x12c>)
 80148e0:	2200      	movs	r2, #0
 80148e2:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80148e4:	4b36      	ldr	r3, [pc, #216]	; (80149c0 <spiBegin+0x12c>)
 80148e6:	2200      	movs	r2, #0
 80148e8:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80148ea:	4b35      	ldr	r3, [pc, #212]	; (80149c0 <spiBegin+0x12c>)
 80148ec:	2202      	movs	r2, #2
 80148ee:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80148f0:	4b33      	ldr	r3, [pc, #204]	; (80149c0 <spiBegin+0x12c>)
 80148f2:	2201      	movs	r2, #1
 80148f4:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 80148f6:	4b32      	ldr	r3, [pc, #200]	; (80149c0 <spiBegin+0x12c>)
 80148f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80148fc:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80148fe:	4b30      	ldr	r3, [pc, #192]	; (80149c0 <spiBegin+0x12c>)
 8014900:	2210      	movs	r2, #16
 8014902:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8014904:	4b2e      	ldr	r3, [pc, #184]	; (80149c0 <spiBegin+0x12c>)
 8014906:	2200      	movs	r2, #0
 8014908:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801490a:	4b2d      	ldr	r3, [pc, #180]	; (80149c0 <spiBegin+0x12c>)
 801490c:	2200      	movs	r2, #0
 801490e:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014910:	4b2b      	ldr	r3, [pc, #172]	; (80149c0 <spiBegin+0x12c>)
 8014912:	2200      	movs	r2, #0
 8014914:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8014916:	4b2a      	ldr	r3, [pc, #168]	; (80149c0 <spiBegin+0x12c>)
 8014918:	220a      	movs	r2, #10
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c

      //HAL_SPI_DeInit(&hspi1);
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 801491c:	4828      	ldr	r0, [pc, #160]	; (80149c0 <spiBegin+0x12c>)
 801491e:	f009 fe1f 	bl	801e560 <HAL_SPI_Init>
 8014922:	4603      	mov	r3, r0
 8014924:	2b00      	cmp	r3, #0
 8014926:	d140      	bne.n	80149aa <spiBegin+0x116>
      {
        p_spi->is_open = true;
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	2201      	movs	r2, #1
 801492c:	701a      	strb	r2, [r3, #0]
        ret = true;
 801492e:	2301      	movs	r3, #1
 8014930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014932:	e03a      	b.n	80149aa <spiBegin+0x116>

    case _DEF_SPI2:
      p_spi->h_spi = &hspi2;
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	4a26      	ldr	r2, [pc, #152]	; (80149d0 <spiBegin+0x13c>)
 8014938:	60da      	str	r2, [r3, #12]
      p_spi->h_dma_tx = &hdma_spi2_tx;
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	4a25      	ldr	r2, [pc, #148]	; (80149d4 <spiBegin+0x140>)
 801493e:	611a      	str	r2, [r3, #16]
      p_spi->h_dma_rx = &hdma_spi2_rx;
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	4a25      	ldr	r2, [pc, #148]	; (80149d8 <spiBegin+0x144>)
 8014944:	615a      	str	r2, [r3, #20]

      hspi2.Instance = SPI2;
 8014946:	4b22      	ldr	r3, [pc, #136]	; (80149d0 <spiBegin+0x13c>)
 8014948:	4a24      	ldr	r2, [pc, #144]	; (80149dc <spiBegin+0x148>)
 801494a:	601a      	str	r2, [r3, #0]
      hspi2.Init.Mode = SPI_MODE_MASTER;
 801494c:	4b20      	ldr	r3, [pc, #128]	; (80149d0 <spiBegin+0x13c>)
 801494e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8014952:	605a      	str	r2, [r3, #4]
      hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8014954:	4b1e      	ldr	r3, [pc, #120]	; (80149d0 <spiBegin+0x13c>)
 8014956:	2200      	movs	r2, #0
 8014958:	609a      	str	r2, [r3, #8]
      hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801495a:	4b1d      	ldr	r3, [pc, #116]	; (80149d0 <spiBegin+0x13c>)
 801495c:	2200      	movs	r2, #0
 801495e:	60da      	str	r2, [r3, #12]
      hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8014960:	4b1b      	ldr	r3, [pc, #108]	; (80149d0 <spiBegin+0x13c>)
 8014962:	2200      	movs	r2, #0
 8014964:	611a      	str	r2, [r3, #16]
      hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8014966:	4b1a      	ldr	r3, [pc, #104]	; (80149d0 <spiBegin+0x13c>)
 8014968:	2200      	movs	r2, #0
 801496a:	615a      	str	r2, [r3, #20]
      hspi2.Init.NSS = SPI_NSS_SOFT;
 801496c:	4b18      	ldr	r3, [pc, #96]	; (80149d0 <spiBegin+0x13c>)
 801496e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014972:	619a      	str	r2, [r3, #24]
      hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014974:	4b16      	ldr	r3, [pc, #88]	; (80149d0 <spiBegin+0x13c>)
 8014976:	2200      	movs	r2, #0
 8014978:	61da      	str	r2, [r3, #28]
      hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801497a:	4b15      	ldr	r3, [pc, #84]	; (80149d0 <spiBegin+0x13c>)
 801497c:	2200      	movs	r2, #0
 801497e:	621a      	str	r2, [r3, #32]
      hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8014980:	4b13      	ldr	r3, [pc, #76]	; (80149d0 <spiBegin+0x13c>)
 8014982:	2200      	movs	r2, #0
 8014984:	625a      	str	r2, [r3, #36]	; 0x24
      hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014986:	4b12      	ldr	r3, [pc, #72]	; (80149d0 <spiBegin+0x13c>)
 8014988:	2200      	movs	r2, #0
 801498a:	629a      	str	r2, [r3, #40]	; 0x28
      hspi2.Init.CRCPolynomial = 10;
 801498c:	4b10      	ldr	r3, [pc, #64]	; (80149d0 <spiBegin+0x13c>)
 801498e:	220a      	movs	r2, #10
 8014990:	62da      	str	r2, [r3, #44]	; 0x2c
      //HAL_SPI_DeInit(&hspi2);
      if (HAL_SPI_Init(&hspi2) == HAL_OK)
 8014992:	480f      	ldr	r0, [pc, #60]	; (80149d0 <spiBegin+0x13c>)
 8014994:	f009 fde4 	bl	801e560 <HAL_SPI_Init>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d107      	bne.n	80149ae <spiBegin+0x11a>
      {
        p_spi->is_open = true;
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2201      	movs	r2, #1
 80149a2:	701a      	strb	r2, [r3, #0]
        ret = true;
 80149a4:	2301      	movs	r3, #1
 80149a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80149a8:	e001      	b.n	80149ae <spiBegin+0x11a>
      break;
 80149aa:	bf00      	nop
 80149ac:	e000      	b.n	80149b0 <spiBegin+0x11c>
      break;
 80149ae:	bf00      	nop
  }

  return ret;
 80149b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	2000175c 	.word	0x2000175c
 80149c0:	2000178c 	.word	0x2000178c
 80149c4:	2000189c 	.word	0x2000189c
 80149c8:	2000183c 	.word	0x2000183c
 80149cc:	40013000 	.word	0x40013000
 80149d0:	200017e4 	.word	0x200017e4
 80149d4:	200018fc 	.word	0x200018fc
 80149d8:	2000195c 	.word	0x2000195c
 80149dc:	40003800 	.word	0x40003800

080149e0 <spiIsBegin>:

bool spiIsBegin(uint8_t ch)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	4603      	mov	r3, r0
 80149e8:	71fb      	strb	r3, [r7, #7]
  return spi_tbl[ch].is_open;
 80149ea:	79fa      	ldrb	r2, [r7, #7]
 80149ec:	4906      	ldr	r1, [pc, #24]	; (8014a08 <spiIsBegin+0x28>)
 80149ee:	4613      	mov	r3, r2
 80149f0:	005b      	lsls	r3, r3, #1
 80149f2:	4413      	add	r3, r2
 80149f4:	00db      	lsls	r3, r3, #3
 80149f6:	440b      	add	r3, r1
 80149f8:	781b      	ldrb	r3, [r3, #0]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	370c      	adds	r7, #12
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop
 8014a08:	2000175c 	.word	0x2000175c

08014a0c <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	4603      	mov	r3, r0
 8014a14:	460a      	mov	r2, r1
 8014a16:	71fb      	strb	r3, [r7, #7]
 8014a18:	4613      	mov	r3, r2
 8014a1a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8014a1c:	79fa      	ldrb	r2, [r7, #7]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	4a2a      	ldr	r2, [pc, #168]	; (8014ad0 <spiSetDataMode+0xc4>)
 8014a28:	4413      	add	r3, r2
 8014a2a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	f083 0301 	eor.w	r3, r3, #1
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d146      	bne.n	8014ac8 <spiSetDataMode+0xbc>


  switch( dataMode )
 8014a3a:	79bb      	ldrb	r3, [r7, #6]
 8014a3c:	2b03      	cmp	r3, #3
 8014a3e:	d844      	bhi.n	8014aca <spiSetDataMode+0xbe>
 8014a40:	a201      	add	r2, pc, #4	; (adr r2, 8014a48 <spiSetDataMode+0x3c>)
 8014a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a46:	bf00      	nop
 8014a48:	08014a59 	.word	0x08014a59
 8014a4c:	08014a75 	.word	0x08014a75
 8014a50:	08014a91 	.word	0x08014a91
 8014a54:	08014aad 	.word	0x08014aad
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68db      	ldr	r3, [r3, #12]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	2200      	movs	r2, #0
 8014a66:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	68db      	ldr	r3, [r3, #12]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f009 fd77 	bl	801e560 <HAL_SPI_Init>
      break;
 8014a72:	e02a      	b.n	8014aca <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	2201      	movs	r2, #1
 8014a82:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f009 fd69 	bl	801e560 <HAL_SPI_Init>
      break;
 8014a8e:	e01c      	b.n	8014aca <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	2202      	movs	r2, #2
 8014a96:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	68db      	ldr	r3, [r3, #12]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f009 fd5b 	bl	801e560 <HAL_SPI_Init>
      break;
 8014aaa:	e00e      	b.n	8014aca <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	2202      	movs	r2, #2
 8014ab2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	2201      	movs	r2, #1
 8014aba:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	68db      	ldr	r3, [r3, #12]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f009 fd4d 	bl	801e560 <HAL_SPI_Init>
      break;
 8014ac6:	e000      	b.n	8014aca <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8014ac8:	bf00      	nop
  }
}
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	2000175c 	.word	0x2000175c

08014ad4 <SPI_Set_Speed>:
  spi_t  *p_spi = &spi_tbl[ch];
  return p_spi->h_spi->Init.BaudRatePrescaler;
}

bool SPI_Set_Speed(uint8_t ch, uint32_t prescaler)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	4603      	mov	r3, r0
 8014adc:	6039      	str	r1, [r7, #0]
 8014ade:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8014ae0:	79fa      	ldrb	r2, [r7, #7]
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	005b      	lsls	r3, r3, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	4a08      	ldr	r2, [pc, #32]	; (8014b0c <SPI_Set_Speed+0x38>)
 8014aec:	4413      	add	r3, r2
 8014aee:	60fb      	str	r3, [r7, #12]
  p_spi->h_spi->Init.BaudRatePrescaler = prescaler;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	683a      	ldr	r2, [r7, #0]
 8014af6:	61da      	str	r2, [r3, #28]
  HAL_SPI_Init(p_spi->h_spi);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	68db      	ldr	r3, [r3, #12]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f009 fd2f 	bl	801e560 <HAL_SPI_Init>
  return true;
 8014b02:	2301      	movs	r3, #1
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	2000175c 	.word	0x2000175c

08014b10 <SPI_ByteRead>:

 HAL_StatusTypeDef SPI_ByteRead(uint8_t ch, uint8_t MemAddress, uint8_t *data, uint8_t length)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	603a      	str	r2, [r7, #0]
 8014b18:	461a      	mov	r2, r3
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	71fb      	strb	r3, [r7, #7]
 8014b1e:	460b      	mov	r3, r1
 8014b20:	71bb      	strb	r3, [r7, #6]
 8014b22:	4613      	mov	r3, r2
 8014b24:	717b      	strb	r3, [r7, #5]
  spi_t  *p_spi = &spi_tbl[ch];
 8014b26:	79fa      	ldrb	r2, [r7, #7]
 8014b28:	4613      	mov	r3, r2
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	4a10      	ldr	r2, [pc, #64]	; (8014b74 <SPI_ByteRead+0x64>)
 8014b32:	4413      	add	r3, r2
 8014b34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status;
    gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8014b36:	2100      	movs	r1, #0
 8014b38:	2000      	movs	r0, #0
 8014b3a:	f7fe fc6b 	bl	8013414 <gpioPinWrite>
    HAL_SPI_Transmit(p_spi->h_spi, &MemAddress, 1, 10);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	68d8      	ldr	r0, [r3, #12]
 8014b42:	1db9      	adds	r1, r7, #6
 8014b44:	230a      	movs	r3, #10
 8014b46:	2201      	movs	r2, #1
 8014b48:	f009 fd93 	bl	801e672 <HAL_SPI_Transmit>
    status = HAL_SPI_Receive(p_spi->h_spi, data, length, 10);
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	68d8      	ldr	r0, [r3, #12]
 8014b50:	797b      	ldrb	r3, [r7, #5]
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	230a      	movs	r3, #10
 8014b56:	6839      	ldr	r1, [r7, #0]
 8014b58:	f009 fec7 	bl	801e8ea <HAL_SPI_Receive>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	72fb      	strb	r3, [r7, #11]
    //status = HAL_SPI_TransmitReceive(p_spi->h_spi, &MemAddress, data, length, 10);
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8014b60:	2101      	movs	r1, #1
 8014b62:	2000      	movs	r0, #0
 8014b64:	f7fe fc56 	bl	8013414 <gpioPinWrite>
  return status;
 8014b68:	7afb      	ldrb	r3, [r7, #11]
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	2000175c 	.word	0x2000175c

08014b78 <SPI_ByteWrite>:

HAL_StatusTypeDef SPI_ByteWrite(uint8_t ch, uint8_t MemAddress, uint8_t *data, uint32_t length)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60ba      	str	r2, [r7, #8]
 8014b80:	607b      	str	r3, [r7, #4]
 8014b82:	4603      	mov	r3, r0
 8014b84:	73fb      	strb	r3, [r7, #15]
 8014b86:	460b      	mov	r3, r1
 8014b88:	73bb      	strb	r3, [r7, #14]
  spi_t  *p_spi = &spi_tbl[ch];
 8014b8a:	7bfa      	ldrb	r2, [r7, #15]
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	4a10      	ldr	r2, [pc, #64]	; (8014bd8 <SPI_ByteWrite+0x60>)
 8014b96:	4413      	add	r3, r2
 8014b98:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
    gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8014b9a:	2100      	movs	r1, #0
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	f7fe fc39 	bl	8013414 <gpioPinWrite>
    HAL_SPI_Transmit(p_spi->h_spi, &MemAddress, 1, 10);
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	68d8      	ldr	r0, [r3, #12]
 8014ba6:	f107 010e 	add.w	r1, r7, #14
 8014baa:	230a      	movs	r3, #10
 8014bac:	2201      	movs	r2, #1
 8014bae:	f009 fd60 	bl	801e672 <HAL_SPI_Transmit>
    status = HAL_SPI_Transmit(p_spi->h_spi, data, length, 10);
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	68d8      	ldr	r0, [r3, #12]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	230a      	movs	r3, #10
 8014bbc:	68b9      	ldr	r1, [r7, #8]
 8014bbe:	f009 fd58 	bl	801e672 <HAL_SPI_Transmit>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	74fb      	strb	r3, [r7, #19]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8014bc6:	2101      	movs	r1, #1
 8014bc8:	2000      	movs	r0, #0
 8014bca:	f7fe fc23 	bl	8013414 <gpioPinWrite>
  return status;
 8014bce:	7cfb      	ldrb	r3, [r7, #19]
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3718      	adds	r7, #24
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	2000175c 	.word	0x2000175c

08014bdc <SPI_RegisterWrite>:

void SPI_RegisterWrite(uint8_t ch, uint8_t MemAddress, uint8_t data, uint8_t delayMs)
{
 8014bdc:	b590      	push	{r4, r7, lr}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	4604      	mov	r4, r0
 8014be4:	4608      	mov	r0, r1
 8014be6:	4611      	mov	r1, r2
 8014be8:	461a      	mov	r2, r3
 8014bea:	4623      	mov	r3, r4
 8014bec:	71fb      	strb	r3, [r7, #7]
 8014bee:	4603      	mov	r3, r0
 8014bf0:	71bb      	strb	r3, [r7, #6]
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	717b      	strb	r3, [r7, #5]
 8014bf6:	4613      	mov	r3, r2
 8014bf8:	713b      	strb	r3, [r7, #4]
    SPI_ByteWrite(ch, MemAddress, &data, 1);
 8014bfa:	1d7a      	adds	r2, r7, #5
 8014bfc:	79b9      	ldrb	r1, [r7, #6]
 8014bfe:	79f8      	ldrb	r0, [r7, #7]
 8014c00:	2301      	movs	r3, #1
 8014c02:	f7ff ffb9 	bl	8014b78 <SPI_ByteWrite>
    if (delayMs) {
 8014c06:	793b      	ldrb	r3, [r7, #4]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d003      	beq.n	8014c14 <SPI_RegisterWrite+0x38>
        delay(delayMs);
 8014c0c:	793b      	ldrb	r3, [r7, #4]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7f4 fafe 	bl	8009210 <delay>
    }
}
 8014c14:	bf00      	nop
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd90      	pop	{r4, r7, pc}

08014c1c <spiTransfer>:

  return ret;
}

bool spiTransfer(uint8_t ch, uint8_t *tx_buf, uint8_t *rx_buf, uint32_t length, uint32_t timeout)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af02      	add	r7, sp, #8
 8014c22:	60b9      	str	r1, [r7, #8]
 8014c24:	607a      	str	r2, [r7, #4]
 8014c26:	603b      	str	r3, [r7, #0]
 8014c28:	4603      	mov	r3, r0
 8014c2a:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	75bb      	strb	r3, [r7, #22]
  HAL_StatusTypeDef status;
  spi_t  *p_spi = &spi_tbl[ch];
 8014c30:	7bfa      	ldrb	r2, [r7, #15]
 8014c32:	4613      	mov	r3, r2
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	4a1f      	ldr	r2, [pc, #124]	; (8014cb8 <spiTransfer+0x9c>)
 8014c3c:	4413      	add	r3, r2
 8014c3e:	613b      	str	r3, [r7, #16]

  if (p_spi->is_open == false) return false;
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	f083 0301 	eor.w	r3, r3, #1
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <spiTransfer+0x36>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	e02e      	b.n	8014cb0 <spiTransfer+0x94>

  if (rx_buf == NULL)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d10a      	bne.n	8014c6e <spiTransfer+0x52>
  {
    status =  HAL_SPI_Transmit(p_spi->h_spi, tx_buf, length, timeout);
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	68d8      	ldr	r0, [r3, #12]
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	6a3b      	ldr	r3, [r7, #32]
 8014c62:	68b9      	ldr	r1, [r7, #8]
 8014c64:	f009 fd05 	bl	801e672 <HAL_SPI_Transmit>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	75fb      	strb	r3, [r7, #23]
 8014c6c:	e01a      	b.n	8014ca4 <spiTransfer+0x88>
  }
  else if (tx_buf == NULL)
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10a      	bne.n	8014c8a <spiTransfer+0x6e>
  {
    status =  HAL_SPI_Receive(p_spi->h_spi, rx_buf, length, timeout);
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	68d8      	ldr	r0, [r3, #12]
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	6879      	ldr	r1, [r7, #4]
 8014c80:	f009 fe33 	bl	801e8ea <HAL_SPI_Receive>
 8014c84:	4603      	mov	r3, r0
 8014c86:	75fb      	strb	r3, [r7, #23]
 8014c88:	e00c      	b.n	8014ca4 <spiTransfer+0x88>
  }
  else
  {
    status =  HAL_SPI_TransmitReceive(p_spi->h_spi, tx_buf, rx_buf, length, timeout);
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	68d8      	ldr	r0, [r3, #12]
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	b29a      	uxth	r2, r3
 8014c92:	6a3b      	ldr	r3, [r7, #32]
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	4613      	mov	r3, r2
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	68b9      	ldr	r1, [r7, #8]
 8014c9c:	f009 ff36 	bl	801eb0c <HAL_SPI_TransmitReceive>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	75fb      	strb	r3, [r7, #23]
  }

  if (status != HAL_OK)
 8014ca4:	7dfb      	ldrb	r3, [r7, #23]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <spiTransfer+0x92>
  {
    return false;
 8014caa:	2300      	movs	r3, #0
 8014cac:	e000      	b.n	8014cb0 <spiTransfer+0x94>
  }

  return ret;
 8014cae:	7dbb      	ldrb	r3, [r7, #22]
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3718      	adds	r7, #24
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	2000175c 	.word	0x2000175c

08014cbc <HAL_SPI_ErrorCallback>:
}



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	4b0b      	ldr	r3, [pc, #44]	; (8014cf8 <HAL_SPI_ErrorCallback+0x3c>)
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d102      	bne.n	8014cd8 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8014cd2:	4b09      	ldr	r3, [pc, #36]	; (8014cf8 <HAL_SPI_ErrorCallback+0x3c>)
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	70da      	strb	r2, [r3, #3]
  }

  if (hspi->Instance == spi_tbl[_DEF_SPI2].h_spi->Instance)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	4b06      	ldr	r3, [pc, #24]	; (8014cf8 <HAL_SPI_ErrorCallback+0x3c>)
 8014cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d102      	bne.n	8014cec <HAL_SPI_ErrorCallback+0x30>
  {
    spi_tbl[_DEF_SPI2].is_error = true;
 8014ce6:	4b04      	ldr	r3, [pc, #16]	; (8014cf8 <HAL_SPI_ErrorCallback+0x3c>)
 8014ce8:	2201      	movs	r2, #1
 8014cea:	76da      	strb	r2, [r3, #27]
  }
}
 8014cec:	bf00      	nop
 8014cee:	370c      	adds	r7, #12
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf6:	4770      	bx	lr
 8014cf8:	2000175c 	.word	0x2000175c

08014cfc <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b08c      	sub	sp, #48	; 0x30
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d04:	f107 031c 	add.w	r3, r7, #28
 8014d08:	2200      	movs	r2, #0
 8014d0a:	601a      	str	r2, [r3, #0]
 8014d0c:	605a      	str	r2, [r3, #4]
 8014d0e:	609a      	str	r2, [r3, #8]
 8014d10:	60da      	str	r2, [r3, #12]
 8014d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4a96      	ldr	r2, [pc, #600]	; (8014f74 <HAL_SPI_MspInit+0x278>)
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	f040 8091 	bne.w	8014e42 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014d20:	2300      	movs	r3, #0
 8014d22:	61bb      	str	r3, [r7, #24]
 8014d24:	4b94      	ldr	r3, [pc, #592]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d28:	4a93      	ldr	r2, [pc, #588]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8014d30:	4b91      	ldr	r3, [pc, #580]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014d38:	61bb      	str	r3, [r7, #24]
 8014d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	617b      	str	r3, [r7, #20]
 8014d40:	4b8d      	ldr	r3, [pc, #564]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d44:	4a8c      	ldr	r2, [pc, #560]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d46:	f043 0301 	orr.w	r3, r3, #1
 8014d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8014d4c:	4b8a      	ldr	r3, [pc, #552]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d50:	f003 0301 	and.w	r3, r3, #1
 8014d54:	617b      	str	r3, [r7, #20]
 8014d56:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8014d58:	23e0      	movs	r3, #224	; 0xe0
 8014d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d5c:	2302      	movs	r3, #2
 8014d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d64:	2303      	movs	r3, #3
 8014d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014d68:	2305      	movs	r3, #5
 8014d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d6c:	f107 031c 	add.w	r3, r7, #28
 8014d70:	4619      	mov	r1, r3
 8014d72:	4882      	ldr	r0, [pc, #520]	; (8014f7c <HAL_SPI_MspInit+0x280>)
 8014d74:	f004 fd16 	bl	80197a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8014d78:	4b81      	ldr	r3, [pc, #516]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d7a:	4a82      	ldr	r2, [pc, #520]	; (8014f84 <HAL_SPI_MspInit+0x288>)
 8014d7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8014d7e:	4b80      	ldr	r3, [pc, #512]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d80:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8014d84:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014d86:	4b7e      	ldr	r3, [pc, #504]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d88:	2200      	movs	r2, #0
 8014d8a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014d8c:	4b7c      	ldr	r3, [pc, #496]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d8e:	2200      	movs	r2, #0
 8014d90:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014d92:	4b7b      	ldr	r3, [pc, #492]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d98:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014d9a:	4b79      	ldr	r3, [pc, #484]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014da0:	4b77      	ldr	r3, [pc, #476]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014da2:	2200      	movs	r2, #0
 8014da4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8014da6:	4b76      	ldr	r3, [pc, #472]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014da8:	2200      	movs	r2, #0
 8014daa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014dac:	4b74      	ldr	r3, [pc, #464]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014dae:	2200      	movs	r2, #0
 8014db0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014db2:	4b73      	ldr	r3, [pc, #460]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014db4:	2200      	movs	r2, #0
 8014db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8014db8:	4871      	ldr	r0, [pc, #452]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014dba:	f003 fe0b 	bl	80189d4 <HAL_DMA_Init>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d001      	beq.n	8014dc8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8014dc4:	f7f4 fae6 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	4a6d      	ldr	r2, [pc, #436]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014dcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8014dce:	4a6c      	ldr	r2, [pc, #432]	; (8014f80 <HAL_SPI_MspInit+0x284>)
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8014dd4:	4b6c      	ldr	r3, [pc, #432]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014dd6:	4a6d      	ldr	r2, [pc, #436]	; (8014f8c <HAL_SPI_MspInit+0x290>)
 8014dd8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8014dda:	4b6b      	ldr	r3, [pc, #428]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014ddc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8014de0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014de2:	4b69      	ldr	r3, [pc, #420]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014de4:	2240      	movs	r2, #64	; 0x40
 8014de6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014de8:	4b67      	ldr	r3, [pc, #412]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014dea:	2200      	movs	r2, #0
 8014dec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014dee:	4b66      	ldr	r3, [pc, #408]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014df4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014df6:	4b64      	ldr	r3, [pc, #400]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014dfc:	4b62      	ldr	r3, [pc, #392]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014dfe:	2200      	movs	r2, #0
 8014e00:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8014e02:	4b61      	ldr	r3, [pc, #388]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e04:	2200      	movs	r2, #0
 8014e06:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8014e08:	4b5f      	ldr	r3, [pc, #380]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014e0e:	4b5e      	ldr	r3, [pc, #376]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e10:	2200      	movs	r2, #0
 8014e12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8014e14:	485c      	ldr	r0, [pc, #368]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e16:	f003 fddd 	bl	80189d4 <HAL_DMA_Init>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d001      	beq.n	8014e24 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8014e20:	f7f4 fab8 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4a58      	ldr	r2, [pc, #352]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e28:	649a      	str	r2, [r3, #72]	; 0x48
 8014e2a:	4a57      	ldr	r2, [pc, #348]	; (8014f88 <HAL_SPI_MspInit+0x28c>)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8014e30:	2200      	movs	r2, #0
 8014e32:	2100      	movs	r1, #0
 8014e34:	2023      	movs	r0, #35	; 0x23
 8014e36:	f003 fd90 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8014e3a:	2023      	movs	r0, #35	; 0x23
 8014e3c:	f003 fda9 	bl	8018992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8014e40:	e094      	b.n	8014f6c <HAL_SPI_MspInit+0x270>
  else if(spiHandle->Instance==SPI2)
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4a52      	ldr	r2, [pc, #328]	; (8014f90 <HAL_SPI_MspInit+0x294>)
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	f040 808f 	bne.w	8014f6c <HAL_SPI_MspInit+0x270>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8014e4e:	2300      	movs	r3, #0
 8014e50:	613b      	str	r3, [r7, #16]
 8014e52:	4b49      	ldr	r3, [pc, #292]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e56:	4a48      	ldr	r2, [pc, #288]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8014e5e:	4b46      	ldr	r3, [pc, #280]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014e66:	613b      	str	r3, [r7, #16]
 8014e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	60fb      	str	r3, [r7, #12]
 8014e6e:	4b42      	ldr	r3, [pc, #264]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e72:	4a41      	ldr	r2, [pc, #260]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e74:	f043 0302 	orr.w	r3, r3, #2
 8014e78:	6313      	str	r3, [r2, #48]	; 0x30
 8014e7a:	4b3f      	ldr	r3, [pc, #252]	; (8014f78 <HAL_SPI_MspInit+0x27c>)
 8014e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e7e:	f003 0302 	and.w	r3, r3, #2
 8014e82:	60fb      	str	r3, [r7, #12]
 8014e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8014e86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8014e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e8c:	2302      	movs	r3, #2
 8014e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e90:	2300      	movs	r3, #0
 8014e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e94:	2303      	movs	r3, #3
 8014e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8014e98:	2305      	movs	r3, #5
 8014e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014e9c:	f107 031c 	add.w	r3, r7, #28
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	483c      	ldr	r0, [pc, #240]	; (8014f94 <HAL_SPI_MspInit+0x298>)
 8014ea4:	f004 fc7e 	bl	80197a4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8014ea8:	4b3b      	ldr	r3, [pc, #236]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014eaa:	4a3c      	ldr	r2, [pc, #240]	; (8014f9c <HAL_SPI_MspInit+0x2a0>)
 8014eac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8014eae:	4b3a      	ldr	r3, [pc, #232]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014eb4:	4b38      	ldr	r3, [pc, #224]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014eb6:	2240      	movs	r2, #64	; 0x40
 8014eb8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014eba:	4b37      	ldr	r3, [pc, #220]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014ec0:	4b35      	ldr	r3, [pc, #212]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ec6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014ec8:	4b33      	ldr	r3, [pc, #204]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014ece:	4b32      	ldr	r3, [pc, #200]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8014ed4:	4b30      	ldr	r3, [pc, #192]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8014eda:	4b2f      	ldr	r3, [pc, #188]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014edc:	2200      	movs	r2, #0
 8014ede:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014ee0:	4b2d      	ldr	r3, [pc, #180]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8014ee6:	482c      	ldr	r0, [pc, #176]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014ee8:	f003 fd74 	bl	80189d4 <HAL_DMA_Init>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 8014ef2:	f7f4 fa4f 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4a27      	ldr	r2, [pc, #156]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014efa:	649a      	str	r2, [r3, #72]	; 0x48
 8014efc:	4a26      	ldr	r2, [pc, #152]	; (8014f98 <HAL_SPI_MspInit+0x29c>)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8014f02:	4b27      	ldr	r3, [pc, #156]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f04:	4a27      	ldr	r2, [pc, #156]	; (8014fa4 <HAL_SPI_MspInit+0x2a8>)
 8014f06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8014f08:	4b25      	ldr	r3, [pc, #148]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014f0e:	4b24      	ldr	r3, [pc, #144]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f10:	2200      	movs	r2, #0
 8014f12:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014f14:	4b22      	ldr	r3, [pc, #136]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014f1a:	4b21      	ldr	r3, [pc, #132]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014f20:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014f22:	4b1f      	ldr	r3, [pc, #124]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f24:	2200      	movs	r2, #0
 8014f26:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8014f28:	4b1d      	ldr	r3, [pc, #116]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8014f2e:	4b1c      	ldr	r3, [pc, #112]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f30:	2200      	movs	r2, #0
 8014f32:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014f34:	4b1a      	ldr	r3, [pc, #104]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f36:	2200      	movs	r2, #0
 8014f38:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014f3a:	4b19      	ldr	r3, [pc, #100]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8014f40:	4817      	ldr	r0, [pc, #92]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f42:	f003 fd47 	bl	80189d4 <HAL_DMA_Init>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d001      	beq.n	8014f50 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8014f4c:	f7f4 fa22 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4a13      	ldr	r2, [pc, #76]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f54:	64da      	str	r2, [r3, #76]	; 0x4c
 8014f56:	4a12      	ldr	r2, [pc, #72]	; (8014fa0 <HAL_SPI_MspInit+0x2a4>)
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	2100      	movs	r1, #0
 8014f60:	2024      	movs	r0, #36	; 0x24
 8014f62:	f003 fcfa 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8014f66:	2024      	movs	r0, #36	; 0x24
 8014f68:	f003 fd13 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8014f6c:	bf00      	nop
 8014f6e:	3730      	adds	r7, #48	; 0x30
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	40013000 	.word	0x40013000
 8014f78:	40023800 	.word	0x40023800
 8014f7c:	40020000 	.word	0x40020000
 8014f80:	2000183c 	.word	0x2000183c
 8014f84:	40026440 	.word	0x40026440
 8014f88:	2000189c 	.word	0x2000189c
 8014f8c:	40026458 	.word	0x40026458
 8014f90:	40003800 	.word	0x40003800
 8014f94:	40020400 	.word	0x40020400
 8014f98:	200018fc 	.word	0x200018fc
 8014f9c:	40026070 	.word	0x40026070
 8014fa0:	2000195c 	.word	0x2000195c
 8014fa4:	40026058 	.word	0x40026058

08014fa8 <cliSPI>:
  /* USER CODE END SPI2_MspDeInit 1 */
  }
}

void cliSPI(cli_args_t *args)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	73fb      	strb	r3, [r7, #15]

  if (ret == false)
 8014fb4:	7bfb      	ldrb	r3, [r7, #15]
 8014fb6:	f083 0301 	eor.w	r3, r3, #1
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d008      	beq.n	8014fd2 <cliSPI+0x2a>
  {
    cliPrintf( "spi scan\n");
 8014fc0:	4806      	ldr	r0, [pc, #24]	; (8014fdc <cliSPI+0x34>)
 8014fc2:	f7fd fa43 	bl	801244c <cliPrintf>
    cliPrintf( "spi read dev_addr reg_addr length\n");
 8014fc6:	4806      	ldr	r0, [pc, #24]	; (8014fe0 <cliSPI+0x38>)
 8014fc8:	f7fd fa40 	bl	801244c <cliPrintf>
    cliPrintf( "spi write dev_addr reg_addr data\n");
 8014fcc:	4805      	ldr	r0, [pc, #20]	; (8014fe4 <cliSPI+0x3c>)
 8014fce:	f7fd fa3d 	bl	801244c <cliPrintf>
  }
}
 8014fd2:	bf00      	nop
 8014fd4:	3710      	adds	r7, #16
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	0802c78c 	.word	0x0802c78c
 8014fe0:	0802c798 	.word	0x0802c798
 8014fe4:	0802c7bc 	.word	0x0802c7bc

08014fe8 <uartInit>:
        400000, 460800, 500000, 921600, 1000000, 1500000, 2000000, 2470000}; // see baudRate_e

#define BAUD_RATE_COUNT (sizeof(baudRates) / sizeof(baudRates[0]))

bool uartInit(void)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8014fee:	2300      	movs	r3, #0
 8014ff0:	607b      	str	r3, [r7, #4]
 8014ff2:	e007      	b.n	8015004 <uartInit+0x1c>
  {
    is_open[i] = false;
 8014ff4:	4a08      	ldr	r2, [pc, #32]	; (8015018 <uartInit+0x30>)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	4413      	add	r3, r2
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	3301      	adds	r3, #1
 8015002:	607b      	str	r3, [r7, #4]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b05      	cmp	r3, #5
 8015008:	ddf4      	ble.n	8014ff4 <uartInit+0xc>
  }

  return true;
 801500a:	2301      	movs	r3, #1
}
 801500c:	4618      	mov	r0, r3
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	200019bc 	.word	0x200019bc

0801501c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	4603      	mov	r3, r0
 8015024:	6039      	str	r1, [r7, #0]
 8015026:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8015028:	2300      	movs	r3, #0
 801502a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 801502c:	79fb      	ldrb	r3, [r7, #7]
 801502e:	2b06      	cmp	r3, #6
 8015030:	f200 8252 	bhi.w	80154d8 <uartOpen+0x4bc>
 8015034:	a201      	add	r2, pc, #4	; (adr r2, 801503c <uartOpen+0x20>)
 8015036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801503a:	bf00      	nop
 801503c:	08015059 	.word	0x08015059
 8015040:	080154d9 	.word	0x080154d9
 8015044:	08015067 	.word	0x08015067
 8015048:	08015141 	.word	0x08015141
 801504c:	08015219 	.word	0x08015219
 8015050:	08015329 	.word	0x08015329
 8015054:	08015401 	.word	0x08015401
  {
    case _DEF_USB:
      is_open[ch] = true;
 8015058:	79fb      	ldrb	r3, [r7, #7]
 801505a:	4aa5      	ldr	r2, [pc, #660]	; (80152f0 <uartOpen+0x2d4>)
 801505c:	2101      	movs	r1, #1
 801505e:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8015060:	2301      	movs	r3, #1
 8015062:	73fb      	strb	r3, [r7, #15]
      break;
 8015064:	e238      	b.n	80154d8 <uartOpen+0x4bc>

    case _DEF_UART2:
    	huart2.Instance = USART2;
 8015066:	4ba3      	ldr	r3, [pc, #652]	; (80152f4 <uartOpen+0x2d8>)
 8015068:	4aa3      	ldr	r2, [pc, #652]	; (80152f8 <uartOpen+0x2dc>)
 801506a:	601a      	str	r2, [r3, #0]
    	huart2.Init.BaudRate = baud;
 801506c:	4aa1      	ldr	r2, [pc, #644]	; (80152f4 <uartOpen+0x2d8>)
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	6053      	str	r3, [r2, #4]
    	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8015072:	4ba0      	ldr	r3, [pc, #640]	; (80152f4 <uartOpen+0x2d8>)
 8015074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015078:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 801507a:	4b9e      	ldr	r3, [pc, #632]	; (80152f4 <uartOpen+0x2d8>)
 801507c:	2200      	movs	r2, #0
 801507e:	60da      	str	r2, [r3, #12]
    	huart2.Init.Parity = UART_PARITY_NONE;
 8015080:	4b9c      	ldr	r3, [pc, #624]	; (80152f4 <uartOpen+0x2d8>)
 8015082:	2200      	movs	r2, #0
 8015084:	611a      	str	r2, [r3, #16]
    	huart2.Init.Mode = UART_MODE_TX_RX;
 8015086:	4b9b      	ldr	r3, [pc, #620]	; (80152f4 <uartOpen+0x2d8>)
 8015088:	220c      	movs	r2, #12
 801508a:	615a      	str	r2, [r3, #20]
    	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801508c:	4b99      	ldr	r3, [pc, #612]	; (80152f4 <uartOpen+0x2d8>)
 801508e:	2200      	movs	r2, #0
 8015090:	619a      	str	r2, [r3, #24]
    	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8015092:	4b98      	ldr	r3, [pc, #608]	; (80152f4 <uartOpen+0x2d8>)
 8015094:	2200      	movs	r2, #0
 8015096:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], (uint8_t *)&u2_rx_buf[0], MAX_SIZE);
 8015098:	79fa      	ldrb	r2, [r7, #7]
 801509a:	4613      	mov	r3, r2
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	4413      	add	r3, r2
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	4a96      	ldr	r2, [pc, #600]	; (80152fc <uartOpen+0x2e0>)
 80150a4:	4413      	add	r3, r2
 80150a6:	22ff      	movs	r2, #255	; 0xff
 80150a8:	4995      	ldr	r1, [pc, #596]	; (8015300 <uartOpen+0x2e4>)
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f6 fa1e 	bl	800b4ec <QueueCreate>

    	if (HAL_UART_Init(&huart2) != HAL_OK)
 80150b0:	4890      	ldr	r0, [pc, #576]	; (80152f4 <uartOpen+0x2d8>)
 80150b2:	f00a f911 	bl	801f2d8 <HAL_UART_Init>
 80150b6:	4603      	mov	r3, r0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d002      	beq.n	80150c2 <uartOpen+0xa6>
    	{
    	  Error_Handler();
 80150bc:	f7f4 f96a 	bl	8009394 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->NDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 80150c0:	e20a      	b.n	80154d8 <uartOpen+0x4bc>
    		ret = true;
 80150c2:	2301      	movs	r3, #1
 80150c4:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80150c6:	79fb      	ldrb	r3, [r7, #7]
 80150c8:	4a89      	ldr	r2, [pc, #548]	; (80152f0 <uartOpen+0x2d4>)
 80150ca:	2101      	movs	r1, #1
 80150cc:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&u2_rx_buf[0], MAX_SIZE) != HAL_OK)
 80150ce:	22ff      	movs	r2, #255	; 0xff
 80150d0:	498b      	ldr	r1, [pc, #556]	; (8015300 <uartOpen+0x2e4>)
 80150d2:	4888      	ldr	r0, [pc, #544]	; (80152f4 <uartOpen+0x2d8>)
 80150d4:	f00a f9df 	bl	801f496 <HAL_UART_Receive_DMA>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d001      	beq.n	80150e2 <uartOpen+0xc6>
          ret = false;
 80150de:	2300      	movs	r3, #0
 80150e0:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->NDTR;
 80150e2:	79fa      	ldrb	r2, [r7, #7]
 80150e4:	4985      	ldr	r1, [pc, #532]	; (80152fc <uartOpen+0x2e0>)
 80150e6:	4613      	mov	r3, r2
 80150e8:	005b      	lsls	r3, r3, #1
 80150ea:	4413      	add	r3, r2
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	440b      	add	r3, r1
 80150f0:	3306      	adds	r3, #6
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	b2d9      	uxtb	r1, r3
 80150f6:	4b83      	ldr	r3, [pc, #524]	; (8015304 <uartOpen+0x2e8>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	79fa      	ldrb	r2, [r7, #7]
 8015100:	1acb      	subs	r3, r1, r3
 8015102:	b2d8      	uxtb	r0, r3
 8015104:	497d      	ldr	r1, [pc, #500]	; (80152fc <uartOpen+0x2e0>)
 8015106:	4613      	mov	r3, r2
 8015108:	005b      	lsls	r3, r3, #1
 801510a:	4413      	add	r3, r2
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	440b      	add	r3, r1
 8015110:	3304      	adds	r3, #4
 8015112:	4602      	mov	r2, r0
 8015114:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 8015116:	79f9      	ldrb	r1, [r7, #7]
 8015118:	79fa      	ldrb	r2, [r7, #7]
 801511a:	4878      	ldr	r0, [pc, #480]	; (80152fc <uartOpen+0x2e0>)
 801511c:	460b      	mov	r3, r1
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	440b      	add	r3, r1
 8015122:	009b      	lsls	r3, r3, #2
 8015124:	4403      	add	r3, r0
 8015126:	3304      	adds	r3, #4
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	b2d8      	uxtb	r0, r3
 801512c:	4973      	ldr	r1, [pc, #460]	; (80152fc <uartOpen+0x2e0>)
 801512e:	4613      	mov	r3, r2
 8015130:	005b      	lsls	r3, r3, #1
 8015132:	4413      	add	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	440b      	add	r3, r1
 8015138:	3305      	adds	r3, #5
 801513a:	4602      	mov	r2, r0
 801513c:	701a      	strb	r2, [r3, #0]
      break;
 801513e:	e1cb      	b.n	80154d8 <uartOpen+0x4bc>

    case _DEF_UART3:
    	huart3.Instance = USART3;
 8015140:	4b71      	ldr	r3, [pc, #452]	; (8015308 <uartOpen+0x2ec>)
 8015142:	4a72      	ldr	r2, [pc, #456]	; (801530c <uartOpen+0x2f0>)
 8015144:	601a      	str	r2, [r3, #0]
    	huart3.Init.BaudRate = baud;
 8015146:	4a70      	ldr	r2, [pc, #448]	; (8015308 <uartOpen+0x2ec>)
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	6053      	str	r3, [r2, #4]
    	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801514c:	4b6e      	ldr	r3, [pc, #440]	; (8015308 <uartOpen+0x2ec>)
 801514e:	2200      	movs	r2, #0
 8015150:	609a      	str	r2, [r3, #8]
      huart3.Init.StopBits = UART_STOPBITS_1;
 8015152:	4b6d      	ldr	r3, [pc, #436]	; (8015308 <uartOpen+0x2ec>)
 8015154:	2200      	movs	r2, #0
 8015156:	60da      	str	r2, [r3, #12]
    	huart3.Init.Parity = UART_PARITY_NONE;
 8015158:	4b6b      	ldr	r3, [pc, #428]	; (8015308 <uartOpen+0x2ec>)
 801515a:	2200      	movs	r2, #0
 801515c:	611a      	str	r2, [r3, #16]
    	huart3.Init.Mode = UART_MODE_TX_RX;
 801515e:	4b6a      	ldr	r3, [pc, #424]	; (8015308 <uartOpen+0x2ec>)
 8015160:	220c      	movs	r2, #12
 8015162:	615a      	str	r2, [r3, #20]
    	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015164:	4b68      	ldr	r3, [pc, #416]	; (8015308 <uartOpen+0x2ec>)
 8015166:	2200      	movs	r2, #0
 8015168:	619a      	str	r2, [r3, #24]
    	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 801516a:	4b67      	ldr	r3, [pc, #412]	; (8015308 <uartOpen+0x2ec>)
 801516c:	2200      	movs	r2, #0
 801516e:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], (uint8_t *)&u3_rx_buf[0], MAX_SIZE);
 8015170:	79fa      	ldrb	r2, [r7, #7]
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	4a60      	ldr	r2, [pc, #384]	; (80152fc <uartOpen+0x2e0>)
 801517c:	4413      	add	r3, r2
 801517e:	22ff      	movs	r2, #255	; 0xff
 8015180:	4963      	ldr	r1, [pc, #396]	; (8015310 <uartOpen+0x2f4>)
 8015182:	4618      	mov	r0, r3
 8015184:	f7f6 f9b2 	bl	800b4ec <QueueCreate>

    	if (HAL_UART_Init(&huart3) != HAL_OK)
 8015188:	485f      	ldr	r0, [pc, #380]	; (8015308 <uartOpen+0x2ec>)
 801518a:	f00a f8a5 	bl	801f2d8 <HAL_UART_Init>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d002      	beq.n	801519a <uartOpen+0x17e>
    	{
    	  Error_Handler();
 8015194:	f7f4 f8fe 	bl	8009394 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart3_rx.Instance->NDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 8015198:	e19e      	b.n	80154d8 <uartOpen+0x4bc>
    		ret = true;
 801519a:	2301      	movs	r3, #1
 801519c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 801519e:	79fb      	ldrb	r3, [r7, #7]
 80151a0:	4a53      	ldr	r2, [pc, #332]	; (80152f0 <uartOpen+0x2d4>)
 80151a2:	2101      	movs	r1, #1
 80151a4:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&u3_rx_buf[0], MAX_SIZE) != HAL_OK)
 80151a6:	22ff      	movs	r2, #255	; 0xff
 80151a8:	4959      	ldr	r1, [pc, #356]	; (8015310 <uartOpen+0x2f4>)
 80151aa:	4857      	ldr	r0, [pc, #348]	; (8015308 <uartOpen+0x2ec>)
 80151ac:	f00a f973 	bl	801f496 <HAL_UART_Receive_DMA>
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <uartOpen+0x19e>
          ret = false;
 80151b6:	2300      	movs	r3, #0
 80151b8:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart3_rx.Instance->NDTR;
 80151ba:	79fa      	ldrb	r2, [r7, #7]
 80151bc:	494f      	ldr	r1, [pc, #316]	; (80152fc <uartOpen+0x2e0>)
 80151be:	4613      	mov	r3, r2
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	4413      	add	r3, r2
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	440b      	add	r3, r1
 80151c8:	3306      	adds	r3, #6
 80151ca:	781b      	ldrb	r3, [r3, #0]
 80151cc:	b2d9      	uxtb	r1, r3
 80151ce:	4b51      	ldr	r3, [pc, #324]	; (8015314 <uartOpen+0x2f8>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	79fa      	ldrb	r2, [r7, #7]
 80151d8:	1acb      	subs	r3, r1, r3
 80151da:	b2d8      	uxtb	r0, r3
 80151dc:	4947      	ldr	r1, [pc, #284]	; (80152fc <uartOpen+0x2e0>)
 80151de:	4613      	mov	r3, r2
 80151e0:	005b      	lsls	r3, r3, #1
 80151e2:	4413      	add	r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	440b      	add	r3, r1
 80151e8:	3304      	adds	r3, #4
 80151ea:	4602      	mov	r2, r0
 80151ec:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 80151ee:	79f9      	ldrb	r1, [r7, #7]
 80151f0:	79fa      	ldrb	r2, [r7, #7]
 80151f2:	4842      	ldr	r0, [pc, #264]	; (80152fc <uartOpen+0x2e0>)
 80151f4:	460b      	mov	r3, r1
 80151f6:	005b      	lsls	r3, r3, #1
 80151f8:	440b      	add	r3, r1
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	4403      	add	r3, r0
 80151fe:	3304      	adds	r3, #4
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	b2d8      	uxtb	r0, r3
 8015204:	493d      	ldr	r1, [pc, #244]	; (80152fc <uartOpen+0x2e0>)
 8015206:	4613      	mov	r3, r2
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	4413      	add	r3, r2
 801520c:	009b      	lsls	r3, r3, #2
 801520e:	440b      	add	r3, r1
 8015210:	3305      	adds	r3, #5
 8015212:	4602      	mov	r2, r0
 8015214:	701a      	strb	r2, [r3, #0]
      break;
 8015216:	e15f      	b.n	80154d8 <uartOpen+0x4bc>

    case _DEF_UART4:
    	huart4.Instance = UART4;
 8015218:	4b3f      	ldr	r3, [pc, #252]	; (8015318 <uartOpen+0x2fc>)
 801521a:	4a40      	ldr	r2, [pc, #256]	; (801531c <uartOpen+0x300>)
 801521c:	601a      	str	r2, [r3, #0]
    	huart4.Init.BaudRate = baud;
 801521e:	4a3e      	ldr	r2, [pc, #248]	; (8015318 <uartOpen+0x2fc>)
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	6053      	str	r3, [r2, #4]
    	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8015224:	4b3c      	ldr	r3, [pc, #240]	; (8015318 <uartOpen+0x2fc>)
 8015226:	2200      	movs	r2, #0
 8015228:	609a      	str	r2, [r3, #8]
      huart4.Init.StopBits = UART_STOPBITS_1;
 801522a:	4b3b      	ldr	r3, [pc, #236]	; (8015318 <uartOpen+0x2fc>)
 801522c:	2200      	movs	r2, #0
 801522e:	60da      	str	r2, [r3, #12]
    	huart4.Init.Parity = UART_PARITY_NONE;
 8015230:	4b39      	ldr	r3, [pc, #228]	; (8015318 <uartOpen+0x2fc>)
 8015232:	2200      	movs	r2, #0
 8015234:	611a      	str	r2, [r3, #16]
    	huart4.Init.Mode = UART_MODE_TX_RX;
 8015236:	4b38      	ldr	r3, [pc, #224]	; (8015318 <uartOpen+0x2fc>)
 8015238:	220c      	movs	r2, #12
 801523a:	615a      	str	r2, [r3, #20]
    	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801523c:	4b36      	ldr	r3, [pc, #216]	; (8015318 <uartOpen+0x2fc>)
 801523e:	2200      	movs	r2, #0
 8015240:	619a      	str	r2, [r3, #24]
    	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8015242:	4b35      	ldr	r3, [pc, #212]	; (8015318 <uartOpen+0x2fc>)
 8015244:	2200      	movs	r2, #0
 8015246:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], (uint8_t *)&u4_rx_buf[0], MAX_SIZE);
 8015248:	79fa      	ldrb	r2, [r7, #7]
 801524a:	4613      	mov	r3, r2
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4413      	add	r3, r2
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4a2a      	ldr	r2, [pc, #168]	; (80152fc <uartOpen+0x2e0>)
 8015254:	4413      	add	r3, r2
 8015256:	22ff      	movs	r2, #255	; 0xff
 8015258:	4931      	ldr	r1, [pc, #196]	; (8015320 <uartOpen+0x304>)
 801525a:	4618      	mov	r0, r3
 801525c:	f7f6 f946 	bl	800b4ec <QueueCreate>

    	if (HAL_UART_Init(&huart4) != HAL_OK)
 8015260:	482d      	ldr	r0, [pc, #180]	; (8015318 <uartOpen+0x2fc>)
 8015262:	f00a f839 	bl	801f2d8 <HAL_UART_Init>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d002      	beq.n	8015272 <uartOpen+0x256>
    	{
    	  Error_Handler();
 801526c:	f7f4 f892 	bl	8009394 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_uart4_rx.Instance->NDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 8015270:	e132      	b.n	80154d8 <uartOpen+0x4bc>
    		ret = true;
 8015272:	2301      	movs	r3, #1
 8015274:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8015276:	79fb      	ldrb	r3, [r7, #7]
 8015278:	4a1d      	ldr	r2, [pc, #116]	; (80152f0 <uartOpen+0x2d4>)
 801527a:	2101      	movs	r1, #1
 801527c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart4, (uint8_t *)&u4_rx_buf[0], MAX_SIZE) != HAL_OK)
 801527e:	22ff      	movs	r2, #255	; 0xff
 8015280:	4927      	ldr	r1, [pc, #156]	; (8015320 <uartOpen+0x304>)
 8015282:	4825      	ldr	r0, [pc, #148]	; (8015318 <uartOpen+0x2fc>)
 8015284:	f00a f907 	bl	801f496 <HAL_UART_Receive_DMA>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	d001      	beq.n	8015292 <uartOpen+0x276>
          ret = false;
 801528e:	2300      	movs	r3, #0
 8015290:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_uart4_rx.Instance->NDTR;
 8015292:	79fa      	ldrb	r2, [r7, #7]
 8015294:	4919      	ldr	r1, [pc, #100]	; (80152fc <uartOpen+0x2e0>)
 8015296:	4613      	mov	r3, r2
 8015298:	005b      	lsls	r3, r3, #1
 801529a:	4413      	add	r3, r2
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	440b      	add	r3, r1
 80152a0:	3306      	adds	r3, #6
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	b2d9      	uxtb	r1, r3
 80152a6:	4b1f      	ldr	r3, [pc, #124]	; (8015324 <uartOpen+0x308>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	79fa      	ldrb	r2, [r7, #7]
 80152b0:	1acb      	subs	r3, r1, r3
 80152b2:	b2d8      	uxtb	r0, r3
 80152b4:	4911      	ldr	r1, [pc, #68]	; (80152fc <uartOpen+0x2e0>)
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	440b      	add	r3, r1
 80152c0:	3304      	adds	r3, #4
 80152c2:	4602      	mov	r2, r0
 80152c4:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 80152c6:	79f9      	ldrb	r1, [r7, #7]
 80152c8:	79fa      	ldrb	r2, [r7, #7]
 80152ca:	480c      	ldr	r0, [pc, #48]	; (80152fc <uartOpen+0x2e0>)
 80152cc:	460b      	mov	r3, r1
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	440b      	add	r3, r1
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4403      	add	r3, r0
 80152d6:	3304      	adds	r3, #4
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	b2d8      	uxtb	r0, r3
 80152dc:	4907      	ldr	r1, [pc, #28]	; (80152fc <uartOpen+0x2e0>)
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	009b      	lsls	r3, r3, #2
 80152e6:	440b      	add	r3, r1
 80152e8:	3305      	adds	r3, #5
 80152ea:	4602      	mov	r2, r0
 80152ec:	701a      	strb	r2, [r3, #0]
      break;
 80152ee:	e0f3      	b.n	80154d8 <uartOpen+0x4bc>
 80152f0:	200019bc 	.word	0x200019bc
 80152f4:	20001f50 	.word	0x20001f50
 80152f8:	40004400 	.word	0x40004400
 80152fc:	200019c4 	.word	0x200019c4
 8015300:	20001a0c 	.word	0x20001a0c
 8015304:	20002104 	.word	0x20002104
 8015308:	20001f94 	.word	0x20001f94
 801530c:	40004800 	.word	0x40004800
 8015310:	20001b0c 	.word	0x20001b0c
 8015314:	20002164 	.word	0x20002164
 8015318:	20001fd8 	.word	0x20001fd8
 801531c:	40004c00 	.word	0x40004c00
 8015320:	20001c0c 	.word	0x20001c0c
 8015324:	200021c4 	.word	0x200021c4
    case _DEF_UART5:
    	huart5.Instance = UART5;
 8015328:	4b6e      	ldr	r3, [pc, #440]	; (80154e4 <uartOpen+0x4c8>)
 801532a:	4a6f      	ldr	r2, [pc, #444]	; (80154e8 <uartOpen+0x4cc>)
 801532c:	601a      	str	r2, [r3, #0]
    	huart5.Init.BaudRate = baud;
 801532e:	4a6d      	ldr	r2, [pc, #436]	; (80154e4 <uartOpen+0x4c8>)
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	6053      	str	r3, [r2, #4]
    	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8015334:	4b6b      	ldr	r3, [pc, #428]	; (80154e4 <uartOpen+0x4c8>)
 8015336:	2200      	movs	r2, #0
 8015338:	609a      	str	r2, [r3, #8]
      huart5.Init.StopBits = UART_STOPBITS_1;
 801533a:	4b6a      	ldr	r3, [pc, #424]	; (80154e4 <uartOpen+0x4c8>)
 801533c:	2200      	movs	r2, #0
 801533e:	60da      	str	r2, [r3, #12]
    	huart5.Init.Parity = UART_PARITY_NONE;
 8015340:	4b68      	ldr	r3, [pc, #416]	; (80154e4 <uartOpen+0x4c8>)
 8015342:	2200      	movs	r2, #0
 8015344:	611a      	str	r2, [r3, #16]
    	huart5.Init.Mode = UART_MODE_TX_RX;
 8015346:	4b67      	ldr	r3, [pc, #412]	; (80154e4 <uartOpen+0x4c8>)
 8015348:	220c      	movs	r2, #12
 801534a:	615a      	str	r2, [r3, #20]
    	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801534c:	4b65      	ldr	r3, [pc, #404]	; (80154e4 <uartOpen+0x4c8>)
 801534e:	2200      	movs	r2, #0
 8015350:	619a      	str	r2, [r3, #24]
    	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8015352:	4b64      	ldr	r3, [pc, #400]	; (80154e4 <uartOpen+0x4c8>)
 8015354:	2200      	movs	r2, #0
 8015356:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], (uint8_t *)&u5_rx_buf[0], MAX_SIZE);
 8015358:	79fa      	ldrb	r2, [r7, #7]
 801535a:	4613      	mov	r3, r2
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	4413      	add	r3, r2
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	4a62      	ldr	r2, [pc, #392]	; (80154ec <uartOpen+0x4d0>)
 8015364:	4413      	add	r3, r2
 8015366:	22ff      	movs	r2, #255	; 0xff
 8015368:	4961      	ldr	r1, [pc, #388]	; (80154f0 <uartOpen+0x4d4>)
 801536a:	4618      	mov	r0, r3
 801536c:	f7f6 f8be 	bl	800b4ec <QueueCreate>

    	if (HAL_UART_Init(&huart5) != HAL_OK)
 8015370:	485c      	ldr	r0, [pc, #368]	; (80154e4 <uartOpen+0x4c8>)
 8015372:	f009 ffb1 	bl	801f2d8 <HAL_UART_Init>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d002      	beq.n	8015382 <uartOpen+0x366>
    	{
    	  Error_Handler();
 801537c:	f7f4 f80a 	bl	8009394 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_uart5_rx.Instance->NDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 8015380:	e0aa      	b.n	80154d8 <uartOpen+0x4bc>
    		ret = true;
 8015382:	2301      	movs	r3, #1
 8015384:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8015386:	79fb      	ldrb	r3, [r7, #7]
 8015388:	4a5a      	ldr	r2, [pc, #360]	; (80154f4 <uartOpen+0x4d8>)
 801538a:	2101      	movs	r1, #1
 801538c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart5, (uint8_t *)&u5_rx_buf[0], MAX_SIZE) != HAL_OK)
 801538e:	22ff      	movs	r2, #255	; 0xff
 8015390:	4957      	ldr	r1, [pc, #348]	; (80154f0 <uartOpen+0x4d4>)
 8015392:	4854      	ldr	r0, [pc, #336]	; (80154e4 <uartOpen+0x4c8>)
 8015394:	f00a f87f 	bl	801f496 <HAL_UART_Receive_DMA>
 8015398:	4603      	mov	r3, r0
 801539a:	2b00      	cmp	r3, #0
 801539c:	d001      	beq.n	80153a2 <uartOpen+0x386>
          ret = false;
 801539e:	2300      	movs	r3, #0
 80153a0:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_uart5_rx.Instance->NDTR;
 80153a2:	79fa      	ldrb	r2, [r7, #7]
 80153a4:	4951      	ldr	r1, [pc, #324]	; (80154ec <uartOpen+0x4d0>)
 80153a6:	4613      	mov	r3, r2
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4413      	add	r3, r2
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	440b      	add	r3, r1
 80153b0:	3306      	adds	r3, #6
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	b2d9      	uxtb	r1, r3
 80153b6:	4b50      	ldr	r3, [pc, #320]	; (80154f8 <uartOpen+0x4dc>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	79fa      	ldrb	r2, [r7, #7]
 80153c0:	1acb      	subs	r3, r1, r3
 80153c2:	b2d8      	uxtb	r0, r3
 80153c4:	4949      	ldr	r1, [pc, #292]	; (80154ec <uartOpen+0x4d0>)
 80153c6:	4613      	mov	r3, r2
 80153c8:	005b      	lsls	r3, r3, #1
 80153ca:	4413      	add	r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	440b      	add	r3, r1
 80153d0:	3304      	adds	r3, #4
 80153d2:	4602      	mov	r2, r0
 80153d4:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 80153d6:	79f9      	ldrb	r1, [r7, #7]
 80153d8:	79fa      	ldrb	r2, [r7, #7]
 80153da:	4844      	ldr	r0, [pc, #272]	; (80154ec <uartOpen+0x4d0>)
 80153dc:	460b      	mov	r3, r1
 80153de:	005b      	lsls	r3, r3, #1
 80153e0:	440b      	add	r3, r1
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	4403      	add	r3, r0
 80153e6:	3304      	adds	r3, #4
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	b2d8      	uxtb	r0, r3
 80153ec:	493f      	ldr	r1, [pc, #252]	; (80154ec <uartOpen+0x4d0>)
 80153ee:	4613      	mov	r3, r2
 80153f0:	005b      	lsls	r3, r3, #1
 80153f2:	4413      	add	r3, r2
 80153f4:	009b      	lsls	r3, r3, #2
 80153f6:	440b      	add	r3, r1
 80153f8:	3305      	adds	r3, #5
 80153fa:	4602      	mov	r2, r0
 80153fc:	701a      	strb	r2, [r3, #0]
      break;
 80153fe:	e06b      	b.n	80154d8 <uartOpen+0x4bc>

    case _DEF_UART6:
    	huart6.Instance = USART6;
 8015400:	4b3e      	ldr	r3, [pc, #248]	; (80154fc <uartOpen+0x4e0>)
 8015402:	4a3f      	ldr	r2, [pc, #252]	; (8015500 <uartOpen+0x4e4>)
 8015404:	601a      	str	r2, [r3, #0]
    	huart6.Init.BaudRate = baud;
 8015406:	4a3d      	ldr	r2, [pc, #244]	; (80154fc <uartOpen+0x4e0>)
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	6053      	str	r3, [r2, #4]
    	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801540c:	4b3b      	ldr	r3, [pc, #236]	; (80154fc <uartOpen+0x4e0>)
 801540e:	2200      	movs	r2, #0
 8015410:	609a      	str	r2, [r3, #8]
      huart6.Init.StopBits = UART_STOPBITS_1;
 8015412:	4b3a      	ldr	r3, [pc, #232]	; (80154fc <uartOpen+0x4e0>)
 8015414:	2200      	movs	r2, #0
 8015416:	60da      	str	r2, [r3, #12]
    	huart6.Init.Parity = UART_PARITY_NONE;
 8015418:	4b38      	ldr	r3, [pc, #224]	; (80154fc <uartOpen+0x4e0>)
 801541a:	2200      	movs	r2, #0
 801541c:	611a      	str	r2, [r3, #16]
    	huart6.Init.Mode = UART_MODE_TX_RX;
 801541e:	4b37      	ldr	r3, [pc, #220]	; (80154fc <uartOpen+0x4e0>)
 8015420:	220c      	movs	r2, #12
 8015422:	615a      	str	r2, [r3, #20]
    	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015424:	4b35      	ldr	r3, [pc, #212]	; (80154fc <uartOpen+0x4e0>)
 8015426:	2200      	movs	r2, #0
 8015428:	619a      	str	r2, [r3, #24]
    	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801542a:	4b34      	ldr	r3, [pc, #208]	; (80154fc <uartOpen+0x4e0>)
 801542c:	2200      	movs	r2, #0
 801542e:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], (uint8_t *)&u6_rx_buf[0], MAX_SIZE);
 8015430:	79fa      	ldrb	r2, [r7, #7]
 8015432:	4613      	mov	r3, r2
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4413      	add	r3, r2
 8015438:	009b      	lsls	r3, r3, #2
 801543a:	4a2c      	ldr	r2, [pc, #176]	; (80154ec <uartOpen+0x4d0>)
 801543c:	4413      	add	r3, r2
 801543e:	22ff      	movs	r2, #255	; 0xff
 8015440:	4930      	ldr	r1, [pc, #192]	; (8015504 <uartOpen+0x4e8>)
 8015442:	4618      	mov	r0, r3
 8015444:	f7f6 f852 	bl	800b4ec <QueueCreate>

    	if (HAL_UART_Init(&huart6) != HAL_OK)
 8015448:	482c      	ldr	r0, [pc, #176]	; (80154fc <uartOpen+0x4e0>)
 801544a:	f009 ff45 	bl	801f2d8 <HAL_UART_Init>
 801544e:	4603      	mov	r3, r0
 8015450:	2b00      	cmp	r3, #0
 8015452:	d002      	beq.n	801545a <uartOpen+0x43e>
    	{
    	  Error_Handler();
 8015454:	f7f3 ff9e 	bl	8009394 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart6_rx.Instance->NDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 8015458:	e03d      	b.n	80154d6 <uartOpen+0x4ba>
    		ret = true;
 801545a:	2301      	movs	r3, #1
 801545c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 801545e:	79fb      	ldrb	r3, [r7, #7]
 8015460:	4a24      	ldr	r2, [pc, #144]	; (80154f4 <uartOpen+0x4d8>)
 8015462:	2101      	movs	r1, #1
 8015464:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart6, (uint8_t *)&u6_rx_buf[0], MAX_SIZE) != HAL_OK)
 8015466:	22ff      	movs	r2, #255	; 0xff
 8015468:	4926      	ldr	r1, [pc, #152]	; (8015504 <uartOpen+0x4e8>)
 801546a:	4824      	ldr	r0, [pc, #144]	; (80154fc <uartOpen+0x4e0>)
 801546c:	f00a f813 	bl	801f496 <HAL_UART_Receive_DMA>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	d001      	beq.n	801547a <uartOpen+0x45e>
          ret = false;
 8015476:	2300      	movs	r3, #0
 8015478:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart6_rx.Instance->NDTR;
 801547a:	79fa      	ldrb	r2, [r7, #7]
 801547c:	491b      	ldr	r1, [pc, #108]	; (80154ec <uartOpen+0x4d0>)
 801547e:	4613      	mov	r3, r2
 8015480:	005b      	lsls	r3, r3, #1
 8015482:	4413      	add	r3, r2
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	440b      	add	r3, r1
 8015488:	3306      	adds	r3, #6
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	b2d9      	uxtb	r1, r3
 801548e:	4b1e      	ldr	r3, [pc, #120]	; (8015508 <uartOpen+0x4ec>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	b2db      	uxtb	r3, r3
 8015496:	79fa      	ldrb	r2, [r7, #7]
 8015498:	1acb      	subs	r3, r1, r3
 801549a:	b2d8      	uxtb	r0, r3
 801549c:	4913      	ldr	r1, [pc, #76]	; (80154ec <uartOpen+0x4d0>)
 801549e:	4613      	mov	r3, r2
 80154a0:	005b      	lsls	r3, r3, #1
 80154a2:	4413      	add	r3, r2
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	440b      	add	r3, r1
 80154a8:	3304      	adds	r3, #4
 80154aa:	4602      	mov	r2, r0
 80154ac:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 80154ae:	79f9      	ldrb	r1, [r7, #7]
 80154b0:	79fa      	ldrb	r2, [r7, #7]
 80154b2:	480e      	ldr	r0, [pc, #56]	; (80154ec <uartOpen+0x4d0>)
 80154b4:	460b      	mov	r3, r1
 80154b6:	005b      	lsls	r3, r3, #1
 80154b8:	440b      	add	r3, r1
 80154ba:	009b      	lsls	r3, r3, #2
 80154bc:	4403      	add	r3, r0
 80154be:	3304      	adds	r3, #4
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	b2d8      	uxtb	r0, r3
 80154c4:	4909      	ldr	r1, [pc, #36]	; (80154ec <uartOpen+0x4d0>)
 80154c6:	4613      	mov	r3, r2
 80154c8:	005b      	lsls	r3, r3, #1
 80154ca:	4413      	add	r3, r2
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	440b      	add	r3, r1
 80154d0:	3305      	adds	r3, #5
 80154d2:	4602      	mov	r2, r0
 80154d4:	701a      	strb	r2, [r3, #0]
      break;
 80154d6:	bf00      	nop
  }

  return ret;
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	2000201c 	.word	0x2000201c
 80154e8:	40005000 	.word	0x40005000
 80154ec:	200019c4 	.word	0x200019c4
 80154f0:	20001d0c 	.word	0x20001d0c
 80154f4:	200019bc 	.word	0x200019bc
 80154f8:	20002224 	.word	0x20002224
 80154fc:	20002060 	.word	0x20002060
 8015500:	40011400 	.word	0x40011400
 8015504:	20001e0c 	.word	0x20001e0c
 8015508:	20002284 	.word	0x20002284

0801550c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	4603      	mov	r3, r0
 8015514:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8015516:	2300      	movs	r3, #0
 8015518:	60fb      	str	r3, [r7, #12]

  switch(ch)
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	2b06      	cmp	r3, #6
 801551e:	f200 80d3 	bhi.w	80156c8 <uartAvailable+0x1bc>
 8015522:	a201      	add	r2, pc, #4	; (adr r2, 8015528 <uartAvailable+0x1c>)
 8015524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015528:	08015545 	.word	0x08015545
 801552c:	080156c9 	.word	0x080156c9
 8015530:	0801554d 	.word	0x0801554d
 8015534:	08015599 	.word	0x08015599
 8015538:	080155e5 	.word	0x080155e5
 801553c:	08015631 	.word	0x08015631
 8015540:	0801567d 	.word	0x0801567d
  {

    case _DEF_USB:
      ret = cdcAvailable();
 8015544:	f011 ff04 	bl	8027350 <cdcAvailable>
 8015548:	60f8      	str	r0, [r7, #12]
      break;
 801554a:	e0bd      	b.n	80156c8 <uartAvailable+0x1bc>

    case _DEF_UART2:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart2_rx.Instance->NDTR);
 801554c:	79fa      	ldrb	r2, [r7, #7]
 801554e:	4961      	ldr	r1, [pc, #388]	; (80156d4 <uartAvailable+0x1c8>)
 8015550:	4613      	mov	r3, r2
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	4413      	add	r3, r2
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	440b      	add	r3, r1
 801555a:	3306      	adds	r3, #6
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	b2d9      	uxtb	r1, r3
 8015560:	4b5d      	ldr	r3, [pc, #372]	; (80156d8 <uartAvailable+0x1cc>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	b2db      	uxtb	r3, r3
 8015568:	79fa      	ldrb	r2, [r7, #7]
 801556a:	1acb      	subs	r3, r1, r3
 801556c:	b2d8      	uxtb	r0, r3
 801556e:	4959      	ldr	r1, [pc, #356]	; (80156d4 <uartAvailable+0x1c8>)
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	440b      	add	r3, r1
 801557a:	3304      	adds	r3, #4
 801557c:	4602      	mov	r2, r0
 801557e:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 8015580:	79fa      	ldrb	r2, [r7, #7]
 8015582:	4613      	mov	r3, r2
 8015584:	005b      	lsls	r3, r3, #1
 8015586:	4413      	add	r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	4a52      	ldr	r2, [pc, #328]	; (80156d4 <uartAvailable+0x1c8>)
 801558c:	4413      	add	r3, r2
 801558e:	4618      	mov	r0, r3
 8015590:	f7f6 f820 	bl	800b5d4 <QueueAvailable>
 8015594:	60f8      	str	r0, [r7, #12]
      break;
 8015596:	e097      	b.n	80156c8 <uartAvailable+0x1bc>
    case _DEF_UART3:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart3_rx.Instance->NDTR);
 8015598:	79fa      	ldrb	r2, [r7, #7]
 801559a:	494e      	ldr	r1, [pc, #312]	; (80156d4 <uartAvailable+0x1c8>)
 801559c:	4613      	mov	r3, r2
 801559e:	005b      	lsls	r3, r3, #1
 80155a0:	4413      	add	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	440b      	add	r3, r1
 80155a6:	3306      	adds	r3, #6
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	b2d9      	uxtb	r1, r3
 80155ac:	4b4b      	ldr	r3, [pc, #300]	; (80156dc <uartAvailable+0x1d0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	79fa      	ldrb	r2, [r7, #7]
 80155b6:	1acb      	subs	r3, r1, r3
 80155b8:	b2d8      	uxtb	r0, r3
 80155ba:	4946      	ldr	r1, [pc, #280]	; (80156d4 <uartAvailable+0x1c8>)
 80155bc:	4613      	mov	r3, r2
 80155be:	005b      	lsls	r3, r3, #1
 80155c0:	4413      	add	r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	440b      	add	r3, r1
 80155c6:	3304      	adds	r3, #4
 80155c8:	4602      	mov	r2, r0
 80155ca:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 80155cc:	79fa      	ldrb	r2, [r7, #7]
 80155ce:	4613      	mov	r3, r2
 80155d0:	005b      	lsls	r3, r3, #1
 80155d2:	4413      	add	r3, r2
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	4a3f      	ldr	r2, [pc, #252]	; (80156d4 <uartAvailable+0x1c8>)
 80155d8:	4413      	add	r3, r2
 80155da:	4618      	mov	r0, r3
 80155dc:	f7f5 fffa 	bl	800b5d4 <QueueAvailable>
 80155e0:	60f8      	str	r0, [r7, #12]
      break;
 80155e2:	e071      	b.n	80156c8 <uartAvailable+0x1bc>

    case _DEF_UART4:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_uart4_rx.Instance->NDTR);
 80155e4:	79fa      	ldrb	r2, [r7, #7]
 80155e6:	493b      	ldr	r1, [pc, #236]	; (80156d4 <uartAvailable+0x1c8>)
 80155e8:	4613      	mov	r3, r2
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	4413      	add	r3, r2
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	440b      	add	r3, r1
 80155f2:	3306      	adds	r3, #6
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	b2d9      	uxtb	r1, r3
 80155f8:	4b39      	ldr	r3, [pc, #228]	; (80156e0 <uartAvailable+0x1d4>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	79fa      	ldrb	r2, [r7, #7]
 8015602:	1acb      	subs	r3, r1, r3
 8015604:	b2d8      	uxtb	r0, r3
 8015606:	4933      	ldr	r1, [pc, #204]	; (80156d4 <uartAvailable+0x1c8>)
 8015608:	4613      	mov	r3, r2
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	4413      	add	r3, r2
 801560e:	009b      	lsls	r3, r3, #2
 8015610:	440b      	add	r3, r1
 8015612:	3304      	adds	r3, #4
 8015614:	4602      	mov	r2, r0
 8015616:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 8015618:	79fa      	ldrb	r2, [r7, #7]
 801561a:	4613      	mov	r3, r2
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	4413      	add	r3, r2
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	4a2c      	ldr	r2, [pc, #176]	; (80156d4 <uartAvailable+0x1c8>)
 8015624:	4413      	add	r3, r2
 8015626:	4618      	mov	r0, r3
 8015628:	f7f5 ffd4 	bl	800b5d4 <QueueAvailable>
 801562c:	60f8      	str	r0, [r7, #12]
      break;
 801562e:	e04b      	b.n	80156c8 <uartAvailable+0x1bc>

    case _DEF_UART5:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_uart5_rx.Instance->NDTR);
 8015630:	79fa      	ldrb	r2, [r7, #7]
 8015632:	4928      	ldr	r1, [pc, #160]	; (80156d4 <uartAvailable+0x1c8>)
 8015634:	4613      	mov	r3, r2
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	4413      	add	r3, r2
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	440b      	add	r3, r1
 801563e:	3306      	adds	r3, #6
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	b2d9      	uxtb	r1, r3
 8015644:	4b27      	ldr	r3, [pc, #156]	; (80156e4 <uartAvailable+0x1d8>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	b2db      	uxtb	r3, r3
 801564c:	79fa      	ldrb	r2, [r7, #7]
 801564e:	1acb      	subs	r3, r1, r3
 8015650:	b2d8      	uxtb	r0, r3
 8015652:	4920      	ldr	r1, [pc, #128]	; (80156d4 <uartAvailable+0x1c8>)
 8015654:	4613      	mov	r3, r2
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	4413      	add	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	440b      	add	r3, r1
 801565e:	3304      	adds	r3, #4
 8015660:	4602      	mov	r2, r0
 8015662:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 8015664:	79fa      	ldrb	r2, [r7, #7]
 8015666:	4613      	mov	r3, r2
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	4413      	add	r3, r2
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	4a19      	ldr	r2, [pc, #100]	; (80156d4 <uartAvailable+0x1c8>)
 8015670:	4413      	add	r3, r2
 8015672:	4618      	mov	r0, r3
 8015674:	f7f5 ffae 	bl	800b5d4 <QueueAvailable>
 8015678:	60f8      	str	r0, [r7, #12]
      break;
 801567a:	e025      	b.n	80156c8 <uartAvailable+0x1bc>

    case _DEF_UART6:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart6_rx.Instance->NDTR);
 801567c:	79fa      	ldrb	r2, [r7, #7]
 801567e:	4915      	ldr	r1, [pc, #84]	; (80156d4 <uartAvailable+0x1c8>)
 8015680:	4613      	mov	r3, r2
 8015682:	005b      	lsls	r3, r3, #1
 8015684:	4413      	add	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	440b      	add	r3, r1
 801568a:	3306      	adds	r3, #6
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	b2d9      	uxtb	r1, r3
 8015690:	4b15      	ldr	r3, [pc, #84]	; (80156e8 <uartAvailable+0x1dc>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	b2db      	uxtb	r3, r3
 8015698:	79fa      	ldrb	r2, [r7, #7]
 801569a:	1acb      	subs	r3, r1, r3
 801569c:	b2d8      	uxtb	r0, r3
 801569e:	490d      	ldr	r1, [pc, #52]	; (80156d4 <uartAvailable+0x1c8>)
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	440b      	add	r3, r1
 80156aa:	3304      	adds	r3, #4
 80156ac:	4602      	mov	r2, r0
 80156ae:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 80156b0:	79fa      	ldrb	r2, [r7, #7]
 80156b2:	4613      	mov	r3, r2
 80156b4:	005b      	lsls	r3, r3, #1
 80156b6:	4413      	add	r3, r2
 80156b8:	009b      	lsls	r3, r3, #2
 80156ba:	4a06      	ldr	r2, [pc, #24]	; (80156d4 <uartAvailable+0x1c8>)
 80156bc:	4413      	add	r3, r2
 80156be:	4618      	mov	r0, r3
 80156c0:	f7f5 ff88 	bl	800b5d4 <QueueAvailable>
 80156c4:	60f8      	str	r0, [r7, #12]
      break;
 80156c6:	bf00      	nop
  }
  return ret;
 80156c8:	68fb      	ldr	r3, [r7, #12]
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	200019c4 	.word	0x200019c4
 80156d8:	20002104 	.word	0x20002104
 80156dc:	20002164 	.word	0x20002164
 80156e0:	200021c4 	.word	0x200021c4
 80156e4:	20002224 	.word	0x20002224
 80156e8:	20002284 	.word	0x20002284

080156ec <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	4603      	mov	r3, r0
 80156f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80156f6:	2300      	movs	r3, #0
 80156f8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80156fa:	79fb      	ldrb	r3, [r7, #7]
 80156fc:	2b06      	cmp	r3, #6
 80156fe:	d85c      	bhi.n	80157ba <uartRead+0xce>
 8015700:	a201      	add	r2, pc, #4	; (adr r2, 8015708 <uartRead+0x1c>)
 8015702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015706:	bf00      	nop
 8015708:	08015725 	.word	0x08015725
 801570c:	080157bb 	.word	0x080157bb
 8015710:	0801572f 	.word	0x0801572f
 8015714:	0801574b 	.word	0x0801574b
 8015718:	08015767 	.word	0x08015767
 801571c:	08015783 	.word	0x08015783
 8015720:	0801579f 	.word	0x0801579f
  {
    case _DEF_USB:
      ret = cdcRead();
 8015724:	f011 fe32 	bl	802738c <cdcRead>
 8015728:	4603      	mov	r3, r0
 801572a:	73fb      	strb	r3, [r7, #15]
      break;
 801572c:	e045      	b.n	80157ba <uartRead+0xce>

    case _DEF_UART2:
    	Q_read(&ring_buffer[ch], &ret, 1);
 801572e:	79fa      	ldrb	r2, [r7, #7]
 8015730:	4613      	mov	r3, r2
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	4413      	add	r3, r2
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	4a22      	ldr	r2, [pc, #136]	; (80157c4 <uartRead+0xd8>)
 801573a:	4413      	add	r3, r2
 801573c:	f107 010f 	add.w	r1, r7, #15
 8015740:	2201      	movs	r2, #1
 8015742:	4618      	mov	r0, r3
 8015744:	f7f5 ff08 	bl	800b558 <Q_read>
      break;
 8015748:	e037      	b.n	80157ba <uartRead+0xce>

    case _DEF_UART3:
    	Q_read(&ring_buffer[ch], &ret, 1);
 801574a:	79fa      	ldrb	r2, [r7, #7]
 801574c:	4613      	mov	r3, r2
 801574e:	005b      	lsls	r3, r3, #1
 8015750:	4413      	add	r3, r2
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	4a1b      	ldr	r2, [pc, #108]	; (80157c4 <uartRead+0xd8>)
 8015756:	4413      	add	r3, r2
 8015758:	f107 010f 	add.w	r1, r7, #15
 801575c:	2201      	movs	r2, #1
 801575e:	4618      	mov	r0, r3
 8015760:	f7f5 fefa 	bl	800b558 <Q_read>
      break;
 8015764:	e029      	b.n	80157ba <uartRead+0xce>

    case _DEF_UART4:
    	Q_read(&ring_buffer[ch], &ret, 1);
 8015766:	79fa      	ldrb	r2, [r7, #7]
 8015768:	4613      	mov	r3, r2
 801576a:	005b      	lsls	r3, r3, #1
 801576c:	4413      	add	r3, r2
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	4a14      	ldr	r2, [pc, #80]	; (80157c4 <uartRead+0xd8>)
 8015772:	4413      	add	r3, r2
 8015774:	f107 010f 	add.w	r1, r7, #15
 8015778:	2201      	movs	r2, #1
 801577a:	4618      	mov	r0, r3
 801577c:	f7f5 feec 	bl	800b558 <Q_read>
      break;
 8015780:	e01b      	b.n	80157ba <uartRead+0xce>

    case _DEF_UART5:
    	Q_read(&ring_buffer[ch], &ret, 1);
 8015782:	79fa      	ldrb	r2, [r7, #7]
 8015784:	4613      	mov	r3, r2
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	4413      	add	r3, r2
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	4a0d      	ldr	r2, [pc, #52]	; (80157c4 <uartRead+0xd8>)
 801578e:	4413      	add	r3, r2
 8015790:	f107 010f 	add.w	r1, r7, #15
 8015794:	2201      	movs	r2, #1
 8015796:	4618      	mov	r0, r3
 8015798:	f7f5 fede 	bl	800b558 <Q_read>
      break;
 801579c:	e00d      	b.n	80157ba <uartRead+0xce>

    case _DEF_UART6:
    	Q_read(&ring_buffer[ch], &ret, 1);
 801579e:	79fa      	ldrb	r2, [r7, #7]
 80157a0:	4613      	mov	r3, r2
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	4413      	add	r3, r2
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	4a06      	ldr	r2, [pc, #24]	; (80157c4 <uartRead+0xd8>)
 80157aa:	4413      	add	r3, r2
 80157ac:	f107 010f 	add.w	r1, r7, #15
 80157b0:	2201      	movs	r2, #1
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7f5 fed0 	bl	800b558 <Q_read>
      break;
 80157b8:	bf00      	nop
  }

  return ret;
 80157ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3710      	adds	r7, #16
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	200019c4 	.word	0x200019c4

080157c8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b086      	sub	sp, #24
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	4603      	mov	r3, r0
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
 80157d4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80157d6:	2300      	movs	r3, #0
 80157d8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 80157da:	7bfb      	ldrb	r3, [r7, #15]
 80157dc:	2b06      	cmp	r3, #6
 80157de:	d86b      	bhi.n	80158b8 <uartWrite+0xf0>
 80157e0:	a201      	add	r2, pc, #4	; (adr r2, 80157e8 <uartWrite+0x20>)
 80157e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e6:	bf00      	nop
 80157e8:	08015805 	.word	0x08015805
 80157ec:	080158b9 	.word	0x080158b9
 80157f0:	08015811 	.word	0x08015811
 80157f4:	0801582f 	.word	0x0801582f
 80157f8:	0801584d 	.word	0x0801584d
 80157fc:	0801586b 	.word	0x0801586b
 8015800:	08015889 	.word	0x08015889
  {

    case _DEF_USB:
      ret = cdcWrite(p_data, length);
 8015804:	6879      	ldr	r1, [r7, #4]
 8015806:	68b8      	ldr	r0, [r7, #8]
 8015808:	f011 fe16 	bl	8027438 <cdcWrite>
 801580c:	6178      	str	r0, [r7, #20]
      break; 
 801580e:	e053      	b.n	80158b8 <uartWrite+0xf0>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	b29a      	uxth	r2, r3
 8015814:	2364      	movs	r3, #100	; 0x64
 8015816:	68b9      	ldr	r1, [r7, #8]
 8015818:	482a      	ldr	r0, [pc, #168]	; (80158c4 <uartWrite+0xfc>)
 801581a:	f009 fdaa 	bl	801f372 <HAL_UART_Transmit>
 801581e:	4603      	mov	r3, r0
 8015820:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8015822:	7cfb      	ldrb	r3, [r7, #19]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d13e      	bne.n	80158a6 <uartWrite+0xde>
      {
        ret = length;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	617b      	str	r3, [r7, #20]
      }
      break;
 801582c:	e03b      	b.n	80158a6 <uartWrite+0xde>

    case _DEF_UART3:
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	b29a      	uxth	r2, r3
 8015832:	2364      	movs	r3, #100	; 0x64
 8015834:	68b9      	ldr	r1, [r7, #8]
 8015836:	4824      	ldr	r0, [pc, #144]	; (80158c8 <uartWrite+0x100>)
 8015838:	f009 fd9b 	bl	801f372 <HAL_UART_Transmit>
 801583c:	4603      	mov	r3, r0
 801583e:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8015840:	7cfb      	ldrb	r3, [r7, #19]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d131      	bne.n	80158aa <uartWrite+0xe2>
      {
        ret = length;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	617b      	str	r3, [r7, #20]
      }
      break;
 801584a:	e02e      	b.n	80158aa <uartWrite+0xe2>

    case _DEF_UART4:
      status = HAL_UART_Transmit(&huart4, p_data, length, 100);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	b29a      	uxth	r2, r3
 8015850:	2364      	movs	r3, #100	; 0x64
 8015852:	68b9      	ldr	r1, [r7, #8]
 8015854:	481d      	ldr	r0, [pc, #116]	; (80158cc <uartWrite+0x104>)
 8015856:	f009 fd8c 	bl	801f372 <HAL_UART_Transmit>
 801585a:	4603      	mov	r3, r0
 801585c:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 801585e:	7cfb      	ldrb	r3, [r7, #19]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d124      	bne.n	80158ae <uartWrite+0xe6>
      {
        ret = length;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	617b      	str	r3, [r7, #20]
      }
      break;
 8015868:	e021      	b.n	80158ae <uartWrite+0xe6>

    case _DEF_UART5:
      status = HAL_UART_Transmit(&huart5, p_data, length, 100);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	b29a      	uxth	r2, r3
 801586e:	2364      	movs	r3, #100	; 0x64
 8015870:	68b9      	ldr	r1, [r7, #8]
 8015872:	4817      	ldr	r0, [pc, #92]	; (80158d0 <uartWrite+0x108>)
 8015874:	f009 fd7d 	bl	801f372 <HAL_UART_Transmit>
 8015878:	4603      	mov	r3, r0
 801587a:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 801587c:	7cfb      	ldrb	r3, [r7, #19]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d117      	bne.n	80158b2 <uartWrite+0xea>
      {
        ret = length;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	617b      	str	r3, [r7, #20]
      }
      break;
 8015886:	e014      	b.n	80158b2 <uartWrite+0xea>

    case _DEF_UART6:
      status = HAL_UART_Transmit(&huart6, p_data, length, 100);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	b29a      	uxth	r2, r3
 801588c:	2364      	movs	r3, #100	; 0x64
 801588e:	68b9      	ldr	r1, [r7, #8]
 8015890:	4810      	ldr	r0, [pc, #64]	; (80158d4 <uartWrite+0x10c>)
 8015892:	f009 fd6e 	bl	801f372 <HAL_UART_Transmit>
 8015896:	4603      	mov	r3, r0
 8015898:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 801589a:	7cfb      	ldrb	r3, [r7, #19]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d10a      	bne.n	80158b6 <uartWrite+0xee>
      {
        ret = length;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80158a4:	e007      	b.n	80158b6 <uartWrite+0xee>
      break;
 80158a6:	bf00      	nop
 80158a8:	e006      	b.n	80158b8 <uartWrite+0xf0>
      break;
 80158aa:	bf00      	nop
 80158ac:	e004      	b.n	80158b8 <uartWrite+0xf0>
      break;
 80158ae:	bf00      	nop
 80158b0:	e002      	b.n	80158b8 <uartWrite+0xf0>
      break;
 80158b2:	bf00      	nop
 80158b4:	e000      	b.n	80158b8 <uartWrite+0xf0>
      break;
 80158b6:	bf00      	nop
  }

  return ret;
 80158b8:	697b      	ldr	r3, [r7, #20]
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3718      	adds	r7, #24
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}
 80158c2:	bf00      	nop
 80158c4:	20001f50 	.word	0x20001f50
 80158c8:	20001f94 	.word	0x20001f94
 80158cc:	20001fd8 	.word	0x20001fd8
 80158d0:	2000201c 	.word	0x2000201c
 80158d4:	20002060 	.word	0x20002060

080158d8 <serialPrint>:

  return ret;
}

void serialPrint(uint8_t channel, const char *str)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b084      	sub	sp, #16
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4603      	mov	r3, r0
 80158e0:	6039      	str	r1, [r7, #0]
 80158e2:	71fb      	strb	r3, [r7, #7]
    uint8_t ch;
    while ((ch = *(str++)) != 0) {
 80158e4:	e006      	b.n	80158f4 <serialPrint+0x1c>
      uartWrite(channel, &ch, 1);
 80158e6:	f107 010f 	add.w	r1, r7, #15
 80158ea:	79fb      	ldrb	r3, [r7, #7]
 80158ec:	2201      	movs	r2, #1
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7ff ff6a 	bl	80157c8 <uartWrite>
    while ((ch = *(str++)) != 0) {
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	1c5a      	adds	r2, r3, #1
 80158f8:	603a      	str	r2, [r7, #0]
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	73fb      	strb	r3, [r7, #15]
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d1f0      	bne.n	80158e6 <serialPrint+0xe>
    }
}
 8015904:	bf00      	nop
 8015906:	bf00      	nop
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 801590e:	b40e      	push	{r1, r2, r3}
 8015910:	b580      	push	{r7, lr}
 8015912:	b0c7      	sub	sp, #284	; 0x11c
 8015914:	af00      	add	r7, sp, #0
 8015916:	4602      	mov	r2, r0
 8015918:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801591c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8015920:	701a      	strb	r2, [r3, #0]
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8015922:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8015926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801592a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801592e:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, MAX_SIZE, fmt, args);
 8015930:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015934:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015938:	f107 0010 	add.w	r0, r7, #16
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015942:	21ff      	movs	r1, #255	; 0xff
 8015944:	f013 fb06 	bl	8028f54 <vsniprintf>
 8015948:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 801594c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015950:	f107 0110 	add.w	r1, r7, #16
 8015954:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015958:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	4618      	mov	r0, r3
 8015960:	f7ff ff32 	bl	80157c8 <uartWrite>
 8015964:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8015968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 801596c:	4618      	mov	r0, r3
 801596e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8015972:	46bd      	mov	sp, r7
 8015974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015978:	b003      	add	sp, #12
 801597a:	4770      	bx	lr

0801597c <uartGetBaud>:

  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8015986:	2300      	movs	r3, #0
 8015988:	60fb      	str	r3, [r7, #12]


  switch(ch)
 801598a:	79fb      	ldrb	r3, [r7, #7]
 801598c:	2b06      	cmp	r3, #6
 801598e:	d829      	bhi.n	80159e4 <uartGetBaud+0x68>
 8015990:	a201      	add	r2, pc, #4	; (adr r2, 8015998 <uartGetBaud+0x1c>)
 8015992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015996:	bf00      	nop
 8015998:	080159b5 	.word	0x080159b5
 801599c:	080159e5 	.word	0x080159e5
 80159a0:	080159bd 	.word	0x080159bd
 80159a4:	080159c5 	.word	0x080159c5
 80159a8:	080159cd 	.word	0x080159cd
 80159ac:	080159d5 	.word	0x080159d5
 80159b0:	080159dd 	.word	0x080159dd
  {
    case _DEF_USB:
      ret = cdcGetBaud();
 80159b4:	f011 fd68 	bl	8027488 <cdcGetBaud>
 80159b8:	60f8      	str	r0, [r7, #12]
      break;
 80159ba:	e013      	b.n	80159e4 <uartGetBaud+0x68>

    case _DEF_UART2:
      ret = huart2.Init.BaudRate;
 80159bc:	4b0c      	ldr	r3, [pc, #48]	; (80159f0 <uartGetBaud+0x74>)
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	60fb      	str	r3, [r7, #12]
      break;
 80159c2:	e00f      	b.n	80159e4 <uartGetBaud+0x68>

    case _DEF_UART3:
      ret = huart3.Init.BaudRate;
 80159c4:	4b0b      	ldr	r3, [pc, #44]	; (80159f4 <uartGetBaud+0x78>)
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	60fb      	str	r3, [r7, #12]
      break;
 80159ca:	e00b      	b.n	80159e4 <uartGetBaud+0x68>

    case _DEF_UART4:
      ret = huart4.Init.BaudRate;
 80159cc:	4b0a      	ldr	r3, [pc, #40]	; (80159f8 <uartGetBaud+0x7c>)
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	60fb      	str	r3, [r7, #12]
      break;
 80159d2:	e007      	b.n	80159e4 <uartGetBaud+0x68>

    case _DEF_UART5:
      ret = huart5.Init.BaudRate;
 80159d4:	4b09      	ldr	r3, [pc, #36]	; (80159fc <uartGetBaud+0x80>)
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	60fb      	str	r3, [r7, #12]
      break;
 80159da:	e003      	b.n	80159e4 <uartGetBaud+0x68>

    case _DEF_UART6:
      ret = huart6.Init.BaudRate;
 80159dc:	4b08      	ldr	r3, [pc, #32]	; (8015a00 <uartGetBaud+0x84>)
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	60fb      	str	r3, [r7, #12]
      break;
 80159e2:	bf00      	nop
  }

  return ret;
 80159e4:	68fb      	ldr	r3, [r7, #12]
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	20001f50 	.word	0x20001f50
 80159f4:	20001f94 	.word	0x20001f94
 80159f8:	20001fd8 	.word	0x20001fd8
 80159fc:	2000201c 	.word	0x2000201c
 8015a00:	20002060 	.word	0x20002060

08015a04 <uartSetBaud>:

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	6039      	str	r1, [r7, #0]
 8015a0e:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8015a14:	79fb      	ldrb	r3, [r7, #7]
 8015a16:	2b06      	cmp	r3, #6
 8015a18:	d86a      	bhi.n	8015af0 <uartSetBaud+0xec>
 8015a1a:	a201      	add	r2, pc, #4	; (adr r2, 8015a20 <uartSetBaud+0x1c>)
 8015a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a20:	08015a3d 	.word	0x08015a3d
 8015a24:	08015af1 	.word	0x08015af1
 8015a28:	08015a5b 	.word	0x08015a5b
 8015a2c:	08015a79 	.word	0x08015a79
 8015a30:	08015a97 	.word	0x08015a97
 8015a34:	08015ab5 	.word	0x08015ab5
 8015a38:	08015ad3 	.word	0x08015ad3
	{
    case _DEF_USB:
			huart2.Init.BaudRate = baud;
 8015a3c:	4a2f      	ldr	r2, [pc, #188]	; (8015afc <uartSetBaud+0xf8>)
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart2) != HAL_OK)
 8015a42:	482e      	ldr	r0, [pc, #184]	; (8015afc <uartSetBaud+0xf8>)
 8015a44:	f009 fc48 	bl	801f2d8 <HAL_UART_Init>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d002      	beq.n	8015a54 <uartSetBaud+0x50>
    	{
    	  Error_Handler();
 8015a4e:	f7f3 fca1 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015a52:	e04d      	b.n	8015af0 <uartSetBaud+0xec>
    		ret = true;
 8015a54:	2301      	movs	r3, #1
 8015a56:	73fb      	strb	r3, [r7, #15]
			break;
 8015a58:	e04a      	b.n	8015af0 <uartSetBaud+0xec>

		case _DEF_UART2:
			huart2.Init.BaudRate = baud;
 8015a5a:	4a28      	ldr	r2, [pc, #160]	; (8015afc <uartSetBaud+0xf8>)
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart2) != HAL_OK)
 8015a60:	4826      	ldr	r0, [pc, #152]	; (8015afc <uartSetBaud+0xf8>)
 8015a62:	f009 fc39 	bl	801f2d8 <HAL_UART_Init>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d002      	beq.n	8015a72 <uartSetBaud+0x6e>
    	{
    	  Error_Handler();
 8015a6c:	f7f3 fc92 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015a70:	e03e      	b.n	8015af0 <uartSetBaud+0xec>
    		ret = true;
 8015a72:	2301      	movs	r3, #1
 8015a74:	73fb      	strb	r3, [r7, #15]
			break;
 8015a76:	e03b      	b.n	8015af0 <uartSetBaud+0xec>

    case _DEF_UART3:
			huart3.Init.BaudRate = baud;
 8015a78:	4a21      	ldr	r2, [pc, #132]	; (8015b00 <uartSetBaud+0xfc>)
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart3) != HAL_OK)
 8015a7e:	4820      	ldr	r0, [pc, #128]	; (8015b00 <uartSetBaud+0xfc>)
 8015a80:	f009 fc2a 	bl	801f2d8 <HAL_UART_Init>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d002      	beq.n	8015a90 <uartSetBaud+0x8c>
    	{
    	  Error_Handler();
 8015a8a:	f7f3 fc83 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015a8e:	e02f      	b.n	8015af0 <uartSetBaud+0xec>
    		ret = true;
 8015a90:	2301      	movs	r3, #1
 8015a92:	73fb      	strb	r3, [r7, #15]
			break;
 8015a94:	e02c      	b.n	8015af0 <uartSetBaud+0xec>

    case _DEF_UART4:
			huart4.Init.BaudRate = baud;
 8015a96:	4a1b      	ldr	r2, [pc, #108]	; (8015b04 <uartSetBaud+0x100>)
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart4) != HAL_OK)
 8015a9c:	4819      	ldr	r0, [pc, #100]	; (8015b04 <uartSetBaud+0x100>)
 8015a9e:	f009 fc1b 	bl	801f2d8 <HAL_UART_Init>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d002      	beq.n	8015aae <uartSetBaud+0xaa>
    	{
    	  Error_Handler();
 8015aa8:	f7f3 fc74 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015aac:	e020      	b.n	8015af0 <uartSetBaud+0xec>
    		ret = true;
 8015aae:	2301      	movs	r3, #1
 8015ab0:	73fb      	strb	r3, [r7, #15]
			break;
 8015ab2:	e01d      	b.n	8015af0 <uartSetBaud+0xec>

    case _DEF_UART5:
			huart5.Init.BaudRate = baud;
 8015ab4:	4a14      	ldr	r2, [pc, #80]	; (8015b08 <uartSetBaud+0x104>)
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart5) != HAL_OK)
 8015aba:	4813      	ldr	r0, [pc, #76]	; (8015b08 <uartSetBaud+0x104>)
 8015abc:	f009 fc0c 	bl	801f2d8 <HAL_UART_Init>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d002      	beq.n	8015acc <uartSetBaud+0xc8>
    	{
    	  Error_Handler();
 8015ac6:	f7f3 fc65 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015aca:	e011      	b.n	8015af0 <uartSetBaud+0xec>
    		ret = true;
 8015acc:	2301      	movs	r3, #1
 8015ace:	73fb      	strb	r3, [r7, #15]
			break;
 8015ad0:	e00e      	b.n	8015af0 <uartSetBaud+0xec>

    case _DEF_UART6:
			huart6.Init.BaudRate = baud;
 8015ad2:	4a0e      	ldr	r2, [pc, #56]	; (8015b0c <uartSetBaud+0x108>)
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart6) != HAL_OK)
 8015ad8:	480c      	ldr	r0, [pc, #48]	; (8015b0c <uartSetBaud+0x108>)
 8015ada:	f009 fbfd 	bl	801f2d8 <HAL_UART_Init>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d002      	beq.n	8015aea <uartSetBaud+0xe6>
    	{
    	  Error_Handler();
 8015ae4:	f7f3 fc56 	bl	8009394 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 8015ae8:	e001      	b.n	8015aee <uartSetBaud+0xea>
    		ret = true;
 8015aea:	2301      	movs	r3, #1
 8015aec:	73fb      	strb	r3, [r7, #15]
			break;
 8015aee:	bf00      	nop
	}

	return ret;
 8015af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3710      	adds	r7, #16
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	20001f50 	.word	0x20001f50
 8015b00:	20001f94 	.word	0x20001f94
 8015b04:	20001fd8 	.word	0x20001fd8
 8015b08:	2000201c 	.word	0x2000201c
 8015b0c:	20002060 	.word	0x20002060

08015b10 <lookupBaudRateIndex>:

baudRate_e lookupBaudRateIndex(uint32_t baudRate)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
    uint8_t index;

    for (index = 0; index < BAUD_RATE_COUNT; index++) {
 8015b18:	2300      	movs	r3, #0
 8015b1a:	73fb      	strb	r3, [r7, #15]
 8015b1c:	e00b      	b.n	8015b36 <lookupBaudRateIndex+0x26>
        if (baudRates[index] == baudRate) {
 8015b1e:	7bfb      	ldrb	r3, [r7, #15]
 8015b20:	4a0a      	ldr	r2, [pc, #40]	; (8015b4c <lookupBaudRateIndex+0x3c>)
 8015b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b26:	687a      	ldr	r2, [r7, #4]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d101      	bne.n	8015b30 <lookupBaudRateIndex+0x20>
            return index;
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
 8015b2e:	e006      	b.n	8015b3e <lookupBaudRateIndex+0x2e>
    for (index = 0; index < BAUD_RATE_COUNT; index++) {
 8015b30:	7bfb      	ldrb	r3, [r7, #15]
 8015b32:	3301      	adds	r3, #1
 8015b34:	73fb      	strb	r3, [r7, #15]
 8015b36:	7bfb      	ldrb	r3, [r7, #15]
 8015b38:	2b0f      	cmp	r3, #15
 8015b3a:	d9f0      	bls.n	8015b1e <lookupBaudRateIndex+0xe>
        }
    }
    return BAUD_AUTO;
 8015b3c:	2300      	movs	r3, #0
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3714      	adds	r7, #20
 8015b42:	46bd      	mov	sp, r7
 8015b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b48:	4770      	bx	lr
 8015b4a:	bf00      	nop
 8015b4c:	0802cb20 	.word	0x0802cb20

08015b50 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }

  if(huart->ErrorCode == HAL_UART_ERROR_FE) //current USART
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  {
    //HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
  }
  if(huart->ErrorCode == HAL_UART_ERROR_NE) //current USART
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  {
    //HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
  }
}
 8015b60:	bf00      	nop
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8015b6c:	b480      	push	{r7}
 8015b6e:	b083      	sub	sp, #12
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
  //   Q_write(&ring_buffer[_DEF_UART2], &u2_rx_buf[0], 1);
  //   cliPrintf("%d",u2_rx_buf[0]);
  // }
}
 8015b74:	bf00      	nop
 8015b76:	370c      	adds	r7, #12
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b094      	sub	sp, #80	; 0x50
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	601a      	str	r2, [r3, #0]
 8015b90:	605a      	str	r2, [r3, #4]
 8015b92:	609a      	str	r2, [r3, #8]
 8015b94:	60da      	str	r2, [r3, #12]
 8015b96:	611a      	str	r2, [r3, #16]
 if(uartHandle->Instance==USART1)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	4a9d      	ldr	r2, [pc, #628]	; (8015e14 <HAL_UART_MspInit+0x294>)
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	d164      	bne.n	8015c6c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ba6:	4b9c      	ldr	r3, [pc, #624]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015baa:	4a9b      	ldr	r2, [pc, #620]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015bac:	f043 0310 	orr.w	r3, r3, #16
 8015bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8015bb2:	4b99      	ldr	r3, [pc, #612]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bb6:	f003 0310 	and.w	r3, r3, #16
 8015bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8015bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8015bc2:	4b95      	ldr	r3, [pc, #596]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bc6:	4a94      	ldr	r2, [pc, #592]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015bc8:	f043 0301 	orr.w	r3, r3, #1
 8015bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8015bce:	4b92      	ldr	r3, [pc, #584]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bd2:	f003 0301 	and.w	r3, r3, #1
 8015bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8015bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8015bda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8015bde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015be0:	2302      	movs	r3, #2
 8015be2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015be4:	2300      	movs	r3, #0
 8015be6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015be8:	2303      	movs	r3, #3
 8015bea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015bec:	2307      	movs	r3, #7
 8015bee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015bf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	4889      	ldr	r0, [pc, #548]	; (8015e1c <HAL_UART_MspInit+0x29c>)
 8015bf8:	f003 fdd4 	bl	80197a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8015bfc:	4b88      	ldr	r3, [pc, #544]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015bfe:	4a89      	ldr	r2, [pc, #548]	; (8015e24 <HAL_UART_MspInit+0x2a4>)
 8015c00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8015c02:	4b87      	ldr	r3, [pc, #540]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015c0a:	4b85      	ldr	r3, [pc, #532]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015c10:	4b83      	ldr	r3, [pc, #524]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c12:	2200      	movs	r2, #0
 8015c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015c16:	4b82      	ldr	r3, [pc, #520]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015c1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015c1e:	4b80      	ldr	r3, [pc, #512]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c20:	2200      	movs	r2, #0
 8015c22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015c24:	4b7e      	ldr	r3, [pc, #504]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c26:	2200      	movs	r2, #0
 8015c28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8015c2a:	4b7d      	ldr	r3, [pc, #500]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015c30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015c32:	4b7b      	ldr	r3, [pc, #492]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c34:	2200      	movs	r2, #0
 8015c36:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015c38:	4b79      	ldr	r3, [pc, #484]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8015c3e:	4878      	ldr	r0, [pc, #480]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c40:	f002 fec8 	bl	80189d4 <HAL_DMA_Init>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d001      	beq.n	8015c4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8015c4a:	f7f3 fba3 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	4a73      	ldr	r2, [pc, #460]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c52:	639a      	str	r2, [r3, #56]	; 0x38
 8015c54:	4a72      	ldr	r2, [pc, #456]	; (8015e20 <HAL_UART_MspInit+0x2a0>)
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	2025      	movs	r0, #37	; 0x25
 8015c60:	f002 fe7b 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8015c64:	2025      	movs	r0, #37	; 0x25
 8015c66:	f002 fe94 	bl	8018992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8015c6a:	e259      	b.n	8016120 <HAL_UART_MspInit+0x5a0>
  }else if(uartHandle->Instance==USART2)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	4a6d      	ldr	r2, [pc, #436]	; (8015e28 <HAL_UART_MspInit+0x2a8>)
 8015c72:	4293      	cmp	r3, r2
 8015c74:	d163      	bne.n	8015d3e <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 8015c76:	2300      	movs	r3, #0
 8015c78:	633b      	str	r3, [r7, #48]	; 0x30
 8015c7a:	4b67      	ldr	r3, [pc, #412]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c7e:	4a66      	ldr	r2, [pc, #408]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c84:	6413      	str	r3, [r2, #64]	; 0x40
 8015c86:	4b64      	ldr	r3, [pc, #400]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c92:	2300      	movs	r3, #0
 8015c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c96:	4b60      	ldr	r3, [pc, #384]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c9a:	4a5f      	ldr	r2, [pc, #380]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015c9c:	f043 0301 	orr.w	r3, r3, #1
 8015ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8015ca2:	4b5d      	ldr	r3, [pc, #372]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca6:	f003 0301 	and.w	r3, r3, #1
 8015caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8015cae:	230c      	movs	r3, #12
 8015cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cb2:	2302      	movs	r3, #2
 8015cb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cba:	2303      	movs	r3, #3
 8015cbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015cbe:	2307      	movs	r3, #7
 8015cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015cc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	4854      	ldr	r0, [pc, #336]	; (8015e1c <HAL_UART_MspInit+0x29c>)
 8015cca:	f003 fd6b 	bl	80197a4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8015cce:	4b57      	ldr	r3, [pc, #348]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cd0:	4a57      	ldr	r2, [pc, #348]	; (8015e30 <HAL_UART_MspInit+0x2b0>)
 8015cd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8015cd4:	4b55      	ldr	r3, [pc, #340]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015cda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015cdc:	4b53      	ldr	r3, [pc, #332]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cde:	2200      	movs	r2, #0
 8015ce0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015ce2:	4b52      	ldr	r3, [pc, #328]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015ce8:	4b50      	ldr	r3, [pc, #320]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015cee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015cf0:	4b4e      	ldr	r3, [pc, #312]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015cf6:	4b4d      	ldr	r3, [pc, #308]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8015cfc:	4b4b      	ldr	r3, [pc, #300]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015d02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015d04:	4b49      	ldr	r3, [pc, #292]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015d06:	2200      	movs	r2, #0
 8015d08:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015d0a:	4b48      	ldr	r3, [pc, #288]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8015d10:	4846      	ldr	r0, [pc, #280]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015d12:	f002 fe5f 	bl	80189d4 <HAL_DMA_Init>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d001      	beq.n	8015d20 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8015d1c:	f7f3 fb3a 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4a42      	ldr	r2, [pc, #264]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015d24:	639a      	str	r2, [r3, #56]	; 0x38
 8015d26:	4a41      	ldr	r2, [pc, #260]	; (8015e2c <HAL_UART_MspInit+0x2ac>)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	2100      	movs	r1, #0
 8015d30:	2026      	movs	r0, #38	; 0x26
 8015d32:	f002 fe12 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8015d36:	2026      	movs	r0, #38	; 0x26
 8015d38:	f002 fe2b 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8015d3c:	e1f0      	b.n	8016120 <HAL_UART_MspInit+0x5a0>
  }else if(uartHandle->Instance==USART3)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	4a3c      	ldr	r2, [pc, #240]	; (8015e34 <HAL_UART_MspInit+0x2b4>)
 8015d44:	4293      	cmp	r3, r2
 8015d46:	d17d      	bne.n	8015e44 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8015d48:	2300      	movs	r3, #0
 8015d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d4c:	4b32      	ldr	r3, [pc, #200]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d50:	4a31      	ldr	r2, [pc, #196]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015d56:	6413      	str	r3, [r2, #64]	; 0x40
 8015d58:	4b2f      	ldr	r3, [pc, #188]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015d64:	2300      	movs	r3, #0
 8015d66:	627b      	str	r3, [r7, #36]	; 0x24
 8015d68:	4b2b      	ldr	r3, [pc, #172]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d6c:	4a2a      	ldr	r2, [pc, #168]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d6e:	f043 0304 	orr.w	r3, r3, #4
 8015d72:	6313      	str	r3, [r2, #48]	; 0x30
 8015d74:	4b28      	ldr	r3, [pc, #160]	; (8015e18 <HAL_UART_MspInit+0x298>)
 8015d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d78:	f003 0304 	and.w	r3, r3, #4
 8015d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8015d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8015d80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d86:	2302      	movs	r3, #2
 8015d88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d8e:	2303      	movs	r3, #3
 8015d90:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8015d92:	2307      	movs	r3, #7
 8015d94:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015d96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	4826      	ldr	r0, [pc, #152]	; (8015e38 <HAL_UART_MspInit+0x2b8>)
 8015d9e:	f003 fd01 	bl	80197a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8015da2:	4b26      	ldr	r3, [pc, #152]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015da4:	4a26      	ldr	r2, [pc, #152]	; (8015e40 <HAL_UART_MspInit+0x2c0>)
 8015da6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8015da8:	4b24      	ldr	r3, [pc, #144]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015dae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015db0:	4b22      	ldr	r3, [pc, #136]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015db2:	2200      	movs	r2, #0
 8015db4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015db6:	4b21      	ldr	r3, [pc, #132]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015db8:	2200      	movs	r2, #0
 8015dba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015dbc:	4b1f      	ldr	r3, [pc, #124]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015dc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015dc4:	4b1d      	ldr	r3, [pc, #116]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015dca:	4b1c      	ldr	r3, [pc, #112]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dcc:	2200      	movs	r2, #0
 8015dce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8015dd0:	4b1a      	ldr	r3, [pc, #104]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015dd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015dd8:	4b18      	ldr	r3, [pc, #96]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dda:	2200      	movs	r2, #0
 8015ddc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015dde:	4b17      	ldr	r3, [pc, #92]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015de0:	2200      	movs	r2, #0
 8015de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8015de4:	4815      	ldr	r0, [pc, #84]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015de6:	f002 fdf5 	bl	80189d4 <HAL_DMA_Init>
 8015dea:	4603      	mov	r3, r0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d001      	beq.n	8015df4 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8015df0:	f7f3 fad0 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	4a11      	ldr	r2, [pc, #68]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015df8:	639a      	str	r2, [r3, #56]	; 0x38
 8015dfa:	4a10      	ldr	r2, [pc, #64]	; (8015e3c <HAL_UART_MspInit+0x2bc>)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8015e00:	2200      	movs	r2, #0
 8015e02:	2100      	movs	r1, #0
 8015e04:	2027      	movs	r0, #39	; 0x27
 8015e06:	f002 fda8 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8015e0a:	2027      	movs	r0, #39	; 0x27
 8015e0c:	f002 fdc1 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8015e10:	e186      	b.n	8016120 <HAL_UART_MspInit+0x5a0>
 8015e12:	bf00      	nop
 8015e14:	40011000 	.word	0x40011000
 8015e18:	40023800 	.word	0x40023800
 8015e1c:	40020000 	.word	0x40020000
 8015e20:	200020a4 	.word	0x200020a4
 8015e24:	40026488 	.word	0x40026488
 8015e28:	40004400 	.word	0x40004400
 8015e2c:	20002104 	.word	0x20002104
 8015e30:	40026088 	.word	0x40026088
 8015e34:	40004800 	.word	0x40004800
 8015e38:	40020800 	.word	0x40020800
 8015e3c:	20002164 	.word	0x20002164
 8015e40:	40026028 	.word	0x40026028
  }else if(uartHandle->Instance==UART4)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	4a77      	ldr	r2, [pc, #476]	; (8016028 <HAL_UART_MspInit+0x4a8>)
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d163      	bne.n	8015f16 <HAL_UART_MspInit+0x396>
    __HAL_RCC_UART4_CLK_ENABLE();
 8015e4e:	2300      	movs	r3, #0
 8015e50:	623b      	str	r3, [r7, #32]
 8015e52:	4b76      	ldr	r3, [pc, #472]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e56:	4a75      	ldr	r2, [pc, #468]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8015e5e:	4b73      	ldr	r3, [pc, #460]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015e66:	623b      	str	r3, [r7, #32]
 8015e68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	61fb      	str	r3, [r7, #28]
 8015e6e:	4b6f      	ldr	r3, [pc, #444]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e72:	4a6e      	ldr	r2, [pc, #440]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e74:	f043 0301 	orr.w	r3, r3, #1
 8015e78:	6313      	str	r3, [r2, #48]	; 0x30
 8015e7a:	4b6c      	ldr	r3, [pc, #432]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7e:	f003 0301 	and.w	r3, r3, #1
 8015e82:	61fb      	str	r3, [r7, #28]
 8015e84:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8015e86:	2303      	movs	r3, #3
 8015e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e8a:	2302      	movs	r3, #2
 8015e8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e92:	2303      	movs	r3, #3
 8015e94:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8015e96:	2308      	movs	r3, #8
 8015e98:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	4863      	ldr	r0, [pc, #396]	; (8016030 <HAL_UART_MspInit+0x4b0>)
 8015ea2:	f003 fc7f 	bl	80197a4 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8015ea6:	4b63      	ldr	r3, [pc, #396]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ea8:	4a63      	ldr	r2, [pc, #396]	; (8016038 <HAL_UART_MspInit+0x4b8>)
 8015eaa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8015eac:	4b61      	ldr	r3, [pc, #388]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015eb2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015eb4:	4b5f      	ldr	r3, [pc, #380]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015eba:	4b5e      	ldr	r3, [pc, #376]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015ec0:	4b5c      	ldr	r3, [pc, #368]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ec6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015ec8:	4b5a      	ldr	r3, [pc, #360]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015ece:	4b59      	ldr	r3, [pc, #356]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8015ed4:	4b57      	ldr	r3, [pc, #348]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015eda:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015edc:	4b55      	ldr	r3, [pc, #340]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ede:	2200      	movs	r2, #0
 8015ee0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015ee2:	4b54      	ldr	r3, [pc, #336]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8015ee8:	4852      	ldr	r0, [pc, #328]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015eea:	f002 fd73 	bl	80189d4 <HAL_DMA_Init>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d001      	beq.n	8015ef8 <HAL_UART_MspInit+0x378>
      Error_Handler();
 8015ef4:	f7f3 fa4e 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	4a4e      	ldr	r2, [pc, #312]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015efc:	639a      	str	r2, [r3, #56]	; 0x38
 8015efe:	4a4d      	ldr	r2, [pc, #308]	; (8016034 <HAL_UART_MspInit+0x4b4>)
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8015f04:	2200      	movs	r2, #0
 8015f06:	2100      	movs	r1, #0
 8015f08:	2034      	movs	r0, #52	; 0x34
 8015f0a:	f002 fd26 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8015f0e:	2034      	movs	r0, #52	; 0x34
 8015f10:	f002 fd3f 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8015f14:	e104      	b.n	8016120 <HAL_UART_MspInit+0x5a0>
  else if(uartHandle->Instance==UART5)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4a48      	ldr	r2, [pc, #288]	; (801603c <HAL_UART_MspInit+0x4bc>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	f040 8097 	bne.w	8016050 <HAL_UART_MspInit+0x4d0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8015f22:	2300      	movs	r3, #0
 8015f24:	61bb      	str	r3, [r7, #24]
 8015f26:	4b41      	ldr	r3, [pc, #260]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2a:	4a40      	ldr	r2, [pc, #256]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f30:	6413      	str	r3, [r2, #64]	; 0x40
 8015f32:	4b3e      	ldr	r3, [pc, #248]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015f3a:	61bb      	str	r3, [r7, #24]
 8015f3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015f3e:	2300      	movs	r3, #0
 8015f40:	617b      	str	r3, [r7, #20]
 8015f42:	4b3a      	ldr	r3, [pc, #232]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f46:	4a39      	ldr	r2, [pc, #228]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f48:	f043 0304 	orr.w	r3, r3, #4
 8015f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8015f4e:	4b37      	ldr	r3, [pc, #220]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f52:	f003 0304 	and.w	r3, r3, #4
 8015f56:	617b      	str	r3, [r7, #20]
 8015f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	613b      	str	r3, [r7, #16]
 8015f5e:	4b33      	ldr	r3, [pc, #204]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f62:	4a32      	ldr	r2, [pc, #200]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f64:	f043 0308 	orr.w	r3, r3, #8
 8015f68:	6313      	str	r3, [r2, #48]	; 0x30
 8015f6a:	4b30      	ldr	r3, [pc, #192]	; (801602c <HAL_UART_MspInit+0x4ac>)
 8015f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f6e:	f003 0308 	and.w	r3, r3, #8
 8015f72:	613b      	str	r3, [r7, #16]
 8015f74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8015f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f7c:	2302      	movs	r3, #2
 8015f7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f80:	2300      	movs	r3, #0
 8015f82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f84:	2303      	movs	r3, #3
 8015f86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8015f88:	2308      	movs	r3, #8
 8015f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015f8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015f90:	4619      	mov	r1, r3
 8015f92:	482b      	ldr	r0, [pc, #172]	; (8016040 <HAL_UART_MspInit+0x4c0>)
 8015f94:	f003 fc06 	bl	80197a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015f98:	2304      	movs	r3, #4
 8015f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015fa4:	2303      	movs	r3, #3
 8015fa6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8015fa8:	2308      	movs	r3, #8
 8015faa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015fac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	4824      	ldr	r0, [pc, #144]	; (8016044 <HAL_UART_MspInit+0x4c4>)
 8015fb4:	f003 fbf6 	bl	80197a4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8015fb8:	4b23      	ldr	r3, [pc, #140]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fba:	4a24      	ldr	r2, [pc, #144]	; (801604c <HAL_UART_MspInit+0x4cc>)
 8015fbc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8015fbe:	4b22      	ldr	r3, [pc, #136]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015fc4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015fc6:	4b20      	ldr	r3, [pc, #128]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fc8:	2200      	movs	r2, #0
 8015fca:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015fcc:	4b1e      	ldr	r3, [pc, #120]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fce:	2200      	movs	r2, #0
 8015fd0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015fd2:	4b1d      	ldr	r3, [pc, #116]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015fd8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015fda:	4b1b      	ldr	r3, [pc, #108]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fdc:	2200      	movs	r2, #0
 8015fde:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015fe0:	4b19      	ldr	r3, [pc, #100]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8015fe6:	4b18      	ldr	r3, [pc, #96]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fec:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015fee:	4b16      	ldr	r3, [pc, #88]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015ff4:	4b14      	ldr	r3, [pc, #80]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8015ffa:	4813      	ldr	r0, [pc, #76]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8015ffc:	f002 fcea 	bl	80189d4 <HAL_DMA_Init>
 8016000:	4603      	mov	r3, r0
 8016002:	2b00      	cmp	r3, #0
 8016004:	d001      	beq.n	801600a <HAL_UART_MspInit+0x48a>
      Error_Handler();
 8016006:	f7f3 f9c5 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4a0e      	ldr	r2, [pc, #56]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 801600e:	639a      	str	r2, [r3, #56]	; 0x38
 8016010:	4a0d      	ldr	r2, [pc, #52]	; (8016048 <HAL_UART_MspInit+0x4c8>)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8016016:	2200      	movs	r2, #0
 8016018:	2100      	movs	r1, #0
 801601a:	2035      	movs	r0, #53	; 0x35
 801601c:	f002 fc9d 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8016020:	2035      	movs	r0, #53	; 0x35
 8016022:	f002 fcb6 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8016026:	e07b      	b.n	8016120 <HAL_UART_MspInit+0x5a0>
 8016028:	40004c00 	.word	0x40004c00
 801602c:	40023800 	.word	0x40023800
 8016030:	40020000 	.word	0x40020000
 8016034:	200021c4 	.word	0x200021c4
 8016038:	40026040 	.word	0x40026040
 801603c:	40005000 	.word	0x40005000
 8016040:	40020800 	.word	0x40020800
 8016044:	40020c00 	.word	0x40020c00
 8016048:	20002224 	.word	0x20002224
 801604c:	40026010 	.word	0x40026010
  }else if(uartHandle->Instance==USART6)
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	4a34      	ldr	r2, [pc, #208]	; (8016128 <HAL_UART_MspInit+0x5a8>)
 8016056:	4293      	cmp	r3, r2
 8016058:	d162      	bne.n	8016120 <HAL_UART_MspInit+0x5a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 801605a:	2300      	movs	r3, #0
 801605c:	60fb      	str	r3, [r7, #12]
 801605e:	4b33      	ldr	r3, [pc, #204]	; (801612c <HAL_UART_MspInit+0x5ac>)
 8016060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016062:	4a32      	ldr	r2, [pc, #200]	; (801612c <HAL_UART_MspInit+0x5ac>)
 8016064:	f043 0320 	orr.w	r3, r3, #32
 8016068:	6453      	str	r3, [r2, #68]	; 0x44
 801606a:	4b30      	ldr	r3, [pc, #192]	; (801612c <HAL_UART_MspInit+0x5ac>)
 801606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801606e:	f003 0320 	and.w	r3, r3, #32
 8016072:	60fb      	str	r3, [r7, #12]
 8016074:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016076:	2300      	movs	r3, #0
 8016078:	60bb      	str	r3, [r7, #8]
 801607a:	4b2c      	ldr	r3, [pc, #176]	; (801612c <HAL_UART_MspInit+0x5ac>)
 801607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801607e:	4a2b      	ldr	r2, [pc, #172]	; (801612c <HAL_UART_MspInit+0x5ac>)
 8016080:	f043 0304 	orr.w	r3, r3, #4
 8016084:	6313      	str	r3, [r2, #48]	; 0x30
 8016086:	4b29      	ldr	r3, [pc, #164]	; (801612c <HAL_UART_MspInit+0x5ac>)
 8016088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801608a:	f003 0304 	and.w	r3, r3, #4
 801608e:	60bb      	str	r3, [r7, #8]
 8016090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8016092:	23c0      	movs	r3, #192	; 0xc0
 8016094:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016096:	2302      	movs	r3, #2
 8016098:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801609a:	2300      	movs	r3, #0
 801609c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801609e:	2303      	movs	r3, #3
 80160a0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80160a2:	2308      	movs	r3, #8
 80160a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80160a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80160aa:	4619      	mov	r1, r3
 80160ac:	4820      	ldr	r0, [pc, #128]	; (8016130 <HAL_UART_MspInit+0x5b0>)
 80160ae:	f003 fb79 	bl	80197a4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80160b2:	4b20      	ldr	r3, [pc, #128]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160b4:	4a20      	ldr	r2, [pc, #128]	; (8016138 <HAL_UART_MspInit+0x5b8>)
 80160b6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80160b8:	4b1e      	ldr	r3, [pc, #120]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160ba:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80160be:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80160c0:	4b1c      	ldr	r3, [pc, #112]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80160c6:	4b1b      	ldr	r3, [pc, #108]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160c8:	2200      	movs	r2, #0
 80160ca:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80160cc:	4b19      	ldr	r3, [pc, #100]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160d2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80160d4:	4b17      	ldr	r3, [pc, #92]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80160da:	4b16      	ldr	r3, [pc, #88]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160dc:	2200      	movs	r2, #0
 80160de:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80160e0:	4b14      	ldr	r3, [pc, #80]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80160e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80160e8:	4b12      	ldr	r3, [pc, #72]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160ea:	2200      	movs	r2, #0
 80160ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80160ee:	4b11      	ldr	r3, [pc, #68]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160f0:	2200      	movs	r2, #0
 80160f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80160f4:	480f      	ldr	r0, [pc, #60]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 80160f6:	f002 fc6d 	bl	80189d4 <HAL_DMA_Init>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <HAL_UART_MspInit+0x584>
      Error_Handler();
 8016100:	f7f3 f948 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	4a0b      	ldr	r2, [pc, #44]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 8016108:	639a      	str	r2, [r3, #56]	; 0x38
 801610a:	4a0a      	ldr	r2, [pc, #40]	; (8016134 <HAL_UART_MspInit+0x5b4>)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8016110:	2200      	movs	r2, #0
 8016112:	2100      	movs	r1, #0
 8016114:	2047      	movs	r0, #71	; 0x47
 8016116:	f002 fc20 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801611a:	2047      	movs	r0, #71	; 0x47
 801611c:	f002 fc39 	bl	8018992 <HAL_NVIC_EnableIRQ>
}
 8016120:	bf00      	nop
 8016122:	3750      	adds	r7, #80	; 0x50
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	40011400 	.word	0x40011400
 801612c:	40023800 	.word	0x40023800
 8016130:	40020800 	.word	0x40020800
 8016134:	20002284 	.word	0x20002284
 8016138:	40026428 	.word	0x40026428

0801613c <usbInit>:
#ifdef _USE_HW_USB
#include "usb_device.h"


bool usbInit(void)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
  bool ret = true;
 8016142:	2301      	movs	r3, #1
 8016144:	71fb      	strb	r3, [r7, #7]

  MX_USB_DEVICE_Init();
 8016146:	f011 f8d3 	bl	80272f0 <MX_USB_DEVICE_Init>

  return ret;
 801614a:	79fb      	ldrb	r3, [r7, #7]
}
 801614c:	4618      	mov	r0, r3
 801614e:	3708      	adds	r7, #8
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}

08016154 <registerRead>:

static uint8_t buf[6];

// Helper functions
static uint8_t registerRead(const baroDev_t *dev, uint8_t reg)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b086      	sub	sp, #24
 8016158:	af02      	add	r7, sp, #8
 801615a:	6078      	str	r0, [r7, #4]
 801615c:	460b      	mov	r3, r1
 801615e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf_temp[1];
    I2C_ByteRead(dev->address, reg, 1, buf_temp, 1);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	785b      	ldrb	r3, [r3, #1]
 8016164:	b298      	uxth	r0, r3
 8016166:	78fb      	ldrb	r3, [r7, #3]
 8016168:	b299      	uxth	r1, r3
 801616a:	f107 030c 	add.w	r3, r7, #12
 801616e:	2201      	movs	r2, #1
 8016170:	9200      	str	r2, [sp, #0]
 8016172:	2201      	movs	r2, #1
 8016174:	f7fd fac4 	bl	8013700 <I2C_ByteRead>
    return buf_temp[0];
 8016178:	7b3b      	ldrb	r3, [r7, #12]
}
 801617a:	4618      	mov	r0, r3
 801617c:	3710      	adds	r7, #16
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}

08016182 <registerWrite>:

static void registerWrite(const baroDev_t *dev, uint8_t reg, uint8_t value)
{
 8016182:	b580      	push	{r7, lr}
 8016184:	b084      	sub	sp, #16
 8016186:	af02      	add	r7, sp, #8
 8016188:	6078      	str	r0, [r7, #4]
 801618a:	460b      	mov	r3, r1
 801618c:	70fb      	strb	r3, [r7, #3]
 801618e:	4613      	mov	r3, r2
 8016190:	70bb      	strb	r3, [r7, #2]
    I2C_ByteWrite_HAL(dev->address, reg, 1, &value, 1);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	785b      	ldrb	r3, [r3, #1]
 8016196:	b298      	uxth	r0, r3
 8016198:	78fb      	ldrb	r3, [r7, #3]
 801619a:	b299      	uxth	r1, r3
 801619c:	1cbb      	adds	r3, r7, #2
 801619e:	2201      	movs	r2, #1
 80161a0:	9200      	str	r2, [sp, #0]
 80161a2:	2201      	movs	r2, #1
 80161a4:	f7fd facc 	bl	8013740 <I2C_ByteWrite_HAL>
}
 80161a8:	bf00      	nop
 80161aa:	3708      	adds	r7, #8
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}

080161b0 <registerSetBits>:

static void registerSetBits(const baroDev_t *dev, uint8_t reg, uint8_t setbits)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	460b      	mov	r3, r1
 80161ba:	70fb      	strb	r3, [r7, #3]
 80161bc:	4613      	mov	r3, r2
 80161be:	70bb      	strb	r3, [r7, #2]
    uint8_t val = registerRead(dev, reg);
 80161c0:	78fb      	ldrb	r3, [r7, #3]
 80161c2:	4619      	mov	r1, r3
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7ff ffc5 	bl	8016154 <registerRead>
 80161ca:	4603      	mov	r3, r0
 80161cc:	73fb      	strb	r3, [r7, #15]

    if ((val & setbits) != setbits) {
 80161ce:	7bfa      	ldrb	r2, [r7, #15]
 80161d0:	78bb      	ldrb	r3, [r7, #2]
 80161d2:	4013      	ands	r3, r2
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	78ba      	ldrb	r2, [r7, #2]
 80161d8:	429a      	cmp	r2, r3
 80161da:	d009      	beq.n	80161f0 <registerSetBits+0x40>
        val |= setbits;
 80161dc:	7bfa      	ldrb	r2, [r7, #15]
 80161de:	78bb      	ldrb	r3, [r7, #2]
 80161e0:	4313      	orrs	r3, r2
 80161e2:	73fb      	strb	r3, [r7, #15]
        registerWrite(dev, reg, val);
 80161e4:	7bfa      	ldrb	r2, [r7, #15]
 80161e6:	78fb      	ldrb	r3, [r7, #3]
 80161e8:	4619      	mov	r1, r3
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f7ff ffc9 	bl	8016182 <registerWrite>
    }
}
 80161f0:	bf00      	nop
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <getTwosComplement>:

static int32_t getTwosComplement(uint32_t raw, uint8_t length)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b083      	sub	sp, #12
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	460b      	mov	r3, r1
 8016202:	70fb      	strb	r3, [r7, #3]
    if (raw & ((int)1 << (length - 1))) {
 8016204:	78fb      	ldrb	r3, [r7, #3]
 8016206:	3b01      	subs	r3, #1
 8016208:	2201      	movs	r2, #1
 801620a:	fa02 f303 	lsl.w	r3, r2, r3
 801620e:	461a      	mov	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	4013      	ands	r3, r2
 8016214:	2b00      	cmp	r3, #0
 8016216:	d006      	beq.n	8016226 <getTwosComplement+0x2e>
        return ((int32_t)raw) - ((int32_t)1 << length);
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	78fb      	ldrb	r3, [r7, #3]
 801621c:	2101      	movs	r1, #1
 801621e:	fa01 f303 	lsl.w	r3, r1, r3
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	e000      	b.n	8016228 <getTwosComplement+0x30>
    }
    else {
        return raw;
 8016226:	687b      	ldr	r3, [r7, #4]
    }
}
 8016228:	4618      	mov	r0, r3
 801622a:	370c      	adds	r7, #12
 801622c:	46bd      	mov	sp, r7
 801622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016232:	4770      	bx	lr

08016234 <deviceConfigure>:

static bool deviceConfigure(const baroDev_t *dev)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b08a      	sub	sp, #40	; 0x28
 8016238:	af02      	add	r7, sp, #8
 801623a:	6078      	str	r0, [r7, #4]
    // Trigger a chip reset
    registerSetBits(dev, DPS310_REG_RESET, DPS310_RESET_BIT_SOFT_RST);
 801623c:	2209      	movs	r2, #9
 801623e:	210c      	movs	r1, #12
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7ff ffb5 	bl	80161b0 <registerSetBits>

    // Sleep 40ms
    delay(40);
 8016246:	2028      	movs	r0, #40	; 0x28
 8016248:	f7f2 ffe2 	bl	8009210 <delay>

    uint8_t status = registerRead(dev, DPS310_REG_MEAS_CFG);
 801624c:	2108      	movs	r1, #8
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f7ff ff80 	bl	8016154 <registerRead>
 8016254:	4603      	mov	r3, r0
 8016256:	77fb      	strb	r3, [r7, #31]

    // Check if coefficients are available
    if ((status & DPS310_MEAS_CFG_COEF_RDY) == 0) {
 8016258:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801625c:	2b00      	cmp	r3, #0
 801625e:	db01      	blt.n	8016264 <deviceConfigure+0x30>
        return false;
 8016260:	2300      	movs	r3, #0
 8016262:	e0ca      	b.n	80163fa <deviceConfigure+0x1c6>
    }

    // Check if sensor initialization is complete
    if ((status & DPS310_MEAS_CFG_SENSOR_RDY) == 0) {
 8016264:	7ffb      	ldrb	r3, [r7, #31]
 8016266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801626a:	2b00      	cmp	r3, #0
 801626c:	d101      	bne.n	8016272 <deviceConfigure+0x3e>
        return false;
 801626e:	2300      	movs	r3, #0
 8016270:	e0c3      	b.n	80163fa <deviceConfigure+0x1c6>
#define COEFFICIENT_LENGTH 18
#define READ_LENGTH (COEFFICIENT_LENGTH / 2)

    uint8_t coef[COEFFICIENT_LENGTH];
    
    if (!I2C_ByteRead(baro.dev.address, DPS310_REG_COEF, 1, coef, READ_LENGTH)) {
 8016272:	4b64      	ldr	r3, [pc, #400]	; (8016404 <deviceConfigure+0x1d0>)
 8016274:	785b      	ldrb	r3, [r3, #1]
 8016276:	b298      	uxth	r0, r3
 8016278:	f107 030c 	add.w	r3, r7, #12
 801627c:	2209      	movs	r2, #9
 801627e:	9200      	str	r2, [sp, #0]
 8016280:	2201      	movs	r2, #1
 8016282:	2110      	movs	r1, #16
 8016284:	f7fd fa3c 	bl	8013700 <I2C_ByteRead>
 8016288:	4603      	mov	r3, r0
 801628a:	f083 0301 	eor.w	r3, r3, #1
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	d001      	beq.n	8016298 <deviceConfigure+0x64>
        return false;
 8016294:	2300      	movs	r3, #0
 8016296:	e0b0      	b.n	80163fa <deviceConfigure+0x1c6>
    }
    
     if (!I2C_ByteRead(baro.dev.address, DPS310_REG_COEF + READ_LENGTH, 1, coef + READ_LENGTH, COEFFICIENT_LENGTH - READ_LENGTH)) {
 8016298:	4b5a      	ldr	r3, [pc, #360]	; (8016404 <deviceConfigure+0x1d0>)
 801629a:	785b      	ldrb	r3, [r3, #1]
 801629c:	b298      	uxth	r0, r3
 801629e:	f107 030c 	add.w	r3, r7, #12
 80162a2:	3309      	adds	r3, #9
 80162a4:	2209      	movs	r2, #9
 80162a6:	9200      	str	r2, [sp, #0]
 80162a8:	2201      	movs	r2, #1
 80162aa:	2119      	movs	r1, #25
 80162ac:	f7fd fa28 	bl	8013700 <I2C_ByteRead>
 80162b0:	4603      	mov	r3, r0
 80162b2:	f083 0301 	eor.w	r3, r3, #1
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d001      	beq.n	80162c0 <deviceConfigure+0x8c>
        return false;
 80162bc:	2300      	movs	r3, #0
 80162be:	e09c      	b.n	80163fa <deviceConfigure+0x1c6>
    }

    // See section 8.11, Calibration Coefficients (COEF), of datasheet

    // 0x11 c0 [3:0] + 0x10 c0 [11:4]
    baroState.calib.c0 = getTwosComplement(((uint32_t)coef[0] << 4) | (((uint32_t)coef[1] >> 4) & 0x0F), 12);
 80162c0:	7b3b      	ldrb	r3, [r7, #12]
 80162c2:	011a      	lsls	r2, r3, #4
 80162c4:	7b7b      	ldrb	r3, [r7, #13]
 80162c6:	091b      	lsrs	r3, r3, #4
 80162c8:	b2db      	uxtb	r3, r3
 80162ca:	f003 030f 	and.w	r3, r3, #15
 80162ce:	4313      	orrs	r3, r2
 80162d0:	210c      	movs	r1, #12
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7ff ff90 	bl	80161f8 <getTwosComplement>
 80162d8:	4603      	mov	r3, r0
 80162da:	b21a      	sxth	r2, r3
 80162dc:	4b4a      	ldr	r3, [pc, #296]	; (8016408 <deviceConfigure+0x1d4>)
 80162de:	801a      	strh	r2, [r3, #0]

    // 0x11 c1 [11:8] + 0x12 c1 [7:0]
    baroState.calib.c1 = getTwosComplement((((uint32_t)coef[1] & 0x0F) << 8) | (uint32_t)coef[2], 12);
 80162e0:	7b7b      	ldrb	r3, [r7, #13]
 80162e2:	021b      	lsls	r3, r3, #8
 80162e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80162e8:	7bba      	ldrb	r2, [r7, #14]
 80162ea:	4313      	orrs	r3, r2
 80162ec:	210c      	movs	r1, #12
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7ff ff82 	bl	80161f8 <getTwosComplement>
 80162f4:	4603      	mov	r3, r0
 80162f6:	b21a      	sxth	r2, r3
 80162f8:	4b43      	ldr	r3, [pc, #268]	; (8016408 <deviceConfigure+0x1d4>)
 80162fa:	805a      	strh	r2, [r3, #2]

    // 0x13 c00 [19:12] + 0x14 c00 [11:4] + 0x15 c00 [3:0]
    baroState.calib.c00 = getTwosComplement(((uint32_t)coef[3] << 12) | ((uint32_t)coef[4] << 4) | (((uint32_t)coef[5] >> 4) & 0x0F), 20);
 80162fc:	7bfb      	ldrb	r3, [r7, #15]
 80162fe:	031a      	lsls	r2, r3, #12
 8016300:	7c3b      	ldrb	r3, [r7, #16]
 8016302:	011b      	lsls	r3, r3, #4
 8016304:	431a      	orrs	r2, r3
 8016306:	7c7b      	ldrb	r3, [r7, #17]
 8016308:	091b      	lsrs	r3, r3, #4
 801630a:	b2db      	uxtb	r3, r3
 801630c:	f003 030f 	and.w	r3, r3, #15
 8016310:	4313      	orrs	r3, r2
 8016312:	2114      	movs	r1, #20
 8016314:	4618      	mov	r0, r3
 8016316:	f7ff ff6f 	bl	80161f8 <getTwosComplement>
 801631a:	4603      	mov	r3, r0
 801631c:	4a3a      	ldr	r2, [pc, #232]	; (8016408 <deviceConfigure+0x1d4>)
 801631e:	6053      	str	r3, [r2, #4]

    // 0x15 c10 [19:16] + 0x16 c10 [15:8] + 0x17 c10 [7:0]
    baroState.calib.c10 = getTwosComplement((((uint32_t)coef[5] & 0x0F) << 16) | ((uint32_t)coef[6] << 8) | (uint32_t)coef[7], 20);
 8016320:	7c7b      	ldrb	r3, [r7, #17]
 8016322:	041b      	lsls	r3, r3, #16
 8016324:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8016328:	7cbb      	ldrb	r3, [r7, #18]
 801632a:	021b      	lsls	r3, r3, #8
 801632c:	4313      	orrs	r3, r2
 801632e:	7cfa      	ldrb	r2, [r7, #19]
 8016330:	4313      	orrs	r3, r2
 8016332:	2114      	movs	r1, #20
 8016334:	4618      	mov	r0, r3
 8016336:	f7ff ff5f 	bl	80161f8 <getTwosComplement>
 801633a:	4603      	mov	r3, r0
 801633c:	4a32      	ldr	r2, [pc, #200]	; (8016408 <deviceConfigure+0x1d4>)
 801633e:	6093      	str	r3, [r2, #8]

    // 0x18 c01 [15:8] + 0x19 c01 [7:0]
    baroState.calib.c01 = getTwosComplement(((uint32_t)coef[8] << 8) | (uint32_t)coef[9], 16);
 8016340:	7d3b      	ldrb	r3, [r7, #20]
 8016342:	021b      	lsls	r3, r3, #8
 8016344:	7d7a      	ldrb	r2, [r7, #21]
 8016346:	4313      	orrs	r3, r2
 8016348:	2110      	movs	r1, #16
 801634a:	4618      	mov	r0, r3
 801634c:	f7ff ff54 	bl	80161f8 <getTwosComplement>
 8016350:	4603      	mov	r3, r0
 8016352:	b21a      	sxth	r2, r3
 8016354:	4b2c      	ldr	r3, [pc, #176]	; (8016408 <deviceConfigure+0x1d4>)
 8016356:	819a      	strh	r2, [r3, #12]

    // 0x1A c11 [15:8] + 0x1B c11 [7:0]
    baroState.calib.c11 = getTwosComplement(((uint32_t)coef[10] << 8) | (uint32_t)coef[11], 16);
 8016358:	7dbb      	ldrb	r3, [r7, #22]
 801635a:	021b      	lsls	r3, r3, #8
 801635c:	7dfa      	ldrb	r2, [r7, #23]
 801635e:	4313      	orrs	r3, r2
 8016360:	2110      	movs	r1, #16
 8016362:	4618      	mov	r0, r3
 8016364:	f7ff ff48 	bl	80161f8 <getTwosComplement>
 8016368:	4603      	mov	r3, r0
 801636a:	b21a      	sxth	r2, r3
 801636c:	4b26      	ldr	r3, [pc, #152]	; (8016408 <deviceConfigure+0x1d4>)
 801636e:	81da      	strh	r2, [r3, #14]

    // 0x1C c20 [15:8] + 0x1D c20 [7:0]
    baroState.calib.c20 = getTwosComplement(((uint32_t)coef[12] << 8) | (uint32_t)coef[13], 16);
 8016370:	7e3b      	ldrb	r3, [r7, #24]
 8016372:	021b      	lsls	r3, r3, #8
 8016374:	7e7a      	ldrb	r2, [r7, #25]
 8016376:	4313      	orrs	r3, r2
 8016378:	2110      	movs	r1, #16
 801637a:	4618      	mov	r0, r3
 801637c:	f7ff ff3c 	bl	80161f8 <getTwosComplement>
 8016380:	4603      	mov	r3, r0
 8016382:	b21a      	sxth	r2, r3
 8016384:	4b20      	ldr	r3, [pc, #128]	; (8016408 <deviceConfigure+0x1d4>)
 8016386:	821a      	strh	r2, [r3, #16]

    // 0x1E c21 [15:8] + 0x1F c21 [7:0]
    baroState.calib.c21 = getTwosComplement(((uint32_t)coef[14] << 8) | (uint32_t)coef[15], 16);
 8016388:	7ebb      	ldrb	r3, [r7, #26]
 801638a:	021b      	lsls	r3, r3, #8
 801638c:	7efa      	ldrb	r2, [r7, #27]
 801638e:	4313      	orrs	r3, r2
 8016390:	2110      	movs	r1, #16
 8016392:	4618      	mov	r0, r3
 8016394:	f7ff ff30 	bl	80161f8 <getTwosComplement>
 8016398:	4603      	mov	r3, r0
 801639a:	b21a      	sxth	r2, r3
 801639c:	4b1a      	ldr	r3, [pc, #104]	; (8016408 <deviceConfigure+0x1d4>)
 801639e:	825a      	strh	r2, [r3, #18]

    // 0x20 c30 [15:8] + 0x21 c30 [7:0]
    baroState.calib.c30 = getTwosComplement(((uint32_t)coef[16] << 8) | (uint32_t)coef[17], 16);
 80163a0:	7f3b      	ldrb	r3, [r7, #28]
 80163a2:	021b      	lsls	r3, r3, #8
 80163a4:	7f7a      	ldrb	r2, [r7, #29]
 80163a6:	4313      	orrs	r3, r2
 80163a8:	2110      	movs	r1, #16
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7ff ff24 	bl	80161f8 <getTwosComplement>
 80163b0:	4603      	mov	r3, r0
 80163b2:	b21a      	sxth	r2, r3
 80163b4:	4b14      	ldr	r3, [pc, #80]	; (8016408 <deviceConfigure+0x1d4>)
 80163b6:	829a      	strh	r2, [r3, #20]

    // PRS_CFG: pressure measurement rate (32 Hz) and oversampling (16 time standard)
    registerSetBits(dev, DPS310_REG_PRS_CFG, DPS310_PRS_CFG_BIT_PM_RATE_32HZ | DPS310_PRS_CFG_BIT_PM_PRC_16);
 80163b8:	2254      	movs	r2, #84	; 0x54
 80163ba:	2106      	movs	r1, #6
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f7ff fef7 	bl	80161b0 <registerSetBits>

    // TMP_CFG: temperature measurement rate (32 Hz) and oversampling (16 times)
    const uint8_t TMP_COEF_SRCE = registerRead(dev, DPS310_REG_COEF_SRCE) & DPS310_COEF_SRCE_BIT_TMP_COEF_SRCE;
 80163c2:	2128      	movs	r1, #40	; 0x28
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7ff fec5 	bl	8016154 <registerRead>
 80163ca:	4603      	mov	r3, r0
 80163cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80163d0:	77bb      	strb	r3, [r7, #30]
    registerSetBits(dev, DPS310_REG_TMP_CFG, DPS310_TMP_CFG_BIT_TMP_RATE_32HZ | DPS310_TMP_CFG_BIT_TMP_PRC_16 | TMP_COEF_SRCE);
 80163d2:	7fbb      	ldrb	r3, [r7, #30]
 80163d4:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	461a      	mov	r2, r3
 80163dc:	2107      	movs	r1, #7
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f7ff fee6 	bl	80161b0 <registerSetBits>

    // CFG_REG: set pressure and temperature result bit-shift (required when the oversampling rate is >8 times)
    registerSetBits(dev, DPS310_REG_CFG_REG, DPS310_CFG_REG_BIT_T_SHIFT | DPS310_CFG_REG_BIT_P_SHIFT);
 80163e4:	220c      	movs	r2, #12
 80163e6:	2109      	movs	r1, #9
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f7ff fee1 	bl	80161b0 <registerSetBits>

    // MEAS_CFG: Continuous pressure and temperature measurement
    registerSetBits(dev, DPS310_REG_MEAS_CFG, DPS310_MEAS_CFG_MEAS_CTRL_CONT);
 80163ee:	2207      	movs	r2, #7
 80163f0:	2108      	movs	r1, #8
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f7ff fedc 	bl	80161b0 <registerSetBits>

    return true;
 80163f8:	2301      	movs	r3, #1
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3720      	adds	r7, #32
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	20000edc 	.word	0x20000edc
 8016408:	200022e4 	.word	0x200022e4

0801640c <dps310ReadUP>:

static bool dps310ReadUP(baroDev_t *baro)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	af02      	add	r7, sp, #8
 8016412:	6078      	str	r0, [r7, #4]

    // 1. Kick off read
    // No need to poll for data ready as the conversion rate is 32Hz and this is sampling at 20Hz
    // Read PSR_B2, PSR_B1, PSR_B0, TMP_B2, TMP_B1, TMP_B0
     //busReadRegisterBufferStart(&baro->dev, DPS310_REG_PSR_B2, buf, 6);
     I2C_ByteRead(baro->address, DPS310_REG_PSR_B2, 1, buf, 6);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	785b      	ldrb	r3, [r3, #1]
 8016418:	b298      	uxth	r0, r3
 801641a:	2306      	movs	r3, #6
 801641c:	9300      	str	r3, [sp, #0]
 801641e:	4b05      	ldr	r3, [pc, #20]	; (8016434 <dps310ReadUP+0x28>)
 8016420:	2201      	movs	r2, #1
 8016422:	2100      	movs	r1, #0
 8016424:	f7fd f96c 	bl	8013700 <I2C_ByteRead>

    return true;
 8016428:	2301      	movs	r3, #1
}
 801642a:	4618      	mov	r0, r3
 801642c:	3708      	adds	r7, #8
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	20002304 	.word	0x20002304

08016438 <dps310GetUP>:

static bool dps310GetUP(baroDev_t *baro)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b090      	sub	sp, #64	; 0x40
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
    static float kT = 253952; // 16 times (Standard)
    static float kP = 253952; // 16 times (Standard)

    // 3. Read the pressure and temperature result from the registers

    const int32_t Praw = getTwosComplement((buf[0] << 16) + (buf[1] << 8) + buf[2], 24);
 8016440:	4b69      	ldr	r3, [pc, #420]	; (80165e8 <dps310GetUP+0x1b0>)
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	041a      	lsls	r2, r3, #16
 8016446:	4b68      	ldr	r3, [pc, #416]	; (80165e8 <dps310GetUP+0x1b0>)
 8016448:	785b      	ldrb	r3, [r3, #1]
 801644a:	021b      	lsls	r3, r3, #8
 801644c:	4413      	add	r3, r2
 801644e:	4a66      	ldr	r2, [pc, #408]	; (80165e8 <dps310GetUP+0x1b0>)
 8016450:	7892      	ldrb	r2, [r2, #2]
 8016452:	4413      	add	r3, r2
 8016454:	2118      	movs	r1, #24
 8016456:	4618      	mov	r0, r3
 8016458:	f7ff fece 	bl	80161f8 <getTwosComplement>
 801645c:	63f8      	str	r0, [r7, #60]	; 0x3c
    const int32_t Traw = getTwosComplement((buf[3] << 16) + (buf[4] << 8) + buf[5], 24);
 801645e:	4b62      	ldr	r3, [pc, #392]	; (80165e8 <dps310GetUP+0x1b0>)
 8016460:	78db      	ldrb	r3, [r3, #3]
 8016462:	041a      	lsls	r2, r3, #16
 8016464:	4b60      	ldr	r3, [pc, #384]	; (80165e8 <dps310GetUP+0x1b0>)
 8016466:	791b      	ldrb	r3, [r3, #4]
 8016468:	021b      	lsls	r3, r3, #8
 801646a:	4413      	add	r3, r2
 801646c:	4a5e      	ldr	r2, [pc, #376]	; (80165e8 <dps310GetUP+0x1b0>)
 801646e:	7952      	ldrb	r2, [r2, #5]
 8016470:	4413      	add	r3, r2
 8016472:	2118      	movs	r1, #24
 8016474:	4618      	mov	r0, r3
 8016476:	f7ff febf 	bl	80161f8 <getTwosComplement>
 801647a:	63b8      	str	r0, [r7, #56]	; 0x38

    // 4. Calculate scaled measurement results.
    const float Praw_sc = Praw / kP;
 801647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801647e:	ee07 3a90 	vmov	s15, r3
 8016482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016486:	4b59      	ldr	r3, [pc, #356]	; (80165ec <dps310GetUP+0x1b4>)
 8016488:	ed93 7a00 	vldr	s14, [r3]
 801648c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016490:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    const float Traw_sc = Traw / kT;
 8016494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016496:	ee07 3a90 	vmov	s15, r3
 801649a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801649e:	4b54      	ldr	r3, [pc, #336]	; (80165f0 <dps310GetUP+0x1b8>)
 80164a0:	ed93 7a00 	vldr	s14, [r3]
 80164a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80164a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // 5. Calculate compensated measurement results.
    const float c00 = baroState.calib.c00;
 80164ac:	4b51      	ldr	r3, [pc, #324]	; (80165f4 <dps310GetUP+0x1bc>)
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	ee07 3a90 	vmov	s15, r3
 80164b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float c01 = baroState.calib.c01;
 80164bc:	4b4d      	ldr	r3, [pc, #308]	; (80165f4 <dps310GetUP+0x1bc>)
 80164be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80164c2:	ee07 3a90 	vmov	s15, r3
 80164c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    const float c10 = baroState.calib.c10;
 80164ce:	4b49      	ldr	r3, [pc, #292]	; (80165f4 <dps310GetUP+0x1bc>)
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	ee07 3a90 	vmov	s15, r3
 80164d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    const float c11 = baroState.calib.c11;
 80164de:	4b45      	ldr	r3, [pc, #276]	; (80165f4 <dps310GetUP+0x1bc>)
 80164e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80164e4:	ee07 3a90 	vmov	s15, r3
 80164e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164ec:	edc7 7a08 	vstr	s15, [r7, #32]
    const float c20 = baroState.calib.c20;
 80164f0:	4b40      	ldr	r3, [pc, #256]	; (80165f4 <dps310GetUP+0x1bc>)
 80164f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80164f6:	ee07 3a90 	vmov	s15, r3
 80164fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164fe:	edc7 7a07 	vstr	s15, [r7, #28]
    const float c21 = baroState.calib.c21;
 8016502:	4b3c      	ldr	r3, [pc, #240]	; (80165f4 <dps310GetUP+0x1bc>)
 8016504:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016508:	ee07 3a90 	vmov	s15, r3
 801650c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016510:	edc7 7a06 	vstr	s15, [r7, #24]
    const float c30 = baroState.calib.c30;
 8016514:	4b37      	ldr	r3, [pc, #220]	; (80165f4 <dps310GetUP+0x1bc>)
 8016516:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801651a:	ee07 3a90 	vmov	s15, r3
 801651e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016522:	edc7 7a05 	vstr	s15, [r7, #20]

    // See section 4.9.1, How to Calculate Compensated Pressure Values, of datasheet
    baroState.pressure = c00 + Praw_sc * (c10 + Praw_sc * (c20 + Praw_sc * c30)) + Traw_sc * c01 + Traw_sc * Praw_sc * (c11 + Praw_sc * c21);
 8016526:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801652a:	edd7 7a05 	vldr	s15, [r7, #20]
 801652e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016532:	edd7 7a07 	vldr	s15, [r7, #28]
 8016536:	ee37 7a27 	vadd.f32	s14, s14, s15
 801653a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801653e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016542:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016546:	ee37 7a27 	vadd.f32	s14, s14, s15
 801654a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801654e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016552:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016556:	ee37 7a27 	vadd.f32	s14, s14, s15
 801655a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801655e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016566:	ee37 7a27 	vadd.f32	s14, s14, s15
 801656a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801656e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8016572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016576:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 801657a:	edd7 7a06 	vldr	s15, [r7, #24]
 801657e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016582:	edd7 7a08 	vldr	s15, [r7, #32]
 8016586:	ee76 7a27 	vadd.f32	s15, s12, s15
 801658a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016592:	4b18      	ldr	r3, [pc, #96]	; (80165f4 <dps310GetUP+0x1bc>)
 8016594:	edc3 7a06 	vstr	s15, [r3, #24]

    const float c0 = baroState.calib.c0;
 8016598:	4b16      	ldr	r3, [pc, #88]	; (80165f4 <dps310GetUP+0x1bc>)
 801659a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801659e:	ee07 3a90 	vmov	s15, r3
 80165a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165a6:	edc7 7a04 	vstr	s15, [r7, #16]
    const float c1 = baroState.calib.c1;
 80165aa:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <dps310GetUP+0x1bc>)
 80165ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165b0:	ee07 3a90 	vmov	s15, r3
 80165b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165b8:	edc7 7a03 	vstr	s15, [r7, #12]

    // See section 4.9.2, How to Calculate Compensated Temperature Values, of datasheet
    baroState.temperature = c0 * 0.5f + c1 * Traw_sc;
 80165bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80165c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80165c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80165c8:	edd7 6a03 	vldr	s13, [r7, #12]
 80165cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80165d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80165d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165d8:	4b06      	ldr	r3, [pc, #24]	; (80165f4 <dps310GetUP+0x1bc>)
 80165da:	edc3 7a07 	vstr	s15, [r3, #28]

    return true;
 80165de:	2301      	movs	r3, #1
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3740      	adds	r7, #64	; 0x40
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}
 80165e8:	20002304 	.word	0x20002304
 80165ec:	200003a4 	.word	0x200003a4
 80165f0:	200003a8 	.word	0x200003a8
 80165f4:	200022e4 	.word	0x200022e4

080165f8 <deviceCalculate>:

static void deviceCalculate(int32_t *pressure, int32_t *temperature)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
    if (pressure) {
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d008      	beq.n	801661a <deviceCalculate+0x22>
        *pressure = baroState.pressure; 
 8016608:	4b0f      	ldr	r3, [pc, #60]	; (8016648 <deviceCalculate+0x50>)
 801660a:	edd3 7a06 	vldr	s15, [r3, #24]
 801660e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016612:	ee17 2a90 	vmov	r2, s15
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	601a      	str	r2, [r3, #0]
    }

    if (temperature) {
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d00c      	beq.n	801663a <deviceCalculate+0x42>
        *temperature = (baroState.temperature * 100);   // to centidegrees
 8016620:	4b09      	ldr	r3, [pc, #36]	; (8016648 <deviceCalculate+0x50>)
 8016622:	edd3 7a07 	vldr	s15, [r3, #28]
 8016626:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801664c <deviceCalculate+0x54>
 801662a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801662e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016632:	ee17 2a90 	vmov	r2, s15
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	601a      	str	r2, [r3, #0]
    }
}
 801663a:	bf00      	nop
 801663c:	370c      	adds	r7, #12
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	200022e4 	.word	0x200022e4
 801664c:	42c80000 	.word	0x42c80000

08016650 <deviceDetect>:



#define DETECTION_MAX_RETRY_COUNT   5
static bool deviceDetect(const baroDev_t *dev)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af02      	add	r7, sp, #8
 8016656:	6078      	str	r0, [r7, #4]
    for (int retry = 0; retry < DETECTION_MAX_RETRY_COUNT; retry++) {
 8016658:	2300      	movs	r3, #0
 801665a:	60fb      	str	r3, [r7, #12]
 801665c:	e01a      	b.n	8016694 <deviceDetect+0x44>
        uint8_t chipId[1];

        delay(100);
 801665e:	2064      	movs	r0, #100	; 0x64
 8016660:	f7f2 fdd6 	bl	8009210 <delay>

        bool ack = I2C_ByteRead(dev->address, DPS310_REG_ID, 1, chipId, 1);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	785b      	ldrb	r3, [r3, #1]
 8016668:	b298      	uxth	r0, r3
 801666a:	f107 0308 	add.w	r3, r7, #8
 801666e:	2201      	movs	r2, #1
 8016670:	9200      	str	r2, [sp, #0]
 8016672:	2201      	movs	r2, #1
 8016674:	210d      	movs	r1, #13
 8016676:	f7fd f843 	bl	8013700 <I2C_ByteRead>
 801667a:	4603      	mov	r3, r0
 801667c:	72fb      	strb	r3, [r7, #11]

        if (ack && chipId[0] == DPS310_ID_REV_AND_PROD_ID) {
 801667e:	7afb      	ldrb	r3, [r7, #11]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d004      	beq.n	801668e <deviceDetect+0x3e>
 8016684:	7a3b      	ldrb	r3, [r7, #8]
 8016686:	2b10      	cmp	r3, #16
 8016688:	d101      	bne.n	801668e <deviceDetect+0x3e>
            return true;
 801668a:	2301      	movs	r3, #1
 801668c:	e006      	b.n	801669c <deviceDetect+0x4c>
    for (int retry = 0; retry < DETECTION_MAX_RETRY_COUNT; retry++) {
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	3301      	adds	r3, #1
 8016692:	60fb      	str	r3, [r7, #12]
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2b04      	cmp	r3, #4
 8016698:	dde1      	ble.n	801665e <deviceDetect+0xe>
        }
    };

    return false;
 801669a:	2300      	movs	r3, #0
}
 801669c:	4618      	mov	r0, r3
 801669e:	3710      	adds	r7, #16
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <dps310StartUT>:

static void dps310StartUT(baroDev_t *baro)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
    UNUSED(baro);
}
 80166ac:	bf00      	nop
 80166ae:	370c      	adds	r7, #12
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr

080166b8 <dps310ReadUT>:

static bool dps310ReadUT(baroDev_t *baro)
{
 80166b8:	b480      	push	{r7}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
    UNUSED(baro);

    return true;
 80166c0:	2301      	movs	r3, #1
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	370c      	adds	r7, #12
 80166c6:	46bd      	mov	sp, r7
 80166c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166cc:	4770      	bx	lr

080166ce <dps310GetUT>:

static bool dps310GetUT(baroDev_t *baro)
{
 80166ce:	b480      	push	{r7}
 80166d0:	b083      	sub	sp, #12
 80166d2:	af00      	add	r7, sp, #0
 80166d4:	6078      	str	r0, [r7, #4]
    UNUSED(baro);

    return true;
 80166d6:	2301      	movs	r3, #1
}
 80166d8:	4618      	mov	r0, r3
 80166da:	370c      	adds	r7, #12
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr

080166e4 <dps310StartUP>:

static void dps310StartUP(baroDev_t *baro)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
    UNUSED(baro);
}
 80166ec:	bf00      	nop
 80166ee:	370c      	adds	r7, #12
 80166f0:	46bd      	mov	sp, r7
 80166f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f6:	4770      	bx	lr

080166f8 <dps310Detect>:

bool dps310Detect(baroDev_t *baro)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
    baro->address = DPS310_I2C_ADDR;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	2276      	movs	r2, #118	; 0x76
 8016704:	705a      	strb	r2, [r3, #1]

    if (!deviceDetect(baro)) {
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f7ff ffa2 	bl	8016650 <deviceDetect>
 801670c:	4603      	mov	r3, r0
 801670e:	f083 0301 	eor.w	r3, r3, #1
 8016712:	b2db      	uxtb	r3, r3
 8016714:	2b00      	cmp	r3, #0
 8016716:	d001      	beq.n	801671c <dps310Detect+0x24>
        return false;
 8016718:	2300      	movs	r3, #0
 801671a:	e027      	b.n	801676c <dps310Detect+0x74>
    }

    if (!deviceConfigure(baro)) {
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f7ff fd89 	bl	8016234 <deviceConfigure>
 8016722:	4603      	mov	r3, r0
 8016724:	f083 0301 	eor.w	r3, r3, #1
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d001      	beq.n	8016732 <dps310Detect+0x3a>
        return false;
 801672e:	2300      	movs	r3, #0
 8016730:	e01c      	b.n	801676c <dps310Detect+0x74>
    }

    baro->ut_delay = 0;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2200      	movs	r2, #0
 8016736:	809a      	strh	r2, [r3, #4]
    baro->start_ut = dps310StartUT;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	4a0e      	ldr	r2, [pc, #56]	; (8016774 <dps310Detect+0x7c>)
 801673c:	609a      	str	r2, [r3, #8]
    baro->read_ut = dps310ReadUT;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	4a0d      	ldr	r2, [pc, #52]	; (8016778 <dps310Detect+0x80>)
 8016742:	60da      	str	r2, [r3, #12]
    baro->get_ut = dps310GetUT;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	4a0d      	ldr	r2, [pc, #52]	; (801677c <dps310Detect+0x84>)
 8016748:	611a      	str	r2, [r3, #16]

    baro->up_delay = 45000; // 45ms delay plus 5 1ms cycles 50ms
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8016750:	80da      	strh	r2, [r3, #6]
    baro->start_up = dps310StartUP;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	4a0a      	ldr	r2, [pc, #40]	; (8016780 <dps310Detect+0x88>)
 8016756:	615a      	str	r2, [r3, #20]
    baro->read_up = dps310ReadUP;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	4a0a      	ldr	r2, [pc, #40]	; (8016784 <dps310Detect+0x8c>)
 801675c:	619a      	str	r2, [r3, #24]
    baro->get_up = dps310GetUP;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	4a09      	ldr	r2, [pc, #36]	; (8016788 <dps310Detect+0x90>)
 8016762:	61da      	str	r2, [r3, #28]

    baro->calculate = deviceCalculate;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	4a09      	ldr	r2, [pc, #36]	; (801678c <dps310Detect+0x94>)
 8016768:	621a      	str	r2, [r3, #32]

    return true;
 801676a:	2301      	movs	r3, #1
}
 801676c:	4618      	mov	r0, r3
 801676e:	3708      	adds	r7, #8
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	080166a5 	.word	0x080166a5
 8016778:	080166b9 	.word	0x080166b9
 801677c:	080166cf 	.word	0x080166cf
 8016780:	080166e5 	.word	0x080166e5
 8016784:	0801640d 	.word	0x0801640d
 8016788:	08016439 	.word	0x08016439
 801678c:	080165f9 	.word	0x080165f9

08016790 <qmc5883lInit>:

#define QMC5883L_REG_ID 0x0D
#define QMC5883_ID_VAL 0xFF

static bool qmc5883lInit(magDev_t *magDev)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b086      	sub	sp, #24
 8016794:	af02      	add	r7, sp, #8
 8016796:	6078      	str	r0, [r7, #4]
    bool ack = true;
 8016798:	2301      	movs	r3, #1
 801679a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp;

    temp = 0x01;
 801679c:	2301      	movs	r3, #1
 801679e:	73bb      	strb	r3, [r7, #14]
    ack = ack && I2C_ByteWrite_HAL(magDev->address, 0x0B, I2C_MEMADD_SIZE_8BIT, &temp, 1);
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d00f      	beq.n	80167c6 <qmc5883lInit+0x36>
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	7a5b      	ldrb	r3, [r3, #9]
 80167aa:	b298      	uxth	r0, r3
 80167ac:	f107 030e 	add.w	r3, r7, #14
 80167b0:	2201      	movs	r2, #1
 80167b2:	9200      	str	r2, [sp, #0]
 80167b4:	2201      	movs	r2, #1
 80167b6:	210b      	movs	r1, #11
 80167b8:	f7fc ffc2 	bl	8013740 <I2C_ByteWrite_HAL>
 80167bc:	4603      	mov	r3, r0
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d001      	beq.n	80167c6 <qmc5883lInit+0x36>
 80167c2:	2301      	movs	r3, #1
 80167c4:	e000      	b.n	80167c8 <qmc5883lInit+0x38>
 80167c6:	2300      	movs	r3, #0
 80167c8:	73fb      	strb	r3, [r7, #15]
 80167ca:	7bfb      	ldrb	r3, [r7, #15]
 80167cc:	f003 0301 	and.w	r3, r3, #1
 80167d0:	73fb      	strb	r3, [r7, #15]
    temp = QMC5883L_MODE_CONTINUOUS | QMC5883L_ODR_200HZ | QMC5883L_OSR_512 | QMC5883L_RNG_8G;
 80167d2:	231d      	movs	r3, #29
 80167d4:	73bb      	strb	r3, [r7, #14]
    ack = ack && I2C_ByteWrite_HAL(magDev->address, QMC5883L_REG_CONF1, 1, &temp, 1);
 80167d6:	7bfb      	ldrb	r3, [r7, #15]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d00f      	beq.n	80167fc <qmc5883lInit+0x6c>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	7a5b      	ldrb	r3, [r3, #9]
 80167e0:	b298      	uxth	r0, r3
 80167e2:	f107 030e 	add.w	r3, r7, #14
 80167e6:	2201      	movs	r2, #1
 80167e8:	9200      	str	r2, [sp, #0]
 80167ea:	2201      	movs	r2, #1
 80167ec:	2109      	movs	r1, #9
 80167ee:	f7fc ffa7 	bl	8013740 <I2C_ByteWrite_HAL>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d001      	beq.n	80167fc <qmc5883lInit+0x6c>
 80167f8:	2301      	movs	r3, #1
 80167fa:	e000      	b.n	80167fe <qmc5883lInit+0x6e>
 80167fc:	2300      	movs	r3, #0
 80167fe:	73fb      	strb	r3, [r7, #15]
 8016800:	7bfb      	ldrb	r3, [r7, #15]
 8016802:	f003 0301 	and.w	r3, r3, #1
 8016806:	73fb      	strb	r3, [r7, #15]

    if (!ack) {
 8016808:	7bfb      	ldrb	r3, [r7, #15]
 801680a:	f083 0301 	eor.w	r3, r3, #1
 801680e:	b2db      	uxtb	r3, r3
 8016810:	2b00      	cmp	r3, #0
 8016812:	d001      	beq.n	8016818 <qmc5883lInit+0x88>
        return false;
 8016814:	2300      	movs	r3, #0
 8016816:	e000      	b.n	801681a <qmc5883lInit+0x8a>
    }

    return true;
 8016818:	2301      	movs	r3, #1
}
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
	...

08016824 <qmc5883lRead>:

static bool qmc5883lRead(magDev_t *magDev, int16_t *magData)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af02      	add	r7, sp, #8
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
        STATE_READ_STATUS,
        STATE_WAIT_STATUS,
        STATE_WAIT_READ,
    } state = STATE_READ_STATUS;

    switch (state) {
 801682e:	4b2d      	ldr	r3, [pc, #180]	; (80168e4 <qmc5883lRead+0xc0>)
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	2b01      	cmp	r3, #1
 8016834:	d010      	beq.n	8016858 <qmc5883lRead+0x34>
 8016836:	2b02      	cmp	r3, #2
 8016838:	d028      	beq.n	801688c <qmc5883lRead+0x68>
        default:
        case STATE_READ_STATUS:
            I2C_ByteRead(magDev->address, QMC5883L_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status, sizeof(status));
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	7a5b      	ldrb	r3, [r3, #9]
 801683e:	b298      	uxth	r0, r3
 8016840:	2301      	movs	r3, #1
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	4b28      	ldr	r3, [pc, #160]	; (80168e8 <qmc5883lRead+0xc4>)
 8016846:	2201      	movs	r2, #1
 8016848:	2106      	movs	r1, #6
 801684a:	f7fc ff59 	bl	8013700 <I2C_ByteRead>
            state = STATE_WAIT_STATUS;
 801684e:	4b25      	ldr	r3, [pc, #148]	; (80168e4 <qmc5883lRead+0xc0>)
 8016850:	2201      	movs	r2, #1
 8016852:	701a      	strb	r2, [r3, #0]
            return false;
 8016854:	2300      	movs	r3, #0
 8016856:	e040      	b.n	80168da <qmc5883lRead+0xb6>

        case STATE_WAIT_STATUS:
            if ((status & 0x04) == 0) {
 8016858:	4b23      	ldr	r3, [pc, #140]	; (80168e8 <qmc5883lRead+0xc4>)
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	f003 0304 	and.w	r3, r3, #4
 8016860:	2b00      	cmp	r3, #0
 8016862:	d104      	bne.n	801686e <qmc5883lRead+0x4a>
                state = STATE_READ_STATUS;
 8016864:	4b1f      	ldr	r3, [pc, #124]	; (80168e4 <qmc5883lRead+0xc0>)
 8016866:	2200      	movs	r2, #0
 8016868:	701a      	strb	r2, [r3, #0]
                return false;
 801686a:	2300      	movs	r3, #0
 801686c:	e035      	b.n	80168da <qmc5883lRead+0xb6>
            }
            I2C_ByteRead(magDev->address, QMC5883L_REG_DATA_OUTPUT_X, I2C_MEMADD_SIZE_8BIT, buf, sizeof(buf));
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	7a5b      	ldrb	r3, [r3, #9]
 8016872:	b298      	uxth	r0, r3
 8016874:	2306      	movs	r3, #6
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	4b1c      	ldr	r3, [pc, #112]	; (80168ec <qmc5883lRead+0xc8>)
 801687a:	2201      	movs	r2, #1
 801687c:	2100      	movs	r1, #0
 801687e:	f7fc ff3f 	bl	8013700 <I2C_ByteRead>
            state = STATE_WAIT_READ;
 8016882:	4b18      	ldr	r3, [pc, #96]	; (80168e4 <qmc5883lRead+0xc0>)
 8016884:	2202      	movs	r2, #2
 8016886:	701a      	strb	r2, [r3, #0]
            return false;
 8016888:	2300      	movs	r3, #0
 801688a:	e026      	b.n	80168da <qmc5883lRead+0xb6>

        case STATE_WAIT_READ:

            magData[X] = (int16_t)(buf[1] << 8 | buf[0]);
 801688c:	4b17      	ldr	r3, [pc, #92]	; (80168ec <qmc5883lRead+0xc8>)
 801688e:	785b      	ldrb	r3, [r3, #1]
 8016890:	021b      	lsls	r3, r3, #8
 8016892:	b21a      	sxth	r2, r3
 8016894:	4b15      	ldr	r3, [pc, #84]	; (80168ec <qmc5883lRead+0xc8>)
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	b21b      	sxth	r3, r3
 801689a:	4313      	orrs	r3, r2
 801689c:	b21a      	sxth	r2, r3
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	801a      	strh	r2, [r3, #0]
            magData[Y] = (int16_t)(buf[3] << 8 | buf[2]);
 80168a2:	4b12      	ldr	r3, [pc, #72]	; (80168ec <qmc5883lRead+0xc8>)
 80168a4:	78db      	ldrb	r3, [r3, #3]
 80168a6:	021b      	lsls	r3, r3, #8
 80168a8:	b219      	sxth	r1, r3
 80168aa:	4b10      	ldr	r3, [pc, #64]	; (80168ec <qmc5883lRead+0xc8>)
 80168ac:	789b      	ldrb	r3, [r3, #2]
 80168ae:	b21a      	sxth	r2, r3
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	3302      	adds	r3, #2
 80168b4:	430a      	orrs	r2, r1
 80168b6:	b212      	sxth	r2, r2
 80168b8:	801a      	strh	r2, [r3, #0]
            magData[Z] = (int16_t)(buf[5] << 8 | buf[4]);
 80168ba:	4b0c      	ldr	r3, [pc, #48]	; (80168ec <qmc5883lRead+0xc8>)
 80168bc:	795b      	ldrb	r3, [r3, #5]
 80168be:	021b      	lsls	r3, r3, #8
 80168c0:	b219      	sxth	r1, r3
 80168c2:	4b0a      	ldr	r3, [pc, #40]	; (80168ec <qmc5883lRead+0xc8>)
 80168c4:	791b      	ldrb	r3, [r3, #4]
 80168c6:	b21a      	sxth	r2, r3
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	3304      	adds	r3, #4
 80168cc:	430a      	orrs	r2, r1
 80168ce:	b212      	sxth	r2, r2
 80168d0:	801a      	strh	r2, [r3, #0]

            state = STATE_READ_STATUS;
 80168d2:	4b04      	ldr	r3, [pc, #16]	; (80168e4 <qmc5883lRead+0xc0>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	701a      	strb	r2, [r3, #0]

            return true;
 80168d8:	2301      	movs	r3, #1
    }

    return false;
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	20003ec1 	.word	0x20003ec1
 80168e8:	20003ec2 	.word	0x20003ec2
 80168ec:	2000230c 	.word	0x2000230c

080168f0 <qmc5883lDetect>:

bool qmc5883lDetect(magDev_t *magDev)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af02      	add	r7, sp, #8
 80168f6:	6078      	str	r0, [r7, #4]
    uint8_t temp;
    magDev->address = QMC5883L_MAG_I2C_ADDRESS;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	220d      	movs	r2, #13
 80168fc:	725a      	strb	r2, [r3, #9]

    // Must write reset first  - don't care about the result
    temp = QMC5883L_RST;
 80168fe:	2380      	movs	r3, #128	; 0x80
 8016900:	73bb      	strb	r3, [r7, #14]
    I2C_ByteWrite_HAL(magDev->address, QMC5883L_REG_CONF2, I2C_MEMADD_SIZE_8BIT, &temp, 1);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	7a5b      	ldrb	r3, [r3, #9]
 8016906:	b298      	uxth	r0, r3
 8016908:	f107 030e 	add.w	r3, r7, #14
 801690c:	2201      	movs	r2, #1
 801690e:	9200      	str	r2, [sp, #0]
 8016910:	2201      	movs	r2, #1
 8016912:	210a      	movs	r1, #10
 8016914:	f7fc ff14 	bl	8013740 <I2C_ByteWrite_HAL>
    delay(20);
 8016918:	2014      	movs	r0, #20
 801691a:	f7f2 fc79 	bl	8009210 <delay>

    uint8_t sig = 0;
 801691e:	2300      	movs	r3, #0
 8016920:	737b      	strb	r3, [r7, #13]
    bool ack = I2C_ByteRead(magDev->address, QMC5883L_REG_ID, I2C_MEMADD_SIZE_8BIT, &sig, 1);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	7a5b      	ldrb	r3, [r3, #9]
 8016926:	b298      	uxth	r0, r3
 8016928:	f107 030d 	add.w	r3, r7, #13
 801692c:	2201      	movs	r2, #1
 801692e:	9200      	str	r2, [sp, #0]
 8016930:	2201      	movs	r2, #1
 8016932:	210d      	movs	r1, #13
 8016934:	f7fc fee4 	bl	8013700 <I2C_ByteRead>
 8016938:	4603      	mov	r3, r0
 801693a:	73fb      	strb	r3, [r7, #15]
    if (ack && sig == QMC5883_ID_VAL) {
 801693c:	7bfb      	ldrb	r3, [r7, #15]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d01f      	beq.n	8016982 <qmc5883lDetect+0x92>
 8016942:	7b7b      	ldrb	r3, [r7, #13]
 8016944:	2bff      	cmp	r3, #255	; 0xff
 8016946:	d11c      	bne.n	8016982 <qmc5883lDetect+0x92>
        // Should be in standby mode after soft reset and sensor is really present
        // Reading ChipID of 0xFF alone is not sufficient to be sure the QMC is present
        ack = I2C_ByteRead(magDev->address, QMC5883L_REG_CONF1, I2C_MEMADD_SIZE_8BIT, &sig, 1);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	7a5b      	ldrb	r3, [r3, #9]
 801694c:	b298      	uxth	r0, r3
 801694e:	f107 030d 	add.w	r3, r7, #13
 8016952:	2201      	movs	r2, #1
 8016954:	9200      	str	r2, [sp, #0]
 8016956:	2201      	movs	r2, #1
 8016958:	2109      	movs	r1, #9
 801695a:	f7fc fed1 	bl	8013700 <I2C_ByteRead>
 801695e:	4603      	mov	r3, r0
 8016960:	73fb      	strb	r3, [r7, #15]
        if (ack && sig != QMC5883L_MODE_STANDBY) {
 8016962:	7bfb      	ldrb	r3, [r7, #15]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d004      	beq.n	8016972 <qmc5883lDetect+0x82>
 8016968:	7b7b      	ldrb	r3, [r7, #13]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d001      	beq.n	8016972 <qmc5883lDetect+0x82>
            return false;
 801696e:	2300      	movs	r3, #0
 8016970:	e008      	b.n	8016984 <qmc5883lDetect+0x94>
        }
        magDev->init = qmc5883lInit;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	4a05      	ldr	r2, [pc, #20]	; (801698c <qmc5883lDetect+0x9c>)
 8016976:	601a      	str	r2, [r3, #0]
        magDev->read = qmc5883lRead;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	4a05      	ldr	r2, [pc, #20]	; (8016990 <qmc5883lDetect+0xa0>)
 801697c:	605a      	str	r2, [r3, #4]
        return true;
 801697e:	2301      	movs	r3, #1
 8016980:	e000      	b.n	8016984 <qmc5883lDetect+0x94>
    }

    return false;
 8016982:	2300      	movs	r3, #0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3710      	adds	r7, #16
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	08016791 	.word	0x08016791
 8016990:	08016825 	.word	0x08016825

08016994 <constrain>:
{
 8016994:	b480      	push	{r7}
 8016996:	b085      	sub	sp, #20
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	60b9      	str	r1, [r7, #8]
 801699e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80169a0:	68fa      	ldr	r2, [r7, #12]
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	da01      	bge.n	80169ac <constrain+0x18>
        return low;
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	e006      	b.n	80169ba <constrain+0x26>
    else if (amt > high)
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	dd01      	ble.n	80169b8 <constrain+0x24>
        return high;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	e000      	b.n	80169ba <constrain+0x26>
        return amt;
 80169b8:	68fb      	ldr	r3, [r7, #12]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3714      	adds	r7, #20
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr

080169c6 <cmpTimeUs>:

#include "sensors.h"

#define USE_GPS_UBLOX

static inline int32_t cmpTimeUs(uint32_t a, uint32_t b) { return (int32_t)(a - b); }
 80169c6:	b480      	push	{r7}
 80169c8:	b083      	sub	sp, #12
 80169ca:	af00      	add	r7, sp, #0
 80169cc:	6078      	str	r0, [r7, #4]
 80169ce:	6039      	str	r1, [r7, #0]
 80169d0:	687a      	ldr	r2, [r7, #4]
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	1ad3      	subs	r3, r2, r3
 80169d6:	4618      	mov	r0, r3
 80169d8:	370c      	adds	r7, #12
 80169da:	46bd      	mov	sp, r7
 80169dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e0:	4770      	bx	lr
	...

080169e4 <shiftPacketLog>:
//     .gps_use_3d_speed = false,
//     .sbas_integrity = false
// );

static void shiftPacketLog(void)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b083      	sub	sp, #12
 80169e8:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = ARRAYLEN(gpsPacketLog) - 1; i > 0 ; i--) {
 80169ea:	2314      	movs	r3, #20
 80169ec:	607b      	str	r3, [r7, #4]
 80169ee:	e00b      	b.n	8016a08 <shiftPacketLog+0x24>
        gpsPacketLog[i] = gpsPacketLog[i-1];
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	3b01      	subs	r3, #1
 80169f4:	4a09      	ldr	r2, [pc, #36]	; (8016a1c <shiftPacketLog+0x38>)
 80169f6:	5cd1      	ldrb	r1, [r2, r3]
 80169f8:	4a08      	ldr	r2, [pc, #32]	; (8016a1c <shiftPacketLog+0x38>)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	4413      	add	r3, r2
 80169fe:	460a      	mov	r2, r1
 8016a00:	701a      	strb	r2, [r3, #0]
    for (i = ARRAYLEN(gpsPacketLog) - 1; i > 0 ; i--) {
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	607b      	str	r3, [r7, #4]
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d1f0      	bne.n	80169f0 <shiftPacketLog+0xc>
    }
}
 8016a0e:	bf00      	nop
 8016a10:	bf00      	nop
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr
 8016a1c:	20002314 	.word	0x20002314

08016a20 <isConfiguratorConnected>:

static bool isConfiguratorConnected() {
 8016a20:	b580      	push	{r7, lr}
 8016a22:	af00      	add	r7, sp, #0
    return (getArmingDisableFlags() & ARMING_DISABLED_MSP);
 8016a24:	f7f4 fdf2 	bl	800b60c <getArmingDisableFlags>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	bf14      	ite	ne
 8016a32:	2301      	movne	r3, #1
 8016a34:	2300      	moveq	r3, #0
 8016a36:	b2db      	uxtb	r3, r3
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <gpsSetState>:
#ifdef USE_GPS_UBLOX
static bool gpsNewFrameUBLOX(uint8_t data);
#endif

static void gpsSetState(gpsState_e state)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	4603      	mov	r3, r0
 8016a44:	71fb      	strb	r3, [r7, #7]
    gpsData.lastMessage = millis();
 8016a46:	f7f2 fbee 	bl	8009226 <millis>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	4a09      	ldr	r2, [pc, #36]	; (8016a74 <gpsSetState+0x38>)
 8016a4e:	6093      	str	r3, [r2, #8]
    //sensorsClear(SENSOR_GPS);

    gpsData.state = state;
 8016a50:	4a08      	ldr	r2, [pc, #32]	; (8016a74 <gpsSetState+0x38>)
 8016a52:	79fb      	ldrb	r3, [r7, #7]
 8016a54:	7613      	strb	r3, [r2, #24]
    gpsData.state_position = 0;
 8016a56:	4b07      	ldr	r3, [pc, #28]	; (8016a74 <gpsSetState+0x38>)
 8016a58:	2200      	movs	r2, #0
 8016a5a:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = millis();
 8016a5c:	f7f2 fbe3 	bl	8009226 <millis>
 8016a60:	4603      	mov	r3, r0
 8016a62:	4a04      	ldr	r2, [pc, #16]	; (8016a74 <gpsSetState+0x38>)
 8016a64:	6153      	str	r3, [r2, #20]
    gpsData.ackState = UBLOX_ACK_IDLE;
 8016a66:	4b03      	ldr	r3, [pc, #12]	; (8016a74 <gpsSetState+0x38>)
 8016a68:	2200      	movs	r2, #0
 8016a6a:	771a      	strb	r2, [r3, #28]
}
 8016a6c:	bf00      	nop
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	200023dc 	.word	0x200023dc

08016a78 <gpsInit>:

void gpsInit(void)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	af00      	add	r7, sp, #0
    gpsData.baudrateIndex = 0;
 8016a7c:	4b1d      	ldr	r3, [pc, #116]	; (8016af4 <gpsInit+0x7c>)
 8016a7e:	2200      	movs	r2, #0
 8016a80:	765a      	strb	r2, [r3, #25]
    gpsData.errors = 0;
 8016a82:	4b1c      	ldr	r3, [pc, #112]	; (8016af4 <gpsInit+0x7c>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	601a      	str	r2, [r3, #0]
    gpsData.timeouts = 0;
 8016a88:	4b1a      	ldr	r3, [pc, #104]	; (8016af4 <gpsInit+0x7c>)
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	605a      	str	r2, [r3, #4]

    memset(gpsPacketLog, 0x00, sizeof(gpsPacketLog));
 8016a8e:	2215      	movs	r2, #21
 8016a90:	2100      	movs	r1, #0
 8016a92:	4819      	ldr	r0, [pc, #100]	; (8016af8 <gpsInit+0x80>)
 8016a94:	f011 faee 	bl	8028074 <memset>

    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_STATE_UNKNOWN);
 8016a98:	2000      	movs	r0, #0
 8016a9a:	f7ff ffcf 	bl	8016a3c <gpsSetState>

    gpsData.lastMessage = millis();
 8016a9e:	f7f2 fbc2 	bl	8009226 <millis>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	4a13      	ldr	r2, [pc, #76]	; (8016af4 <gpsInit+0x7c>)
 8016aa6:	6093      	str	r3, [r2, #8]
    // const serialPortConfig_t *gpsPortConfig = findSerialPortConfig(FUNCTION_GPS);
    // if (!gpsPortConfig) {
    //     return;
    // }

    while (gpsInitData[gpsData.baudrateIndex].baudrateIndex != BAUD_57600) {
 8016aa8:	e00d      	b.n	8016ac6 <gpsInit+0x4e>
        gpsData.baudrateIndex++;
 8016aaa:	4b12      	ldr	r3, [pc, #72]	; (8016af4 <gpsInit+0x7c>)
 8016aac:	7e5b      	ldrb	r3, [r3, #25]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	b2da      	uxtb	r2, r3
 8016ab2:	4b10      	ldr	r3, [pc, #64]	; (8016af4 <gpsInit+0x7c>)
 8016ab4:	765a      	strb	r2, [r3, #25]
        if (gpsData.baudrateIndex >= GPS_INIT_DATA_ENTRY_COUNT) {
 8016ab6:	4b0f      	ldr	r3, [pc, #60]	; (8016af4 <gpsInit+0x7c>)
 8016ab8:	7e5b      	ldrb	r3, [r3, #25]
 8016aba:	2b04      	cmp	r3, #4
 8016abc:	d903      	bls.n	8016ac6 <gpsInit+0x4e>
            gpsData.baudrateIndex = DEFAULT_BAUD_RATE_INDEX;
 8016abe:	4b0d      	ldr	r3, [pc, #52]	; (8016af4 <gpsInit+0x7c>)
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	765a      	strb	r2, [r3, #25]
            break;
 8016ac4:	e00c      	b.n	8016ae0 <gpsInit+0x68>
    while (gpsInitData[gpsData.baudrateIndex].baudrateIndex != BAUD_57600) {
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	; (8016af4 <gpsInit+0x7c>)
 8016ac8:	7e5b      	ldrb	r3, [r3, #25]
 8016aca:	4619      	mov	r1, r3
 8016acc:	4a0b      	ldr	r2, [pc, #44]	; (8016afc <gpsInit+0x84>)
 8016ace:	460b      	mov	r3, r1
 8016ad0:	005b      	lsls	r3, r3, #1
 8016ad2:	440b      	add	r3, r1
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	4413      	add	r3, r2
 8016ad8:	3301      	adds	r3, #1
 8016ada:	781b      	ldrb	r3, [r3, #0]
 8016adc:	2b04      	cmp	r3, #4
 8016ade:	d1e4      	bne.n	8016aaa <gpsInit+0x32>
        mode &= ~MODE_TX;
    }
#endif

    // no callback - buffer will be consumed in gpsUpdate()
    uartOpen(_DEF_UART6, 57600);
 8016ae0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8016ae4:	2006      	movs	r0, #6
 8016ae6:	f7fe fa99 	bl	801501c <uartOpen>
    // if (!gpsPort) {
    //     return;
    // }

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_STATE_INITIALIZING);
 8016aea:	2001      	movs	r0, #1
 8016aec:	f7ff ffa6 	bl	8016a3c <gpsSetState>
}
 8016af0:	bf00      	nop
 8016af2:	bd80      	pop	{r7, pc}
 8016af4:	200023dc 	.word	0x200023dc
 8016af8:	20002314 	.word	0x20002314
 8016afc:	0802cb60 	.word	0x0802cb60

08016b00 <ubloxSendByteUpdateChecksum>:
// }
// #endif // USE_GPS_NMEA

//#ifdef USE_GPS_UBLOX
static void ubloxSendByteUpdateChecksum(const uint8_t data, uint8_t *checksumA, uint8_t *checksumB)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b084      	sub	sp, #16
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	4603      	mov	r3, r0
 8016b08:	60b9      	str	r1, [r7, #8]
 8016b0a:	607a      	str	r2, [r7, #4]
 8016b0c:	73fb      	strb	r3, [r7, #15]
    *checksumA += data;
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	781a      	ldrb	r2, [r3, #0]
 8016b12:	7bfb      	ldrb	r3, [r7, #15]
 8016b14:	4413      	add	r3, r2
 8016b16:	b2da      	uxtb	r2, r3
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	701a      	strb	r2, [r3, #0]
    *checksumB += *checksumA;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	781a      	ldrb	r2, [r3, #0]
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	4413      	add	r3, r2
 8016b26:	b2da      	uxtb	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	701a      	strb	r2, [r3, #0]
    uartWrite(_DEF_UART6, (uint8_t*)&data, 1);
 8016b2c:	f107 030f 	add.w	r3, r7, #15
 8016b30:	2201      	movs	r2, #1
 8016b32:	4619      	mov	r1, r3
 8016b34:	2006      	movs	r0, #6
 8016b36:	f7fe fe47 	bl	80157c8 <uartWrite>
    //serialWrite(gpsPort, data);
}
 8016b3a:	bf00      	nop
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <ubloxSendDataUpdateChecksum>:

static void ubloxSendDataUpdateChecksum(const uint8_t *data, uint8_t len, uint8_t *checksumA, uint8_t *checksumB)
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b084      	sub	sp, #16
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	60f8      	str	r0, [r7, #12]
 8016b4a:	607a      	str	r2, [r7, #4]
 8016b4c:	603b      	str	r3, [r7, #0]
 8016b4e:	460b      	mov	r3, r1
 8016b50:	72fb      	strb	r3, [r7, #11]
    while (len--) {
 8016b52:	e009      	b.n	8016b68 <ubloxSendDataUpdateChecksum+0x26>
        ubloxSendByteUpdateChecksum(*data, checksumA, checksumB);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	683a      	ldr	r2, [r7, #0]
 8016b5a:	6879      	ldr	r1, [r7, #4]
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7ff ffcf 	bl	8016b00 <ubloxSendByteUpdateChecksum>
        data++;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	3301      	adds	r3, #1
 8016b66:	60fb      	str	r3, [r7, #12]
    while (len--) {
 8016b68:	7afb      	ldrb	r3, [r7, #11]
 8016b6a:	1e5a      	subs	r2, r3, #1
 8016b6c:	72fa      	strb	r2, [r7, #11]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1f0      	bne.n	8016b54 <ubloxSendDataUpdateChecksum+0x12>
    }
}
 8016b72:	bf00      	nop
 8016b74:	bf00      	nop
 8016b76:	3710      	adds	r7, #16
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <ubloxSendMessage>:

static void ubloxSendMessage(const uint8_t *data, uint8_t len)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	460b      	mov	r3, r1
 8016b86:	70fb      	strb	r3, [r7, #3]
    uint8_t checksumA = 0, checksumB = 0;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	73fb      	strb	r3, [r7, #15]
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	73bb      	strb	r3, [r7, #14]
    uartWrite(_DEF_UART6, (uint8_t*)&data[0], 1);
 8016b90:	2201      	movs	r2, #1
 8016b92:	6879      	ldr	r1, [r7, #4]
 8016b94:	2006      	movs	r0, #6
 8016b96:	f7fe fe17 	bl	80157c8 <uartWrite>
    uartWrite(_DEF_UART6, (uint8_t*)&data[1], 1);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	3301      	adds	r3, #1
 8016b9e:	2201      	movs	r2, #1
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	2006      	movs	r0, #6
 8016ba4:	f7fe fe10 	bl	80157c8 <uartWrite>
    //serialWrite(gpsPort, data[0]);
    //serialWrite(gpsPort, data[1]);
    ubloxSendDataUpdateChecksum(&data[2], len - 2, &checksumA, &checksumB);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	1c98      	adds	r0, r3, #2
 8016bac:	78fb      	ldrb	r3, [r7, #3]
 8016bae:	3b02      	subs	r3, #2
 8016bb0:	b2d9      	uxtb	r1, r3
 8016bb2:	f107 030e 	add.w	r3, r7, #14
 8016bb6:	f107 020f 	add.w	r2, r7, #15
 8016bba:	f7ff ffc2 	bl	8016b42 <ubloxSendDataUpdateChecksum>
    uartWrite(_DEF_UART6, &checksumA, 1);
 8016bbe:	f107 030f 	add.w	r3, r7, #15
 8016bc2:	2201      	movs	r2, #1
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	2006      	movs	r0, #6
 8016bc8:	f7fe fdfe 	bl	80157c8 <uartWrite>
    uartWrite(_DEF_UART6, &checksumA, 1);
 8016bcc:	f107 030f 	add.w	r3, r7, #15
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	2006      	movs	r0, #6
 8016bd6:	f7fe fdf7 	bl	80157c8 <uartWrite>

    // Save state for ACK waiting
    gpsData.ackWaitingMsgId = data[3]; //save message id for ACK
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	78da      	ldrb	r2, [r3, #3]
 8016bde:	4b06      	ldr	r3, [pc, #24]	; (8016bf8 <ubloxSendMessage+0x7c>)
 8016be0:	769a      	strb	r2, [r3, #26]
    gpsData.ackTimeoutCounter = 0;
 8016be2:	4b05      	ldr	r3, [pc, #20]	; (8016bf8 <ubloxSendMessage+0x7c>)
 8016be4:	2200      	movs	r2, #0
 8016be6:	76da      	strb	r2, [r3, #27]
    gpsData.ackState = UBLOX_ACK_WAITING;
 8016be8:	4b03      	ldr	r3, [pc, #12]	; (8016bf8 <ubloxSendMessage+0x7c>)
 8016bea:	2201      	movs	r2, #1
 8016bec:	771a      	strb	r2, [r3, #28]
}
 8016bee:	bf00      	nop
 8016bf0:	3710      	adds	r7, #16
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	200023dc 	.word	0x200023dc

08016bfc <ubloxSendConfigMessage>:

static void ubloxSendConfigMessage(ubx_message *message, uint8_t msg_id, uint8_t length)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	460b      	mov	r3, r1
 8016c06:	70fb      	strb	r3, [r7, #3]
 8016c08:	4613      	mov	r3, r2
 8016c0a:	70bb      	strb	r3, [r7, #2]
    message->header.preamble1 = PREAMBLE1;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	22b5      	movs	r2, #181	; 0xb5
 8016c10:	701a      	strb	r2, [r3, #0]
    message->header.preamble2 = PREAMBLE2;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2262      	movs	r2, #98	; 0x62
 8016c16:	705a      	strb	r2, [r3, #1]
    message->header.msg_class = CLASS_CFG;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2206      	movs	r2, #6
 8016c1c:	709a      	strb	r2, [r3, #2]
    message->header.msg_id = msg_id;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	78fa      	ldrb	r2, [r7, #3]
 8016c22:	70da      	strb	r2, [r3, #3]
    message->header.length = length;
 8016c24:	78bb      	ldrb	r3, [r7, #2]
 8016c26:	b29a      	uxth	r2, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	809a      	strh	r2, [r3, #4]
    ubloxSendMessage((const uint8_t *) message, length + 6);
 8016c2c:	78bb      	ldrb	r3, [r7, #2]
 8016c2e:	3306      	adds	r3, #6
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	4619      	mov	r1, r3
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f7ff ffa1 	bl	8016b7c <ubloxSendMessage>
}
 8016c3a:	bf00      	nop
 8016c3c:	3708      	adds	r7, #8
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}

08016c42 <ubloxSetMessageRate>:
    tx_buffer.payload.cfg_nav5.reserved1[4] = 0;

    ubloxSendConfigMessage(&tx_buffer, MSG_CFG_NAV_SETTINGS, sizeof(ubx_cfg_nav5));
}

static void ubloxSetMessageRate(uint8_t messageClass, uint8_t messageID, uint8_t rate) {
 8016c42:	b580      	push	{r7, lr}
 8016c44:	b094      	sub	sp, #80	; 0x50
 8016c46:	af00      	add	r7, sp, #0
 8016c48:	4603      	mov	r3, r0
 8016c4a:	71fb      	strb	r3, [r7, #7]
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	71bb      	strb	r3, [r7, #6]
 8016c50:	4613      	mov	r3, r2
 8016c52:	717b      	strb	r3, [r7, #5]
    ubx_message tx_buffer;
    tx_buffer.payload.cfg_msg.msgClass = messageClass;
 8016c54:	79fb      	ldrb	r3, [r7, #7]
 8016c56:	74bb      	strb	r3, [r7, #18]
    tx_buffer.payload.cfg_msg.msgID = messageID;
 8016c58:	79bb      	ldrb	r3, [r7, #6]
 8016c5a:	74fb      	strb	r3, [r7, #19]
    tx_buffer.payload.cfg_msg.rate = rate;
 8016c5c:	797b      	ldrb	r3, [r7, #5]
 8016c5e:	753b      	strb	r3, [r7, #20]
    ubloxSendConfigMessage(&tx_buffer, MSG_CFG_MSG, sizeof(ubx_cfg_msg));
 8016c60:	f107 030c 	add.w	r3, r7, #12
 8016c64:	2203      	movs	r2, #3
 8016c66:	2101      	movs	r1, #1
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7ff ffc7 	bl	8016bfc <ubloxSendConfigMessage>
}
 8016c6e:	bf00      	nop
 8016c70:	3750      	adds	r7, #80	; 0x50
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
	...

08016c78 <gpsInitUblox>:
//     }
//     ubloxSendConfigMessage(&tx_buffer, MSG_CFG_SBAS, sizeof(ubx_cfg_sbas));
// }

void gpsInitUblox(void)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
    uint32_t now;
    // UBX will run at the serial port's baudrate, it shouldn't be "autodetected". So here we force it to that rate

    // Wait until GPS transmit buffer is empty
    if (!uartAvailable(_DEF_UART6))
 8016c7e:	2006      	movs	r0, #6
 8016c80:	f7fe fc44 	bl	801550c <uartAvailable>
 8016c84:	4603      	mov	r3, r0
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d06e      	beq.n	8016d68 <gpsInitUblox+0xf0>
        return;

    switch (gpsData.state) {
 8016c8a:	4b3a      	ldr	r3, [pc, #232]	; (8016d74 <gpsInitUblox+0xfc>)
 8016c8c:	7e1b      	ldrb	r3, [r3, #24]
 8016c8e:	2b04      	cmp	r3, #4
 8016c90:	d066      	beq.n	8016d60 <gpsInitUblox+0xe8>
 8016c92:	2b04      	cmp	r3, #4
 8016c94:	dc6b      	bgt.n	8016d6e <gpsInitUblox+0xf6>
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d002      	beq.n	8016ca0 <gpsInitUblox+0x28>
 8016c9a:	2b03      	cmp	r3, #3
 8016c9c:	d049      	beq.n	8016d32 <gpsInitUblox+0xba>
 8016c9e:	e066      	b.n	8016d6e <gpsInitUblox+0xf6>
        case GPS_STATE_INITIALIZING:
            now = millis();
 8016ca0:	f7f2 fac1 	bl	8009226 <millis>
 8016ca4:	6038      	str	r0, [r7, #0]
            if (now - gpsData.state_ts < GPS_BAUDRATE_CHANGE_DELAY)
 8016ca6:	4b33      	ldr	r3, [pc, #204]	; (8016d74 <gpsInitUblox+0xfc>)
 8016ca8:	695b      	ldr	r3, [r3, #20]
 8016caa:	683a      	ldr	r2, [r7, #0]
 8016cac:	1ad3      	subs	r3, r2, r3
 8016cae:	2bc7      	cmp	r3, #199	; 0xc7
 8016cb0:	d95c      	bls.n	8016d6c <gpsInitUblox+0xf4>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 8016cb2:	4b30      	ldr	r3, [pc, #192]	; (8016d74 <gpsInitUblox+0xfc>)
 8016cb4:	691b      	ldr	r3, [r3, #16]
 8016cb6:	2b04      	cmp	r3, #4
 8016cb8:	d837      	bhi.n	8016d2a <gpsInitUblox+0xb2>
                // try different speed to INIT
                baudRate_e newBaudRateIndex = gpsInitData[gpsData.state_position].baudrateIndex;
 8016cba:	4b2e      	ldr	r3, [pc, #184]	; (8016d74 <gpsInitUblox+0xfc>)
 8016cbc:	691a      	ldr	r2, [r3, #16]
 8016cbe:	492e      	ldr	r1, [pc, #184]	; (8016d78 <gpsInitUblox+0x100>)
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	009b      	lsls	r3, r3, #2
 8016cc8:	440b      	add	r3, r1
 8016cca:	3301      	adds	r3, #1
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	71fb      	strb	r3, [r7, #7]

                gpsData.state_ts = now;
 8016cd0:	4a28      	ldr	r2, [pc, #160]	; (8016d74 <gpsInitUblox+0xfc>)
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	6153      	str	r3, [r2, #20]

                if (lookupBaudRateIndex(uartGetBaud(_DEF_UART6)) != newBaudRateIndex) {
 8016cd6:	2006      	movs	r0, #6
 8016cd8:	f7fe fe50 	bl	801597c <uartGetBaud>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fe ff16 	bl	8015b10 <lookupBaudRateIndex>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	79fb      	ldrb	r3, [r7, #7]
 8016cea:	4293      	cmp	r3, r2
 8016cec:	d008      	beq.n	8016d00 <gpsInitUblox+0x88>
                    // change the rate if needed and wait a little
                    uartSetBaud(_DEF_UART6, baudRates[newBaudRateIndex]);
 8016cee:	79fb      	ldrb	r3, [r7, #7]
 8016cf0:	4a22      	ldr	r2, [pc, #136]	; (8016d7c <gpsInitUblox+0x104>)
 8016cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	2006      	movs	r0, #6
 8016cfa:	f7fe fe83 	bl	8015a04 <uartSetBaud>
                    //serialSetBaudRate(gpsPort, baudRates[newBaudRateIndex]);
#if DEBUG_SERIAL_BAUD
                    debug[0] = baudRates[newBaudRateIndex] / 100;
#endif
                    return;
 8016cfe:	e036      	b.n	8016d6e <gpsInitUblox+0xf6>
                }

                // print our FIXED init string for the baudrate we want to be at
                serialPrint(_DEF_UART6, gpsInitData[gpsData.baudrateIndex].ubx);
 8016d00:	4b1c      	ldr	r3, [pc, #112]	; (8016d74 <gpsInitUblox+0xfc>)
 8016d02:	7e5b      	ldrb	r3, [r3, #25]
 8016d04:	4619      	mov	r1, r3
 8016d06:	4a1c      	ldr	r2, [pc, #112]	; (8016d78 <gpsInitUblox+0x100>)
 8016d08:	460b      	mov	r3, r1
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	440b      	add	r3, r1
 8016d0e:	009b      	lsls	r3, r3, #2
 8016d10:	4413      	add	r3, r2
 8016d12:	3304      	adds	r3, #4
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	4619      	mov	r1, r3
 8016d18:	2006      	movs	r0, #6
 8016d1a:	f7fe fddd 	bl	80158d8 <serialPrint>

                gpsData.state_position++;
 8016d1e:	4b15      	ldr	r3, [pc, #84]	; (8016d74 <gpsInitUblox+0xfc>)
 8016d20:	691b      	ldr	r3, [r3, #16]
 8016d22:	3301      	adds	r3, #1
 8016d24:	4a13      	ldr	r2, [pc, #76]	; (8016d74 <gpsInitUblox+0xfc>)
 8016d26:	6113      	str	r3, [r2, #16]
            } else {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_STATE_CHANGE_BAUD);
            }
            break;
 8016d28:	e021      	b.n	8016d6e <gpsInitUblox+0xf6>
                gpsSetState(GPS_STATE_CHANGE_BAUD);
 8016d2a:	2003      	movs	r0, #3
 8016d2c:	f7ff fe86 	bl	8016a3c <gpsSetState>
            break;
 8016d30:	e01d      	b.n	8016d6e <gpsInitUblox+0xf6>

        case GPS_STATE_CHANGE_BAUD:
            uartSetBaud(_DEF_UART6, baudRates[gpsInitData[gpsData.baudrateIndex].baudrateIndex]);
 8016d32:	4b10      	ldr	r3, [pc, #64]	; (8016d74 <gpsInitUblox+0xfc>)
 8016d34:	7e5b      	ldrb	r3, [r3, #25]
 8016d36:	4619      	mov	r1, r3
 8016d38:	4a0f      	ldr	r2, [pc, #60]	; (8016d78 <gpsInitUblox+0x100>)
 8016d3a:	460b      	mov	r3, r1
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	440b      	add	r3, r1
 8016d40:	009b      	lsls	r3, r3, #2
 8016d42:	4413      	add	r3, r2
 8016d44:	3301      	adds	r3, #1
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	461a      	mov	r2, r3
 8016d4a:	4b0c      	ldr	r3, [pc, #48]	; (8016d7c <gpsInitUblox+0x104>)
 8016d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d50:	4619      	mov	r1, r3
 8016d52:	2006      	movs	r0, #6
 8016d54:	f7fe fe56 	bl	8015a04 <uartSetBaud>

#if DEBUG_SERIAL_BAUD
            debug[0] = baudRates[gpsInitData[gpsData.baudrateIndex].baudrateIndex] / 100;
#endif
            gpsSetState(GPS_STATE_CONFIGURE);
 8016d58:	2004      	movs	r0, #4
 8016d5a:	f7ff fe6f 	bl	8016a3c <gpsSetState>
            break;
 8016d5e:	e006      	b.n	8016d6e <gpsInitUblox+0xf6>

        case GPS_STATE_CONFIGURE:
            // Either use specific config file for GPS or let dynamically upload config
            if (true) { //gpsConfig()->autoConfig == GPS_AUTOCONFIG_OFF
                gpsSetState(GPS_STATE_RECEIVING_DATA);
 8016d60:	2005      	movs	r0, #5
 8016d62:	f7ff fe6b 	bl	8016a3c <gpsSetState>
                break;
 8016d66:	e002      	b.n	8016d6e <gpsInitUblox+0xf6>
        return;
 8016d68:	bf00      	nop
 8016d6a:	e000      	b.n	8016d6e <gpsInitUblox+0xf6>
                return;
 8016d6c:	bf00      	nop
                    break;
            }

            break;
    }
}
 8016d6e:	3708      	adds	r7, #8
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	200023dc 	.word	0x200023dc
 8016d78:	0802cb60 	.word	0x0802cb60
 8016d7c:	0802cb20 	.word	0x0802cb20

08016d80 <gpsInitHardware>:
//#endif // USE_GPS_UBLOX

void gpsInitHardware(void)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	af00      	add	r7, sp, #0
// #endif
//         break;

//     case GPS_UBLOX:
#ifdef USE_GPS_UBLOX
        gpsInitUblox();
 8016d84:	f7ff ff78 	bl	8016c78 <gpsInitUblox>
#endif
    //     break;
    // default:
    //     break;
    // }
}
 8016d88:	bf00      	nop
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <gpsUpdate>:
        //LED1_TOGGLE;
    }
}

void gpsUpdate(uint32_t currentTimeUs)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b086      	sub	sp, #24
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
    static gpsState_e gpsStateDurationUs[GPS_STATE_COUNT];
    uint32_t executeTimeUs;
    gpsState_e gpsCurrentState = gpsData.state;
 8016d94:	4b66      	ldr	r3, [pc, #408]	; (8016f30 <gpsUpdate+0x1a4>)
 8016d96:	7e1b      	ldrb	r3, [r3, #24]
 8016d98:	75fb      	strb	r3, [r7, #23]

    // read out available GPS bytes
    if (true) {//gpsPort
        while (uartAvailable(_DEF_UART6)) {
 8016d9a:	e017      	b.n	8016dcc <gpsUpdate+0x40>
            if (cmpTimeUs(micros(), currentTimeUs) > GPS_MAX_WAIT_DATA_RX) {
 8016d9c:	f7f2 fa4a 	bl	8009234 <micros>
 8016da0:	4603      	mov	r3, r0
 8016da2:	6879      	ldr	r1, [r7, #4]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7ff fe0e 	bl	80169c6 <cmpTimeUs>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2b1e      	cmp	r3, #30
 8016dae:	dd05      	ble.n	8016dbc <gpsUpdate+0x30>
                // Wait 1ms and come back
                rescheduleTask(TASK_SELF, TASK_PERIOD_HZ(TASK_GPS_RATE_FAST));
 8016db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016db4:	2010      	movs	r0, #16
 8016db6:	f7f7 fbb5 	bl	800e524 <rescheduleTask>
                return;
 8016dba:	e0b6      	b.n	8016f2a <gpsUpdate+0x19e>
            }
            gpsNewData(uartRead(_DEF_UART6));//serialRead(gpsPort)
 8016dbc:	2006      	movs	r0, #6
 8016dbe:	f7fe fc95 	bl	80156ec <uartRead>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f000 f8ba 	bl	8016f40 <gpsNewData>
        while (uartAvailable(_DEF_UART6)) {
 8016dcc:	2006      	movs	r0, #6
 8016dce:	f7fe fb9d 	bl	801550c <uartAvailable>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1e1      	bne.n	8016d9c <gpsUpdate+0x10>
        }
        // Restore default task rate
        rescheduleTask(TASK_SELF, TASK_PERIOD_HZ(TASK_GPS_RATE));
 8016dd8:	f242 7110 	movw	r1, #10000	; 0x2710
 8016ddc:	2010      	movs	r0, #16
 8016dde:	f7f7 fba1 	bl	800e524 <rescheduleTask>
    debug[0] = gpsData.state;
    debug[1] = gpsData.state_position;
    debug[2] = gpsData.ackState;
#endif

    switch (gpsData.state) {
 8016de2:	4b53      	ldr	r3, [pc, #332]	; (8016f30 <gpsUpdate+0x1a4>)
 8016de4:	7e1b      	ldrb	r3, [r3, #24]
 8016de6:	2b06      	cmp	r3, #6
 8016de8:	f200 8083 	bhi.w	8016ef2 <gpsUpdate+0x166>
 8016dec:	a201      	add	r2, pc, #4	; (adr r2, 8016df4 <gpsUpdate+0x68>)
 8016dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016df2:	bf00      	nop
 8016df4:	08016ef3 	.word	0x08016ef3
 8016df8:	08016e11 	.word	0x08016e11
 8016dfc:	08016ef3 	.word	0x08016ef3
 8016e00:	08016e11 	.word	0x08016e11
 8016e04:	08016e11 	.word	0x08016e11
 8016e08:	08016e3d 	.word	0x08016e3d
 8016e0c:	08016e17 	.word	0x08016e17
            break;

        case GPS_STATE_INITIALIZING:
        case GPS_STATE_CHANGE_BAUD:
        case GPS_STATE_CONFIGURE:
            gpsInitHardware();
 8016e10:	f7ff ffb6 	bl	8016d80 <gpsInitHardware>
            break;
 8016e14:	e06d      	b.n	8016ef2 <gpsUpdate+0x166>

        case GPS_STATE_LOST_COMMUNICATION:
            gpsData.timeouts++;
 8016e16:	4b46      	ldr	r3, [pc, #280]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e18:	685b      	ldr	r3, [r3, #4]
 8016e1a:	3301      	adds	r3, #1
 8016e1c:	4a44      	ldr	r2, [pc, #272]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e1e:	6053      	str	r3, [r2, #4]
            if (false) { //gpsConfig()->autoBaud
                // try another rate
                gpsData.baudrateIndex++;
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
            }
            gpsSol.numSat = 0;
 8016e20:	4b44      	ldr	r3, [pc, #272]	; (8016f34 <gpsUpdate+0x1a8>)
 8016e22:	2200      	movs	r2, #0
 8016e24:	751a      	strb	r2, [r3, #20]
            DISABLE_STATE(GPS_FIX);
 8016e26:	4b44      	ldr	r3, [pc, #272]	; (8016f38 <gpsUpdate+0x1ac>)
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	f023 0302 	bic.w	r3, r3, #2
 8016e2e:	b2da      	uxtb	r2, r3
 8016e30:	4b41      	ldr	r3, [pc, #260]	; (8016f38 <gpsUpdate+0x1ac>)
 8016e32:	701a      	strb	r2, [r3, #0]
            gpsSetState(GPS_STATE_INITIALIZING);
 8016e34:	2001      	movs	r0, #1
 8016e36:	f7ff fe01 	bl	8016a3c <gpsSetState>
            break;
 8016e3a:	e05a      	b.n	8016ef2 <gpsUpdate+0x166>

        case GPS_STATE_RECEIVING_DATA:
            // check for no data/gps timeout/cable disconnection etc
            if (millis() - gpsData.lastMessage > GPS_TIMEOUT) {
 8016e3c:	f7f2 f9f3 	bl	8009226 <millis>
 8016e40:	4602      	mov	r2, r0
 8016e42:	4b3b      	ldr	r3, [pc, #236]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e44:	689b      	ldr	r3, [r3, #8]
 8016e46:	1ad3      	subs	r3, r2, r3
 8016e48:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d903      	bls.n	8016e58 <gpsUpdate+0xcc>
                gpsSetState(GPS_STATE_LOST_COMMUNICATION);
 8016e50:	2006      	movs	r0, #6
 8016e52:	f7ff fdf3 	bl	8016a3c <gpsSetState>
                            break;
                    }
                }
#endif //USE_GPS_UBLOX
            }
            break;
 8016e56:	e04b      	b.n	8016ef0 <gpsUpdate+0x164>
                    switch (gpsData.state_position) {
 8016e58:	4b35      	ldr	r3, [pc, #212]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e5a:	691b      	ldr	r3, [r3, #16]
 8016e5c:	2b02      	cmp	r3, #2
 8016e5e:	d02a      	beq.n	8016eb6 <gpsUpdate+0x12a>
 8016e60:	2b02      	cmp	r3, #2
 8016e62:	d845      	bhi.n	8016ef0 <gpsUpdate+0x164>
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <gpsUpdate+0xe2>
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d01b      	beq.n	8016ea4 <gpsUpdate+0x118>
            break;
 8016e6c:	e040      	b.n	8016ef0 <gpsUpdate+0x164>
                            if (!isConfiguratorConnected()) {
 8016e6e:	f7ff fdd7 	bl	8016a20 <isConfiguratorConnected>
 8016e72:	4603      	mov	r3, r0
 8016e74:	f083 0301 	eor.w	r3, r3, #1
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d033      	beq.n	8016ee6 <gpsUpdate+0x15a>
                                if (gpsData.ubloxUseSAT) {
 8016e7e:	4b2c      	ldr	r3, [pc, #176]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e80:	7f9b      	ldrb	r3, [r3, #30]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d005      	beq.n	8016e92 <gpsUpdate+0x106>
                                    ubloxSetMessageRate(CLASS_NAV, MSG_SAT, 0); // disable SAT MSG
 8016e86:	2200      	movs	r2, #0
 8016e88:	2135      	movs	r1, #53	; 0x35
 8016e8a:	2001      	movs	r0, #1
 8016e8c:	f7ff fed9 	bl	8016c42 <ubloxSetMessageRate>
 8016e90:	e004      	b.n	8016e9c <gpsUpdate+0x110>
                                    ubloxSetMessageRate(CLASS_NAV, MSG_SVINFO, 0); // disable SVINFO MSG
 8016e92:	2200      	movs	r2, #0
 8016e94:	2130      	movs	r1, #48	; 0x30
 8016e96:	2001      	movs	r0, #1
 8016e98:	f7ff fed3 	bl	8016c42 <ubloxSetMessageRate>
                                gpsData.state_position = 1;
 8016e9c:	4b24      	ldr	r3, [pc, #144]	; (8016f30 <gpsUpdate+0x1a4>)
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	611a      	str	r2, [r3, #16]
                            break;
 8016ea2:	e020      	b.n	8016ee6 <gpsUpdate+0x15a>
                            if (isConfiguratorConnected()) {
 8016ea4:	f7ff fdbc 	bl	8016a20 <isConfiguratorConnected>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d01d      	beq.n	8016eea <gpsUpdate+0x15e>
                                gpsData.state_position = 2;
 8016eae:	4b20      	ldr	r3, [pc, #128]	; (8016f30 <gpsUpdate+0x1a4>)
 8016eb0:	2202      	movs	r2, #2
 8016eb2:	611a      	str	r2, [r3, #16]
                            break;
 8016eb4:	e019      	b.n	8016eea <gpsUpdate+0x15e>
                            if (isConfiguratorConnected()) {
 8016eb6:	f7ff fdb3 	bl	8016a20 <isConfiguratorConnected>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d016      	beq.n	8016eee <gpsUpdate+0x162>
                                if (gpsData.ubloxUseSAT) {
 8016ec0:	4b1b      	ldr	r3, [pc, #108]	; (8016f30 <gpsUpdate+0x1a4>)
 8016ec2:	7f9b      	ldrb	r3, [r3, #30]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d005      	beq.n	8016ed4 <gpsUpdate+0x148>
                                    ubloxSetMessageRate(CLASS_NAV, MSG_SAT, 5); // set SAT MSG rate (every 5 cycles)
 8016ec8:	2205      	movs	r2, #5
 8016eca:	2135      	movs	r1, #53	; 0x35
 8016ecc:	2001      	movs	r0, #1
 8016ece:	f7ff feb8 	bl	8016c42 <ubloxSetMessageRate>
 8016ed2:	e004      	b.n	8016ede <gpsUpdate+0x152>
                                    ubloxSetMessageRate(CLASS_NAV, MSG_SVINFO, 5); // set SVINFO MSG rate (every 5 cycles)
 8016ed4:	2205      	movs	r2, #5
 8016ed6:	2130      	movs	r1, #48	; 0x30
 8016ed8:	2001      	movs	r0, #1
 8016eda:	f7ff feb2 	bl	8016c42 <ubloxSetMessageRate>
                                gpsData.state_position = 0;
 8016ede:	4b14      	ldr	r3, [pc, #80]	; (8016f30 <gpsUpdate+0x1a4>)
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	611a      	str	r2, [r3, #16]
                            break;
 8016ee4:	e003      	b.n	8016eee <gpsUpdate+0x162>
                            break;
 8016ee6:	bf00      	nop
 8016ee8:	e002      	b.n	8016ef0 <gpsUpdate+0x164>
                            break;
 8016eea:	bf00      	nop
 8016eec:	e000      	b.n	8016ef0 <gpsUpdate+0x164>
                            break;
 8016eee:	bf00      	nop
            break;
 8016ef0:	bf00      	nop
    }

    executeTimeUs = micros() - currentTimeUs;
 8016ef2:	f7f2 f99f 	bl	8009234 <micros>
 8016ef6:	4602      	mov	r2, r0
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	1ad3      	subs	r3, r2, r3
 8016efc:	613b      	str	r3, [r7, #16]

    if (executeTimeUs > gpsStateDurationUs[gpsCurrentState]) {
 8016efe:	7dfb      	ldrb	r3, [r7, #23]
 8016f00:	4a0e      	ldr	r2, [pc, #56]	; (8016f3c <gpsUpdate+0x1b0>)
 8016f02:	5cd3      	ldrb	r3, [r2, r3]
 8016f04:	461a      	mov	r2, r3
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	4293      	cmp	r3, r2
 8016f0a:	d904      	bls.n	8016f16 <gpsUpdate+0x18a>
        gpsStateDurationUs[gpsCurrentState] = executeTimeUs;
 8016f0c:	7dfb      	ldrb	r3, [r7, #23]
 8016f0e:	693a      	ldr	r2, [r7, #16]
 8016f10:	b2d1      	uxtb	r1, r2
 8016f12:	4a0a      	ldr	r2, [pc, #40]	; (8016f3c <gpsUpdate+0x1b0>)
 8016f14:	54d1      	strb	r1, [r2, r3]
    }
    schedulerSetNextStateTime(gpsStateDurationUs[gpsData.state]);
 8016f16:	4b06      	ldr	r3, [pc, #24]	; (8016f30 <gpsUpdate+0x1a4>)
 8016f18:	7e1b      	ldrb	r3, [r3, #24]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	4b07      	ldr	r3, [pc, #28]	; (8016f3c <gpsUpdate+0x1b0>)
 8016f1e:	5c9b      	ldrb	r3, [r3, r2]
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7f7 fc7f 	bl	800e824 <schedulerSetNextStateTime>
    // }
    // if (!ARMING_FLAG(ARMED) && !gpsConfig()->gps_set_home_point_once) {
    //     DISABLE_STATE(GPS_FIX_HOME);
    // }

    uint8_t minSats = 5;
 8016f26:	2305      	movs	r3, #5
 8016f28:	73fb      	strb	r3, [r7, #15]
    //         hasFix = true;
    //     }
    // } else {
    //     hasFix = false;
    // }
}
 8016f2a:	3718      	adds	r7, #24
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}
 8016f30:	200023dc 	.word	0x200023dc
 8016f34:	2000233c 	.word	0x2000233c
 8016f38:	20003ea1 	.word	0x20003ea1
 8016f3c:	200025fc 	.word	0x200025fc

08016f40 <gpsNewData>:

static void gpsNewData(uint16_t c)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	80fb      	strh	r3, [r7, #6]
    if (!gpsNewFrame(c)) {
 8016f4a:	88fb      	ldrh	r3, [r7, #6]
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f000 f826 	bl	8016fa0 <gpsNewFrame>
 8016f54:	4603      	mov	r3, r0
 8016f56:	f083 0301 	eor.w	r3, r3, #1
 8016f5a:	b2db      	uxtb	r3, r3
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d116      	bne.n	8016f8e <gpsNewData+0x4e>
        return;
    }

    if (gpsData.state == GPS_STATE_RECEIVING_DATA) {
 8016f60:	4b0d      	ldr	r3, [pc, #52]	; (8016f98 <gpsNewData+0x58>)
 8016f62:	7e1b      	ldrb	r3, [r3, #24]
 8016f64:	2b05      	cmp	r3, #5
 8016f66:	d108      	bne.n	8016f7a <gpsNewData+0x3a>
        // new data received and parsed, we're in business
        gpsData.lastLastMessage = gpsData.lastMessage;
 8016f68:	4b0b      	ldr	r3, [pc, #44]	; (8016f98 <gpsNewData+0x58>)
 8016f6a:	689b      	ldr	r3, [r3, #8]
 8016f6c:	4a0a      	ldr	r2, [pc, #40]	; (8016f98 <gpsNewData+0x58>)
 8016f6e:	60d3      	str	r3, [r2, #12]
        gpsData.lastMessage = millis();
 8016f70:	f7f2 f959 	bl	8009226 <millis>
 8016f74:	4603      	mov	r3, r0
 8016f76:	4a08      	ldr	r2, [pc, #32]	; (8016f98 <gpsNewData+0x58>)
 8016f78:	6093      	str	r3, [r2, #8]
        //sensorsSet(SENSOR_GPS);
    }

    GPS_update ^= GPS_DIRECT_TICK;
 8016f7a:	4b08      	ldr	r3, [pc, #32]	; (8016f9c <gpsNewData+0x5c>)
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	f083 0301 	eor.w	r3, r3, #1
 8016f82:	b2da      	uxtb	r2, r3
 8016f84:	4b05      	ldr	r3, [pc, #20]	; (8016f9c <gpsNewData+0x5c>)
 8016f86:	701a      	strb	r2, [r3, #0]

#if DEBUG_UBLOX_INIT
    debug[3] = GPS_update;
#endif

    onGpsNewData();
 8016f88:	f000 fe02 	bl	8017b90 <onGpsNewData>
 8016f8c:	e000      	b.n	8016f90 <gpsNewData+0x50>
        return;
 8016f8e:	bf00      	nop
}
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	200023dc 	.word	0x200023dc
 8016f9c:	20003ec3 	.word	0x20003ec3

08016fa0 <gpsNewFrame>:

bool gpsNewFrame(uint8_t c)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	71fb      	strb	r3, [r7, #7]
        return gpsNewFrameNMEA(c);
#endif
        break;
    case GPS_UBLOX:         // UBX binary
#ifdef USE_GPS_UBLOX
        return gpsNewFrameUBLOX(c);
 8016faa:	79fb      	ldrb	r3, [r7, #7]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f000 fb7d 	bl	80176ac <gpsNewFrameUBLOX>
 8016fb2:	4603      	mov	r3, r0
        break;
    default:
        break;
    }
    return false;
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3708      	adds	r7, #8
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}

08016fbc <UBLOX_parse_gps>:
        data++;
    }
}

static bool UBLOX_parse_gps(void)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	ed2d 8b02 	vpush	{d8}
 8016fc2:	b094      	sub	sp, #80	; 0x50
 8016fc4:	af00      	add	r7, sp, #0
    uint32_t i;

    *gpsPacketLogChar = LOG_IGNORED;
 8016fc6:	4b95      	ldr	r3, [pc, #596]	; (801721c <UBLOX_parse_gps+0x260>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2221      	movs	r2, #33	; 0x21
 8016fcc:	701a      	strb	r2, [r3, #0]

    switch (_msg_id) {
 8016fce:	4b94      	ldr	r3, [pc, #592]	; (8017220 <UBLOX_parse_gps+0x264>)
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8016fd4:	f200 8336 	bhi.w	8017644 <UBLOX_parse_gps+0x688>
 8016fd8:	a201      	add	r2, pc, #4	; (adr r2, 8016fe0 <UBLOX_parse_gps+0x24>)
 8016fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fde:	bf00      	nop
 8016fe0:	08017629 	.word	0x08017629
 8016fe4:	0801760d 	.word	0x0801760d
 8016fe8:	080170dd 	.word	0x080170dd
 8016fec:	0801711b 	.word	0x0801711b
 8016ff0:	08017645 	.word	0x08017645
 8016ff4:	08017645 	.word	0x08017645
 8016ff8:	08017167 	.word	0x08017167
 8016ffc:	080171fd 	.word	0x080171fd
 8017000:	08017645 	.word	0x08017645
 8017004:	08017645 	.word	0x08017645
 8017008:	08017645 	.word	0x08017645
 801700c:	08017645 	.word	0x08017645
 8017010:	08017645 	.word	0x08017645
 8017014:	08017645 	.word	0x08017645
 8017018:	08017645 	.word	0x08017645
 801701c:	08017645 	.word	0x08017645
 8017020:	08017645 	.word	0x08017645
 8017024:	08017645 	.word	0x08017645
 8017028:	080171c3 	.word	0x080171c3
 801702c:	08017645 	.word	0x08017645
 8017030:	08017645 	.word	0x08017645
 8017034:	08017645 	.word	0x08017645
 8017038:	08017645 	.word	0x08017645
 801703c:	08017645 	.word	0x08017645
 8017040:	08017645 	.word	0x08017645
 8017044:	08017645 	.word	0x08017645
 8017048:	08017645 	.word	0x08017645
 801704c:	08017645 	.word	0x08017645
 8017050:	08017645 	.word	0x08017645
 8017054:	08017645 	.word	0x08017645
 8017058:	08017645 	.word	0x08017645
 801705c:	08017645 	.word	0x08017645
 8017060:	08017645 	.word	0x08017645
 8017064:	08017645 	.word	0x08017645
 8017068:	08017645 	.word	0x08017645
 801706c:	08017645 	.word	0x08017645
 8017070:	08017645 	.word	0x08017645
 8017074:	08017645 	.word	0x08017645
 8017078:	08017645 	.word	0x08017645
 801707c:	08017645 	.word	0x08017645
 8017080:	08017645 	.word	0x08017645
 8017084:	08017645 	.word	0x08017645
 8017088:	08017645 	.word	0x08017645
 801708c:	08017645 	.word	0x08017645
 8017090:	08017645 	.word	0x08017645
 8017094:	08017645 	.word	0x08017645
 8017098:	08017645 	.word	0x08017645
 801709c:	08017645 	.word	0x08017645
 80170a0:	08017339 	.word	0x08017339
 80170a4:	08017645 	.word	0x08017645
 80170a8:	08017645 	.word	0x08017645
 80170ac:	08017645 	.word	0x08017645
 80170b0:	08017645 	.word	0x08017645
 80170b4:	08017427 	.word	0x08017427
 80170b8:	08017645 	.word	0x08017645
 80170bc:	08017645 	.word	0x08017645
 80170c0:	08017645 	.word	0x08017645
 80170c4:	08017645 	.word	0x08017645
 80170c8:	08017645 	.word	0x08017645
 80170cc:	08017645 	.word	0x08017645
 80170d0:	08017645 	.word	0x08017645
 80170d4:	08017645 	.word	0x08017645
 80170d8:	08017557 	.word	0x08017557
    case MSG_POSLLH:
        *gpsPacketLogChar = LOG_UBLOX_POSLLH;
 80170dc:	4b4f      	ldr	r3, [pc, #316]	; (801721c <UBLOX_parse_gps+0x260>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	2250      	movs	r2, #80	; 0x50
 80170e2:	701a      	strb	r2, [r3, #0]
        //i2c_dataset.time                = _buffer.posllh.time;
        gpsSol.llh.lon = _buffer.posllh.longitude;
 80170e4:	4b4f      	ldr	r3, [pc, #316]	; (8017224 <UBLOX_parse_gps+0x268>)
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	4a4f      	ldr	r2, [pc, #316]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80170ea:	6053      	str	r3, [r2, #4]
        gpsSol.llh.lat = _buffer.posllh.latitude;
 80170ec:	4b4d      	ldr	r3, [pc, #308]	; (8017224 <UBLOX_parse_gps+0x268>)
 80170ee:	689b      	ldr	r3, [r3, #8]
 80170f0:	4a4d      	ldr	r2, [pc, #308]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80170f2:	6013      	str	r3, [r2, #0]
        gpsSol.llh.altCm = _buffer.posllh.altitudeMslMm / 10;  //alt in cm
 80170f4:	4b4b      	ldr	r3, [pc, #300]	; (8017224 <UBLOX_parse_gps+0x268>)
 80170f6:	691b      	ldr	r3, [r3, #16]
 80170f8:	4a4c      	ldr	r2, [pc, #304]	; (801722c <UBLOX_parse_gps+0x270>)
 80170fa:	fb82 1203 	smull	r1, r2, r2, r3
 80170fe:	1092      	asrs	r2, r2, #2
 8017100:	17db      	asrs	r3, r3, #31
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	4a48      	ldr	r2, [pc, #288]	; (8017228 <UBLOX_parse_gps+0x26c>)
 8017106:	6093      	str	r3, [r2, #8]
        gpsSetFixState(next_fix);
 8017108:	4b49      	ldr	r3, [pc, #292]	; (8017230 <UBLOX_parse_gps+0x274>)
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	4618      	mov	r0, r3
 801710e:	f000 fd93 	bl	8017c38 <gpsSetFixState>
        _new_position = true;
 8017112:	4b48      	ldr	r3, [pc, #288]	; (8017234 <UBLOX_parse_gps+0x278>)
 8017114:	2201      	movs	r2, #1
 8017116:	701a      	strb	r2, [r3, #0]
        break;
 8017118:	e29b      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_STATUS:
        *gpsPacketLogChar = LOG_UBLOX_STATUS;
 801711a:	4b40      	ldr	r3, [pc, #256]	; (801721c <UBLOX_parse_gps+0x260>)
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	2253      	movs	r2, #83	; 0x53
 8017120:	701a      	strb	r2, [r3, #0]
        next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8017122:	4b40      	ldr	r3, [pc, #256]	; (8017224 <UBLOX_parse_gps+0x268>)
 8017124:	795b      	ldrb	r3, [r3, #5]
 8017126:	f003 0301 	and.w	r3, r3, #1
 801712a:	2b00      	cmp	r3, #0
 801712c:	d005      	beq.n	801713a <UBLOX_parse_gps+0x17e>
 801712e:	4b3d      	ldr	r3, [pc, #244]	; (8017224 <UBLOX_parse_gps+0x268>)
 8017130:	791b      	ldrb	r3, [r3, #4]
 8017132:	2b03      	cmp	r3, #3
 8017134:	d101      	bne.n	801713a <UBLOX_parse_gps+0x17e>
 8017136:	2301      	movs	r3, #1
 8017138:	e000      	b.n	801713c <UBLOX_parse_gps+0x180>
 801713a:	2300      	movs	r3, #0
 801713c:	f003 0301 	and.w	r3, r3, #1
 8017140:	b2da      	uxtb	r2, r3
 8017142:	4b3b      	ldr	r3, [pc, #236]	; (8017230 <UBLOX_parse_gps+0x274>)
 8017144:	701a      	strb	r2, [r3, #0]
        if (!next_fix)
 8017146:	4b3a      	ldr	r3, [pc, #232]	; (8017230 <UBLOX_parse_gps+0x274>)
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	f083 0301 	eor.w	r3, r3, #1
 801714e:	b2db      	uxtb	r3, r3
 8017150:	2b00      	cmp	r3, #0
 8017152:	f000 8279 	beq.w	8017648 <UBLOX_parse_gps+0x68c>
            DISABLE_STATE(GPS_FIX);
 8017156:	4b38      	ldr	r3, [pc, #224]	; (8017238 <UBLOX_parse_gps+0x27c>)
 8017158:	781b      	ldrb	r3, [r3, #0]
 801715a:	f023 0302 	bic.w	r3, r3, #2
 801715e:	b2da      	uxtb	r2, r3
 8017160:	4b35      	ldr	r3, [pc, #212]	; (8017238 <UBLOX_parse_gps+0x27c>)
 8017162:	701a      	strb	r2, [r3, #0]
        break;
 8017164:	e270      	b.n	8017648 <UBLOX_parse_gps+0x68c>
    case MSG_SOL:
        *gpsPacketLogChar = LOG_UBLOX_SOL;
 8017166:	4b2d      	ldr	r3, [pc, #180]	; (801721c <UBLOX_parse_gps+0x260>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	224f      	movs	r2, #79	; 0x4f
 801716c:	701a      	strb	r2, [r3, #0]
        next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
 801716e:	4b2d      	ldr	r3, [pc, #180]	; (8017224 <UBLOX_parse_gps+0x268>)
 8017170:	7adb      	ldrb	r3, [r3, #11]
 8017172:	f003 0301 	and.w	r3, r3, #1
 8017176:	2b00      	cmp	r3, #0
 8017178:	d005      	beq.n	8017186 <UBLOX_parse_gps+0x1ca>
 801717a:	4b2a      	ldr	r3, [pc, #168]	; (8017224 <UBLOX_parse_gps+0x268>)
 801717c:	7a9b      	ldrb	r3, [r3, #10]
 801717e:	2b03      	cmp	r3, #3
 8017180:	d101      	bne.n	8017186 <UBLOX_parse_gps+0x1ca>
 8017182:	2301      	movs	r3, #1
 8017184:	e000      	b.n	8017188 <UBLOX_parse_gps+0x1cc>
 8017186:	2300      	movs	r3, #0
 8017188:	f003 0301 	and.w	r3, r3, #1
 801718c:	b2da      	uxtb	r2, r3
 801718e:	4b28      	ldr	r3, [pc, #160]	; (8017230 <UBLOX_parse_gps+0x274>)
 8017190:	701a      	strb	r2, [r3, #0]
        if (!next_fix)
 8017192:	4b27      	ldr	r3, [pc, #156]	; (8017230 <UBLOX_parse_gps+0x274>)
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	f083 0301 	eor.w	r3, r3, #1
 801719a:	b2db      	uxtb	r3, r3
 801719c:	2b00      	cmp	r3, #0
 801719e:	d006      	beq.n	80171ae <UBLOX_parse_gps+0x1f2>
            DISABLE_STATE(GPS_FIX);
 80171a0:	4b25      	ldr	r3, [pc, #148]	; (8017238 <UBLOX_parse_gps+0x27c>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	f023 0302 	bic.w	r3, r3, #2
 80171a8:	b2da      	uxtb	r2, r3
 80171aa:	4b23      	ldr	r3, [pc, #140]	; (8017238 <UBLOX_parse_gps+0x27c>)
 80171ac:	701a      	strb	r2, [r3, #0]
        gpsSol.numSat = _buffer.solution.satellites;
 80171ae:	4b1d      	ldr	r3, [pc, #116]	; (8017224 <UBLOX_parse_gps+0x268>)
 80171b0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80171b4:	4b1c      	ldr	r3, [pc, #112]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80171b6:	751a      	strb	r2, [r3, #20]
        gpsSol.hdop = _buffer.solution.position_DOP;
 80171b8:	4b1a      	ldr	r3, [pc, #104]	; (8017224 <UBLOX_parse_gps+0x268>)
 80171ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80171bc:	4b1a      	ldr	r3, [pc, #104]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80171be:	825a      	strh	r2, [r3, #18]
            //calculate rtctime: week number * ms in a week + ms of week + fractions of second + offset to UNIX reference year - 18 leap seconds
            rtcTime_t temp_time = (((int64_t) _buffer.solution.week)*7*24*60*60*1000) + _buffer.solution.time + (_buffer.solution.time_nsec/1000000) + 315964800000LL - 18000;
            rtcSet(&temp_time);
        }
#endif
        break;
 80171c0:	e247      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_VELNED:
        *gpsPacketLogChar = LOG_UBLOX_VELNED;
 80171c2:	4b16      	ldr	r3, [pc, #88]	; (801721c <UBLOX_parse_gps+0x260>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	2256      	movs	r2, #86	; 0x56
 80171c8:	701a      	strb	r2, [r3, #0]
        gpsSol.speed3d = _buffer.velned.speed_3d;       // cm/s
 80171ca:	4b16      	ldr	r3, [pc, #88]	; (8017224 <UBLOX_parse_gps+0x268>)
 80171cc:	691b      	ldr	r3, [r3, #16]
 80171ce:	b29a      	uxth	r2, r3
 80171d0:	4b15      	ldr	r3, [pc, #84]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80171d2:	819a      	strh	r2, [r3, #12]
        gpsSol.groundSpeed = _buffer.velned.speed_2d;    // cm/s
 80171d4:	4b13      	ldr	r3, [pc, #76]	; (8017224 <UBLOX_parse_gps+0x268>)
 80171d6:	695b      	ldr	r3, [r3, #20]
 80171d8:	b29a      	uxth	r2, r3
 80171da:	4b13      	ldr	r3, [pc, #76]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80171dc:	81da      	strh	r2, [r3, #14]
        gpsSol.groundCourse = (uint16_t) (_buffer.velned.heading_2d / 10000);     // Heading 2D deg * 100000 rescaled to deg * 10
 80171de:	4b11      	ldr	r3, [pc, #68]	; (8017224 <UBLOX_parse_gps+0x268>)
 80171e0:	699b      	ldr	r3, [r3, #24]
 80171e2:	4a16      	ldr	r2, [pc, #88]	; (801723c <UBLOX_parse_gps+0x280>)
 80171e4:	fb82 1203 	smull	r1, r2, r2, r3
 80171e8:	1312      	asrs	r2, r2, #12
 80171ea:	17db      	asrs	r3, r3, #31
 80171ec:	1ad3      	subs	r3, r2, r3
 80171ee:	b29a      	uxth	r2, r3
 80171f0:	4b0d      	ldr	r3, [pc, #52]	; (8017228 <UBLOX_parse_gps+0x26c>)
 80171f2:	821a      	strh	r2, [r3, #16]
        _new_speed = true;
 80171f4:	4b12      	ldr	r3, [pc, #72]	; (8017240 <UBLOX_parse_gps+0x284>)
 80171f6:	2201      	movs	r2, #1
 80171f8:	701a      	strb	r2, [r3, #0]
        break;
 80171fa:	e22a      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_PVT:
        *gpsPacketLogChar = LOG_UBLOX_SOL;
 80171fc:	4b07      	ldr	r3, [pc, #28]	; (801721c <UBLOX_parse_gps+0x260>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	224f      	movs	r2, #79	; 0x4f
 8017202:	701a      	strb	r2, [r3, #0]
        next_fix = (_buffer.pvt.flags & NAV_STATUS_FIX_VALID) && (_buffer.pvt.fixType == FIX_3D);
 8017204:	4b07      	ldr	r3, [pc, #28]	; (8017224 <UBLOX_parse_gps+0x268>)
 8017206:	7d5b      	ldrb	r3, [r3, #21]
 8017208:	f003 0301 	and.w	r3, r3, #1
 801720c:	2b00      	cmp	r3, #0
 801720e:	d019      	beq.n	8017244 <UBLOX_parse_gps+0x288>
 8017210:	4b04      	ldr	r3, [pc, #16]	; (8017224 <UBLOX_parse_gps+0x268>)
 8017212:	7d1b      	ldrb	r3, [r3, #20]
 8017214:	2b03      	cmp	r3, #3
 8017216:	d115      	bne.n	8017244 <UBLOX_parse_gps+0x288>
 8017218:	2301      	movs	r3, #1
 801721a:	e014      	b.n	8017246 <UBLOX_parse_gps+0x28a>
 801721c:	200003ac 	.word	0x200003ac
 8017220:	20003ec9 	.word	0x20003ec9
 8017224:	200023fc 	.word	0x200023fc
 8017228:	2000233c 	.word	0x2000233c
 801722c:	66666667 	.word	0x66666667
 8017230:	20003eca 	.word	0x20003eca
 8017234:	20003ecc 	.word	0x20003ecc
 8017238:	20003ea1 	.word	0x20003ea1
 801723c:	68db8bad 	.word	0x68db8bad
 8017240:	20003ecd 	.word	0x20003ecd
 8017244:	2300      	movs	r3, #0
 8017246:	f003 0301 	and.w	r3, r3, #1
 801724a:	b2da      	uxtb	r2, r3
 801724c:	4ba2      	ldr	r3, [pc, #648]	; (80174d8 <UBLOX_parse_gps+0x51c>)
 801724e:	701a      	strb	r2, [r3, #0]
        gpsSol.llh.lon = _buffer.pvt.lon;
 8017250:	4ba2      	ldr	r3, [pc, #648]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017252:	699b      	ldr	r3, [r3, #24]
 8017254:	4aa2      	ldr	r2, [pc, #648]	; (80174e0 <UBLOX_parse_gps+0x524>)
 8017256:	6053      	str	r3, [r2, #4]
        gpsSol.llh.lat = _buffer.pvt.lat;
 8017258:	4ba0      	ldr	r3, [pc, #640]	; (80174dc <UBLOX_parse_gps+0x520>)
 801725a:	69db      	ldr	r3, [r3, #28]
 801725c:	4aa0      	ldr	r2, [pc, #640]	; (80174e0 <UBLOX_parse_gps+0x524>)
 801725e:	6013      	str	r3, [r2, #0]
        gpsSol.llh.altCm = _buffer.pvt.hMSL / 10;  //alt in cm
 8017260:	4b9e      	ldr	r3, [pc, #632]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017264:	4a9f      	ldr	r2, [pc, #636]	; (80174e4 <UBLOX_parse_gps+0x528>)
 8017266:	fb82 1203 	smull	r1, r2, r2, r3
 801726a:	1092      	asrs	r2, r2, #2
 801726c:	17db      	asrs	r3, r3, #31
 801726e:	1ad3      	subs	r3, r2, r3
 8017270:	4a9b      	ldr	r2, [pc, #620]	; (80174e0 <UBLOX_parse_gps+0x524>)
 8017272:	6093      	str	r3, [r2, #8]
        gpsSetFixState(next_fix);
 8017274:	4b98      	ldr	r3, [pc, #608]	; (80174d8 <UBLOX_parse_gps+0x51c>)
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	4618      	mov	r0, r3
 801727a:	f000 fcdd 	bl	8017c38 <gpsSetFixState>
        _new_position = true;
 801727e:	4b9a      	ldr	r3, [pc, #616]	; (80174e8 <UBLOX_parse_gps+0x52c>)
 8017280:	2201      	movs	r2, #1
 8017282:	701a      	strb	r2, [r3, #0]
        gpsSol.numSat = _buffer.pvt.numSV;
 8017284:	4b95      	ldr	r3, [pc, #596]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017286:	7dda      	ldrb	r2, [r3, #23]
 8017288:	4b95      	ldr	r3, [pc, #596]	; (80174e0 <UBLOX_parse_gps+0x524>)
 801728a:	751a      	strb	r2, [r3, #20]
        gpsSol.hdop = _buffer.pvt.pDOP;
 801728c:	4b93      	ldr	r3, [pc, #588]	; (80174dc <UBLOX_parse_gps+0x520>)
 801728e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8017292:	4b93      	ldr	r3, [pc, #588]	; (80174e0 <UBLOX_parse_gps+0x524>)
 8017294:	825a      	strh	r2, [r3, #18]
        gpsSol.speed3d = (uint16_t) sqrtf(powf(_buffer.pvt.gSpeed / 10, 2.0f) + powf(_buffer.pvt.velD / 10, 2.0f));
 8017296:	4b91      	ldr	r3, [pc, #580]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801729a:	4a92      	ldr	r2, [pc, #584]	; (80174e4 <UBLOX_parse_gps+0x528>)
 801729c:	fb82 1203 	smull	r1, r2, r2, r3
 80172a0:	1092      	asrs	r2, r2, #2
 80172a2:	17db      	asrs	r3, r3, #31
 80172a4:	1ad3      	subs	r3, r2, r3
 80172a6:	ee07 3a90 	vmov	s15, r3
 80172aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172ae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80172b2:	eeb0 0a67 	vmov.f32	s0, s15
 80172b6:	f014 f8ad 	bl	802b414 <powf>
 80172ba:	eeb0 8a40 	vmov.f32	s16, s0
 80172be:	4b87      	ldr	r3, [pc, #540]	; (80174dc <UBLOX_parse_gps+0x520>)
 80172c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172c2:	4a88      	ldr	r2, [pc, #544]	; (80174e4 <UBLOX_parse_gps+0x528>)
 80172c4:	fb82 1203 	smull	r1, r2, r2, r3
 80172c8:	1092      	asrs	r2, r2, #2
 80172ca:	17db      	asrs	r3, r3, #31
 80172cc:	1ad3      	subs	r3, r2, r3
 80172ce:	ee07 3a90 	vmov	s15, r3
 80172d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80172da:	eeb0 0a67 	vmov.f32	s0, s15
 80172de:	f014 f899 	bl	802b414 <powf>
 80172e2:	eef0 7a40 	vmov.f32	s15, s0
 80172e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80172ea:	eeb0 0a67 	vmov.f32	s0, s15
 80172ee:	f014 f8e9 	bl	802b4c4 <sqrtf>
 80172f2:	eef0 7a40 	vmov.f32	s15, s0
 80172f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80172fa:	ee17 3a90 	vmov	r3, s15
 80172fe:	b29a      	uxth	r2, r3
 8017300:	4b77      	ldr	r3, [pc, #476]	; (80174e0 <UBLOX_parse_gps+0x524>)
 8017302:	819a      	strh	r2, [r3, #12]
        gpsSol.groundSpeed = _buffer.pvt.gSpeed / 10;    // cm/s
 8017304:	4b75      	ldr	r3, [pc, #468]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017308:	4a76      	ldr	r2, [pc, #472]	; (80174e4 <UBLOX_parse_gps+0x528>)
 801730a:	fb82 1203 	smull	r1, r2, r2, r3
 801730e:	1092      	asrs	r2, r2, #2
 8017310:	17db      	asrs	r3, r3, #31
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	b29a      	uxth	r2, r3
 8017316:	4b72      	ldr	r3, [pc, #456]	; (80174e0 <UBLOX_parse_gps+0x524>)
 8017318:	81da      	strh	r2, [r3, #14]
        gpsSol.groundCourse = (uint16_t) (_buffer.pvt.headMot / 10000);     // Heading 2D deg * 100000 rescaled to deg * 10
 801731a:	4b70      	ldr	r3, [pc, #448]	; (80174dc <UBLOX_parse_gps+0x520>)
 801731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801731e:	4a73      	ldr	r2, [pc, #460]	; (80174ec <UBLOX_parse_gps+0x530>)
 8017320:	fb82 1203 	smull	r1, r2, r2, r3
 8017324:	1312      	asrs	r2, r2, #12
 8017326:	17db      	asrs	r3, r3, #31
 8017328:	1ad3      	subs	r3, r2, r3
 801732a:	b29a      	uxth	r2, r3
 801732c:	4b6c      	ldr	r3, [pc, #432]	; (80174e0 <UBLOX_parse_gps+0x524>)
 801732e:	821a      	strh	r2, [r3, #16]
        _new_speed = true;
 8017330:	4b6f      	ldr	r3, [pc, #444]	; (80174f0 <UBLOX_parse_gps+0x534>)
 8017332:	2201      	movs	r2, #1
 8017334:	701a      	strb	r2, [r3, #0]
            dt.seconds = _buffer.pvt.sec;
            dt.millis = (_buffer.pvt.nano > 0) ? _buffer.pvt.nano / 1000 : 0; //up to 5ms of error
            rtcSetDateTime(&dt);
        }
#endif
        break;
 8017336:	e18c      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_SVINFO:
        *gpsPacketLogChar = LOG_UBLOX_SVINFO;
 8017338:	4b6e      	ldr	r3, [pc, #440]	; (80174f4 <UBLOX_parse_gps+0x538>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2249      	movs	r2, #73	; 0x49
 801733e:	701a      	strb	r2, [r3, #0]
        GPS_numCh = _buffer.svinfo.numCh;
 8017340:	4b66      	ldr	r3, [pc, #408]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017342:	791a      	ldrb	r2, [r3, #4]
 8017344:	4b6c      	ldr	r3, [pc, #432]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 8017346:	701a      	strb	r2, [r3, #0]
        // If we're getting NAV-SVINFO is because we're dealing with an old receiver that does not support NAV-SAT, so we'll only
        // save up to GPS_SV_MAXSATS_LEGACY channels so the BF Configurator knows it's receiving the old sat list info format.
        if (GPS_numCh > GPS_SV_MAXSATS_LEGACY)
 8017348:	4b6b      	ldr	r3, [pc, #428]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	2b10      	cmp	r3, #16
 801734e:	d902      	bls.n	8017356 <UBLOX_parse_gps+0x39a>
            GPS_numCh = GPS_SV_MAXSATS_LEGACY;
 8017350:	4b69      	ldr	r3, [pc, #420]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 8017352:	2210      	movs	r2, #16
 8017354:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < GPS_numCh; i++) {
 8017356:	2300      	movs	r3, #0
 8017358:	64fb      	str	r3, [r7, #76]	; 0x4c
 801735a:	e03a      	b.n	80173d2 <UBLOX_parse_gps+0x416>
            GPS_svinfo_chn[i] = _buffer.svinfo.channel[i].chn;
 801735c:	495f      	ldr	r1, [pc, #380]	; (80174dc <UBLOX_parse_gps+0x520>)
 801735e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017360:	4613      	mov	r3, r2
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	4413      	add	r3, r2
 8017366:	009b      	lsls	r3, r3, #2
 8017368:	440b      	add	r3, r1
 801736a:	3308      	adds	r3, #8
 801736c:	7819      	ldrb	r1, [r3, #0]
 801736e:	4a63      	ldr	r2, [pc, #396]	; (80174fc <UBLOX_parse_gps+0x540>)
 8017370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017372:	4413      	add	r3, r2
 8017374:	460a      	mov	r2, r1
 8017376:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_svid[i] = _buffer.svinfo.channel[i].svid;
 8017378:	4958      	ldr	r1, [pc, #352]	; (80174dc <UBLOX_parse_gps+0x520>)
 801737a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801737c:	4613      	mov	r3, r2
 801737e:	005b      	lsls	r3, r3, #1
 8017380:	4413      	add	r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	440b      	add	r3, r1
 8017386:	3309      	adds	r3, #9
 8017388:	7819      	ldrb	r1, [r3, #0]
 801738a:	4a5d      	ldr	r2, [pc, #372]	; (8017500 <UBLOX_parse_gps+0x544>)
 801738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801738e:	4413      	add	r3, r2
 8017390:	460a      	mov	r2, r1
 8017392:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_quality[i] =_buffer.svinfo.channel[i].quality;
 8017394:	4951      	ldr	r1, [pc, #324]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017396:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017398:	4613      	mov	r3, r2
 801739a:	005b      	lsls	r3, r3, #1
 801739c:	4413      	add	r3, r2
 801739e:	009b      	lsls	r3, r3, #2
 80173a0:	440b      	add	r3, r1
 80173a2:	330b      	adds	r3, #11
 80173a4:	7819      	ldrb	r1, [r3, #0]
 80173a6:	4a57      	ldr	r2, [pc, #348]	; (8017504 <UBLOX_parse_gps+0x548>)
 80173a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173aa:	4413      	add	r3, r2
 80173ac:	460a      	mov	r2, r1
 80173ae:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_cno[i] = _buffer.svinfo.channel[i].cno;
 80173b0:	494a      	ldr	r1, [pc, #296]	; (80174dc <UBLOX_parse_gps+0x520>)
 80173b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80173b4:	4613      	mov	r3, r2
 80173b6:	005b      	lsls	r3, r3, #1
 80173b8:	4413      	add	r3, r2
 80173ba:	009b      	lsls	r3, r3, #2
 80173bc:	440b      	add	r3, r1
 80173be:	330c      	adds	r3, #12
 80173c0:	7819      	ldrb	r1, [r3, #0]
 80173c2:	4a51      	ldr	r2, [pc, #324]	; (8017508 <UBLOX_parse_gps+0x54c>)
 80173c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173c6:	4413      	add	r3, r2
 80173c8:	460a      	mov	r2, r1
 80173ca:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < GPS_numCh; i++) {
 80173cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173ce:	3301      	adds	r3, #1
 80173d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80173d2:	4b49      	ldr	r3, [pc, #292]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	461a      	mov	r2, r3
 80173d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173da:	4293      	cmp	r3, r2
 80173dc:	d3be      	bcc.n	801735c <UBLOX_parse_gps+0x3a0>
        }
        for (i = GPS_numCh; i < GPS_SV_MAXSATS_LEGACY; i++) {
 80173de:	4b46      	ldr	r3, [pc, #280]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80173e4:	e016      	b.n	8017414 <UBLOX_parse_gps+0x458>
            GPS_svinfo_chn[i] = 0;
 80173e6:	4a45      	ldr	r2, [pc, #276]	; (80174fc <UBLOX_parse_gps+0x540>)
 80173e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173ea:	4413      	add	r3, r2
 80173ec:	2200      	movs	r2, #0
 80173ee:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_svid[i] = 0;
 80173f0:	4a43      	ldr	r2, [pc, #268]	; (8017500 <UBLOX_parse_gps+0x544>)
 80173f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173f4:	4413      	add	r3, r2
 80173f6:	2200      	movs	r2, #0
 80173f8:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_quality[i] = 0;
 80173fa:	4a42      	ldr	r2, [pc, #264]	; (8017504 <UBLOX_parse_gps+0x548>)
 80173fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173fe:	4413      	add	r3, r2
 8017400:	2200      	movs	r2, #0
 8017402:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_cno[i] = 0;
 8017404:	4a40      	ldr	r2, [pc, #256]	; (8017508 <UBLOX_parse_gps+0x54c>)
 8017406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017408:	4413      	add	r3, r2
 801740a:	2200      	movs	r2, #0
 801740c:	701a      	strb	r2, [r3, #0]
        for (i = GPS_numCh; i < GPS_SV_MAXSATS_LEGACY; i++) {
 801740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017410:	3301      	adds	r3, #1
 8017412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017416:	2b0f      	cmp	r3, #15
 8017418:	d9e5      	bls.n	80173e6 <UBLOX_parse_gps+0x42a>
        }
        GPS_svInfoReceivedCount++;
 801741a:	4b3c      	ldr	r3, [pc, #240]	; (801750c <UBLOX_parse_gps+0x550>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	3301      	adds	r3, #1
 8017420:	4a3a      	ldr	r2, [pc, #232]	; (801750c <UBLOX_parse_gps+0x550>)
 8017422:	6013      	str	r3, [r2, #0]
        break;
 8017424:	e115      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_SAT:
        *gpsPacketLogChar = LOG_UBLOX_SVINFO; // The logger won't show this is NAV-SAT instead of NAV-SVINFO
 8017426:	4b33      	ldr	r3, [pc, #204]	; (80174f4 <UBLOX_parse_gps+0x538>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	2249      	movs	r2, #73	; 0x49
 801742c:	701a      	strb	r2, [r3, #0]
        GPS_numCh = _buffer.sat.numSvs;
 801742e:	4b2b      	ldr	r3, [pc, #172]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017430:	795a      	ldrb	r2, [r3, #5]
 8017432:	4b31      	ldr	r3, [pc, #196]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 8017434:	701a      	strb	r2, [r3, #0]
        // We can receive here upto GPS_SV_MAXSATS_M9N channels, but since the majority of receivers currently in use are M8N or older,
        // it would be a waste of RAM to size the arrays that big. For now, they're sized GPS_SV_MAXSATS_M8N which means M9N won't show
        // all their channel information on BF Configurator. When M9N's are more widespread it would be a good time to increase those arrays.
        if (GPS_numCh > GPS_SV_MAXSATS_M8N)
 8017436:	4b30      	ldr	r3, [pc, #192]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	2b20      	cmp	r3, #32
 801743c:	d902      	bls.n	8017444 <UBLOX_parse_gps+0x488>
            GPS_numCh = GPS_SV_MAXSATS_M8N;
 801743e:	4b2e      	ldr	r3, [pc, #184]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 8017440:	2220      	movs	r2, #32
 8017442:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < GPS_numCh; i++) {
 8017444:	2300      	movs	r3, #0
 8017446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017448:	e03b      	b.n	80174c2 <UBLOX_parse_gps+0x506>
            GPS_svinfo_chn[i] = _buffer.sat.svs[i].gnssId;
 801744a:	4924      	ldr	r1, [pc, #144]	; (80174dc <UBLOX_parse_gps+0x520>)
 801744c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801744e:	4613      	mov	r3, r2
 8017450:	005b      	lsls	r3, r3, #1
 8017452:	4413      	add	r3, r2
 8017454:	009b      	lsls	r3, r3, #2
 8017456:	440b      	add	r3, r1
 8017458:	3308      	adds	r3, #8
 801745a:	7819      	ldrb	r1, [r3, #0]
 801745c:	4a27      	ldr	r2, [pc, #156]	; (80174fc <UBLOX_parse_gps+0x540>)
 801745e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017460:	4413      	add	r3, r2
 8017462:	460a      	mov	r2, r1
 8017464:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_svid[i] = _buffer.sat.svs[i].svId;
 8017466:	491d      	ldr	r1, [pc, #116]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801746a:	4613      	mov	r3, r2
 801746c:	005b      	lsls	r3, r3, #1
 801746e:	4413      	add	r3, r2
 8017470:	009b      	lsls	r3, r3, #2
 8017472:	440b      	add	r3, r1
 8017474:	3309      	adds	r3, #9
 8017476:	7819      	ldrb	r1, [r3, #0]
 8017478:	4a21      	ldr	r2, [pc, #132]	; (8017500 <UBLOX_parse_gps+0x544>)
 801747a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801747c:	4413      	add	r3, r2
 801747e:	460a      	mov	r2, r1
 8017480:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_cno[i] = _buffer.sat.svs[i].cno;
 8017482:	4916      	ldr	r1, [pc, #88]	; (80174dc <UBLOX_parse_gps+0x520>)
 8017484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017486:	4613      	mov	r3, r2
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	4413      	add	r3, r2
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	440b      	add	r3, r1
 8017490:	330a      	adds	r3, #10
 8017492:	7819      	ldrb	r1, [r3, #0]
 8017494:	4a1c      	ldr	r2, [pc, #112]	; (8017508 <UBLOX_parse_gps+0x54c>)
 8017496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017498:	4413      	add	r3, r2
 801749a:	460a      	mov	r2, r1
 801749c:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_quality[i] =_buffer.sat.svs[i].flags;
 801749e:	490f      	ldr	r1, [pc, #60]	; (80174dc <UBLOX_parse_gps+0x520>)
 80174a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80174a2:	4613      	mov	r3, r2
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	4413      	add	r3, r2
 80174a8:	009b      	lsls	r3, r3, #2
 80174aa:	440b      	add	r3, r1
 80174ac:	3310      	adds	r3, #16
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	b2d9      	uxtb	r1, r3
 80174b2:	4a14      	ldr	r2, [pc, #80]	; (8017504 <UBLOX_parse_gps+0x548>)
 80174b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174b6:	4413      	add	r3, r2
 80174b8:	460a      	mov	r2, r1
 80174ba:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < GPS_numCh; i++) {
 80174bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174be:	3301      	adds	r3, #1
 80174c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80174c2:	4b0d      	ldr	r3, [pc, #52]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	461a      	mov	r2, r3
 80174c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d3bd      	bcc.n	801744a <UBLOX_parse_gps+0x48e>
        }
        for (i = GPS_numCh; i < GPS_SV_MAXSATS_M8N; i++) {
 80174ce:	4b0a      	ldr	r3, [pc, #40]	; (80174f8 <UBLOX_parse_gps+0x53c>)
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80174d4:	e033      	b.n	801753e <UBLOX_parse_gps+0x582>
 80174d6:	bf00      	nop
 80174d8:	20003eca 	.word	0x20003eca
 80174dc:	200023fc 	.word	0x200023fc
 80174e0:	2000233c 	.word	0x2000233c
 80174e4:	66666667 	.word	0x66666667
 80174e8:	20003ecc 	.word	0x20003ecc
 80174ec:	68db8bad 	.word	0x68db8bad
 80174f0:	20003ecd 	.word	0x20003ecd
 80174f4:	200003ac 	.word	0x200003ac
 80174f8:	20003ec4 	.word	0x20003ec4
 80174fc:	2000235c 	.word	0x2000235c
 8017500:	2000237c 	.word	0x2000237c
 8017504:	2000239c 	.word	0x2000239c
 8017508:	200023bc 	.word	0x200023bc
 801750c:	20002358 	.word	0x20002358
            GPS_svinfo_chn[i] = 255;
 8017510:	4a5c      	ldr	r2, [pc, #368]	; (8017684 <UBLOX_parse_gps+0x6c8>)
 8017512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017514:	4413      	add	r3, r2
 8017516:	22ff      	movs	r2, #255	; 0xff
 8017518:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_svid[i] = 0;
 801751a:	4a5b      	ldr	r2, [pc, #364]	; (8017688 <UBLOX_parse_gps+0x6cc>)
 801751c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801751e:	4413      	add	r3, r2
 8017520:	2200      	movs	r2, #0
 8017522:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_quality[i] = 0;
 8017524:	4a59      	ldr	r2, [pc, #356]	; (801768c <UBLOX_parse_gps+0x6d0>)
 8017526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017528:	4413      	add	r3, r2
 801752a:	2200      	movs	r2, #0
 801752c:	701a      	strb	r2, [r3, #0]
            GPS_svinfo_cno[i] = 0;
 801752e:	4a58      	ldr	r2, [pc, #352]	; (8017690 <UBLOX_parse_gps+0x6d4>)
 8017530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017532:	4413      	add	r3, r2
 8017534:	2200      	movs	r2, #0
 8017536:	701a      	strb	r2, [r3, #0]
        for (i = GPS_numCh; i < GPS_SV_MAXSATS_M8N; i++) {
 8017538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801753a:	3301      	adds	r3, #1
 801753c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801753e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017540:	2b1f      	cmp	r3, #31
 8017542:	d9e5      	bls.n	8017510 <UBLOX_parse_gps+0x554>
        }

        // Setting the number of channels higher than GPS_SV_MAXSATS_LEGACY is the only way to tell BF Configurator we're sending the
        // enhanced sat list info without changing the MSP protocol. Also, we're sending the complete list each time even if it's empty, so
        // BF Conf can erase old entries shown on screen when channels are removed from the list.
        GPS_numCh = GPS_SV_MAXSATS_M8N;
 8017544:	4b53      	ldr	r3, [pc, #332]	; (8017694 <UBLOX_parse_gps+0x6d8>)
 8017546:	2220      	movs	r2, #32
 8017548:	701a      	strb	r2, [r3, #0]
        GPS_svInfoReceivedCount++;
 801754a:	4b53      	ldr	r3, [pc, #332]	; (8017698 <UBLOX_parse_gps+0x6dc>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	3301      	adds	r3, #1
 8017550:	4a51      	ldr	r2, [pc, #324]	; (8017698 <UBLOX_parse_gps+0x6dc>)
 8017552:	6013      	str	r3, [r2, #0]
        break;
 8017554:	e07d      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_CFG_GNSS:
        {
            bool isSBASenabled = false;
 8017556:	2300      	movs	r3, #0
 8017558:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            bool isM8NwithDefaultConfig = false;
 801755c:	2300      	movs	r3, #0
 801755e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            if ((_buffer.gnss.numConfigBlocks >= 2) &&
 8017562:	4b4e      	ldr	r3, [pc, #312]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017564:	78db      	ldrb	r3, [r3, #3]
 8017566:	2b01      	cmp	r3, #1
 8017568:	d90c      	bls.n	8017584 <UBLOX_parse_gps+0x5c8>
                (_buffer.gnss.configblocks[1].gnssId == 1) && //SBAS
 801756a:	4b4c      	ldr	r3, [pc, #304]	; (801769c <UBLOX_parse_gps+0x6e0>)
 801756c:	7b1b      	ldrb	r3, [r3, #12]
            if ((_buffer.gnss.numConfigBlocks >= 2) &&
 801756e:	2b01      	cmp	r3, #1
 8017570:	d108      	bne.n	8017584 <UBLOX_parse_gps+0x5c8>
                (_buffer.gnss.configblocks[1].flags & UBLOX_GNSS_ENABLE)) { //enabled
 8017572:	4b4a      	ldr	r3, [pc, #296]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017574:	691b      	ldr	r3, [r3, #16]
 8017576:	f003 0301 	and.w	r3, r3, #1
                (_buffer.gnss.configblocks[1].gnssId == 1) && //SBAS
 801757a:	2b00      	cmp	r3, #0
 801757c:	d002      	beq.n	8017584 <UBLOX_parse_gps+0x5c8>

                isSBASenabled = true;
 801757e:	2301      	movs	r3, #1
 8017580:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }

            if ((_buffer.gnss.numTrkChHw == 32) &&  //M8N
 8017584:	4b45      	ldr	r3, [pc, #276]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017586:	785b      	ldrb	r3, [r3, #1]
 8017588:	2b20      	cmp	r3, #32
 801758a:	d11c      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                (_buffer.gnss.numTrkChUse == 32) &&
 801758c:	4b43      	ldr	r3, [pc, #268]	; (801769c <UBLOX_parse_gps+0x6e0>)
 801758e:	789b      	ldrb	r3, [r3, #2]
            if ((_buffer.gnss.numTrkChHw == 32) &&  //M8N
 8017590:	2b20      	cmp	r3, #32
 8017592:	d118      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                (_buffer.gnss.numConfigBlocks == 7) &&
 8017594:	4b41      	ldr	r3, [pc, #260]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017596:	78db      	ldrb	r3, [r3, #3]
                (_buffer.gnss.numTrkChUse == 32) &&
 8017598:	2b07      	cmp	r3, #7
 801759a:	d114      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                (_buffer.gnss.configblocks[2].gnssId == 2) && //Galileo
 801759c:	4b3f      	ldr	r3, [pc, #252]	; (801769c <UBLOX_parse_gps+0x6e0>)
 801759e:	7d1b      	ldrb	r3, [r3, #20]
                (_buffer.gnss.numConfigBlocks == 7) &&
 80175a0:	2b02      	cmp	r3, #2
 80175a2:	d110      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                (_buffer.gnss.configblocks[2].resTrkCh == 4) && //min channels
 80175a4:	4b3d      	ldr	r3, [pc, #244]	; (801769c <UBLOX_parse_gps+0x6e0>)
 80175a6:	7d5b      	ldrb	r3, [r3, #21]
                (_buffer.gnss.configblocks[2].gnssId == 2) && //Galileo
 80175a8:	2b04      	cmp	r3, #4
 80175aa:	d10c      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                (_buffer.gnss.configblocks[2].maxTrkCh == 8) && //max channels
 80175ac:	4b3b      	ldr	r3, [pc, #236]	; (801769c <UBLOX_parse_gps+0x6e0>)
 80175ae:	7d9b      	ldrb	r3, [r3, #22]
                (_buffer.gnss.configblocks[2].resTrkCh == 4) && //min channels
 80175b0:	2b08      	cmp	r3, #8
 80175b2:	d108      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>
                !(_buffer.gnss.configblocks[2].flags & UBLOX_GNSS_ENABLE)) { //disabled
 80175b4:	4b39      	ldr	r3, [pc, #228]	; (801769c <UBLOX_parse_gps+0x6e0>)
 80175b6:	699b      	ldr	r3, [r3, #24]
 80175b8:	f003 0301 	and.w	r3, r3, #1
                (_buffer.gnss.configblocks[2].maxTrkCh == 8) && //max channels
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d102      	bne.n	80175c6 <UBLOX_parse_gps+0x60a>

                isM8NwithDefaultConfig = true;
 80175c0:	2301      	movs	r3, #1
 80175c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            const uint16_t messageSize = 4 + (_buffer.gnss.numConfigBlocks * sizeof(ubx_configblock));
 80175c6:	4b35      	ldr	r3, [pc, #212]	; (801769c <UBLOX_parse_gps+0x6e0>)
 80175c8:	78db      	ldrb	r3, [r3, #3]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	3304      	adds	r3, #4
 80175d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

            ubx_message tx_buffer;
            memcpy(&tx_buffer.payload, &_buffer, messageSize);
 80175d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80175da:	1d3b      	adds	r3, r7, #4
 80175dc:	3306      	adds	r3, #6
 80175de:	492f      	ldr	r1, [pc, #188]	; (801769c <UBLOX_parse_gps+0x6e0>)
 80175e0:	4618      	mov	r0, r3
 80175e2:	f010 fd1f 	bl	8028024 <memcpy>

            if (isSBASenabled && true) { //(gpsConfig()->sbasMode == SBAS_NONE)
 80175e6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d005      	beq.n	80175fa <UBLOX_parse_gps+0x63e>
                tx_buffer.payload.cfg_gnss.configblocks[1].flags &= ~UBLOX_GNSS_ENABLE; //Disable SBAS
 80175ee:	f8d7 301a 	ldr.w	r3, [r7, #26]
 80175f2:	f023 0301 	bic.w	r3, r3, #1
 80175f6:	f8c7 301a 	str.w	r3, [r7, #26]

            if (isM8NwithDefaultConfig && false) { // gpsConfig()->gps_ublox_use_galileo
                tx_buffer.payload.cfg_gnss.configblocks[2].flags |= UBLOX_GNSS_ENABLE; //Enable Galileo
            }

            ubloxSendConfigMessage(&tx_buffer, MSG_CFG_GNSS, messageSize);
 80175fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	1d3b      	adds	r3, r7, #4
 8017602:	213e      	movs	r1, #62	; 0x3e
 8017604:	4618      	mov	r0, r3
 8017606:	f7ff faf9 	bl	8016bfc <ubloxSendConfigMessage>
        }
        break;
 801760a:	e022      	b.n	8017652 <UBLOX_parse_gps+0x696>
    case MSG_ACK_ACK:
        if ((gpsData.ackState == UBLOX_ACK_WAITING) && (_buffer.ack.msgId == gpsData.ackWaitingMsgId)) {
 801760c:	4b24      	ldr	r3, [pc, #144]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 801760e:	7f1b      	ldrb	r3, [r3, #28]
 8017610:	2b01      	cmp	r3, #1
 8017612:	d11b      	bne.n	801764c <UBLOX_parse_gps+0x690>
 8017614:	4b21      	ldr	r3, [pc, #132]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017616:	785a      	ldrb	r2, [r3, #1]
 8017618:	4b21      	ldr	r3, [pc, #132]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 801761a:	7e9b      	ldrb	r3, [r3, #26]
 801761c:	429a      	cmp	r2, r3
 801761e:	d115      	bne.n	801764c <UBLOX_parse_gps+0x690>
            gpsData.ackState = UBLOX_ACK_GOT_ACK;
 8017620:	4b1f      	ldr	r3, [pc, #124]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 8017622:	2202      	movs	r2, #2
 8017624:	771a      	strb	r2, [r3, #28]
        }
        break;
 8017626:	e011      	b.n	801764c <UBLOX_parse_gps+0x690>
    case MSG_ACK_NACK:
        if ((gpsData.ackState == UBLOX_ACK_WAITING) && (_buffer.ack.msgId == gpsData.ackWaitingMsgId)) {
 8017628:	4b1d      	ldr	r3, [pc, #116]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 801762a:	7f1b      	ldrb	r3, [r3, #28]
 801762c:	2b01      	cmp	r3, #1
 801762e:	d10f      	bne.n	8017650 <UBLOX_parse_gps+0x694>
 8017630:	4b1a      	ldr	r3, [pc, #104]	; (801769c <UBLOX_parse_gps+0x6e0>)
 8017632:	785a      	ldrb	r2, [r3, #1]
 8017634:	4b1a      	ldr	r3, [pc, #104]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 8017636:	7e9b      	ldrb	r3, [r3, #26]
 8017638:	429a      	cmp	r2, r3
 801763a:	d109      	bne.n	8017650 <UBLOX_parse_gps+0x694>
            gpsData.ackState = UBLOX_ACK_GOT_NACK;
 801763c:	4b18      	ldr	r3, [pc, #96]	; (80176a0 <UBLOX_parse_gps+0x6e4>)
 801763e:	2203      	movs	r2, #3
 8017640:	771a      	strb	r2, [r3, #28]
        }
        break;
 8017642:	e005      	b.n	8017650 <UBLOX_parse_gps+0x694>
    default:
        return false;
 8017644:	2300      	movs	r3, #0
 8017646:	e016      	b.n	8017676 <UBLOX_parse_gps+0x6ba>
        break;
 8017648:	bf00      	nop
 801764a:	e002      	b.n	8017652 <UBLOX_parse_gps+0x696>
        break;
 801764c:	bf00      	nop
 801764e:	e000      	b.n	8017652 <UBLOX_parse_gps+0x696>
        break;
 8017650:	bf00      	nop
    }

    // we only return true when we get new position and speed data
    // this ensures we don't use stale data
    if (_new_position && _new_speed) {
 8017652:	4b14      	ldr	r3, [pc, #80]	; (80176a4 <UBLOX_parse_gps+0x6e8>)
 8017654:	781b      	ldrb	r3, [r3, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00c      	beq.n	8017674 <UBLOX_parse_gps+0x6b8>
 801765a:	4b13      	ldr	r3, [pc, #76]	; (80176a8 <UBLOX_parse_gps+0x6ec>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d008      	beq.n	8017674 <UBLOX_parse_gps+0x6b8>
        _new_speed = _new_position = false;
 8017662:	4b10      	ldr	r3, [pc, #64]	; (80176a4 <UBLOX_parse_gps+0x6e8>)
 8017664:	2200      	movs	r2, #0
 8017666:	701a      	strb	r2, [r3, #0]
 8017668:	4b0e      	ldr	r3, [pc, #56]	; (80176a4 <UBLOX_parse_gps+0x6e8>)
 801766a:	781a      	ldrb	r2, [r3, #0]
 801766c:	4b0e      	ldr	r3, [pc, #56]	; (80176a8 <UBLOX_parse_gps+0x6ec>)
 801766e:	701a      	strb	r2, [r3, #0]
        return true;
 8017670:	2301      	movs	r3, #1
 8017672:	e000      	b.n	8017676 <UBLOX_parse_gps+0x6ba>
    }
    return false;
 8017674:	2300      	movs	r3, #0
}
 8017676:	4618      	mov	r0, r3
 8017678:	3750      	adds	r7, #80	; 0x50
 801767a:	46bd      	mov	sp, r7
 801767c:	ecbd 8b02 	vpop	{d8}
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	2000235c 	.word	0x2000235c
 8017688:	2000237c 	.word	0x2000237c
 801768c:	2000239c 	.word	0x2000239c
 8017690:	200023bc 	.word	0x200023bc
 8017694:	20003ec4 	.word	0x20003ec4
 8017698:	20002358 	.word	0x20002358
 801769c:	200023fc 	.word	0x200023fc
 80176a0:	200023dc 	.word	0x200023dc
 80176a4:	20003ecc 	.word	0x20003ecc
 80176a8:	20003ecd 	.word	0x20003ecd

080176ac <gpsNewFrameUBLOX>:

static bool gpsNewFrameUBLOX(uint8_t data)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	4603      	mov	r3, r0
 80176b4:	71fb      	strb	r3, [r7, #7]
    bool parsed = false;
 80176b6:	2300      	movs	r3, #0
 80176b8:	73fb      	strb	r3, [r7, #15]

    switch (_step) {
 80176ba:	4b92      	ldr	r3, [pc, #584]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 80176bc:	781b      	ldrb	r3, [r3, #0]
 80176be:	2b08      	cmp	r3, #8
 80176c0:	f200 811a 	bhi.w	80178f8 <gpsNewFrameUBLOX+0x24c>
 80176c4:	a201      	add	r2, pc, #4	; (adr r2, 80176cc <gpsNewFrameUBLOX+0x20>)
 80176c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176ca:	bf00      	nop
 80176cc:	080176f1 	.word	0x080176f1
 80176d0:	0801770d 	.word	0x0801770d
 80176d4:	08017729 	.word	0x08017729
 80176d8:	0801774b 	.word	0x0801774b
 80176dc:	0801777d 	.word	0x0801777d
 80176e0:	080177b1 	.word	0x080177b1
 80176e4:	08017815 	.word	0x08017815
 80176e8:	0801786f 	.word	0x0801786f
 80176ec:	08017897 	.word	0x08017897
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data) {
 80176f0:	79fb      	ldrb	r3, [r7, #7]
 80176f2:	2bb5      	cmp	r3, #181	; 0xb5
 80176f4:	f040 80f9 	bne.w	80178ea <gpsNewFrameUBLOX+0x23e>
                _skip_packet = false;
 80176f8:	4b83      	ldr	r3, [pc, #524]	; (8017908 <gpsNewFrameUBLOX+0x25c>)
 80176fa:	2200      	movs	r2, #0
 80176fc:	701a      	strb	r2, [r3, #0]
                _step++;
 80176fe:	4b81      	ldr	r3, [pc, #516]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	3301      	adds	r3, #1
 8017704:	b2da      	uxtb	r2, r3
 8017706:	4b7f      	ldr	r3, [pc, #508]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017708:	701a      	strb	r2, [r3, #0]
            }
            break;
 801770a:	e0ee      	b.n	80178ea <gpsNewFrameUBLOX+0x23e>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 != data) {
 801770c:	79fb      	ldrb	r3, [r7, #7]
 801770e:	2b62      	cmp	r3, #98	; 0x62
 8017710:	d003      	beq.n	801771a <gpsNewFrameUBLOX+0x6e>
                _step = 0;
 8017712:	4b7c      	ldr	r3, [pc, #496]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017714:	2200      	movs	r2, #0
 8017716:	701a      	strb	r2, [r3, #0]
                break;
 8017718:	e0ee      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            }
            _step++;
 801771a:	4b7a      	ldr	r3, [pc, #488]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801771c:	781b      	ldrb	r3, [r3, #0]
 801771e:	3301      	adds	r3, #1
 8017720:	b2da      	uxtb	r2, r3
 8017722:	4b78      	ldr	r3, [pc, #480]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017724:	701a      	strb	r2, [r3, #0]
            break;
 8017726:	e0e7      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
        case 2: // Class
            _step++;
 8017728:	4b76      	ldr	r3, [pc, #472]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	3301      	adds	r3, #1
 801772e:	b2da      	uxtb	r2, r3
 8017730:	4b74      	ldr	r3, [pc, #464]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017732:	701a      	strb	r2, [r3, #0]
            _class = data;
 8017734:	4a75      	ldr	r2, [pc, #468]	; (801790c <gpsNewFrameUBLOX+0x260>)
 8017736:	79fb      	ldrb	r3, [r7, #7]
 8017738:	7013      	strb	r3, [r2, #0]
            _ck_b = _ck_a = data;   // reset the checksum accumulators
 801773a:	4a75      	ldr	r2, [pc, #468]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 801773c:	79fb      	ldrb	r3, [r7, #7]
 801773e:	7013      	strb	r3, [r2, #0]
 8017740:	4b73      	ldr	r3, [pc, #460]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017742:	781a      	ldrb	r2, [r3, #0]
 8017744:	4b73      	ldr	r3, [pc, #460]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 8017746:	701a      	strb	r2, [r3, #0]
            break;
 8017748:	e0d6      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
        case 3: // Id
            _step++;
 801774a:	4b6e      	ldr	r3, [pc, #440]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	3301      	adds	r3, #1
 8017750:	b2da      	uxtb	r2, r3
 8017752:	4b6c      	ldr	r3, [pc, #432]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017754:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       // checksum byte
 8017756:	4b6e      	ldr	r3, [pc, #440]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017758:	781a      	ldrb	r2, [r3, #0]
 801775a:	79fb      	ldrb	r3, [r7, #7]
 801775c:	4413      	add	r3, r2
 801775e:	b2da      	uxtb	r2, r3
 8017760:	4b6b      	ldr	r3, [pc, #428]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017762:	701a      	strb	r2, [r3, #0]
 8017764:	4b6a      	ldr	r3, [pc, #424]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017766:	781a      	ldrb	r2, [r3, #0]
 8017768:	4b6a      	ldr	r3, [pc, #424]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 801776a:	781b      	ldrb	r3, [r3, #0]
 801776c:	4413      	add	r3, r2
 801776e:	b2da      	uxtb	r2, r3
 8017770:	4b68      	ldr	r3, [pc, #416]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 8017772:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8017774:	4a68      	ldr	r2, [pc, #416]	; (8017918 <gpsNewFrameUBLOX+0x26c>)
 8017776:	79fb      	ldrb	r3, [r7, #7]
 8017778:	7013      	strb	r3, [r2, #0]
#if DEBUG_UBLOX_FRAMES
    debug[2] = _msg_id;
#endif
            break;
 801777a:	e0bd      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
        case 4: // Payload length (part 1)
            _step++;
 801777c:	4b61      	ldr	r3, [pc, #388]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	3301      	adds	r3, #1
 8017782:	b2da      	uxtb	r2, r3
 8017784:	4b5f      	ldr	r3, [pc, #380]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017786:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       // checksum byte
 8017788:	4b61      	ldr	r3, [pc, #388]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 801778a:	781a      	ldrb	r2, [r3, #0]
 801778c:	79fb      	ldrb	r3, [r7, #7]
 801778e:	4413      	add	r3, r2
 8017790:	b2da      	uxtb	r2, r3
 8017792:	4b5f      	ldr	r3, [pc, #380]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017794:	701a      	strb	r2, [r3, #0]
 8017796:	4b5e      	ldr	r3, [pc, #376]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017798:	781a      	ldrb	r2, [r3, #0]
 801779a:	4b5e      	ldr	r3, [pc, #376]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	4413      	add	r3, r2
 80177a0:	b2da      	uxtb	r2, r3
 80177a2:	4b5c      	ldr	r3, [pc, #368]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 80177a4:	701a      	strb	r2, [r3, #0]
            _payload_length = data; // payload length low byte
 80177a6:	79fb      	ldrb	r3, [r7, #7]
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	4b5c      	ldr	r3, [pc, #368]	; (801791c <gpsNewFrameUBLOX+0x270>)
 80177ac:	801a      	strh	r2, [r3, #0]
            break;
 80177ae:	e0a3      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
        case 5: // Payload length (part 2)
            _step++;
 80177b0:	4b54      	ldr	r3, [pc, #336]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	3301      	adds	r3, #1
 80177b6:	b2da      	uxtb	r2, r3
 80177b8:	4b52      	ldr	r3, [pc, #328]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 80177ba:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       // checksum byte
 80177bc:	4b54      	ldr	r3, [pc, #336]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 80177be:	781a      	ldrb	r2, [r3, #0]
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	4413      	add	r3, r2
 80177c4:	b2da      	uxtb	r2, r3
 80177c6:	4b52      	ldr	r3, [pc, #328]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 80177c8:	701a      	strb	r2, [r3, #0]
 80177ca:	4b51      	ldr	r3, [pc, #324]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 80177cc:	781a      	ldrb	r2, [r3, #0]
 80177ce:	4b51      	ldr	r3, [pc, #324]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 80177d0:	781b      	ldrb	r3, [r3, #0]
 80177d2:	4413      	add	r3, r2
 80177d4:	b2da      	uxtb	r2, r3
 80177d6:	4b4f      	ldr	r3, [pc, #316]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 80177d8:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 80177da:	79fb      	ldrb	r3, [r7, #7]
 80177dc:	b29b      	uxth	r3, r3
 80177de:	021b      	lsls	r3, r3, #8
 80177e0:	b29a      	uxth	r2, r3
 80177e2:	4b4e      	ldr	r3, [pc, #312]	; (801791c <gpsNewFrameUBLOX+0x270>)
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	4413      	add	r3, r2
 80177e8:	b29a      	uxth	r2, r3
 80177ea:	4b4c      	ldr	r3, [pc, #304]	; (801791c <gpsNewFrameUBLOX+0x270>)
 80177ec:	801a      	strh	r2, [r3, #0]
#if DEBUG_UBLOX_FRAMES
    debug[3] = _payload_length;
#endif
            if (_payload_length > UBLOX_PAYLOAD_SIZE) {
 80177ee:	4b4b      	ldr	r3, [pc, #300]	; (801791c <gpsNewFrameUBLOX+0x270>)
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177f6:	d902      	bls.n	80177fe <gpsNewFrameUBLOX+0x152>
                _skip_packet = true;
 80177f8:	4b43      	ldr	r3, [pc, #268]	; (8017908 <gpsNewFrameUBLOX+0x25c>)
 80177fa:	2201      	movs	r2, #1
 80177fc:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   // prepare to receive payload
 80177fe:	4b48      	ldr	r3, [pc, #288]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 8017800:	2200      	movs	r2, #0
 8017802:	801a      	strh	r2, [r3, #0]
            if (_payload_length == 0) {
 8017804:	4b45      	ldr	r3, [pc, #276]	; (801791c <gpsNewFrameUBLOX+0x270>)
 8017806:	881b      	ldrh	r3, [r3, #0]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d170      	bne.n	80178ee <gpsNewFrameUBLOX+0x242>
                _step = 7;
 801780c:	4b3d      	ldr	r3, [pc, #244]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801780e:	2207      	movs	r2, #7
 8017810:	701a      	strb	r2, [r3, #0]
            }
            break;
 8017812:	e06c      	b.n	80178ee <gpsNewFrameUBLOX+0x242>
        case 6:
            _ck_b += (_ck_a += data);       // checksum byte
 8017814:	4b3e      	ldr	r3, [pc, #248]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017816:	781a      	ldrb	r2, [r3, #0]
 8017818:	79fb      	ldrb	r3, [r7, #7]
 801781a:	4413      	add	r3, r2
 801781c:	b2da      	uxtb	r2, r3
 801781e:	4b3c      	ldr	r3, [pc, #240]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017820:	701a      	strb	r2, [r3, #0]
 8017822:	4b3b      	ldr	r3, [pc, #236]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 8017824:	781a      	ldrb	r2, [r3, #0]
 8017826:	4b3b      	ldr	r3, [pc, #236]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 8017828:	781b      	ldrb	r3, [r3, #0]
 801782a:	4413      	add	r3, r2
 801782c:	b2da      	uxtb	r2, r3
 801782e:	4b39      	ldr	r3, [pc, #228]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 8017830:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_PAYLOAD_SIZE) {
 8017832:	4b3b      	ldr	r3, [pc, #236]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 8017834:	881b      	ldrh	r3, [r3, #0]
 8017836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801783a:	d205      	bcs.n	8017848 <gpsNewFrameUBLOX+0x19c>
                _buffer.bytes[_payload_counter] = data;
 801783c:	4b38      	ldr	r3, [pc, #224]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 801783e:	881b      	ldrh	r3, [r3, #0]
 8017840:	4619      	mov	r1, r3
 8017842:	4a38      	ldr	r2, [pc, #224]	; (8017924 <gpsNewFrameUBLOX+0x278>)
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter >= _payload_length) {
 8017848:	4b35      	ldr	r3, [pc, #212]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 801784a:	881b      	ldrh	r3, [r3, #0]
 801784c:	3301      	adds	r3, #1
 801784e:	b29a      	uxth	r2, r3
 8017850:	4b33      	ldr	r3, [pc, #204]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 8017852:	801a      	strh	r2, [r3, #0]
 8017854:	4b32      	ldr	r3, [pc, #200]	; (8017920 <gpsNewFrameUBLOX+0x274>)
 8017856:	881a      	ldrh	r2, [r3, #0]
 8017858:	4b30      	ldr	r3, [pc, #192]	; (801791c <gpsNewFrameUBLOX+0x270>)
 801785a:	881b      	ldrh	r3, [r3, #0]
 801785c:	429a      	cmp	r2, r3
 801785e:	d348      	bcc.n	80178f2 <gpsNewFrameUBLOX+0x246>
                _step++;
 8017860:	4b28      	ldr	r3, [pc, #160]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	3301      	adds	r3, #1
 8017866:	b2da      	uxtb	r2, r3
 8017868:	4b26      	ldr	r3, [pc, #152]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 801786a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801786c:	e041      	b.n	80178f2 <gpsNewFrameUBLOX+0x246>
        case 7:
            _step++;
 801786e:	4b25      	ldr	r3, [pc, #148]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	3301      	adds	r3, #1
 8017874:	b2da      	uxtb	r2, r3
 8017876:	4b23      	ldr	r3, [pc, #140]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017878:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data) {
 801787a:	4b25      	ldr	r3, [pc, #148]	; (8017910 <gpsNewFrameUBLOX+0x264>)
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	79fa      	ldrb	r2, [r7, #7]
 8017880:	429a      	cmp	r2, r3
 8017882:	d038      	beq.n	80178f6 <gpsNewFrameUBLOX+0x24a>
                _skip_packet = true;          // bad checksum
 8017884:	4b20      	ldr	r3, [pc, #128]	; (8017908 <gpsNewFrameUBLOX+0x25c>)
 8017886:	2201      	movs	r2, #1
 8017888:	701a      	strb	r2, [r3, #0]
                gpsData.errors++;
 801788a:	4b27      	ldr	r3, [pc, #156]	; (8017928 <gpsNewFrameUBLOX+0x27c>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	3301      	adds	r3, #1
 8017890:	4a25      	ldr	r2, [pc, #148]	; (8017928 <gpsNewFrameUBLOX+0x27c>)
 8017892:	6013      	str	r3, [r2, #0]
            }
            break;
 8017894:	e02f      	b.n	80178f6 <gpsNewFrameUBLOX+0x24a>
        case 8:
            _step = 0;
 8017896:	4b1b      	ldr	r3, [pc, #108]	; (8017904 <gpsNewFrameUBLOX+0x258>)
 8017898:	2200      	movs	r2, #0
 801789a:	701a      	strb	r2, [r3, #0]

            shiftPacketLog();
 801789c:	f7ff f8a2 	bl	80169e4 <shiftPacketLog>

            if (_ck_b != data) {
 80178a0:	4b1c      	ldr	r3, [pc, #112]	; (8017914 <gpsNewFrameUBLOX+0x268>)
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	79fa      	ldrb	r2, [r7, #7]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	d009      	beq.n	80178be <gpsNewFrameUBLOX+0x212>
                *gpsPacketLogChar = LOG_ERROR;
 80178aa:	4b20      	ldr	r3, [pc, #128]	; (801792c <gpsNewFrameUBLOX+0x280>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	223f      	movs	r2, #63	; 0x3f
 80178b0:	701a      	strb	r2, [r3, #0]
                gpsData.errors++;
 80178b2:	4b1d      	ldr	r3, [pc, #116]	; (8017928 <gpsNewFrameUBLOX+0x27c>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	3301      	adds	r3, #1
 80178b8:	4a1b      	ldr	r2, [pc, #108]	; (8017928 <gpsNewFrameUBLOX+0x27c>)
 80178ba:	6013      	str	r3, [r2, #0]
                break;              // bad checksum
 80178bc:	e01c      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            }

            GPS_packetCount++;
 80178be:	4b1c      	ldr	r3, [pc, #112]	; (8017930 <gpsNewFrameUBLOX+0x284>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	3301      	adds	r3, #1
 80178c4:	4a1a      	ldr	r2, [pc, #104]	; (8017930 <gpsNewFrameUBLOX+0x284>)
 80178c6:	6013      	str	r3, [r2, #0]

            if (_skip_packet) {
 80178c8:	4b0f      	ldr	r3, [pc, #60]	; (8017908 <gpsNewFrameUBLOX+0x25c>)
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d004      	beq.n	80178da <gpsNewFrameUBLOX+0x22e>
                *gpsPacketLogChar = LOG_SKIPPED;
 80178d0:	4b16      	ldr	r3, [pc, #88]	; (801792c <gpsNewFrameUBLOX+0x280>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	223e      	movs	r2, #62	; 0x3e
 80178d6:	701a      	strb	r2, [r3, #0]
                break;
 80178d8:	e00e      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            }

            if (UBLOX_parse_gps()) {
 80178da:	f7ff fb6f 	bl	8016fbc <UBLOX_parse_gps>
 80178de:	4603      	mov	r3, r0
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d009      	beq.n	80178f8 <gpsNewFrameUBLOX+0x24c>
                parsed = true;
 80178e4:	2301      	movs	r3, #1
 80178e6:	73fb      	strb	r3, [r7, #15]
 80178e8:	e006      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            break;
 80178ea:	bf00      	nop
 80178ec:	e004      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            break;
 80178ee:	bf00      	nop
 80178f0:	e002      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            break;
 80178f2:	bf00      	nop
 80178f4:	e000      	b.n	80178f8 <gpsNewFrameUBLOX+0x24c>
            break;
 80178f6:	bf00      	nop
            }
    }
    return parsed;
 80178f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3710      	adds	r7, #16
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	20003ec8 	.word	0x20003ec8
 8017908:	20003ec7 	.word	0x20003ec7
 801790c:	20003ecb 	.word	0x20003ecb
 8017910:	20003ec5 	.word	0x20003ec5
 8017914:	20003ec6 	.word	0x20003ec6
 8017918:	20003ec9 	.word	0x20003ec9
 801791c:	20003e9a 	.word	0x20003e9a
 8017920:	20003e9c 	.word	0x20003e9c
 8017924:	200023fc 	.word	0x200023fc
 8017928:	200023dc 	.word	0x200023dc
 801792c:	200003ac 	.word	0x200003ac
 8017930:	20002354 	.word	0x20002354

08017934 <GPS_calculateDistanceFlownVerticalSpeed>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the distance flown and vertical speed from gps position data
//
static void GPS_calculateDistanceFlownVerticalSpeed(bool initialize)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b088      	sub	sp, #32
 8017938:	af02      	add	r7, sp, #8
 801793a:	4603      	mov	r3, r0
 801793c:	71fb      	strb	r3, [r7, #7]
    static int32_t lastCoord[2] = { 0, 0 };
    static int32_t lastAlt;
    static int32_t lastMillis;

    int currentMillis = millis();
 801793e:	f7f1 fc72 	bl	8009226 <millis>
 8017942:	4603      	mov	r3, r0
 8017944:	617b      	str	r3, [r7, #20]

    if (initialize) {
 8017946:	79fb      	ldrb	r3, [r7, #7]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d006      	beq.n	801795a <GPS_calculateDistanceFlownVerticalSpeed+0x26>
        GPS_distanceFlownInCm = 0;
 801794c:	4b2e      	ldr	r3, [pc, #184]	; (8017a08 <GPS_calculateDistanceFlownVerticalSpeed+0xd4>)
 801794e:	2200      	movs	r2, #0
 8017950:	601a      	str	r2, [r3, #0]
        GPS_verticalSpeedInCmS = 0;
 8017952:	4b2e      	ldr	r3, [pc, #184]	; (8017a0c <GPS_calculateDistanceFlownVerticalSpeed+0xd8>)
 8017954:	2200      	movs	r2, #0
 8017956:	801a      	strh	r2, [r3, #0]
 8017958:	e042      	b.n	80179e0 <GPS_calculateDistanceFlownVerticalSpeed+0xac>
    } else {
        if (STATE(GPS_FIX_HOME) && ARMING_FLAG(ARMED)) {
 801795a:	4b2d      	ldr	r3, [pc, #180]	; (8017a10 <GPS_calculateDistanceFlownVerticalSpeed+0xdc>)
 801795c:	781b      	ldrb	r3, [r3, #0]
 801795e:	f003 0301 	and.w	r3, r3, #1
 8017962:	2b00      	cmp	r3, #0
 8017964:	d01d      	beq.n	80179a2 <GPS_calculateDistanceFlownVerticalSpeed+0x6e>
 8017966:	4b2b      	ldr	r3, [pc, #172]	; (8017a14 <GPS_calculateDistanceFlownVerticalSpeed+0xe0>)
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	f003 0301 	and.w	r3, r3, #1
 801796e:	2b00      	cmp	r3, #0
 8017970:	d017      	beq.n	80179a2 <GPS_calculateDistanceFlownVerticalSpeed+0x6e>
            uint16_t speed = gpsSol.groundSpeed;
 8017972:	4b29      	ldr	r3, [pc, #164]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 8017974:	89db      	ldrh	r3, [r3, #14]
 8017976:	827b      	strh	r3, [r7, #18]
            // Only add up movement when speed is faster than minimum threshold
            if (speed > GPS_DISTANCE_FLOWN_MIN_SPEED_THRESHOLD_CM_S) {
 8017978:	8a7b      	ldrh	r3, [r7, #18]
 801797a:	2b0f      	cmp	r3, #15
 801797c:	d911      	bls.n	80179a2 <GPS_calculateDistanceFlownVerticalSpeed+0x6e>
                uint32_t dist;
                int32_t dir;
                GPS_distance_cm_bearing(&gpsSol.llh.lat, &gpsSol.llh.lon, &lastCoord[GPS_LATITUDE], &lastCoord[GPS_LONGITUDE], &dist, &dir);
 801797e:	f107 0308 	add.w	r3, r7, #8
 8017982:	9301      	str	r3, [sp, #4]
 8017984:	f107 030c 	add.w	r3, r7, #12
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	4b24      	ldr	r3, [pc, #144]	; (8017a1c <GPS_calculateDistanceFlownVerticalSpeed+0xe8>)
 801798c:	4a24      	ldr	r2, [pc, #144]	; (8017a20 <GPS_calculateDistanceFlownVerticalSpeed+0xec>)
 801798e:	4925      	ldr	r1, [pc, #148]	; (8017a24 <GPS_calculateDistanceFlownVerticalSpeed+0xf0>)
 8017990:	4821      	ldr	r0, [pc, #132]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 8017992:	f000 f84f 	bl	8017a34 <GPS_distance_cm_bearing>
                if (false) { //gpsConfig()->gps_use_3d_speed
                    dist = sqrtf(powf(gpsSol.llh.altCm - lastAlt, 2.0f) + powf(dist, 2.0f));
                }
                GPS_distanceFlownInCm += dist;
 8017996:	4b1c      	ldr	r3, [pc, #112]	; (8017a08 <GPS_calculateDistanceFlownVerticalSpeed+0xd4>)
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	4413      	add	r3, r2
 801799e:	4a1a      	ldr	r2, [pc, #104]	; (8017a08 <GPS_calculateDistanceFlownVerticalSpeed+0xd4>)
 80179a0:	6013      	str	r3, [r2, #0]
            }
        }
        GPS_verticalSpeedInCmS = (gpsSol.llh.altCm - lastAlt) * 1000 / (currentMillis - lastMillis);
 80179a2:	4b1d      	ldr	r3, [pc, #116]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 80179a4:	689a      	ldr	r2, [r3, #8]
 80179a6:	4b20      	ldr	r3, [pc, #128]	; (8017a28 <GPS_calculateDistanceFlownVerticalSpeed+0xf4>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	1ad3      	subs	r3, r2, r3
 80179ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80179b0:	fb03 f202 	mul.w	r2, r3, r2
 80179b4:	4b1d      	ldr	r3, [pc, #116]	; (8017a2c <GPS_calculateDistanceFlownVerticalSpeed+0xf8>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	6979      	ldr	r1, [r7, #20]
 80179ba:	1acb      	subs	r3, r1, r3
 80179bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80179c0:	b21a      	sxth	r2, r3
 80179c2:	4b12      	ldr	r3, [pc, #72]	; (8017a0c <GPS_calculateDistanceFlownVerticalSpeed+0xd8>)
 80179c4:	801a      	strh	r2, [r3, #0]
        GPS_verticalSpeedInCmS = constrain(GPS_verticalSpeedInCmS, -1500, 1500);
 80179c6:	4b11      	ldr	r3, [pc, #68]	; (8017a0c <GPS_calculateDistanceFlownVerticalSpeed+0xd8>)
 80179c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80179d0:	4917      	ldr	r1, [pc, #92]	; (8017a30 <GPS_calculateDistanceFlownVerticalSpeed+0xfc>)
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7fe ffde 	bl	8016994 <constrain>
 80179d8:	4603      	mov	r3, r0
 80179da:	b21a      	sxth	r2, r3
 80179dc:	4b0b      	ldr	r3, [pc, #44]	; (8017a0c <GPS_calculateDistanceFlownVerticalSpeed+0xd8>)
 80179de:	801a      	strh	r2, [r3, #0]
    }
    lastCoord[GPS_LONGITUDE] = gpsSol.llh.lon;
 80179e0:	4b0d      	ldr	r3, [pc, #52]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	4a0e      	ldr	r2, [pc, #56]	; (8017a20 <GPS_calculateDistanceFlownVerticalSpeed+0xec>)
 80179e6:	6053      	str	r3, [r2, #4]
    lastCoord[GPS_LATITUDE] = gpsSol.llh.lat;
 80179e8:	4b0b      	ldr	r3, [pc, #44]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4a0c      	ldr	r2, [pc, #48]	; (8017a20 <GPS_calculateDistanceFlownVerticalSpeed+0xec>)
 80179ee:	6013      	str	r3, [r2, #0]
    lastAlt = gpsSol.llh.altCm;
 80179f0:	4b09      	ldr	r3, [pc, #36]	; (8017a18 <GPS_calculateDistanceFlownVerticalSpeed+0xe4>)
 80179f2:	689b      	ldr	r3, [r3, #8]
 80179f4:	4a0c      	ldr	r2, [pc, #48]	; (8017a28 <GPS_calculateDistanceFlownVerticalSpeed+0xf4>)
 80179f6:	6013      	str	r3, [r2, #0]
    lastMillis = currentMillis;
 80179f8:	4a0c      	ldr	r2, [pc, #48]	; (8017a2c <GPS_calculateDistanceFlownVerticalSpeed+0xf8>)
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	6013      	str	r3, [r2, #0]
}
 80179fe:	bf00      	nop
 8017a00:	3718      	adds	r7, #24
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	20002334 	.word	0x20002334
 8017a0c:	20003e98 	.word	0x20003e98
 8017a10:	20003ea1 	.word	0x20003ea1
 8017a14:	20003ea0 	.word	0x20003ea0
 8017a18:	2000233c 	.word	0x2000233c
 8017a1c:	20002608 	.word	0x20002608
 8017a20:	20002604 	.word	0x20002604
 8017a24:	20002340 	.word	0x20002340
 8017a28:	2000260c 	.word	0x2000260c
 8017a2c:	20002610 	.word	0x20002610
 8017a30:	fffffa24 	.word	0xfffffa24

08017a34 <GPS_distance_cm_bearing>:
#define DISTANCE_BETWEEN_TWO_LONGITUDE_POINTS_AT_EQUATOR_IN_HUNDREDS_OF_KILOMETERS 1.113195f
#define TAN_89_99_DEGREES 5729.57795f
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
void GPS_distance_cm_bearing(int32_t *currentLat1, int32_t *currentLon1, int32_t *destinationLat2, int32_t *destinationLon2, uint32_t *dist, int32_t *bearing)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b086      	sub	sp, #24
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
 8017a40:	603b      	str	r3, [r7, #0]
    float dLat = *destinationLat2 - *currentLat1; // difference of latitude in 1/10 000 000 degrees
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	ee07 3a90 	vmov	s15, r3
 8017a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a54:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*destinationLon2 - *currentLon1) * GPS_scaleLonDown;
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	681a      	ldr	r2, [r3, #0]
 8017a5c:	68bb      	ldr	r3, [r7, #8]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	1ad3      	subs	r3, r2, r3
 8017a62:	ee07 3a90 	vmov	s15, r3
 8017a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017a6a:	4b25      	ldr	r3, [pc, #148]	; (8017b00 <GPS_distance_cm_bearing+0xcc>)
 8017a6c:	edd3 7a00 	vldr	s15, [r3]
 8017a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017a74:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * DISTANCE_BETWEEN_TWO_LONGITUDE_POINTS_AT_EQUATOR_IN_HUNDREDS_OF_KILOMETERS;
 8017a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8017a7c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8017a84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8017a90:	f013 fd18 	bl	802b4c4 <sqrtf>
 8017a94:	eef0 7a40 	vmov.f32	s15, s0
 8017a98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017b04 <GPS_distance_cm_bearing+0xd0>
 8017a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017aa4:	ee17 2a90 	vmov	r2, s15
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2_approx(-dLat, dLon) * TAN_89_99_DEGREES;      // Convert the output radians to 100xdeg
 8017aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8017ab0:	eef1 7a67 	vneg.f32	s15, s15
 8017ab4:	edd7 0a04 	vldr	s1, [r7, #16]
 8017ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8017abc:	f7f3 fa92 	bl	800afe4 <atan2_approx>
 8017ac0:	eef0 7a40 	vmov.f32	s15, s0
 8017ac4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017b08 <GPS_distance_cm_bearing+0xd4>
 8017ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017acc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8017b0c <GPS_distance_cm_bearing+0xd8>
 8017ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017ad8:	ee17 2a90 	vmov	r2, s15
 8017adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ade:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8017ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	da06      	bge.n	8017af6 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 8017ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8017af0:	33a0      	adds	r3, #160	; 0xa0
 8017af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017af4:	6013      	str	r3, [r2, #0]
}
 8017af6:	bf00      	nop
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	200003b0 	.word	0x200003b0
 8017b04:	3f8e7d2c 	.word	0x3f8e7d2c
 8017b08:	45b30ca0 	.word	0x45b30ca0
 8017b0c:	460ca000 	.word	0x460ca000

08017b10 <GPS_calculateDistanceAndDirectionToHome>:

void GPS_calculateDistanceAndDirectionToHome(void)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af02      	add	r7, sp, #8
    if (STATE(GPS_FIX_HOME)) {      // If we don't have home set, do not display anything
 8017b16:	4b16      	ldr	r3, [pc, #88]	; (8017b70 <GPS_calculateDistanceAndDirectionToHome+0x60>)
 8017b18:	781b      	ldrb	r3, [r3, #0]
 8017b1a:	f003 0301 	and.w	r3, r3, #1
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d01c      	beq.n	8017b5c <GPS_calculateDistanceAndDirectionToHome+0x4c>
        uint32_t dist;
        int32_t dir;
        GPS_distance_cm_bearing(&gpsSol.llh.lat, &gpsSol.llh.lon, &GPS_home[GPS_LATITUDE], &GPS_home[GPS_LONGITUDE], &dist, &dir);
 8017b22:	463b      	mov	r3, r7
 8017b24:	9301      	str	r3, [sp, #4]
 8017b26:	1d3b      	adds	r3, r7, #4
 8017b28:	9300      	str	r3, [sp, #0]
 8017b2a:	4b12      	ldr	r3, [pc, #72]	; (8017b74 <GPS_calculateDistanceAndDirectionToHome+0x64>)
 8017b2c:	4a12      	ldr	r2, [pc, #72]	; (8017b78 <GPS_calculateDistanceAndDirectionToHome+0x68>)
 8017b2e:	4913      	ldr	r1, [pc, #76]	; (8017b7c <GPS_calculateDistanceAndDirectionToHome+0x6c>)
 8017b30:	4813      	ldr	r0, [pc, #76]	; (8017b80 <GPS_calculateDistanceAndDirectionToHome+0x70>)
 8017b32:	f7ff ff7f 	bl	8017a34 <GPS_distance_cm_bearing>
        GPS_distanceToHome = dist / 100;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	4a12      	ldr	r2, [pc, #72]	; (8017b84 <GPS_calculateDistanceAndDirectionToHome+0x74>)
 8017b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8017b3e:	095b      	lsrs	r3, r3, #5
 8017b40:	b29a      	uxth	r2, r3
 8017b42:	4b11      	ldr	r3, [pc, #68]	; (8017b88 <GPS_calculateDistanceAndDirectionToHome+0x78>)
 8017b44:	801a      	strh	r2, [r3, #0]
        GPS_directionToHome = dir / 100;
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	4a0e      	ldr	r2, [pc, #56]	; (8017b84 <GPS_calculateDistanceAndDirectionToHome+0x74>)
 8017b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8017b4e:	1152      	asrs	r2, r2, #5
 8017b50:	17db      	asrs	r3, r3, #31
 8017b52:	1ad3      	subs	r3, r2, r3
 8017b54:	b21a      	sxth	r2, r3
 8017b56:	4b0d      	ldr	r3, [pc, #52]	; (8017b8c <GPS_calculateDistanceAndDirectionToHome+0x7c>)
 8017b58:	801a      	strh	r2, [r3, #0]
    } else {
        GPS_distanceToHome = 0;
        GPS_directionToHome = 0;
    }
}
 8017b5a:	e005      	b.n	8017b68 <GPS_calculateDistanceAndDirectionToHome+0x58>
        GPS_distanceToHome = 0;
 8017b5c:	4b0a      	ldr	r3, [pc, #40]	; (8017b88 <GPS_calculateDistanceAndDirectionToHome+0x78>)
 8017b5e:	2200      	movs	r2, #0
 8017b60:	801a      	strh	r2, [r3, #0]
        GPS_directionToHome = 0;
 8017b62:	4b0a      	ldr	r3, [pc, #40]	; (8017b8c <GPS_calculateDistanceAndDirectionToHome+0x7c>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	801a      	strh	r2, [r3, #0]
}
 8017b68:	bf00      	nop
 8017b6a:	3708      	adds	r7, #8
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	20003ea1 	.word	0x20003ea1
 8017b74:	20002330 	.word	0x20002330
 8017b78:	2000232c 	.word	0x2000232c
 8017b7c:	20002340 	.word	0x20002340
 8017b80:	2000233c 	.word	0x2000233c
 8017b84:	51eb851f 	.word	0x51eb851f
 8017b88:	20003e94 	.word	0x20003e94
 8017b8c:	20003e96 	.word	0x20003e96

08017b90 <onGpsNewData>:

void onGpsNewData(void)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
    if (!(STATE(GPS_FIX) && gpsSol.numSat >= 5)) {
 8017b96:	4b22      	ldr	r3, [pc, #136]	; (8017c20 <onGpsNewData+0x90>)
 8017b98:	781b      	ldrb	r3, [r3, #0]
 8017b9a:	f003 0302 	and.w	r3, r3, #2
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d039      	beq.n	8017c16 <onGpsNewData+0x86>
 8017ba2:	4b20      	ldr	r3, [pc, #128]	; (8017c24 <onGpsNewData+0x94>)
 8017ba4:	7d1b      	ldrb	r3, [r3, #20]
 8017ba6:	2b04      	cmp	r3, #4
 8017ba8:	d935      	bls.n	8017c16 <onGpsNewData+0x86>
    //
    // Calculate time delta for navigation loop, range 0-1.0f, in seconds
    //
    // Time for calculating x,y speed and navigation pids
    static uint32_t nav_loopTimer;
    dTnav = (float)(millis() - nav_loopTimer) / 1000.0f;
 8017baa:	f7f1 fb3c 	bl	8009226 <millis>
 8017bae:	4602      	mov	r2, r0
 8017bb0:	4b1d      	ldr	r3, [pc, #116]	; (8017c28 <onGpsNewData+0x98>)
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	ee07 3a90 	vmov	s15, r3
 8017bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017bbe:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8017c2c <onGpsNewData+0x9c>
 8017bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017bc6:	4b1a      	ldr	r3, [pc, #104]	; (8017c30 <onGpsNewData+0xa0>)
 8017bc8:	edc3 7a00 	vstr	s15, [r3]
    nav_loopTimer = millis();
 8017bcc:	f7f1 fb2b 	bl	8009226 <millis>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	4a15      	ldr	r2, [pc, #84]	; (8017c28 <onGpsNewData+0x98>)
 8017bd4:	6013      	str	r3, [r2, #0]
    // prevent runup from bad GPS
    dTnav = MIN(dTnav, 1.0f);
 8017bd6:	4b16      	ldr	r3, [pc, #88]	; (8017c30 <onGpsNewData+0xa0>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	607b      	str	r3, [r7, #4]
 8017bdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017be0:	603b      	str	r3, [r7, #0]
 8017be2:	ed97 7a01 	vldr	s14, [r7, #4]
 8017be6:	edd7 7a00 	vldr	s15, [r7]
 8017bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bf2:	d501      	bpl.n	8017bf8 <onGpsNewData+0x68>
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	e000      	b.n	8017bfa <onGpsNewData+0x6a>
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	4a0d      	ldr	r2, [pc, #52]	; (8017c30 <onGpsNewData+0xa0>)
 8017bfc:	6013      	str	r3, [r2, #0]

    GPS_calculateDistanceAndDirectionToHome();
 8017bfe:	f7ff ff87 	bl	8017b10 <GPS_calculateDistanceAndDirectionToHome>
    if (ARMING_FLAG(ARMED)) {
 8017c02:	4b0c      	ldr	r3, [pc, #48]	; (8017c34 <onGpsNewData+0xa4>)
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	f003 0301 	and.w	r3, r3, #1
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d004      	beq.n	8017c18 <onGpsNewData+0x88>
        GPS_calculateDistanceFlownVerticalSpeed(false);
 8017c0e:	2000      	movs	r0, #0
 8017c10:	f7ff fe90 	bl	8017934 <GPS_calculateDistanceFlownVerticalSpeed>
 8017c14:	e000      	b.n	8017c18 <onGpsNewData+0x88>
        return;
 8017c16:	bf00      	nop
    }

#ifdef USE_GPS_RESCUE
    rescueNewGpsData();
#endif
}
 8017c18:	3708      	adds	r7, #8
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}
 8017c1e:	bf00      	nop
 8017c20:	20003ea1 	.word	0x20003ea1
 8017c24:	2000233c 	.word	0x2000233c
 8017c28:	20002614 	.word	0x20002614
 8017c2c:	447a0000 	.word	0x447a0000
 8017c30:	20002338 	.word	0x20002338
 8017c34:	20003ea0 	.word	0x20003ea0

08017c38 <gpsSetFixState>:

void gpsSetFixState(bool state)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b083      	sub	sp, #12
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	4603      	mov	r3, r0
 8017c40:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8017c42:	79fb      	ldrb	r3, [r7, #7]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d00e      	beq.n	8017c66 <gpsSetFixState+0x2e>
        ENABLE_STATE(GPS_FIX);
 8017c48:	4b0d      	ldr	r3, [pc, #52]	; (8017c80 <gpsSetFixState+0x48>)
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	f043 0302 	orr.w	r3, r3, #2
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	4b0b      	ldr	r3, [pc, #44]	; (8017c80 <gpsSetFixState+0x48>)
 8017c54:	701a      	strb	r2, [r3, #0]
        ENABLE_STATE(GPS_FIX_EVER);
 8017c56:	4b0a      	ldr	r3, [pc, #40]	; (8017c80 <gpsSetFixState+0x48>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	f043 0304 	orr.w	r3, r3, #4
 8017c5e:	b2da      	uxtb	r2, r3
 8017c60:	4b07      	ldr	r3, [pc, #28]	; (8017c80 <gpsSetFixState+0x48>)
 8017c62:	701a      	strb	r2, [r3, #0]
    } else {
        DISABLE_STATE(GPS_FIX);
    }
}
 8017c64:	e006      	b.n	8017c74 <gpsSetFixState+0x3c>
        DISABLE_STATE(GPS_FIX);
 8017c66:	4b06      	ldr	r3, [pc, #24]	; (8017c80 <gpsSetFixState+0x48>)
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	f023 0302 	bic.w	r3, r3, #2
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	4b03      	ldr	r3, [pc, #12]	; (8017c80 <gpsSetFixState+0x48>)
 8017c72:	701a      	strb	r2, [r3, #0]
}
 8017c74:	bf00      	nop
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr
 8017c80:	20003ea1 	.word	0x20003ea1

08017c84 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE pdrv)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8017c8e:	4b15      	ldr	r3, [pc, #84]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017c90:	2200      	movs	r2, #0
 8017c92:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8017c94:	f7fc f83c 	bl	8013d10 <sdIsInit>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	f083 0301 	eor.w	r3, r3, #1
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d007      	beq.n	8017cb4 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8017ca4:	4b0f      	ldr	r3, [pc, #60]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017ca6:	781b      	ldrb	r3, [r3, #0]
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	f043 0301 	orr.w	r3, r3, #1
 8017cae:	b2da      	uxtb	r2, r3
 8017cb0:	4b0c      	ldr	r3, [pc, #48]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017cb2:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8017cb4:	f7fc f838 	bl	8013d28 <sdIsDetected>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	f083 0301 	eor.w	r3, r3, #1
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d007      	beq.n	8017cd4 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8017cc4:	4b07      	ldr	r3, [pc, #28]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	b2db      	uxtb	r3, r3
 8017cca:	f043 0302 	orr.w	r3, r3, #2
 8017cce:	b2da      	uxtb	r2, r3
 8017cd0:	4b04      	ldr	r3, [pc, #16]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017cd2:	701a      	strb	r2, [r3, #0]
  }
  return Stat;
 8017cd4:	4b03      	ldr	r3, [pc, #12]	; (8017ce4 <SD_CheckStatus+0x60>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	b2db      	uxtb	r3, r3
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3708      	adds	r7, #8
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	200003b4 	.word	0x200003b4

08017ce8 <SD_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	4603      	mov	r3, r0
 8017cf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  Stat = 0;
 8017cf2:	4b0d      	ldr	r3, [pc, #52]	; (8017d28 <SD_initialize+0x40>)
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	701a      	strb	r2, [r3, #0]

  if (sdInit() != true)
 8017cf8:	f7fb ffa0 	bl	8013c3c <sdInit>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	f083 0301 	eor.w	r3, r3, #1
 8017d02:	b2db      	uxtb	r3, r3
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d007      	beq.n	8017d18 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8017d08:	4b07      	ldr	r3, [pc, #28]	; (8017d28 <SD_initialize+0x40>)
 8017d0a:	781b      	ldrb	r3, [r3, #0]
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	f043 0301 	orr.w	r3, r3, #1
 8017d12:	b2da      	uxtb	r2, r3
 8017d14:	4b04      	ldr	r3, [pc, #16]	; (8017d28 <SD_initialize+0x40>)
 8017d16:	701a      	strb	r2, [r3, #0]
  }
    return Stat;
 8017d18:	4b03      	ldr	r3, [pc, #12]	; (8017d28 <SD_initialize+0x40>)
 8017d1a:	781b      	ldrb	r3, [r3, #0]
 8017d1c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3708      	adds	r7, #8
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
 8017d26:	bf00      	nop
 8017d28:	200003b4 	.word	0x200003b4

08017d2c <SD_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b082      	sub	sp, #8
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	4603      	mov	r3, r0
 8017d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return SD_CheckStatus(pdrv);
 8017d36:	79fb      	ldrb	r3, [r7, #7]
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7ff ffa3 	bl	8017c84 <SD_CheckStatus>
 8017d3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8017d40:	4618      	mov	r0, r3
 8017d42:	3708      	adds	r7, #8
 8017d44:	46bd      	mov	sp, r7
 8017d46:	bd80      	pop	{r7, pc}

08017d48 <SD_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b086      	sub	sp, #24
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	60b9      	str	r1, [r7, #8]
 8017d50:	607a      	str	r2, [r7, #4]
 8017d52:	603b      	str	r3, [r7, #0]
 8017d54:	4603      	mov	r3, r0
 8017d56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  DRESULT res = RES_ERROR;
 8017d58:	2301      	movs	r3, #1
 8017d5a:	75fb      	strb	r3, [r7, #23]

  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8017d5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017d60:	683a      	ldr	r2, [r7, #0]
 8017d62:	68b9      	ldr	r1, [r7, #8]
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f7fc f815 	bl	8013d94 <sdReadBlocks>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d001      	beq.n	8017d74 <SD_read+0x2c>
  {
    res = RES_OK;
 8017d70:	2300      	movs	r3, #0
 8017d72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8017d74:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3718      	adds	r7, #24
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}

08017d7e <SD_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8017d7e:	b580      	push	{r7, lr}
 8017d80:	b086      	sub	sp, #24
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
 8017d88:	603b      	str	r3, [r7, #0]
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  DRESULT res = RES_ERROR;
 8017d8e:	2301      	movs	r3, #1
 8017d90:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8017d92:	f242 7310 	movw	r3, #10000	; 0x2710
 8017d96:	683a      	ldr	r2, [r7, #0]
 8017d98:	68b9      	ldr	r1, [r7, #8]
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f7fc f858 	bl	8013e50 <sdWriteBlocks>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d001      	beq.n	8017daa <SD_write+0x2c>
  {
    res = RES_OK;
 8017da6:	2300      	movs	r3, #0
 8017da8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8017dac:	4618      	mov	r0, r3
 8017dae:	3718      	adds	r7, #24
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <SD_ioctl>:
DRESULT SD_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b08c      	sub	sp, #48	; 0x30
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	4603      	mov	r3, r0
 8017dbc:	603a      	str	r2, [r7, #0]
 8017dbe:	71fb      	strb	r3, [r7, #7]
 8017dc0:	460b      	mov	r3, r1
 8017dc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  DRESULT res = RES_ERROR;
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8017dca:	4b25      	ldr	r3, [pc, #148]	; (8017e60 <SD_ioctl+0xac>)
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	b2db      	uxtb	r3, r3
 8017dd0:	f003 0301 	and.w	r3, r3, #1
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d001      	beq.n	8017ddc <SD_ioctl+0x28>
 8017dd8:	2303      	movs	r3, #3
 8017dda:	e03c      	b.n	8017e56 <SD_ioctl+0xa2>

  switch (cmd)
 8017ddc:	79bb      	ldrb	r3, [r7, #6]
 8017dde:	2b03      	cmp	r3, #3
 8017de0:	d834      	bhi.n	8017e4c <SD_ioctl+0x98>
 8017de2:	a201      	add	r2, pc, #4	; (adr r2, 8017de8 <SD_ioctl+0x34>)
 8017de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017de8:	08017df9 	.word	0x08017df9
 8017dec:	08017e01 	.word	0x08017e01
 8017df0:	08017e19 	.word	0x08017e19
 8017df4:	08017e33 	.word	0x08017e33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8017df8:	2300      	movs	r3, #0
 8017dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017dfe:	e028      	b.n	8017e52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8017e00:	f107 0308 	add.w	r3, r7, #8
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7fb ffa5 	bl	8013d54 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8017e0a:	6a3a      	ldr	r2, [r7, #32]
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017e10:	2300      	movs	r3, #0
 8017e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017e16:	e01c      	b.n	8017e52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8017e18:	f107 0308 	add.w	r3, r7, #8
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7fb ff99 	bl	8013d54 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	b29a      	uxth	r2, r3
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017e30:	e00f      	b.n	8017e52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8017e32:	f107 0308 	add.w	r3, r7, #8
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7fb ff8c 	bl	8013d54 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3e:	0a5a      	lsrs	r2, r3, #9
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8017e44:	2300      	movs	r3, #0
 8017e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8017e4a:	e002      	b.n	8017e52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8017e4c:	2304      	movs	r3, #4
 8017e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8017e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  /* USER CODE END IOCTL */
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3730      	adds	r7, #48	; 0x30
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	200003b4 	.word	0x200003b4

08017e64 <hwInit>:
#include "hw.h"

static void MX_DMA_Init(void);

void hwInit(void)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	af00      	add	r7, sp, #0
  bspInit();
 8017e68:	f7f1 f9aa 	bl	80091c0 <bspInit>
  #ifdef _USE_HW_RTC
    rtcInit();
  #endif
  gpioInit();
 8017e6c:	f7fb f9c2 	bl	80131f4 <gpioInit>
  flashInit();
 8017e70:	f7fa ffee 	bl	8012e50 <flashInit>
  ledInit();
 8017e74:	f7fb fe08 	bl	8013a88 <ledInit>
  MX_DMA_Init();
 8017e78:	f000 f816 	bl	8017ea8 <MX_DMA_Init>
  usbInit();
 8017e7c:	f7fe f95e 	bl	801613c <usbInit>
  uartInit();
 8017e80:	f7fd f8b2 	bl	8014fe8 <uartInit>
  cliInit();
 8017e84:	f7f9 fda4 	bl	80119d0 <cliInit>
  i2cInit();
 8017e88:	f7fb fbfe 	bl	8013688 <i2cInit>
  spiInit();
 8017e8c:	f7fc fc8e 	bl	80147ac <spiInit>
  adcInit();
 8017e90:	f7f9 fcba 	bl	8011808 <adcInit>
  
  if (sdInit() == true)
 8017e94:	f7fb fed2 	bl	8013c3c <sdInit>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d001      	beq.n	8017ea2 <hwInit+0x3e>
  {
    fatfsInit();
 8017e9e:	f7fa fdf7 	bl	8012a90 <fatfsInit>
  //   HAL_Delay(25);
  //   //BEEP_OFF;
  // }
  // ledOff(ST1);
  // ledOff(ST2);
}
 8017ea2:	bf00      	nop
 8017ea4:	bd80      	pop	{r7, pc}
	...

08017ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017eae:	2300      	movs	r3, #0
 8017eb0:	607b      	str	r3, [r7, #4]
 8017eb2:	4b23      	ldr	r3, [pc, #140]	; (8017f40 <MX_DMA_Init+0x98>)
 8017eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eb6:	4a22      	ldr	r2, [pc, #136]	; (8017f40 <MX_DMA_Init+0x98>)
 8017eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8017ebe:	4b20      	ldr	r3, [pc, #128]	; (8017f40 <MX_DMA_Init+0x98>)
 8017ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017ec6:	607b      	str	r3, [r7, #4]
 8017ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017eca:	2300      	movs	r3, #0
 8017ecc:	603b      	str	r3, [r7, #0]
 8017ece:	4b1c      	ldr	r3, [pc, #112]	; (8017f40 <MX_DMA_Init+0x98>)
 8017ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ed2:	4a1b      	ldr	r2, [pc, #108]	; (8017f40 <MX_DMA_Init+0x98>)
 8017ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8017eda:	4b19      	ldr	r3, [pc, #100]	; (8017f40 <MX_DMA_Init+0x98>)
 8017edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017ee2:	603b      	str	r3, [r7, #0]
 8017ee4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	2100      	movs	r1, #0
 8017eea:	200e      	movs	r0, #14
 8017eec:	f000 fd35 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8017ef0:	200e      	movs	r0, #14
 8017ef2:	f000 fd4e 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	2100      	movs	r1, #0
 8017efa:	200f      	movs	r0, #15
 8017efc:	f000 fd2d 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8017f00:	200f      	movs	r0, #15
 8017f02:	f000 fd46 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017f06:	2200      	movs	r2, #0
 8017f08:	2100      	movs	r1, #0
 8017f0a:	2010      	movs	r0, #16
 8017f0c:	f000 fd25 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017f10:	2010      	movs	r0, #16
 8017f12:	f000 fd3e 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8017f16:	2200      	movs	r2, #0
 8017f18:	2100      	movs	r1, #0
 8017f1a:	203a      	movs	r0, #58	; 0x3a
 8017f1c:	f000 fd1d 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8017f20:	203a      	movs	r0, #58	; 0x3a
 8017f22:	f000 fd36 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8017f26:	2200      	movs	r2, #0
 8017f28:	2100      	movs	r1, #0
 8017f2a:	203b      	movs	r0, #59	; 0x3b
 8017f2c:	f000 fd15 	bl	801895a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8017f30:	203b      	movs	r0, #59	; 0x3b
 8017f32:	f000 fd2e 	bl	8018992 <HAL_NVIC_EnableIRQ>

 8017f36:	bf00      	nop
 8017f38:	3708      	adds	r7, #8
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	40023800 	.word	0x40023800

08017f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8017f48:	4b0e      	ldr	r3, [pc, #56]	; (8017f84 <HAL_Init+0x40>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	4a0d      	ldr	r2, [pc, #52]	; (8017f84 <HAL_Init+0x40>)
 8017f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8017f54:	4b0b      	ldr	r3, [pc, #44]	; (8017f84 <HAL_Init+0x40>)
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4a0a      	ldr	r2, [pc, #40]	; (8017f84 <HAL_Init+0x40>)
 8017f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017f60:	4b08      	ldr	r3, [pc, #32]	; (8017f84 <HAL_Init+0x40>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4a07      	ldr	r2, [pc, #28]	; (8017f84 <HAL_Init+0x40>)
 8017f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017f6c:	2003      	movs	r0, #3
 8017f6e:	f000 fce9 	bl	8018944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8017f72:	2000      	movs	r0, #0
 8017f74:	f000 f808 	bl	8017f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8017f78:	f7f1 fa12 	bl	80093a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8017f7c:	2300      	movs	r3, #0
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	bd80      	pop	{r7, pc}
 8017f82:	bf00      	nop
 8017f84:	40023c00 	.word	0x40023c00

08017f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b082      	sub	sp, #8
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8017f90:	4b12      	ldr	r3, [pc, #72]	; (8017fdc <HAL_InitTick+0x54>)
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	4b12      	ldr	r3, [pc, #72]	; (8017fe0 <HAL_InitTick+0x58>)
 8017f96:	781b      	ldrb	r3, [r3, #0]
 8017f98:	4619      	mov	r1, r3
 8017f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f000 fd01 	bl	80189ae <HAL_SYSTICK_Config>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d001      	beq.n	8017fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	e00e      	b.n	8017fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	2b0f      	cmp	r3, #15
 8017fba:	d80a      	bhi.n	8017fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	6879      	ldr	r1, [r7, #4]
 8017fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fc4:	f000 fcc9 	bl	801895a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8017fc8:	4a06      	ldr	r2, [pc, #24]	; (8017fe4 <HAL_InitTick+0x5c>)
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	e000      	b.n	8017fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8017fd2:	2301      	movs	r3, #1
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3708      	adds	r7, #8
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	20000188 	.word	0x20000188
 8017fe0:	200003d0 	.word	0x200003d0
 8017fe4:	200003cc 	.word	0x200003cc

08017fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017fe8:	b480      	push	{r7}
 8017fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8017fec:	4b06      	ldr	r3, [pc, #24]	; (8018008 <HAL_IncTick+0x20>)
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	4b06      	ldr	r3, [pc, #24]	; (801800c <HAL_IncTick+0x24>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	4413      	add	r3, r2
 8017ff8:	4a04      	ldr	r2, [pc, #16]	; (801800c <HAL_IncTick+0x24>)
 8017ffa:	6013      	str	r3, [r2, #0]
}
 8017ffc:	bf00      	nop
 8017ffe:	46bd      	mov	sp, r7
 8018000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018004:	4770      	bx	lr
 8018006:	bf00      	nop
 8018008:	200003d0 	.word	0x200003d0
 801800c:	20002618 	.word	0x20002618

08018010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018010:	b480      	push	{r7}
 8018012:	af00      	add	r7, sp, #0
  return uwTick;
 8018014:	4b03      	ldr	r3, [pc, #12]	; (8018024 <HAL_GetTick+0x14>)
 8018016:	681b      	ldr	r3, [r3, #0]
}
 8018018:	4618      	mov	r0, r3
 801801a:	46bd      	mov	sp, r7
 801801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018020:	4770      	bx	lr
 8018022:	bf00      	nop
 8018024:	20002618 	.word	0x20002618

08018028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b084      	sub	sp, #16
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018030:	f7ff ffee 	bl	8018010 <HAL_GetTick>
 8018034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018040:	d005      	beq.n	801804e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018042:	4b0a      	ldr	r3, [pc, #40]	; (801806c <HAL_Delay+0x44>)
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	461a      	mov	r2, r3
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	4413      	add	r3, r2
 801804c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801804e:	bf00      	nop
 8018050:	f7ff ffde 	bl	8018010 <HAL_GetTick>
 8018054:	4602      	mov	r2, r0
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	1ad3      	subs	r3, r2, r3
 801805a:	68fa      	ldr	r2, [r7, #12]
 801805c:	429a      	cmp	r2, r3
 801805e:	d8f7      	bhi.n	8018050 <HAL_Delay+0x28>
  {
  }
}
 8018060:	bf00      	nop
 8018062:	bf00      	nop
 8018064:	3710      	adds	r7, #16
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	200003d0 	.word	0x200003d0

08018070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018078:	2300      	movs	r3, #0
 801807a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d101      	bne.n	8018086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018082:	2301      	movs	r3, #1
 8018084:	e033      	b.n	80180ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801808a:	2b00      	cmp	r3, #0
 801808c:	d109      	bne.n	80180a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7f9 fc1e 	bl	80118d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	2200      	movs	r2, #0
 8018098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2200      	movs	r2, #0
 801809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180a6:	f003 0310 	and.w	r3, r3, #16
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d118      	bne.n	80180e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80180b6:	f023 0302 	bic.w	r3, r3, #2
 80180ba:	f043 0202 	orr.w	r2, r3, #2
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f000 fa68 	bl	8018598 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2200      	movs	r2, #0
 80180cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180d2:	f023 0303 	bic.w	r3, r3, #3
 80180d6:	f043 0201 	orr.w	r2, r3, #1
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	641a      	str	r2, [r3, #64]	; 0x40
 80180de:	e001      	b.n	80180e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80180e0:	2301      	movs	r3, #1
 80180e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	2200      	movs	r2, #0
 80180e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80180ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3710      	adds	r7, #16
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}

080180f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80180f6:	b580      	push	{r7, lr}
 80180f8:	b086      	sub	sp, #24
 80180fa:	af00      	add	r7, sp, #0
 80180fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80180fe:	2300      	movs	r3, #0
 8018100:	617b      	str	r3, [r7, #20]
 8018102:	2300      	movs	r3, #0
 8018104:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	f003 0302 	and.w	r3, r3, #2
 801811c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 801811e:	68bb      	ldr	r3, [r7, #8]
 8018120:	f003 0320 	and.w	r3, r3, #32
 8018124:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8018126:	697b      	ldr	r3, [r7, #20]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d049      	beq.n	80181c0 <HAL_ADC_IRQHandler+0xca>
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d046      	beq.n	80181c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018136:	f003 0310 	and.w	r3, r3, #16
 801813a:	2b00      	cmp	r3, #0
 801813c:	d105      	bne.n	801814a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018142:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	689b      	ldr	r3, [r3, #8]
 8018150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8018154:	2b00      	cmp	r3, #0
 8018156:	d12b      	bne.n	80181b0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801815c:	2b00      	cmp	r3, #0
 801815e:	d127      	bne.n	80181b0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018166:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801816a:	2b00      	cmp	r3, #0
 801816c:	d006      	beq.n	801817c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	689b      	ldr	r3, [r3, #8]
 8018174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8018178:	2b00      	cmp	r3, #0
 801817a:	d119      	bne.n	80181b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	685a      	ldr	r2, [r3, #4]
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f022 0220 	bic.w	r2, r2, #32
 801818a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801819c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d105      	bne.n	80181b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181a8:	f043 0201 	orr.w	r2, r3, #1
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f000 f8b0 	bl	8018316 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	f06f 0212 	mvn.w	r2, #18
 80181be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	f003 0304 	and.w	r3, r3, #4
 80181c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80181ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d057      	beq.n	8018286 <HAL_ADC_IRQHandler+0x190>
 80181d6:	693b      	ldr	r3, [r7, #16]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d054      	beq.n	8018286 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181e0:	f003 0310 	and.w	r3, r3, #16
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d105      	bne.n	80181f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	689b      	ldr	r3, [r3, #8]
 80181fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d139      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018208:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801820c:	2b00      	cmp	r3, #0
 801820e:	d006      	beq.n	801821e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	689b      	ldr	r3, [r3, #8]
 8018216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801821a:	2b00      	cmp	r3, #0
 801821c:	d12b      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8018228:	2b00      	cmp	r3, #0
 801822a:	d124      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	689b      	ldr	r3, [r3, #8]
 8018232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8018236:	2b00      	cmp	r3, #0
 8018238:	d11d      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801823e:	2b00      	cmp	r3, #0
 8018240:	d119      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	685a      	ldr	r2, [r3, #4]
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018250:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018266:	2b00      	cmp	r3, #0
 8018268:	d105      	bne.n	8018276 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801826e:	f043 0201 	orr.w	r2, r3, #1
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f000 fa8a 	bl	8018790 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	f06f 020c 	mvn.w	r2, #12
 8018284:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	f003 0301 	and.w	r3, r3, #1
 801828c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 801828e:	68bb      	ldr	r3, [r7, #8]
 8018290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018294:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d017      	beq.n	80182cc <HAL_ADC_IRQHandler+0x1d6>
 801829c:	693b      	ldr	r3, [r7, #16]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d014      	beq.n	80182cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	f003 0301 	and.w	r3, r3, #1
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	d10d      	bne.n	80182cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f000 f834 	bl	801832a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	f06f 0201 	mvn.w	r2, #1
 80182ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	f003 0320 	and.w	r3, r3, #32
 80182d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80182da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d015      	beq.n	801830e <HAL_ADC_IRQHandler+0x218>
 80182e2:	693b      	ldr	r3, [r7, #16]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d012      	beq.n	801830e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ec:	f043 0202 	orr.w	r2, r3, #2
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	f06f 0220 	mvn.w	r2, #32
 80182fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f000 f81d 	bl	801833e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	f06f 0220 	mvn.w	r2, #32
 801830c:	601a      	str	r2, [r3, #0]
  }
}
 801830e:	bf00      	nop
 8018310:	3718      	adds	r7, #24
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8018316:	b480      	push	{r7}
 8018318:	b083      	sub	sp, #12
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801831e:	bf00      	nop
 8018320:	370c      	adds	r7, #12
 8018322:	46bd      	mov	sp, r7
 8018324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018328:	4770      	bx	lr

0801832a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 801832a:	b480      	push	{r7}
 801832c:	b083      	sub	sp, #12
 801832e:	af00      	add	r7, sp, #0
 8018330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8018332:	bf00      	nop
 8018334:	370c      	adds	r7, #12
 8018336:	46bd      	mov	sp, r7
 8018338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833c:	4770      	bx	lr

0801833e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801833e:	b480      	push	{r7}
 8018340:	b083      	sub	sp, #12
 8018342:	af00      	add	r7, sp, #0
 8018344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8018346:	bf00      	nop
 8018348:	370c      	adds	r7, #12
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr
	...

08018354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8018354:	b480      	push	{r7}
 8018356:	b085      	sub	sp, #20
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
 801835c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801835e:	2300      	movs	r3, #0
 8018360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018368:	2b01      	cmp	r3, #1
 801836a:	d101      	bne.n	8018370 <HAL_ADC_ConfigChannel+0x1c>
 801836c:	2302      	movs	r3, #2
 801836e:	e105      	b.n	801857c <HAL_ADC_ConfigChannel+0x228>
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	2201      	movs	r2, #1
 8018374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b09      	cmp	r3, #9
 801837e:	d925      	bls.n	80183cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	68d9      	ldr	r1, [r3, #12]
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	b29b      	uxth	r3, r3
 801838c:	461a      	mov	r2, r3
 801838e:	4613      	mov	r3, r2
 8018390:	005b      	lsls	r3, r3, #1
 8018392:	4413      	add	r3, r2
 8018394:	3b1e      	subs	r3, #30
 8018396:	2207      	movs	r2, #7
 8018398:	fa02 f303 	lsl.w	r3, r2, r3
 801839c:	43da      	mvns	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	400a      	ands	r2, r1
 80183a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	68d9      	ldr	r1, [r3, #12]
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	689a      	ldr	r2, [r3, #8]
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	4618      	mov	r0, r3
 80183b8:	4603      	mov	r3, r0
 80183ba:	005b      	lsls	r3, r3, #1
 80183bc:	4403      	add	r3, r0
 80183be:	3b1e      	subs	r3, #30
 80183c0:	409a      	lsls	r2, r3
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	430a      	orrs	r2, r1
 80183c8:	60da      	str	r2, [r3, #12]
 80183ca:	e022      	b.n	8018412 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	6919      	ldr	r1, [r3, #16]
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	461a      	mov	r2, r3
 80183da:	4613      	mov	r3, r2
 80183dc:	005b      	lsls	r3, r3, #1
 80183de:	4413      	add	r3, r2
 80183e0:	2207      	movs	r2, #7
 80183e2:	fa02 f303 	lsl.w	r3, r2, r3
 80183e6:	43da      	mvns	r2, r3
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	400a      	ands	r2, r1
 80183ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	6919      	ldr	r1, [r3, #16]
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	689a      	ldr	r2, [r3, #8]
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	4618      	mov	r0, r3
 8018402:	4603      	mov	r3, r0
 8018404:	005b      	lsls	r3, r3, #1
 8018406:	4403      	add	r3, r0
 8018408:	409a      	lsls	r2, r3
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	430a      	orrs	r2, r1
 8018410:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	685b      	ldr	r3, [r3, #4]
 8018416:	2b06      	cmp	r3, #6
 8018418:	d824      	bhi.n	8018464 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	685a      	ldr	r2, [r3, #4]
 8018424:	4613      	mov	r3, r2
 8018426:	009b      	lsls	r3, r3, #2
 8018428:	4413      	add	r3, r2
 801842a:	3b05      	subs	r3, #5
 801842c:	221f      	movs	r2, #31
 801842e:	fa02 f303 	lsl.w	r3, r2, r3
 8018432:	43da      	mvns	r2, r3
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	400a      	ands	r2, r1
 801843a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	b29b      	uxth	r3, r3
 8018448:	4618      	mov	r0, r3
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	685a      	ldr	r2, [r3, #4]
 801844e:	4613      	mov	r3, r2
 8018450:	009b      	lsls	r3, r3, #2
 8018452:	4413      	add	r3, r2
 8018454:	3b05      	subs	r3, #5
 8018456:	fa00 f203 	lsl.w	r2, r0, r3
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	430a      	orrs	r2, r1
 8018460:	635a      	str	r2, [r3, #52]	; 0x34
 8018462:	e04c      	b.n	80184fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	685b      	ldr	r3, [r3, #4]
 8018468:	2b0c      	cmp	r3, #12
 801846a:	d824      	bhi.n	80184b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	685a      	ldr	r2, [r3, #4]
 8018476:	4613      	mov	r3, r2
 8018478:	009b      	lsls	r3, r3, #2
 801847a:	4413      	add	r3, r2
 801847c:	3b23      	subs	r3, #35	; 0x23
 801847e:	221f      	movs	r2, #31
 8018480:	fa02 f303 	lsl.w	r3, r2, r3
 8018484:	43da      	mvns	r2, r3
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	400a      	ands	r2, r1
 801848c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	b29b      	uxth	r3, r3
 801849a:	4618      	mov	r0, r3
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	685a      	ldr	r2, [r3, #4]
 80184a0:	4613      	mov	r3, r2
 80184a2:	009b      	lsls	r3, r3, #2
 80184a4:	4413      	add	r3, r2
 80184a6:	3b23      	subs	r3, #35	; 0x23
 80184a8:	fa00 f203 	lsl.w	r2, r0, r3
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	430a      	orrs	r2, r1
 80184b2:	631a      	str	r2, [r3, #48]	; 0x30
 80184b4:	e023      	b.n	80184fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	685a      	ldr	r2, [r3, #4]
 80184c0:	4613      	mov	r3, r2
 80184c2:	009b      	lsls	r3, r3, #2
 80184c4:	4413      	add	r3, r2
 80184c6:	3b41      	subs	r3, #65	; 0x41
 80184c8:	221f      	movs	r2, #31
 80184ca:	fa02 f303 	lsl.w	r3, r2, r3
 80184ce:	43da      	mvns	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	400a      	ands	r2, r1
 80184d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	4618      	mov	r0, r3
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	685a      	ldr	r2, [r3, #4]
 80184ea:	4613      	mov	r3, r2
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	4413      	add	r3, r2
 80184f0:	3b41      	subs	r3, #65	; 0x41
 80184f2:	fa00 f203 	lsl.w	r2, r0, r3
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	430a      	orrs	r2, r1
 80184fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80184fe:	4b22      	ldr	r3, [pc, #136]	; (8018588 <HAL_ADC_ConfigChannel+0x234>)
 8018500:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	4a21      	ldr	r2, [pc, #132]	; (801858c <HAL_ADC_ConfigChannel+0x238>)
 8018508:	4293      	cmp	r3, r2
 801850a:	d109      	bne.n	8018520 <HAL_ADC_ConfigChannel+0x1cc>
 801850c:	683b      	ldr	r3, [r7, #0]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	2b12      	cmp	r3, #18
 8018512:	d105      	bne.n	8018520 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	685b      	ldr	r3, [r3, #4]
 8018518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	4a19      	ldr	r2, [pc, #100]	; (801858c <HAL_ADC_ConfigChannel+0x238>)
 8018526:	4293      	cmp	r3, r2
 8018528:	d123      	bne.n	8018572 <HAL_ADC_ConfigChannel+0x21e>
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	2b10      	cmp	r3, #16
 8018530:	d003      	beq.n	801853a <HAL_ADC_ConfigChannel+0x1e6>
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	2b11      	cmp	r3, #17
 8018538:	d11b      	bne.n	8018572 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	2b10      	cmp	r3, #16
 801854c:	d111      	bne.n	8018572 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801854e:	4b10      	ldr	r3, [pc, #64]	; (8018590 <HAL_ADC_ConfigChannel+0x23c>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	4a10      	ldr	r2, [pc, #64]	; (8018594 <HAL_ADC_ConfigChannel+0x240>)
 8018554:	fba2 2303 	umull	r2, r3, r2, r3
 8018558:	0c9a      	lsrs	r2, r3, #18
 801855a:	4613      	mov	r3, r2
 801855c:	009b      	lsls	r3, r3, #2
 801855e:	4413      	add	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018564:	e002      	b.n	801856c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8018566:	68bb      	ldr	r3, [r7, #8]
 8018568:	3b01      	subs	r3, #1
 801856a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1f9      	bne.n	8018566 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2200      	movs	r2, #0
 8018576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801857a:	2300      	movs	r3, #0
}
 801857c:	4618      	mov	r0, r3
 801857e:	3714      	adds	r7, #20
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr
 8018588:	40012300 	.word	0x40012300
 801858c:	40012000 	.word	0x40012000
 8018590:	20000188 	.word	0x20000188
 8018594:	431bde83 	.word	0x431bde83

08018598 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018598:	b480      	push	{r7}
 801859a:	b085      	sub	sp, #20
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80185a0:	4b79      	ldr	r3, [pc, #484]	; (8018788 <ADC_Init+0x1f0>)
 80185a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	685a      	ldr	r2, [r3, #4]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	431a      	orrs	r2, r3
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	685a      	ldr	r2, [r3, #4]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80185cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	6859      	ldr	r1, [r3, #4]
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	691b      	ldr	r3, [r3, #16]
 80185d8:	021a      	lsls	r2, r3, #8
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	430a      	orrs	r2, r1
 80185e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	685a      	ldr	r2, [r3, #4]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80185f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	6859      	ldr	r1, [r3, #4]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	689a      	ldr	r2, [r3, #8]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	430a      	orrs	r2, r1
 8018602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	689a      	ldr	r2, [r3, #8]
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	6899      	ldr	r1, [r3, #8]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	68da      	ldr	r2, [r3, #12]
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	430a      	orrs	r2, r1
 8018624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801862a:	4a58      	ldr	r2, [pc, #352]	; (801878c <ADC_Init+0x1f4>)
 801862c:	4293      	cmp	r3, r2
 801862e:	d022      	beq.n	8018676 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	689a      	ldr	r2, [r3, #8]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801863e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	6899      	ldr	r1, [r3, #8]
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	430a      	orrs	r2, r1
 8018650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	689a      	ldr	r2, [r3, #8]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	6899      	ldr	r1, [r3, #8]
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	430a      	orrs	r2, r1
 8018672:	609a      	str	r2, [r3, #8]
 8018674:	e00f      	b.n	8018696 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	689a      	ldr	r2, [r3, #8]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	689a      	ldr	r2, [r3, #8]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	689a      	ldr	r2, [r3, #8]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	f022 0202 	bic.w	r2, r2, #2
 80186a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	6899      	ldr	r1, [r3, #8]
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	7e1b      	ldrb	r3, [r3, #24]
 80186b0:	005a      	lsls	r2, r3, #1
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	430a      	orrs	r2, r1
 80186b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d01b      	beq.n	80186fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	685a      	ldr	r2, [r3, #4]
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80186d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	685a      	ldr	r2, [r3, #4]
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80186e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	6859      	ldr	r1, [r3, #4]
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ee:	3b01      	subs	r3, #1
 80186f0:	035a      	lsls	r2, r3, #13
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	430a      	orrs	r2, r1
 80186f8:	605a      	str	r2, [r3, #4]
 80186fa:	e007      	b.n	801870c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	685a      	ldr	r2, [r3, #4]
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801870a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801871a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	69db      	ldr	r3, [r3, #28]
 8018726:	3b01      	subs	r3, #1
 8018728:	051a      	lsls	r2, r3, #20
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	430a      	orrs	r2, r1
 8018730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	689a      	ldr	r2, [r3, #8]
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	6899      	ldr	r1, [r3, #8]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801874e:	025a      	lsls	r2, r3, #9
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	430a      	orrs	r2, r1
 8018756:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	689a      	ldr	r2, [r3, #8]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	6899      	ldr	r1, [r3, #8]
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	695b      	ldr	r3, [r3, #20]
 8018772:	029a      	lsls	r2, r3, #10
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	430a      	orrs	r2, r1
 801877a:	609a      	str	r2, [r3, #8]
}
 801877c:	bf00      	nop
 801877e:	3714      	adds	r7, #20
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr
 8018788:	40012300 	.word	0x40012300
 801878c:	0f000001 	.word	0x0f000001

08018790 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8018790:	b480      	push	{r7}
 8018792:	b083      	sub	sp, #12
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8018798:	bf00      	nop
 801879a:	370c      	adds	r7, #12
 801879c:	46bd      	mov	sp, r7
 801879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a2:	4770      	bx	lr

080187a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80187a4:	b480      	push	{r7}
 80187a6:	b085      	sub	sp, #20
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	f003 0307 	and.w	r3, r3, #7
 80187b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80187b4:	4b0c      	ldr	r3, [pc, #48]	; (80187e8 <__NVIC_SetPriorityGrouping+0x44>)
 80187b6:	68db      	ldr	r3, [r3, #12]
 80187b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80187ba:	68ba      	ldr	r2, [r7, #8]
 80187bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80187c0:	4013      	ands	r3, r2
 80187c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80187cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80187d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80187d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80187d6:	4a04      	ldr	r2, [pc, #16]	; (80187e8 <__NVIC_SetPriorityGrouping+0x44>)
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	60d3      	str	r3, [r2, #12]
}
 80187dc:	bf00      	nop
 80187de:	3714      	adds	r7, #20
 80187e0:	46bd      	mov	sp, r7
 80187e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e6:	4770      	bx	lr
 80187e8:	e000ed00 	.word	0xe000ed00

080187ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80187ec:	b480      	push	{r7}
 80187ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80187f0:	4b04      	ldr	r3, [pc, #16]	; (8018804 <__NVIC_GetPriorityGrouping+0x18>)
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	0a1b      	lsrs	r3, r3, #8
 80187f6:	f003 0307 	and.w	r3, r3, #7
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr
 8018804:	e000ed00 	.word	0xe000ed00

08018808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018808:	b480      	push	{r7}
 801880a:	b083      	sub	sp, #12
 801880c:	af00      	add	r7, sp, #0
 801880e:	4603      	mov	r3, r0
 8018810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018816:	2b00      	cmp	r3, #0
 8018818:	db0b      	blt.n	8018832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801881a:	79fb      	ldrb	r3, [r7, #7]
 801881c:	f003 021f 	and.w	r2, r3, #31
 8018820:	4907      	ldr	r1, [pc, #28]	; (8018840 <__NVIC_EnableIRQ+0x38>)
 8018822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018826:	095b      	lsrs	r3, r3, #5
 8018828:	2001      	movs	r0, #1
 801882a:	fa00 f202 	lsl.w	r2, r0, r2
 801882e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018832:	bf00      	nop
 8018834:	370c      	adds	r7, #12
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr
 801883e:	bf00      	nop
 8018840:	e000e100 	.word	0xe000e100

08018844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018844:	b480      	push	{r7}
 8018846:	b083      	sub	sp, #12
 8018848:	af00      	add	r7, sp, #0
 801884a:	4603      	mov	r3, r0
 801884c:	6039      	str	r1, [r7, #0]
 801884e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018854:	2b00      	cmp	r3, #0
 8018856:	db0a      	blt.n	801886e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	b2da      	uxtb	r2, r3
 801885c:	490c      	ldr	r1, [pc, #48]	; (8018890 <__NVIC_SetPriority+0x4c>)
 801885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018862:	0112      	lsls	r2, r2, #4
 8018864:	b2d2      	uxtb	r2, r2
 8018866:	440b      	add	r3, r1
 8018868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801886c:	e00a      	b.n	8018884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	b2da      	uxtb	r2, r3
 8018872:	4908      	ldr	r1, [pc, #32]	; (8018894 <__NVIC_SetPriority+0x50>)
 8018874:	79fb      	ldrb	r3, [r7, #7]
 8018876:	f003 030f 	and.w	r3, r3, #15
 801887a:	3b04      	subs	r3, #4
 801887c:	0112      	lsls	r2, r2, #4
 801887e:	b2d2      	uxtb	r2, r2
 8018880:	440b      	add	r3, r1
 8018882:	761a      	strb	r2, [r3, #24]
}
 8018884:	bf00      	nop
 8018886:	370c      	adds	r7, #12
 8018888:	46bd      	mov	sp, r7
 801888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888e:	4770      	bx	lr
 8018890:	e000e100 	.word	0xe000e100
 8018894:	e000ed00 	.word	0xe000ed00

08018898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018898:	b480      	push	{r7}
 801889a:	b089      	sub	sp, #36	; 0x24
 801889c:	af00      	add	r7, sp, #0
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	60b9      	str	r1, [r7, #8]
 80188a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	f003 0307 	and.w	r3, r3, #7
 80188aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	f1c3 0307 	rsb	r3, r3, #7
 80188b2:	2b04      	cmp	r3, #4
 80188b4:	bf28      	it	cs
 80188b6:	2304      	movcs	r3, #4
 80188b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	3304      	adds	r3, #4
 80188be:	2b06      	cmp	r3, #6
 80188c0:	d902      	bls.n	80188c8 <NVIC_EncodePriority+0x30>
 80188c2:	69fb      	ldr	r3, [r7, #28]
 80188c4:	3b03      	subs	r3, #3
 80188c6:	e000      	b.n	80188ca <NVIC_EncodePriority+0x32>
 80188c8:	2300      	movs	r3, #0
 80188ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80188cc:	f04f 32ff 	mov.w	r2, #4294967295
 80188d0:	69bb      	ldr	r3, [r7, #24]
 80188d2:	fa02 f303 	lsl.w	r3, r2, r3
 80188d6:	43da      	mvns	r2, r3
 80188d8:	68bb      	ldr	r3, [r7, #8]
 80188da:	401a      	ands	r2, r3
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80188e0:	f04f 31ff 	mov.w	r1, #4294967295
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	fa01 f303 	lsl.w	r3, r1, r3
 80188ea:	43d9      	mvns	r1, r3
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80188f0:	4313      	orrs	r3, r2
         );
}
 80188f2:	4618      	mov	r0, r3
 80188f4:	3724      	adds	r7, #36	; 0x24
 80188f6:	46bd      	mov	sp, r7
 80188f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fc:	4770      	bx	lr
	...

08018900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	3b01      	subs	r3, #1
 801890c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018910:	d301      	bcc.n	8018916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018912:	2301      	movs	r3, #1
 8018914:	e00f      	b.n	8018936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018916:	4a0a      	ldr	r2, [pc, #40]	; (8018940 <SysTick_Config+0x40>)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	3b01      	subs	r3, #1
 801891c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801891e:	210f      	movs	r1, #15
 8018920:	f04f 30ff 	mov.w	r0, #4294967295
 8018924:	f7ff ff8e 	bl	8018844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018928:	4b05      	ldr	r3, [pc, #20]	; (8018940 <SysTick_Config+0x40>)
 801892a:	2200      	movs	r2, #0
 801892c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801892e:	4b04      	ldr	r3, [pc, #16]	; (8018940 <SysTick_Config+0x40>)
 8018930:	2207      	movs	r2, #7
 8018932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018934:	2300      	movs	r3, #0
}
 8018936:	4618      	mov	r0, r3
 8018938:	3708      	adds	r7, #8
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}
 801893e:	bf00      	nop
 8018940:	e000e010 	.word	0xe000e010

08018944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7ff ff29 	bl	80187a4 <__NVIC_SetPriorityGrouping>
}
 8018952:	bf00      	nop
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}

0801895a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801895a:	b580      	push	{r7, lr}
 801895c:	b086      	sub	sp, #24
 801895e:	af00      	add	r7, sp, #0
 8018960:	4603      	mov	r3, r0
 8018962:	60b9      	str	r1, [r7, #8]
 8018964:	607a      	str	r2, [r7, #4]
 8018966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018968:	2300      	movs	r3, #0
 801896a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801896c:	f7ff ff3e 	bl	80187ec <__NVIC_GetPriorityGrouping>
 8018970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	68b9      	ldr	r1, [r7, #8]
 8018976:	6978      	ldr	r0, [r7, #20]
 8018978:	f7ff ff8e 	bl	8018898 <NVIC_EncodePriority>
 801897c:	4602      	mov	r2, r0
 801897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018982:	4611      	mov	r1, r2
 8018984:	4618      	mov	r0, r3
 8018986:	f7ff ff5d 	bl	8018844 <__NVIC_SetPriority>
}
 801898a:	bf00      	nop
 801898c:	3718      	adds	r7, #24
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}

08018992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018992:	b580      	push	{r7, lr}
 8018994:	b082      	sub	sp, #8
 8018996:	af00      	add	r7, sp, #0
 8018998:	4603      	mov	r3, r0
 801899a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801899c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7ff ff31 	bl	8018808 <__NVIC_EnableIRQ>
}
 80189a6:	bf00      	nop
 80189a8:	3708      	adds	r7, #8
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b082      	sub	sp, #8
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f7ff ffa2 	bl	8018900 <SysTick_Config>
 80189bc:	4603      	mov	r3, r0
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3708      	adds	r7, #8
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}

080189c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80189c6:	b580      	push	{r7, lr}
 80189c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80189ca:	f7f0 fbb5 	bl	8009138 <HAL_SYSTICK_Callback>
}
 80189ce:	bf00      	nop
 80189d0:	bd80      	pop	{r7, pc}
	...

080189d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b086      	sub	sp, #24
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80189dc:	2300      	movs	r3, #0
 80189de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80189e0:	f7ff fb16 	bl	8018010 <HAL_GetTick>
 80189e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d101      	bne.n	80189f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80189ec:	2301      	movs	r3, #1
 80189ee:	e099      	b.n	8018b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	2202      	movs	r2, #2
 80189f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2200      	movs	r2, #0
 80189fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	681a      	ldr	r2, [r3, #0]
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	f022 0201 	bic.w	r2, r2, #1
 8018a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018a10:	e00f      	b.n	8018a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018a12:	f7ff fafd 	bl	8018010 <HAL_GetTick>
 8018a16:	4602      	mov	r2, r0
 8018a18:	693b      	ldr	r3, [r7, #16]
 8018a1a:	1ad3      	subs	r3, r2, r3
 8018a1c:	2b05      	cmp	r3, #5
 8018a1e:	d908      	bls.n	8018a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	2220      	movs	r2, #32
 8018a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	2203      	movs	r2, #3
 8018a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018a2e:	2303      	movs	r3, #3
 8018a30:	e078      	b.n	8018b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	f003 0301 	and.w	r3, r3, #1
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d1e8      	bne.n	8018a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018a48:	697a      	ldr	r2, [r7, #20]
 8018a4a:	4b38      	ldr	r3, [pc, #224]	; (8018b2c <HAL_DMA_Init+0x158>)
 8018a4c:	4013      	ands	r3, r2
 8018a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	685a      	ldr	r2, [r3, #4]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	689b      	ldr	r3, [r3, #8]
 8018a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	691b      	ldr	r3, [r3, #16]
 8018a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	699b      	ldr	r3, [r3, #24]
 8018a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6a1b      	ldr	r3, [r3, #32]
 8018a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a7e:	697a      	ldr	r2, [r7, #20]
 8018a80:	4313      	orrs	r3, r2
 8018a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a88:	2b04      	cmp	r3, #4
 8018a8a:	d107      	bne.n	8018a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a94:	4313      	orrs	r3, r2
 8018a96:	697a      	ldr	r2, [r7, #20]
 8018a98:	4313      	orrs	r3, r2
 8018a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	697a      	ldr	r2, [r7, #20]
 8018aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	695b      	ldr	r3, [r3, #20]
 8018aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	f023 0307 	bic.w	r3, r3, #7
 8018ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab8:	697a      	ldr	r2, [r7, #20]
 8018aba:	4313      	orrs	r3, r2
 8018abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac2:	2b04      	cmp	r3, #4
 8018ac4:	d117      	bne.n	8018af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aca:	697a      	ldr	r2, [r7, #20]
 8018acc:	4313      	orrs	r3, r2
 8018ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d00e      	beq.n	8018af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018ad8:	6878      	ldr	r0, [r7, #4]
 8018ada:	f000 fb0f 	bl	80190fc <DMA_CheckFifoParam>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d008      	beq.n	8018af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	2240      	movs	r2, #64	; 0x40
 8018ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2201      	movs	r2, #1
 8018aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018af2:	2301      	movs	r3, #1
 8018af4:	e016      	b.n	8018b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	697a      	ldr	r2, [r7, #20]
 8018afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f000 fac6 	bl	8019090 <DMA_CalcBaseAndBitshift>
 8018b04:	4603      	mov	r3, r0
 8018b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b0c:	223f      	movs	r2, #63	; 0x3f
 8018b0e:	409a      	lsls	r2, r3
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2200      	movs	r2, #0
 8018b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018b22:	2300      	movs	r3, #0
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3718      	adds	r7, #24
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	f010803f 	.word	0xf010803f

08018b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b086      	sub	sp, #24
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	60f8      	str	r0, [r7, #12]
 8018b38:	60b9      	str	r1, [r7, #8]
 8018b3a:	607a      	str	r2, [r7, #4]
 8018b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018b4e:	2b01      	cmp	r3, #1
 8018b50:	d101      	bne.n	8018b56 <HAL_DMA_Start_IT+0x26>
 8018b52:	2302      	movs	r3, #2
 8018b54:	e040      	b.n	8018bd8 <HAL_DMA_Start_IT+0xa8>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	2201      	movs	r2, #1
 8018b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d12f      	bne.n	8018bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	2202      	movs	r2, #2
 8018b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	2200      	movs	r2, #0
 8018b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	687a      	ldr	r2, [r7, #4]
 8018b7c:	68b9      	ldr	r1, [r7, #8]
 8018b7e:	68f8      	ldr	r0, [r7, #12]
 8018b80:	f000 fa58 	bl	8019034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b88:	223f      	movs	r2, #63	; 0x3f
 8018b8a:	409a      	lsls	r2, r3
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f042 0216 	orr.w	r2, r2, #22
 8018b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d007      	beq.n	8018bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	681a      	ldr	r2, [r3, #0]
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	f042 0208 	orr.w	r2, r2, #8
 8018bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	681a      	ldr	r2, [r3, #0]
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	f042 0201 	orr.w	r2, r2, #1
 8018bc6:	601a      	str	r2, [r3, #0]
 8018bc8:	e005      	b.n	8018bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8018bd2:	2302      	movs	r3, #2
 8018bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8018bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3718      	adds	r7, #24
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b084      	sub	sp, #16
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018bec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8018bee:	f7ff fa0f 	bl	8018010 <HAL_GetTick>
 8018bf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	2b02      	cmp	r3, #2
 8018bfe:	d008      	beq.n	8018c12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2280      	movs	r2, #128	; 0x80
 8018c04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8018c0e:	2301      	movs	r3, #1
 8018c10:	e052      	b.n	8018cb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	681a      	ldr	r2, [r3, #0]
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f022 0216 	bic.w	r2, r2, #22
 8018c20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	695a      	ldr	r2, [r3, #20]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018c30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d103      	bne.n	8018c42 <HAL_DMA_Abort+0x62>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d007      	beq.n	8018c52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	681a      	ldr	r2, [r3, #0]
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	f022 0208 	bic.w	r2, r2, #8
 8018c50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	681a      	ldr	r2, [r3, #0]
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	f022 0201 	bic.w	r2, r2, #1
 8018c60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c62:	e013      	b.n	8018c8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018c64:	f7ff f9d4 	bl	8018010 <HAL_GetTick>
 8018c68:	4602      	mov	r2, r0
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	1ad3      	subs	r3, r2, r3
 8018c6e:	2b05      	cmp	r3, #5
 8018c70:	d90c      	bls.n	8018c8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	2220      	movs	r2, #32
 8018c76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2203      	movs	r2, #3
 8018c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2200      	movs	r2, #0
 8018c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8018c88:	2303      	movs	r3, #3
 8018c8a:	e015      	b.n	8018cb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	f003 0301 	and.w	r3, r3, #1
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d1e4      	bne.n	8018c64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c9e:	223f      	movs	r2, #63	; 0x3f
 8018ca0:	409a      	lsls	r2, r3
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2201      	movs	r2, #1
 8018caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8018cb6:	2300      	movs	r3, #0
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3710      	adds	r7, #16
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	2b02      	cmp	r3, #2
 8018cd2:	d004      	beq.n	8018cde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	2280      	movs	r2, #128	; 0x80
 8018cd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e00c      	b.n	8018cf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2205      	movs	r2, #5
 8018ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	681a      	ldr	r2, [r3, #0]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	f022 0201 	bic.w	r2, r2, #1
 8018cf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018cf6:	2300      	movs	r3, #0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d02:	4770      	bx	lr

08018d04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b086      	sub	sp, #24
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018d10:	4b8e      	ldr	r3, [pc, #568]	; (8018f4c <HAL_DMA_IRQHandler+0x248>)
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4a8e      	ldr	r2, [pc, #568]	; (8018f50 <HAL_DMA_IRQHandler+0x24c>)
 8018d16:	fba2 2303 	umull	r2, r3, r2, r3
 8018d1a:	0a9b      	lsrs	r3, r3, #10
 8018d1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018d22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018d24:	693b      	ldr	r3, [r7, #16]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d2e:	2208      	movs	r2, #8
 8018d30:	409a      	lsls	r2, r3
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	4013      	ands	r3, r2
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d01a      	beq.n	8018d70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	f003 0304 	and.w	r3, r3, #4
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d013      	beq.n	8018d70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	681a      	ldr	r2, [r3, #0]
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	f022 0204 	bic.w	r2, r2, #4
 8018d56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d5c:	2208      	movs	r2, #8
 8018d5e:	409a      	lsls	r2, r3
 8018d60:	693b      	ldr	r3, [r7, #16]
 8018d62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d68:	f043 0201 	orr.w	r2, r3, #1
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d74:	2201      	movs	r2, #1
 8018d76:	409a      	lsls	r2, r3
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	4013      	ands	r3, r2
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d012      	beq.n	8018da6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	695b      	ldr	r3, [r3, #20]
 8018d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d00b      	beq.n	8018da6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d92:	2201      	movs	r2, #1
 8018d94:	409a      	lsls	r2, r3
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d9e:	f043 0202 	orr.w	r2, r3, #2
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018daa:	2204      	movs	r2, #4
 8018dac:	409a      	lsls	r2, r3
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	4013      	ands	r3, r2
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d012      	beq.n	8018ddc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	f003 0302 	and.w	r3, r3, #2
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d00b      	beq.n	8018ddc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dc8:	2204      	movs	r2, #4
 8018dca:	409a      	lsls	r2, r3
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dd4:	f043 0204 	orr.w	r2, r3, #4
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018de0:	2210      	movs	r2, #16
 8018de2:	409a      	lsls	r2, r3
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	4013      	ands	r3, r2
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d043      	beq.n	8018e74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f003 0308 	and.w	r3, r3, #8
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d03c      	beq.n	8018e74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dfe:	2210      	movs	r2, #16
 8018e00:	409a      	lsls	r2, r3
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d018      	beq.n	8018e46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d108      	bne.n	8018e34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d024      	beq.n	8018e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	4798      	blx	r3
 8018e32:	e01f      	b.n	8018e74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d01b      	beq.n	8018e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	4798      	blx	r3
 8018e44:	e016      	b.n	8018e74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d107      	bne.n	8018e64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	681a      	ldr	r2, [r3, #0]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f022 0208 	bic.w	r2, r2, #8
 8018e62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d003      	beq.n	8018e74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e78:	2220      	movs	r2, #32
 8018e7a:	409a      	lsls	r2, r3
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	4013      	ands	r3, r2
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	f000 808f 	beq.w	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f003 0310 	and.w	r3, r3, #16
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	f000 8087 	beq.w	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e9a:	2220      	movs	r2, #32
 8018e9c:	409a      	lsls	r2, r3
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	2b05      	cmp	r3, #5
 8018eac:	d136      	bne.n	8018f1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	681a      	ldr	r2, [r3, #0]
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	f022 0216 	bic.w	r2, r2, #22
 8018ebc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	695a      	ldr	r2, [r3, #20]
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018ecc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d103      	bne.n	8018ede <HAL_DMA_IRQHandler+0x1da>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d007      	beq.n	8018eee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	f022 0208 	bic.w	r2, r2, #8
 8018eec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ef2:	223f      	movs	r2, #63	; 0x3f
 8018ef4:	409a      	lsls	r2, r3
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2201      	movs	r2, #1
 8018efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2200      	movs	r2, #0
 8018f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d07e      	beq.n	8019010 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f16:	6878      	ldr	r0, [r7, #4]
 8018f18:	4798      	blx	r3
        }
        return;
 8018f1a:	e079      	b.n	8019010 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d01d      	beq.n	8018f66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d10d      	bne.n	8018f54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d031      	beq.n	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f44:	6878      	ldr	r0, [r7, #4]
 8018f46:	4798      	blx	r3
 8018f48:	e02c      	b.n	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
 8018f4a:	bf00      	nop
 8018f4c:	20000188 	.word	0x20000188
 8018f50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d023      	beq.n	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	4798      	blx	r3
 8018f64:	e01e      	b.n	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d10f      	bne.n	8018f94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	681a      	ldr	r2, [r3, #0]
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	f022 0210 	bic.w	r2, r2, #16
 8018f82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2201      	movs	r2, #1
 8018f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2200      	movs	r2, #0
 8018f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d003      	beq.n	8018fa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d032      	beq.n	8019012 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fb0:	f003 0301 	and.w	r3, r3, #1
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d022      	beq.n	8018ffe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2205      	movs	r2, #5
 8018fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	f022 0201 	bic.w	r2, r2, #1
 8018fce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	60bb      	str	r3, [r7, #8]
 8018fd6:	697a      	ldr	r2, [r7, #20]
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	d307      	bcc.n	8018fec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	f003 0301 	and.w	r3, r3, #1
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d1f2      	bne.n	8018fd0 <HAL_DMA_IRQHandler+0x2cc>
 8018fea:	e000      	b.n	8018fee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8018fec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	2201      	movs	r2, #1
 8018ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019002:	2b00      	cmp	r3, #0
 8019004:	d005      	beq.n	8019012 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	4798      	blx	r3
 801900e:	e000      	b.n	8019012 <HAL_DMA_IRQHandler+0x30e>
        return;
 8019010:	bf00      	nop
    }
  }
}
 8019012:	3718      	adds	r7, #24
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}

08019018 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8019018:	b480      	push	{r7}
 801901a:	b083      	sub	sp, #12
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019026:	b2db      	uxtb	r3, r3
}
 8019028:	4618      	mov	r0, r3
 801902a:	370c      	adds	r7, #12
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr

08019034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019034:	b480      	push	{r7}
 8019036:	b085      	sub	sp, #20
 8019038:	af00      	add	r7, sp, #0
 801903a:	60f8      	str	r0, [r7, #12]
 801903c:	60b9      	str	r1, [r7, #8]
 801903e:	607a      	str	r2, [r7, #4]
 8019040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	681a      	ldr	r2, [r3, #0]
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8019050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	683a      	ldr	r2, [r7, #0]
 8019058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	689b      	ldr	r3, [r3, #8]
 801905e:	2b40      	cmp	r3, #64	; 0x40
 8019060:	d108      	bne.n	8019074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	687a      	ldr	r2, [r7, #4]
 8019068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	68ba      	ldr	r2, [r7, #8]
 8019070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8019072:	e007      	b.n	8019084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	68ba      	ldr	r2, [r7, #8]
 801907a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	60da      	str	r2, [r3, #12]
}
 8019084:	bf00      	nop
 8019086:	3714      	adds	r7, #20
 8019088:	46bd      	mov	sp, r7
 801908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908e:	4770      	bx	lr

08019090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019090:	b480      	push	{r7}
 8019092:	b085      	sub	sp, #20
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	b2db      	uxtb	r3, r3
 801909e:	3b10      	subs	r3, #16
 80190a0:	4a14      	ldr	r2, [pc, #80]	; (80190f4 <DMA_CalcBaseAndBitshift+0x64>)
 80190a2:	fba2 2303 	umull	r2, r3, r2, r3
 80190a6:	091b      	lsrs	r3, r3, #4
 80190a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80190aa:	4a13      	ldr	r2, [pc, #76]	; (80190f8 <DMA_CalcBaseAndBitshift+0x68>)
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	4413      	add	r3, r2
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	461a      	mov	r2, r3
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	2b03      	cmp	r3, #3
 80190bc:	d909      	bls.n	80190d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190c6:	f023 0303 	bic.w	r3, r3, #3
 80190ca:	1d1a      	adds	r2, r3, #4
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	659a      	str	r2, [r3, #88]	; 0x58
 80190d0:	e007      	b.n	80190e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190da:	f023 0303 	bic.w	r3, r3, #3
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80190e6:	4618      	mov	r0, r3
 80190e8:	3714      	adds	r7, #20
 80190ea:	46bd      	mov	sp, r7
 80190ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f0:	4770      	bx	lr
 80190f2:	bf00      	nop
 80190f4:	aaaaaaab 	.word	0xaaaaaaab
 80190f8:	0802cb9c 	.word	0x0802cb9c

080190fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80190fc:	b480      	push	{r7}
 80190fe:	b085      	sub	sp, #20
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019104:	2300      	movs	r3, #0
 8019106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801910c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	699b      	ldr	r3, [r3, #24]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d11f      	bne.n	8019156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8019116:	68bb      	ldr	r3, [r7, #8]
 8019118:	2b03      	cmp	r3, #3
 801911a:	d856      	bhi.n	80191ca <DMA_CheckFifoParam+0xce>
 801911c:	a201      	add	r2, pc, #4	; (adr r2, 8019124 <DMA_CheckFifoParam+0x28>)
 801911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019122:	bf00      	nop
 8019124:	08019135 	.word	0x08019135
 8019128:	08019147 	.word	0x08019147
 801912c:	08019135 	.word	0x08019135
 8019130:	080191cb 	.word	0x080191cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801913c:	2b00      	cmp	r3, #0
 801913e:	d046      	beq.n	80191ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8019140:	2301      	movs	r3, #1
 8019142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019144:	e043      	b.n	80191ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801914a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801914e:	d140      	bne.n	80191d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8019150:	2301      	movs	r3, #1
 8019152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019154:	e03d      	b.n	80191d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	699b      	ldr	r3, [r3, #24]
 801915a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801915e:	d121      	bne.n	80191a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8019160:	68bb      	ldr	r3, [r7, #8]
 8019162:	2b03      	cmp	r3, #3
 8019164:	d837      	bhi.n	80191d6 <DMA_CheckFifoParam+0xda>
 8019166:	a201      	add	r2, pc, #4	; (adr r2, 801916c <DMA_CheckFifoParam+0x70>)
 8019168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801916c:	0801917d 	.word	0x0801917d
 8019170:	08019183 	.word	0x08019183
 8019174:	0801917d 	.word	0x0801917d
 8019178:	08019195 	.word	0x08019195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801917c:	2301      	movs	r3, #1
 801917e:	73fb      	strb	r3, [r7, #15]
      break;
 8019180:	e030      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801918a:	2b00      	cmp	r3, #0
 801918c:	d025      	beq.n	80191da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801918e:	2301      	movs	r3, #1
 8019190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019192:	e022      	b.n	80191da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801919c:	d11f      	bne.n	80191de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801919e:	2301      	movs	r3, #1
 80191a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80191a2:	e01c      	b.n	80191de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80191a4:	68bb      	ldr	r3, [r7, #8]
 80191a6:	2b02      	cmp	r3, #2
 80191a8:	d903      	bls.n	80191b2 <DMA_CheckFifoParam+0xb6>
 80191aa:	68bb      	ldr	r3, [r7, #8]
 80191ac:	2b03      	cmp	r3, #3
 80191ae:	d003      	beq.n	80191b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80191b0:	e018      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80191b2:	2301      	movs	r3, #1
 80191b4:	73fb      	strb	r3, [r7, #15]
      break;
 80191b6:	e015      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d00e      	beq.n	80191e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80191c4:	2301      	movs	r3, #1
 80191c6:	73fb      	strb	r3, [r7, #15]
      break;
 80191c8:	e00b      	b.n	80191e2 <DMA_CheckFifoParam+0xe6>
      break;
 80191ca:	bf00      	nop
 80191cc:	e00a      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;
 80191ce:	bf00      	nop
 80191d0:	e008      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;
 80191d2:	bf00      	nop
 80191d4:	e006      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;
 80191d6:	bf00      	nop
 80191d8:	e004      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;
 80191da:	bf00      	nop
 80191dc:	e002      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80191de:	bf00      	nop
 80191e0:	e000      	b.n	80191e4 <DMA_CheckFifoParam+0xe8>
      break;
 80191e2:	bf00      	nop
    }
  } 
  
  return status; 
 80191e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80191e6:	4618      	mov	r0, r3
 80191e8:	3714      	adds	r7, #20
 80191ea:	46bd      	mov	sp, r7
 80191ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f0:	4770      	bx	lr
 80191f2:	bf00      	nop

080191f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b086      	sub	sp, #24
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	60f8      	str	r0, [r7, #12]
 80191fc:	60b9      	str	r1, [r7, #8]
 80191fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019202:	2301      	movs	r3, #1
 8019204:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019206:	4b23      	ldr	r3, [pc, #140]	; (8019294 <HAL_FLASH_Program+0xa0>)
 8019208:	7e1b      	ldrb	r3, [r3, #24]
 801920a:	2b01      	cmp	r3, #1
 801920c:	d101      	bne.n	8019212 <HAL_FLASH_Program+0x1e>
 801920e:	2302      	movs	r3, #2
 8019210:	e03b      	b.n	801928a <HAL_FLASH_Program+0x96>
 8019212:	4b20      	ldr	r3, [pc, #128]	; (8019294 <HAL_FLASH_Program+0xa0>)
 8019214:	2201      	movs	r2, #1
 8019216:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019218:	f24c 3050 	movw	r0, #50000	; 0xc350
 801921c:	f000 f870 	bl	8019300 <FLASH_WaitForLastOperation>
 8019220:	4603      	mov	r3, r0
 8019222:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019224:	7dfb      	ldrb	r3, [r7, #23]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d12b      	bne.n	8019282 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d105      	bne.n	801923c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8019230:	783b      	ldrb	r3, [r7, #0]
 8019232:	4619      	mov	r1, r3
 8019234:	68b8      	ldr	r0, [r7, #8]
 8019236:	f000 f91b 	bl	8019470 <FLASH_Program_Byte>
 801923a:	e016      	b.n	801926a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	2b01      	cmp	r3, #1
 8019240:	d105      	bne.n	801924e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8019242:	883b      	ldrh	r3, [r7, #0]
 8019244:	4619      	mov	r1, r3
 8019246:	68b8      	ldr	r0, [r7, #8]
 8019248:	f000 f8ee 	bl	8019428 <FLASH_Program_HalfWord>
 801924c:	e00d      	b.n	801926a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	2b02      	cmp	r3, #2
 8019252:	d105      	bne.n	8019260 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	4619      	mov	r1, r3
 8019258:	68b8      	ldr	r0, [r7, #8]
 801925a:	f000 f8c3 	bl	80193e4 <FLASH_Program_Word>
 801925e:	e004      	b.n	801926a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8019260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019264:	68b8      	ldr	r0, [r7, #8]
 8019266:	f000 f88b 	bl	8019380 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801926a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801926e:	f000 f847 	bl	8019300 <FLASH_WaitForLastOperation>
 8019272:	4603      	mov	r3, r0
 8019274:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019276:	4b08      	ldr	r3, [pc, #32]	; (8019298 <HAL_FLASH_Program+0xa4>)
 8019278:	691b      	ldr	r3, [r3, #16]
 801927a:	4a07      	ldr	r2, [pc, #28]	; (8019298 <HAL_FLASH_Program+0xa4>)
 801927c:	f023 0301 	bic.w	r3, r3, #1
 8019280:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019282:	4b04      	ldr	r3, [pc, #16]	; (8019294 <HAL_FLASH_Program+0xa0>)
 8019284:	2200      	movs	r2, #0
 8019286:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019288:	7dfb      	ldrb	r3, [r7, #23]
}
 801928a:	4618      	mov	r0, r3
 801928c:	3718      	adds	r7, #24
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	2000261c 	.word	0x2000261c
 8019298:	40023c00 	.word	0x40023c00

0801929c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801929c:	b480      	push	{r7}
 801929e:	b083      	sub	sp, #12
 80192a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80192a2:	2300      	movs	r3, #0
 80192a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192a6:	4b0b      	ldr	r3, [pc, #44]	; (80192d4 <HAL_FLASH_Unlock+0x38>)
 80192a8:	691b      	ldr	r3, [r3, #16]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	da0b      	bge.n	80192c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80192ae:	4b09      	ldr	r3, [pc, #36]	; (80192d4 <HAL_FLASH_Unlock+0x38>)
 80192b0:	4a09      	ldr	r2, [pc, #36]	; (80192d8 <HAL_FLASH_Unlock+0x3c>)
 80192b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80192b4:	4b07      	ldr	r3, [pc, #28]	; (80192d4 <HAL_FLASH_Unlock+0x38>)
 80192b6:	4a09      	ldr	r2, [pc, #36]	; (80192dc <HAL_FLASH_Unlock+0x40>)
 80192b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192ba:	4b06      	ldr	r3, [pc, #24]	; (80192d4 <HAL_FLASH_Unlock+0x38>)
 80192bc:	691b      	ldr	r3, [r3, #16]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	da01      	bge.n	80192c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80192c2:	2301      	movs	r3, #1
 80192c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80192c6:	79fb      	ldrb	r3, [r7, #7]
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	370c      	adds	r7, #12
 80192cc:	46bd      	mov	sp, r7
 80192ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d2:	4770      	bx	lr
 80192d4:	40023c00 	.word	0x40023c00
 80192d8:	45670123 	.word	0x45670123
 80192dc:	cdef89ab 	.word	0xcdef89ab

080192e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80192e0:	b480      	push	{r7}
 80192e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80192e4:	4b05      	ldr	r3, [pc, #20]	; (80192fc <HAL_FLASH_Lock+0x1c>)
 80192e6:	691b      	ldr	r3, [r3, #16]
 80192e8:	4a04      	ldr	r2, [pc, #16]	; (80192fc <HAL_FLASH_Lock+0x1c>)
 80192ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80192ee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80192f0:	2300      	movs	r3, #0
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr
 80192fc:	40023c00 	.word	0x40023c00

08019300 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8019300:	b580      	push	{r7, lr}
 8019302:	b084      	sub	sp, #16
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019308:	2300      	movs	r3, #0
 801930a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801930c:	4b1a      	ldr	r3, [pc, #104]	; (8019378 <FLASH_WaitForLastOperation+0x78>)
 801930e:	2200      	movs	r2, #0
 8019310:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8019312:	f7fe fe7d 	bl	8018010 <HAL_GetTick>
 8019316:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019318:	e010      	b.n	801933c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019320:	d00c      	beq.n	801933c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d007      	beq.n	8019338 <FLASH_WaitForLastOperation+0x38>
 8019328:	f7fe fe72 	bl	8018010 <HAL_GetTick>
 801932c:	4602      	mov	r2, r0
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	1ad3      	subs	r3, r2, r3
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	429a      	cmp	r2, r3
 8019336:	d201      	bcs.n	801933c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019338:	2303      	movs	r3, #3
 801933a:	e019      	b.n	8019370 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801933c:	4b0f      	ldr	r3, [pc, #60]	; (801937c <FLASH_WaitForLastOperation+0x7c>)
 801933e:	68db      	ldr	r3, [r3, #12]
 8019340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019344:	2b00      	cmp	r3, #0
 8019346:	d1e8      	bne.n	801931a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019348:	4b0c      	ldr	r3, [pc, #48]	; (801937c <FLASH_WaitForLastOperation+0x7c>)
 801934a:	68db      	ldr	r3, [r3, #12]
 801934c:	f003 0301 	and.w	r3, r3, #1
 8019350:	2b00      	cmp	r3, #0
 8019352:	d002      	beq.n	801935a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019354:	4b09      	ldr	r3, [pc, #36]	; (801937c <FLASH_WaitForLastOperation+0x7c>)
 8019356:	2201      	movs	r2, #1
 8019358:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801935a:	4b08      	ldr	r3, [pc, #32]	; (801937c <FLASH_WaitForLastOperation+0x7c>)
 801935c:	68db      	ldr	r3, [r3, #12]
 801935e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8019362:	2b00      	cmp	r3, #0
 8019364:	d003      	beq.n	801936e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019366:	f000 f8a5 	bl	80194b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801936a:	2301      	movs	r3, #1
 801936c:	e000      	b.n	8019370 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801936e:	2300      	movs	r3, #0
  
}  
 8019370:	4618      	mov	r0, r3
 8019372:	3710      	adds	r7, #16
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}
 8019378:	2000261c 	.word	0x2000261c
 801937c:	40023c00 	.word	0x40023c00

08019380 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8019380:	b480      	push	{r7}
 8019382:	b085      	sub	sp, #20
 8019384:	af00      	add	r7, sp, #0
 8019386:	60f8      	str	r0, [r7, #12]
 8019388:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801938c:	4b14      	ldr	r3, [pc, #80]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 801938e:	691b      	ldr	r3, [r3, #16]
 8019390:	4a13      	ldr	r2, [pc, #76]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 8019392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019396:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019398:	4b11      	ldr	r3, [pc, #68]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 801939a:	691b      	ldr	r3, [r3, #16]
 801939c:	4a10      	ldr	r2, [pc, #64]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 801939e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80193a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80193a4:	4b0e      	ldr	r3, [pc, #56]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 80193a6:	691b      	ldr	r3, [r3, #16]
 80193a8:	4a0d      	ldr	r2, [pc, #52]	; (80193e0 <FLASH_Program_DoubleWord+0x60>)
 80193aa:	f043 0301 	orr.w	r3, r3, #1
 80193ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	683a      	ldr	r2, [r7, #0]
 80193b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80193b6:	f3bf 8f6f 	isb	sy
}
 80193ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80193bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80193c0:	f04f 0200 	mov.w	r2, #0
 80193c4:	f04f 0300 	mov.w	r3, #0
 80193c8:	000a      	movs	r2, r1
 80193ca:	2300      	movs	r3, #0
 80193cc:	68f9      	ldr	r1, [r7, #12]
 80193ce:	3104      	adds	r1, #4
 80193d0:	4613      	mov	r3, r2
 80193d2:	600b      	str	r3, [r1, #0]
}
 80193d4:	bf00      	nop
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr
 80193e0:	40023c00 	.word	0x40023c00

080193e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
 80193ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193ee:	4b0d      	ldr	r3, [pc, #52]	; (8019424 <FLASH_Program_Word+0x40>)
 80193f0:	691b      	ldr	r3, [r3, #16]
 80193f2:	4a0c      	ldr	r2, [pc, #48]	; (8019424 <FLASH_Program_Word+0x40>)
 80193f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80193fa:	4b0a      	ldr	r3, [pc, #40]	; (8019424 <FLASH_Program_Word+0x40>)
 80193fc:	691b      	ldr	r3, [r3, #16]
 80193fe:	4a09      	ldr	r2, [pc, #36]	; (8019424 <FLASH_Program_Word+0x40>)
 8019400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019406:	4b07      	ldr	r3, [pc, #28]	; (8019424 <FLASH_Program_Word+0x40>)
 8019408:	691b      	ldr	r3, [r3, #16]
 801940a:	4a06      	ldr	r2, [pc, #24]	; (8019424 <FLASH_Program_Word+0x40>)
 801940c:	f043 0301 	orr.w	r3, r3, #1
 8019410:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	683a      	ldr	r2, [r7, #0]
 8019416:	601a      	str	r2, [r3, #0]
}
 8019418:	bf00      	nop
 801941a:	370c      	adds	r7, #12
 801941c:	46bd      	mov	sp, r7
 801941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019422:	4770      	bx	lr
 8019424:	40023c00 	.word	0x40023c00

08019428 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019428:	b480      	push	{r7}
 801942a:	b083      	sub	sp, #12
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	460b      	mov	r3, r1
 8019432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019434:	4b0d      	ldr	r3, [pc, #52]	; (801946c <FLASH_Program_HalfWord+0x44>)
 8019436:	691b      	ldr	r3, [r3, #16]
 8019438:	4a0c      	ldr	r2, [pc, #48]	; (801946c <FLASH_Program_HalfWord+0x44>)
 801943a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801943e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8019440:	4b0a      	ldr	r3, [pc, #40]	; (801946c <FLASH_Program_HalfWord+0x44>)
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	4a09      	ldr	r2, [pc, #36]	; (801946c <FLASH_Program_HalfWord+0x44>)
 8019446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801944a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801944c:	4b07      	ldr	r3, [pc, #28]	; (801946c <FLASH_Program_HalfWord+0x44>)
 801944e:	691b      	ldr	r3, [r3, #16]
 8019450:	4a06      	ldr	r2, [pc, #24]	; (801946c <FLASH_Program_HalfWord+0x44>)
 8019452:	f043 0301 	orr.w	r3, r3, #1
 8019456:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	887a      	ldrh	r2, [r7, #2]
 801945c:	801a      	strh	r2, [r3, #0]
}
 801945e:	bf00      	nop
 8019460:	370c      	adds	r7, #12
 8019462:	46bd      	mov	sp, r7
 8019464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019468:	4770      	bx	lr
 801946a:	bf00      	nop
 801946c:	40023c00 	.word	0x40023c00

08019470 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019470:	b480      	push	{r7}
 8019472:	b083      	sub	sp, #12
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	460b      	mov	r3, r1
 801947a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801947c:	4b0c      	ldr	r3, [pc, #48]	; (80194b0 <FLASH_Program_Byte+0x40>)
 801947e:	691b      	ldr	r3, [r3, #16]
 8019480:	4a0b      	ldr	r2, [pc, #44]	; (80194b0 <FLASH_Program_Byte+0x40>)
 8019482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019488:	4b09      	ldr	r3, [pc, #36]	; (80194b0 <FLASH_Program_Byte+0x40>)
 801948a:	4a09      	ldr	r2, [pc, #36]	; (80194b0 <FLASH_Program_Byte+0x40>)
 801948c:	691b      	ldr	r3, [r3, #16]
 801948e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019490:	4b07      	ldr	r3, [pc, #28]	; (80194b0 <FLASH_Program_Byte+0x40>)
 8019492:	691b      	ldr	r3, [r3, #16]
 8019494:	4a06      	ldr	r2, [pc, #24]	; (80194b0 <FLASH_Program_Byte+0x40>)
 8019496:	f043 0301 	orr.w	r3, r3, #1
 801949a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	78fa      	ldrb	r2, [r7, #3]
 80194a0:	701a      	strb	r2, [r3, #0]
}
 80194a2:	bf00      	nop
 80194a4:	370c      	adds	r7, #12
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr
 80194ae:	bf00      	nop
 80194b0:	40023c00 	.word	0x40023c00

080194b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80194b4:	b480      	push	{r7}
 80194b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80194b8:	4b27      	ldr	r3, [pc, #156]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 80194ba:	68db      	ldr	r3, [r3, #12]
 80194bc:	f003 0310 	and.w	r3, r3, #16
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d008      	beq.n	80194d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80194c4:	4b25      	ldr	r3, [pc, #148]	; (801955c <FLASH_SetErrorCode+0xa8>)
 80194c6:	69db      	ldr	r3, [r3, #28]
 80194c8:	f043 0310 	orr.w	r3, r3, #16
 80194cc:	4a23      	ldr	r2, [pc, #140]	; (801955c <FLASH_SetErrorCode+0xa8>)
 80194ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80194d0:	4b21      	ldr	r3, [pc, #132]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 80194d2:	2210      	movs	r2, #16
 80194d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80194d6:	4b20      	ldr	r3, [pc, #128]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 80194d8:	68db      	ldr	r3, [r3, #12]
 80194da:	f003 0320 	and.w	r3, r3, #32
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d008      	beq.n	80194f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80194e2:	4b1e      	ldr	r3, [pc, #120]	; (801955c <FLASH_SetErrorCode+0xa8>)
 80194e4:	69db      	ldr	r3, [r3, #28]
 80194e6:	f043 0308 	orr.w	r3, r3, #8
 80194ea:	4a1c      	ldr	r2, [pc, #112]	; (801955c <FLASH_SetErrorCode+0xa8>)
 80194ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80194ee:	4b1a      	ldr	r3, [pc, #104]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 80194f0:	2220      	movs	r2, #32
 80194f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80194f4:	4b18      	ldr	r3, [pc, #96]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 80194f6:	68db      	ldr	r3, [r3, #12]
 80194f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d008      	beq.n	8019512 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8019500:	4b16      	ldr	r3, [pc, #88]	; (801955c <FLASH_SetErrorCode+0xa8>)
 8019502:	69db      	ldr	r3, [r3, #28]
 8019504:	f043 0304 	orr.w	r3, r3, #4
 8019508:	4a14      	ldr	r2, [pc, #80]	; (801955c <FLASH_SetErrorCode+0xa8>)
 801950a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801950c:	4b12      	ldr	r3, [pc, #72]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 801950e:	2240      	movs	r2, #64	; 0x40
 8019510:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8019512:	4b11      	ldr	r3, [pc, #68]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 8019514:	68db      	ldr	r3, [r3, #12]
 8019516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801951a:	2b00      	cmp	r3, #0
 801951c:	d008      	beq.n	8019530 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801951e:	4b0f      	ldr	r3, [pc, #60]	; (801955c <FLASH_SetErrorCode+0xa8>)
 8019520:	69db      	ldr	r3, [r3, #28]
 8019522:	f043 0302 	orr.w	r3, r3, #2
 8019526:	4a0d      	ldr	r2, [pc, #52]	; (801955c <FLASH_SetErrorCode+0xa8>)
 8019528:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801952a:	4b0b      	ldr	r3, [pc, #44]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 801952c:	2280      	movs	r2, #128	; 0x80
 801952e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8019530:	4b09      	ldr	r3, [pc, #36]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 8019532:	68db      	ldr	r3, [r3, #12]
 8019534:	f003 0302 	and.w	r3, r3, #2
 8019538:	2b00      	cmp	r3, #0
 801953a:	d008      	beq.n	801954e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801953c:	4b07      	ldr	r3, [pc, #28]	; (801955c <FLASH_SetErrorCode+0xa8>)
 801953e:	69db      	ldr	r3, [r3, #28]
 8019540:	f043 0320 	orr.w	r3, r3, #32
 8019544:	4a05      	ldr	r2, [pc, #20]	; (801955c <FLASH_SetErrorCode+0xa8>)
 8019546:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019548:	4b03      	ldr	r3, [pc, #12]	; (8019558 <FLASH_SetErrorCode+0xa4>)
 801954a:	2202      	movs	r2, #2
 801954c:	60da      	str	r2, [r3, #12]
  }
}
 801954e:	bf00      	nop
 8019550:	46bd      	mov	sp, r7
 8019552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019556:	4770      	bx	lr
 8019558:	40023c00 	.word	0x40023c00
 801955c:	2000261c 	.word	0x2000261c

08019560 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801956a:	2301      	movs	r3, #1
 801956c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801956e:	2300      	movs	r3, #0
 8019570:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019572:	4b31      	ldr	r3, [pc, #196]	; (8019638 <HAL_FLASHEx_Erase+0xd8>)
 8019574:	7e1b      	ldrb	r3, [r3, #24]
 8019576:	2b01      	cmp	r3, #1
 8019578:	d101      	bne.n	801957e <HAL_FLASHEx_Erase+0x1e>
 801957a:	2302      	movs	r3, #2
 801957c:	e058      	b.n	8019630 <HAL_FLASHEx_Erase+0xd0>
 801957e:	4b2e      	ldr	r3, [pc, #184]	; (8019638 <HAL_FLASHEx_Erase+0xd8>)
 8019580:	2201      	movs	r2, #1
 8019582:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019584:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019588:	f7ff feba 	bl	8019300 <FLASH_WaitForLastOperation>
 801958c:	4603      	mov	r3, r0
 801958e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019590:	7bfb      	ldrb	r3, [r7, #15]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d148      	bne.n	8019628 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	f04f 32ff 	mov.w	r2, #4294967295
 801959c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	2b01      	cmp	r3, #1
 80195a4:	d115      	bne.n	80195d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	691b      	ldr	r3, [r3, #16]
 80195aa:	b2da      	uxtb	r2, r3
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	4619      	mov	r1, r3
 80195b2:	4610      	mov	r0, r2
 80195b4:	f000 f844 	bl	8019640 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195bc:	f7ff fea0 	bl	8019300 <FLASH_WaitForLastOperation>
 80195c0:	4603      	mov	r3, r0
 80195c2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80195c4:	4b1d      	ldr	r3, [pc, #116]	; (801963c <HAL_FLASHEx_Erase+0xdc>)
 80195c6:	691b      	ldr	r3, [r3, #16]
 80195c8:	4a1c      	ldr	r2, [pc, #112]	; (801963c <HAL_FLASHEx_Erase+0xdc>)
 80195ca:	f023 0304 	bic.w	r3, r3, #4
 80195ce:	6113      	str	r3, [r2, #16]
 80195d0:	e028      	b.n	8019624 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	689b      	ldr	r3, [r3, #8]
 80195d6:	60bb      	str	r3, [r7, #8]
 80195d8:	e01c      	b.n	8019614 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	691b      	ldr	r3, [r3, #16]
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	4619      	mov	r1, r3
 80195e2:	68b8      	ldr	r0, [r7, #8]
 80195e4:	f000 f850 	bl	8019688 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195ec:	f7ff fe88 	bl	8019300 <FLASH_WaitForLastOperation>
 80195f0:	4603      	mov	r3, r0
 80195f2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80195f4:	4b11      	ldr	r3, [pc, #68]	; (801963c <HAL_FLASHEx_Erase+0xdc>)
 80195f6:	691b      	ldr	r3, [r3, #16]
 80195f8:	4a10      	ldr	r2, [pc, #64]	; (801963c <HAL_FLASHEx_Erase+0xdc>)
 80195fa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80195fe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8019600:	7bfb      	ldrb	r3, [r7, #15]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d003      	beq.n	801960e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	68ba      	ldr	r2, [r7, #8]
 801960a:	601a      	str	r2, [r3, #0]
          break;
 801960c:	e00a      	b.n	8019624 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801960e:	68bb      	ldr	r3, [r7, #8]
 8019610:	3301      	adds	r3, #1
 8019612:	60bb      	str	r3, [r7, #8]
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	68da      	ldr	r2, [r3, #12]
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	689b      	ldr	r3, [r3, #8]
 801961c:	4413      	add	r3, r2
 801961e:	68ba      	ldr	r2, [r7, #8]
 8019620:	429a      	cmp	r2, r3
 8019622:	d3da      	bcc.n	80195da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019624:	f000 f878 	bl	8019718 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019628:	4b03      	ldr	r3, [pc, #12]	; (8019638 <HAL_FLASHEx_Erase+0xd8>)
 801962a:	2200      	movs	r2, #0
 801962c:	761a      	strb	r2, [r3, #24]

  return status;
 801962e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019630:	4618      	mov	r0, r3
 8019632:	3710      	adds	r7, #16
 8019634:	46bd      	mov	sp, r7
 8019636:	bd80      	pop	{r7, pc}
 8019638:	2000261c 	.word	0x2000261c
 801963c:	40023c00 	.word	0x40023c00

08019640 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019640:	b480      	push	{r7}
 8019642:	b083      	sub	sp, #12
 8019644:	af00      	add	r7, sp, #0
 8019646:	4603      	mov	r3, r0
 8019648:	6039      	str	r1, [r7, #0]
 801964a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801964c:	4b0d      	ldr	r3, [pc, #52]	; (8019684 <FLASH_MassErase+0x44>)
 801964e:	691b      	ldr	r3, [r3, #16]
 8019650:	4a0c      	ldr	r2, [pc, #48]	; (8019684 <FLASH_MassErase+0x44>)
 8019652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019658:	4b0a      	ldr	r3, [pc, #40]	; (8019684 <FLASH_MassErase+0x44>)
 801965a:	691b      	ldr	r3, [r3, #16]
 801965c:	4a09      	ldr	r2, [pc, #36]	; (8019684 <FLASH_MassErase+0x44>)
 801965e:	f043 0304 	orr.w	r3, r3, #4
 8019662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019664:	4b07      	ldr	r3, [pc, #28]	; (8019684 <FLASH_MassErase+0x44>)
 8019666:	691a      	ldr	r2, [r3, #16]
 8019668:	79fb      	ldrb	r3, [r7, #7]
 801966a:	021b      	lsls	r3, r3, #8
 801966c:	4313      	orrs	r3, r2
 801966e:	4a05      	ldr	r2, [pc, #20]	; (8019684 <FLASH_MassErase+0x44>)
 8019670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019674:	6113      	str	r3, [r2, #16]
}
 8019676:	bf00      	nop
 8019678:	370c      	adds	r7, #12
 801967a:	46bd      	mov	sp, r7
 801967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019680:	4770      	bx	lr
 8019682:	bf00      	nop
 8019684:	40023c00 	.word	0x40023c00

08019688 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019688:	b480      	push	{r7}
 801968a:	b085      	sub	sp, #20
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
 8019690:	460b      	mov	r3, r1
 8019692:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019694:	2300      	movs	r3, #0
 8019696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019698:	78fb      	ldrb	r3, [r7, #3]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d102      	bne.n	80196a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801969e:	2300      	movs	r3, #0
 80196a0:	60fb      	str	r3, [r7, #12]
 80196a2:	e010      	b.n	80196c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80196a4:	78fb      	ldrb	r3, [r7, #3]
 80196a6:	2b01      	cmp	r3, #1
 80196a8:	d103      	bne.n	80196b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80196aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196ae:	60fb      	str	r3, [r7, #12]
 80196b0:	e009      	b.n	80196c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80196b2:	78fb      	ldrb	r3, [r7, #3]
 80196b4:	2b02      	cmp	r3, #2
 80196b6:	d103      	bne.n	80196c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80196b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80196bc:	60fb      	str	r3, [r7, #12]
 80196be:	e002      	b.n	80196c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80196c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80196c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80196c6:	4b13      	ldr	r3, [pc, #76]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196c8:	691b      	ldr	r3, [r3, #16]
 80196ca:	4a12      	ldr	r2, [pc, #72]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80196d2:	4b10      	ldr	r3, [pc, #64]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196d4:	691a      	ldr	r2, [r3, #16]
 80196d6:	490f      	ldr	r1, [pc, #60]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	4313      	orrs	r3, r2
 80196dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80196de:	4b0d      	ldr	r3, [pc, #52]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196e0:	691b      	ldr	r3, [r3, #16]
 80196e2:	4a0c      	ldr	r2, [pc, #48]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80196e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80196ea:	4b0a      	ldr	r3, [pc, #40]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196ec:	691a      	ldr	r2, [r3, #16]
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	00db      	lsls	r3, r3, #3
 80196f2:	4313      	orrs	r3, r2
 80196f4:	4a07      	ldr	r2, [pc, #28]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196f6:	f043 0302 	orr.w	r3, r3, #2
 80196fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80196fc:	4b05      	ldr	r3, [pc, #20]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 80196fe:	691b      	ldr	r3, [r3, #16]
 8019700:	4a04      	ldr	r2, [pc, #16]	; (8019714 <FLASH_Erase_Sector+0x8c>)
 8019702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019706:	6113      	str	r3, [r2, #16]
}
 8019708:	bf00      	nop
 801970a:	3714      	adds	r7, #20
 801970c:	46bd      	mov	sp, r7
 801970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019712:	4770      	bx	lr
 8019714:	40023c00 	.word	0x40023c00

08019718 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019718:	b480      	push	{r7}
 801971a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 801971c:	4b20      	ldr	r3, [pc, #128]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019724:	2b00      	cmp	r3, #0
 8019726:	d017      	beq.n	8019758 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019728:	4b1d      	ldr	r3, [pc, #116]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4a1c      	ldr	r2, [pc, #112]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801972e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019732:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019734:	4b1a      	ldr	r3, [pc, #104]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	4a19      	ldr	r2, [pc, #100]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801973a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801973e:	6013      	str	r3, [r2, #0]
 8019740:	4b17      	ldr	r3, [pc, #92]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	4a16      	ldr	r2, [pc, #88]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801974a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801974c:	4b14      	ldr	r3, [pc, #80]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	4a13      	ldr	r2, [pc, #76]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019756:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019758:	4b11      	ldr	r3, [pc, #68]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019760:	2b00      	cmp	r3, #0
 8019762:	d017      	beq.n	8019794 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019764:	4b0e      	ldr	r3, [pc, #56]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4a0d      	ldr	r2, [pc, #52]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801976a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801976e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019770:	4b0b      	ldr	r3, [pc, #44]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4a0a      	ldr	r2, [pc, #40]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801977a:	6013      	str	r3, [r2, #0]
 801977c:	4b08      	ldr	r3, [pc, #32]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	4a07      	ldr	r2, [pc, #28]	; (80197a0 <FLASH_FlushCaches+0x88>)
 8019782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019786:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019788:	4b05      	ldr	r3, [pc, #20]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4a04      	ldr	r2, [pc, #16]	; (80197a0 <FLASH_FlushCaches+0x88>)
 801978e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019792:	6013      	str	r3, [r2, #0]
  }
}
 8019794:	bf00      	nop
 8019796:	46bd      	mov	sp, r7
 8019798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979c:	4770      	bx	lr
 801979e:	bf00      	nop
 80197a0:	40023c00 	.word	0x40023c00

080197a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80197a4:	b480      	push	{r7}
 80197a6:	b089      	sub	sp, #36	; 0x24
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80197ae:	2300      	movs	r3, #0
 80197b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80197b2:	2300      	movs	r3, #0
 80197b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80197b6:	2300      	movs	r3, #0
 80197b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80197ba:	2300      	movs	r3, #0
 80197bc:	61fb      	str	r3, [r7, #28]
 80197be:	e16b      	b.n	8019a98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80197c0:	2201      	movs	r2, #1
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	fa02 f303 	lsl.w	r3, r2, r3
 80197c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	697a      	ldr	r2, [r7, #20]
 80197d0:	4013      	ands	r3, r2
 80197d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80197d4:	693a      	ldr	r2, [r7, #16]
 80197d6:	697b      	ldr	r3, [r7, #20]
 80197d8:	429a      	cmp	r2, r3
 80197da:	f040 815a 	bne.w	8019a92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	f003 0303 	and.w	r3, r3, #3
 80197e6:	2b01      	cmp	r3, #1
 80197e8:	d005      	beq.n	80197f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	685b      	ldr	r3, [r3, #4]
 80197ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80197f2:	2b02      	cmp	r3, #2
 80197f4:	d130      	bne.n	8019858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	689b      	ldr	r3, [r3, #8]
 80197fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80197fc:	69fb      	ldr	r3, [r7, #28]
 80197fe:	005b      	lsls	r3, r3, #1
 8019800:	2203      	movs	r2, #3
 8019802:	fa02 f303 	lsl.w	r3, r2, r3
 8019806:	43db      	mvns	r3, r3
 8019808:	69ba      	ldr	r2, [r7, #24]
 801980a:	4013      	ands	r3, r2
 801980c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801980e:	683b      	ldr	r3, [r7, #0]
 8019810:	68da      	ldr	r2, [r3, #12]
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	005b      	lsls	r3, r3, #1
 8019816:	fa02 f303 	lsl.w	r3, r2, r3
 801981a:	69ba      	ldr	r2, [r7, #24]
 801981c:	4313      	orrs	r3, r2
 801981e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	69ba      	ldr	r2, [r7, #24]
 8019824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801982c:	2201      	movs	r2, #1
 801982e:	69fb      	ldr	r3, [r7, #28]
 8019830:	fa02 f303 	lsl.w	r3, r2, r3
 8019834:	43db      	mvns	r3, r3
 8019836:	69ba      	ldr	r2, [r7, #24]
 8019838:	4013      	ands	r3, r2
 801983a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	685b      	ldr	r3, [r3, #4]
 8019840:	091b      	lsrs	r3, r3, #4
 8019842:	f003 0201 	and.w	r2, r3, #1
 8019846:	69fb      	ldr	r3, [r7, #28]
 8019848:	fa02 f303 	lsl.w	r3, r2, r3
 801984c:	69ba      	ldr	r2, [r7, #24]
 801984e:	4313      	orrs	r3, r2
 8019850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	69ba      	ldr	r2, [r7, #24]
 8019856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	685b      	ldr	r3, [r3, #4]
 801985c:	f003 0303 	and.w	r3, r3, #3
 8019860:	2b03      	cmp	r3, #3
 8019862:	d017      	beq.n	8019894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	68db      	ldr	r3, [r3, #12]
 8019868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801986a:	69fb      	ldr	r3, [r7, #28]
 801986c:	005b      	lsls	r3, r3, #1
 801986e:	2203      	movs	r2, #3
 8019870:	fa02 f303 	lsl.w	r3, r2, r3
 8019874:	43db      	mvns	r3, r3
 8019876:	69ba      	ldr	r2, [r7, #24]
 8019878:	4013      	ands	r3, r2
 801987a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	689a      	ldr	r2, [r3, #8]
 8019880:	69fb      	ldr	r3, [r7, #28]
 8019882:	005b      	lsls	r3, r3, #1
 8019884:	fa02 f303 	lsl.w	r3, r2, r3
 8019888:	69ba      	ldr	r2, [r7, #24]
 801988a:	4313      	orrs	r3, r2
 801988c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	69ba      	ldr	r2, [r7, #24]
 8019892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	f003 0303 	and.w	r3, r3, #3
 801989c:	2b02      	cmp	r3, #2
 801989e:	d123      	bne.n	80198e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	08da      	lsrs	r2, r3, #3
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	3208      	adds	r2, #8
 80198a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80198ae:	69fb      	ldr	r3, [r7, #28]
 80198b0:	f003 0307 	and.w	r3, r3, #7
 80198b4:	009b      	lsls	r3, r3, #2
 80198b6:	220f      	movs	r2, #15
 80198b8:	fa02 f303 	lsl.w	r3, r2, r3
 80198bc:	43db      	mvns	r3, r3
 80198be:	69ba      	ldr	r2, [r7, #24]
 80198c0:	4013      	ands	r3, r2
 80198c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80198c4:	683b      	ldr	r3, [r7, #0]
 80198c6:	691a      	ldr	r2, [r3, #16]
 80198c8:	69fb      	ldr	r3, [r7, #28]
 80198ca:	f003 0307 	and.w	r3, r3, #7
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	fa02 f303 	lsl.w	r3, r2, r3
 80198d4:	69ba      	ldr	r2, [r7, #24]
 80198d6:	4313      	orrs	r3, r2
 80198d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80198da:	69fb      	ldr	r3, [r7, #28]
 80198dc:	08da      	lsrs	r2, r3, #3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	3208      	adds	r2, #8
 80198e2:	69b9      	ldr	r1, [r7, #24]
 80198e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80198ee:	69fb      	ldr	r3, [r7, #28]
 80198f0:	005b      	lsls	r3, r3, #1
 80198f2:	2203      	movs	r2, #3
 80198f4:	fa02 f303 	lsl.w	r3, r2, r3
 80198f8:	43db      	mvns	r3, r3
 80198fa:	69ba      	ldr	r2, [r7, #24]
 80198fc:	4013      	ands	r3, r2
 80198fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	685b      	ldr	r3, [r3, #4]
 8019904:	f003 0203 	and.w	r2, r3, #3
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	005b      	lsls	r3, r3, #1
 801990c:	fa02 f303 	lsl.w	r3, r2, r3
 8019910:	69ba      	ldr	r2, [r7, #24]
 8019912:	4313      	orrs	r3, r2
 8019914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	69ba      	ldr	r2, [r7, #24]
 801991a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019924:	2b00      	cmp	r3, #0
 8019926:	f000 80b4 	beq.w	8019a92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801992a:	2300      	movs	r3, #0
 801992c:	60fb      	str	r3, [r7, #12]
 801992e:	4b60      	ldr	r3, [pc, #384]	; (8019ab0 <HAL_GPIO_Init+0x30c>)
 8019930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019932:	4a5f      	ldr	r2, [pc, #380]	; (8019ab0 <HAL_GPIO_Init+0x30c>)
 8019934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019938:	6453      	str	r3, [r2, #68]	; 0x44
 801993a:	4b5d      	ldr	r3, [pc, #372]	; (8019ab0 <HAL_GPIO_Init+0x30c>)
 801993c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801993e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019942:	60fb      	str	r3, [r7, #12]
 8019944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019946:	4a5b      	ldr	r2, [pc, #364]	; (8019ab4 <HAL_GPIO_Init+0x310>)
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	089b      	lsrs	r3, r3, #2
 801994c:	3302      	adds	r3, #2
 801994e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	f003 0303 	and.w	r3, r3, #3
 801995a:	009b      	lsls	r3, r3, #2
 801995c:	220f      	movs	r2, #15
 801995e:	fa02 f303 	lsl.w	r3, r2, r3
 8019962:	43db      	mvns	r3, r3
 8019964:	69ba      	ldr	r2, [r7, #24]
 8019966:	4013      	ands	r3, r2
 8019968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	4a52      	ldr	r2, [pc, #328]	; (8019ab8 <HAL_GPIO_Init+0x314>)
 801996e:	4293      	cmp	r3, r2
 8019970:	d02b      	beq.n	80199ca <HAL_GPIO_Init+0x226>
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	4a51      	ldr	r2, [pc, #324]	; (8019abc <HAL_GPIO_Init+0x318>)
 8019976:	4293      	cmp	r3, r2
 8019978:	d025      	beq.n	80199c6 <HAL_GPIO_Init+0x222>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4a50      	ldr	r2, [pc, #320]	; (8019ac0 <HAL_GPIO_Init+0x31c>)
 801997e:	4293      	cmp	r3, r2
 8019980:	d01f      	beq.n	80199c2 <HAL_GPIO_Init+0x21e>
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	4a4f      	ldr	r2, [pc, #316]	; (8019ac4 <HAL_GPIO_Init+0x320>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d019      	beq.n	80199be <HAL_GPIO_Init+0x21a>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4a4e      	ldr	r2, [pc, #312]	; (8019ac8 <HAL_GPIO_Init+0x324>)
 801998e:	4293      	cmp	r3, r2
 8019990:	d013      	beq.n	80199ba <HAL_GPIO_Init+0x216>
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	4a4d      	ldr	r2, [pc, #308]	; (8019acc <HAL_GPIO_Init+0x328>)
 8019996:	4293      	cmp	r3, r2
 8019998:	d00d      	beq.n	80199b6 <HAL_GPIO_Init+0x212>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	4a4c      	ldr	r2, [pc, #304]	; (8019ad0 <HAL_GPIO_Init+0x32c>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d007      	beq.n	80199b2 <HAL_GPIO_Init+0x20e>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	4a4b      	ldr	r2, [pc, #300]	; (8019ad4 <HAL_GPIO_Init+0x330>)
 80199a6:	4293      	cmp	r3, r2
 80199a8:	d101      	bne.n	80199ae <HAL_GPIO_Init+0x20a>
 80199aa:	2307      	movs	r3, #7
 80199ac:	e00e      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199ae:	2308      	movs	r3, #8
 80199b0:	e00c      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199b2:	2306      	movs	r3, #6
 80199b4:	e00a      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199b6:	2305      	movs	r3, #5
 80199b8:	e008      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199ba:	2304      	movs	r3, #4
 80199bc:	e006      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199be:	2303      	movs	r3, #3
 80199c0:	e004      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199c2:	2302      	movs	r3, #2
 80199c4:	e002      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199c6:	2301      	movs	r3, #1
 80199c8:	e000      	b.n	80199cc <HAL_GPIO_Init+0x228>
 80199ca:	2300      	movs	r3, #0
 80199cc:	69fa      	ldr	r2, [r7, #28]
 80199ce:	f002 0203 	and.w	r2, r2, #3
 80199d2:	0092      	lsls	r2, r2, #2
 80199d4:	4093      	lsls	r3, r2
 80199d6:	69ba      	ldr	r2, [r7, #24]
 80199d8:	4313      	orrs	r3, r2
 80199da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80199dc:	4935      	ldr	r1, [pc, #212]	; (8019ab4 <HAL_GPIO_Init+0x310>)
 80199de:	69fb      	ldr	r3, [r7, #28]
 80199e0:	089b      	lsrs	r3, r3, #2
 80199e2:	3302      	adds	r3, #2
 80199e4:	69ba      	ldr	r2, [r7, #24]
 80199e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80199ea:	4b3b      	ldr	r3, [pc, #236]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 80199ec:	689b      	ldr	r3, [r3, #8]
 80199ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	43db      	mvns	r3, r3
 80199f4:	69ba      	ldr	r2, [r7, #24]
 80199f6:	4013      	ands	r3, r2
 80199f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80199fa:	683b      	ldr	r3, [r7, #0]
 80199fc:	685b      	ldr	r3, [r3, #4]
 80199fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d003      	beq.n	8019a0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8019a06:	69ba      	ldr	r2, [r7, #24]
 8019a08:	693b      	ldr	r3, [r7, #16]
 8019a0a:	4313      	orrs	r3, r2
 8019a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019a0e:	4a32      	ldr	r2, [pc, #200]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a10:	69bb      	ldr	r3, [r7, #24]
 8019a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019a14:	4b30      	ldr	r3, [pc, #192]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a16:	68db      	ldr	r3, [r3, #12]
 8019a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a1a:	693b      	ldr	r3, [r7, #16]
 8019a1c:	43db      	mvns	r3, r3
 8019a1e:	69ba      	ldr	r2, [r7, #24]
 8019a20:	4013      	ands	r3, r2
 8019a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	685b      	ldr	r3, [r3, #4]
 8019a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d003      	beq.n	8019a38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8019a30:	69ba      	ldr	r2, [r7, #24]
 8019a32:	693b      	ldr	r3, [r7, #16]
 8019a34:	4313      	orrs	r3, r2
 8019a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019a38:	4a27      	ldr	r2, [pc, #156]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a3a:	69bb      	ldr	r3, [r7, #24]
 8019a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8019a3e:	4b26      	ldr	r3, [pc, #152]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a40:	685b      	ldr	r3, [r3, #4]
 8019a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a44:	693b      	ldr	r3, [r7, #16]
 8019a46:	43db      	mvns	r3, r3
 8019a48:	69ba      	ldr	r2, [r7, #24]
 8019a4a:	4013      	ands	r3, r2
 8019a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d003      	beq.n	8019a62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8019a5a:	69ba      	ldr	r2, [r7, #24]
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	4313      	orrs	r3, r2
 8019a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019a62:	4a1d      	ldr	r2, [pc, #116]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a64:	69bb      	ldr	r3, [r7, #24]
 8019a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019a68:	4b1b      	ldr	r3, [pc, #108]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a6e:	693b      	ldr	r3, [r7, #16]
 8019a70:	43db      	mvns	r3, r3
 8019a72:	69ba      	ldr	r2, [r7, #24]
 8019a74:	4013      	ands	r3, r2
 8019a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d003      	beq.n	8019a8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8019a84:	69ba      	ldr	r2, [r7, #24]
 8019a86:	693b      	ldr	r3, [r7, #16]
 8019a88:	4313      	orrs	r3, r2
 8019a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019a8c:	4a12      	ldr	r2, [pc, #72]	; (8019ad8 <HAL_GPIO_Init+0x334>)
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019a92:	69fb      	ldr	r3, [r7, #28]
 8019a94:	3301      	adds	r3, #1
 8019a96:	61fb      	str	r3, [r7, #28]
 8019a98:	69fb      	ldr	r3, [r7, #28]
 8019a9a:	2b0f      	cmp	r3, #15
 8019a9c:	f67f ae90 	bls.w	80197c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019aa0:	bf00      	nop
 8019aa2:	bf00      	nop
 8019aa4:	3724      	adds	r7, #36	; 0x24
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop
 8019ab0:	40023800 	.word	0x40023800
 8019ab4:	40013800 	.word	0x40013800
 8019ab8:	40020000 	.word	0x40020000
 8019abc:	40020400 	.word	0x40020400
 8019ac0:	40020800 	.word	0x40020800
 8019ac4:	40020c00 	.word	0x40020c00
 8019ac8:	40021000 	.word	0x40021000
 8019acc:	40021400 	.word	0x40021400
 8019ad0:	40021800 	.word	0x40021800
 8019ad4:	40021c00 	.word	0x40021c00
 8019ad8:	40013c00 	.word	0x40013c00

08019adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019adc:	b480      	push	{r7}
 8019ade:	b085      	sub	sp, #20
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	691a      	ldr	r2, [r3, #16]
 8019aec:	887b      	ldrh	r3, [r7, #2]
 8019aee:	4013      	ands	r3, r2
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d002      	beq.n	8019afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019af4:	2301      	movs	r3, #1
 8019af6:	73fb      	strb	r3, [r7, #15]
 8019af8:	e001      	b.n	8019afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019afa:	2300      	movs	r3, #0
 8019afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3714      	adds	r7, #20
 8019b04:	46bd      	mov	sp, r7
 8019b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b0a:	4770      	bx	lr

08019b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b083      	sub	sp, #12
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	460b      	mov	r3, r1
 8019b16:	807b      	strh	r3, [r7, #2]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019b1c:	787b      	ldrb	r3, [r7, #1]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d003      	beq.n	8019b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019b22:	887a      	ldrh	r2, [r7, #2]
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019b28:	e003      	b.n	8019b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019b2a:	887b      	ldrh	r3, [r7, #2]
 8019b2c:	041a      	lsls	r2, r3, #16
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	619a      	str	r2, [r3, #24]
}
 8019b32:	bf00      	nop
 8019b34:	370c      	adds	r7, #12
 8019b36:	46bd      	mov	sp, r7
 8019b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3c:	4770      	bx	lr

08019b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019b3e:	b480      	push	{r7}
 8019b40:	b085      	sub	sp, #20
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
 8019b46:	460b      	mov	r3, r1
 8019b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	695b      	ldr	r3, [r3, #20]
 8019b4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8019b50:	887a      	ldrh	r2, [r7, #2]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	4013      	ands	r3, r2
 8019b56:	041a      	lsls	r2, r3, #16
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	43d9      	mvns	r1, r3
 8019b5c:	887b      	ldrh	r3, [r7, #2]
 8019b5e:	400b      	ands	r3, r1
 8019b60:	431a      	orrs	r2, r3
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	619a      	str	r2, [r3, #24]
}
 8019b66:	bf00      	nop
 8019b68:	3714      	adds	r7, #20
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b70:	4770      	bx	lr
	...

08019b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b082      	sub	sp, #8
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8019b7e:	4b08      	ldr	r3, [pc, #32]	; (8019ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8019b80:	695a      	ldr	r2, [r3, #20]
 8019b82:	88fb      	ldrh	r3, [r7, #6]
 8019b84:	4013      	ands	r3, r2
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d006      	beq.n	8019b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8019b8a:	4a05      	ldr	r2, [pc, #20]	; (8019ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8019b8c:	88fb      	ldrh	r3, [r7, #6]
 8019b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8019b90:	88fb      	ldrh	r3, [r7, #6]
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7f7 fcb8 	bl	8011508 <HAL_GPIO_EXTI_Callback>
  }
}
 8019b98:	bf00      	nop
 8019b9a:	3708      	adds	r7, #8
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	bd80      	pop	{r7, pc}
 8019ba0:	40013c00 	.word	0x40013c00

08019ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b084      	sub	sp, #16
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d101      	bne.n	8019bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e12b      	b.n	8019e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019bbc:	b2db      	uxtb	r3, r3
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d106      	bne.n	8019bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	2200      	movs	r2, #0
 8019bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f7f9 fe0c 	bl	80137e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2224      	movs	r2, #36	; 0x24
 8019bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	681a      	ldr	r2, [r3, #0]
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f022 0201 	bic.w	r2, r2, #1
 8019be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	681a      	ldr	r2, [r3, #0]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	681a      	ldr	r2, [r3, #0]
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8019c08:	f004 fc82 	bl	801e510 <HAL_RCC_GetPCLK1Freq>
 8019c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	685b      	ldr	r3, [r3, #4]
 8019c12:	4a81      	ldr	r2, [pc, #516]	; (8019e18 <HAL_I2C_Init+0x274>)
 8019c14:	4293      	cmp	r3, r2
 8019c16:	d807      	bhi.n	8019c28 <HAL_I2C_Init+0x84>
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	4a80      	ldr	r2, [pc, #512]	; (8019e1c <HAL_I2C_Init+0x278>)
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	bf94      	ite	ls
 8019c20:	2301      	movls	r3, #1
 8019c22:	2300      	movhi	r3, #0
 8019c24:	b2db      	uxtb	r3, r3
 8019c26:	e006      	b.n	8019c36 <HAL_I2C_Init+0x92>
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	4a7d      	ldr	r2, [pc, #500]	; (8019e20 <HAL_I2C_Init+0x27c>)
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	bf94      	ite	ls
 8019c30:	2301      	movls	r3, #1
 8019c32:	2300      	movhi	r3, #0
 8019c34:	b2db      	uxtb	r3, r3
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d001      	beq.n	8019c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	e0e7      	b.n	8019e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	4a78      	ldr	r2, [pc, #480]	; (8019e24 <HAL_I2C_Init+0x280>)
 8019c42:	fba2 2303 	umull	r2, r3, r2, r3
 8019c46:	0c9b      	lsrs	r3, r3, #18
 8019c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	68ba      	ldr	r2, [r7, #8]
 8019c5a:	430a      	orrs	r2, r1
 8019c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	6a1b      	ldr	r3, [r3, #32]
 8019c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	4a6a      	ldr	r2, [pc, #424]	; (8019e18 <HAL_I2C_Init+0x274>)
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	d802      	bhi.n	8019c78 <HAL_I2C_Init+0xd4>
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	3301      	adds	r3, #1
 8019c76:	e009      	b.n	8019c8c <HAL_I2C_Init+0xe8>
 8019c78:	68bb      	ldr	r3, [r7, #8]
 8019c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019c7e:	fb02 f303 	mul.w	r3, r2, r3
 8019c82:	4a69      	ldr	r2, [pc, #420]	; (8019e28 <HAL_I2C_Init+0x284>)
 8019c84:	fba2 2303 	umull	r2, r3, r2, r3
 8019c88:	099b      	lsrs	r3, r3, #6
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	687a      	ldr	r2, [r7, #4]
 8019c8e:	6812      	ldr	r2, [r2, #0]
 8019c90:	430b      	orrs	r3, r1
 8019c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	69db      	ldr	r3, [r3, #28]
 8019c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8019c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	685b      	ldr	r3, [r3, #4]
 8019ca6:	495c      	ldr	r1, [pc, #368]	; (8019e18 <HAL_I2C_Init+0x274>)
 8019ca8:	428b      	cmp	r3, r1
 8019caa:	d819      	bhi.n	8019ce0 <HAL_I2C_Init+0x13c>
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	1e59      	subs	r1, r3, #1
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	005b      	lsls	r3, r3, #1
 8019cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8019cba:	1c59      	adds	r1, r3, #1
 8019cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8019cc0:	400b      	ands	r3, r1
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d00a      	beq.n	8019cdc <HAL_I2C_Init+0x138>
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	1e59      	subs	r1, r3, #1
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	005b      	lsls	r3, r3, #1
 8019cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8019cd4:	3301      	adds	r3, #1
 8019cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019cda:	e051      	b.n	8019d80 <HAL_I2C_Init+0x1dc>
 8019cdc:	2304      	movs	r3, #4
 8019cde:	e04f      	b.n	8019d80 <HAL_I2C_Init+0x1dc>
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	689b      	ldr	r3, [r3, #8]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d111      	bne.n	8019d0c <HAL_I2C_Init+0x168>
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	1e58      	subs	r0, r3, #1
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6859      	ldr	r1, [r3, #4]
 8019cf0:	460b      	mov	r3, r1
 8019cf2:	005b      	lsls	r3, r3, #1
 8019cf4:	440b      	add	r3, r1
 8019cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8019cfa:	3301      	adds	r3, #1
 8019cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	bf0c      	ite	eq
 8019d04:	2301      	moveq	r3, #1
 8019d06:	2300      	movne	r3, #0
 8019d08:	b2db      	uxtb	r3, r3
 8019d0a:	e012      	b.n	8019d32 <HAL_I2C_Init+0x18e>
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	1e58      	subs	r0, r3, #1
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6859      	ldr	r1, [r3, #4]
 8019d14:	460b      	mov	r3, r1
 8019d16:	009b      	lsls	r3, r3, #2
 8019d18:	440b      	add	r3, r1
 8019d1a:	0099      	lsls	r1, r3, #2
 8019d1c:	440b      	add	r3, r1
 8019d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8019d22:	3301      	adds	r3, #1
 8019d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	bf0c      	ite	eq
 8019d2c:	2301      	moveq	r3, #1
 8019d2e:	2300      	movne	r3, #0
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d001      	beq.n	8019d3a <HAL_I2C_Init+0x196>
 8019d36:	2301      	movs	r3, #1
 8019d38:	e022      	b.n	8019d80 <HAL_I2C_Init+0x1dc>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	689b      	ldr	r3, [r3, #8]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d10e      	bne.n	8019d60 <HAL_I2C_Init+0x1bc>
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	1e58      	subs	r0, r3, #1
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	6859      	ldr	r1, [r3, #4]
 8019d4a:	460b      	mov	r3, r1
 8019d4c:	005b      	lsls	r3, r3, #1
 8019d4e:	440b      	add	r3, r1
 8019d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8019d54:	3301      	adds	r3, #1
 8019d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019d5e:	e00f      	b.n	8019d80 <HAL_I2C_Init+0x1dc>
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	1e58      	subs	r0, r3, #1
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	6859      	ldr	r1, [r3, #4]
 8019d68:	460b      	mov	r3, r1
 8019d6a:	009b      	lsls	r3, r3, #2
 8019d6c:	440b      	add	r3, r1
 8019d6e:	0099      	lsls	r1, r3, #2
 8019d70:	440b      	add	r3, r1
 8019d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8019d76:	3301      	adds	r3, #1
 8019d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8019d80:	6879      	ldr	r1, [r7, #4]
 8019d82:	6809      	ldr	r1, [r1, #0]
 8019d84:	4313      	orrs	r3, r2
 8019d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	69da      	ldr	r2, [r3, #28]
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6a1b      	ldr	r3, [r3, #32]
 8019d9a:	431a      	orrs	r2, r3
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	430a      	orrs	r2, r1
 8019da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	689b      	ldr	r3, [r3, #8]
 8019daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8019dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	6911      	ldr	r1, [r2, #16]
 8019db6:	687a      	ldr	r2, [r7, #4]
 8019db8:	68d2      	ldr	r2, [r2, #12]
 8019dba:	4311      	orrs	r1, r2
 8019dbc:	687a      	ldr	r2, [r7, #4]
 8019dbe:	6812      	ldr	r2, [r2, #0]
 8019dc0:	430b      	orrs	r3, r1
 8019dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	68db      	ldr	r3, [r3, #12]
 8019dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	695a      	ldr	r2, [r3, #20]
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	699b      	ldr	r3, [r3, #24]
 8019dd6:	431a      	orrs	r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	430a      	orrs	r2, r1
 8019dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	681a      	ldr	r2, [r3, #0]
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	f042 0201 	orr.w	r2, r2, #1
 8019dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	2200      	movs	r2, #0
 8019df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2220      	movs	r2, #32
 8019dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2200      	movs	r2, #0
 8019e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2200      	movs	r2, #0
 8019e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8019e0c:	2300      	movs	r3, #0
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3710      	adds	r7, #16
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}
 8019e16:	bf00      	nop
 8019e18:	000186a0 	.word	0x000186a0
 8019e1c:	001e847f 	.word	0x001e847f
 8019e20:	003d08ff 	.word	0x003d08ff
 8019e24:	431bde83 	.word	0x431bde83
 8019e28:	10624dd3 	.word	0x10624dd3

08019e2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b088      	sub	sp, #32
 8019e30:	af02      	add	r7, sp, #8
 8019e32:	60f8      	str	r0, [r7, #12]
 8019e34:	4608      	mov	r0, r1
 8019e36:	4611      	mov	r1, r2
 8019e38:	461a      	mov	r2, r3
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	817b      	strh	r3, [r7, #10]
 8019e3e:	460b      	mov	r3, r1
 8019e40:	813b      	strh	r3, [r7, #8]
 8019e42:	4613      	mov	r3, r2
 8019e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8019e46:	f7fe f8e3 	bl	8018010 <HAL_GetTick>
 8019e4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	2b20      	cmp	r3, #32
 8019e56:	f040 80d9 	bne.w	801a00c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	9300      	str	r3, [sp, #0]
 8019e5e:	2319      	movs	r3, #25
 8019e60:	2201      	movs	r2, #1
 8019e62:	496d      	ldr	r1, [pc, #436]	; (801a018 <HAL_I2C_Mem_Write+0x1ec>)
 8019e64:	68f8      	ldr	r0, [r7, #12]
 8019e66:	f002 fa3b 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d001      	beq.n	8019e74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8019e70:	2302      	movs	r3, #2
 8019e72:	e0cc      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019e7a:	2b01      	cmp	r3, #1
 8019e7c:	d101      	bne.n	8019e82 <HAL_I2C_Mem_Write+0x56>
 8019e7e:	2302      	movs	r3, #2
 8019e80:	e0c5      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	2201      	movs	r2, #1
 8019e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	f003 0301 	and.w	r3, r3, #1
 8019e94:	2b01      	cmp	r3, #1
 8019e96:	d007      	beq.n	8019ea8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	681a      	ldr	r2, [r3, #0]
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	f042 0201 	orr.w	r2, r2, #1
 8019ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	681a      	ldr	r2, [r3, #0]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	2221      	movs	r2, #33	; 0x21
 8019ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2240      	movs	r2, #64	; 0x40
 8019ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	2200      	movs	r2, #0
 8019ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	6a3a      	ldr	r2, [r7, #32]
 8019ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	4a4d      	ldr	r2, [pc, #308]	; (801a01c <HAL_I2C_Mem_Write+0x1f0>)
 8019ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8019eea:	88f8      	ldrh	r0, [r7, #6]
 8019eec:	893a      	ldrh	r2, [r7, #8]
 8019eee:	8979      	ldrh	r1, [r7, #10]
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	9301      	str	r3, [sp, #4]
 8019ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef6:	9300      	str	r3, [sp, #0]
 8019ef8:	4603      	mov	r3, r0
 8019efa:	68f8      	ldr	r0, [r7, #12]
 8019efc:	f001 ffca 	bl	801be94 <I2C_RequestMemoryWrite>
 8019f00:	4603      	mov	r3, r0
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d052      	beq.n	8019fac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8019f06:	2301      	movs	r3, #1
 8019f08:	e081      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019f0a:	697a      	ldr	r2, [r7, #20]
 8019f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019f0e:	68f8      	ldr	r0, [r7, #12]
 8019f10:	f002 fabc 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 8019f14:	4603      	mov	r3, r0
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d00d      	beq.n	8019f36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f1e:	2b04      	cmp	r3, #4
 8019f20:	d107      	bne.n	8019f32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	681a      	ldr	r2, [r3, #0]
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8019f32:	2301      	movs	r3, #1
 8019f34:	e06b      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3a:	781a      	ldrb	r2, [r3, #0]
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f46:	1c5a      	adds	r2, r3, #1
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f50:	3b01      	subs	r3, #1
 8019f52:	b29a      	uxth	r2, r3
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	b29a      	uxth	r2, r3
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	695b      	ldr	r3, [r3, #20]
 8019f6c:	f003 0304 	and.w	r3, r3, #4
 8019f70:	2b04      	cmp	r3, #4
 8019f72:	d11b      	bne.n	8019fac <HAL_I2C_Mem_Write+0x180>
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d017      	beq.n	8019fac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f80:	781a      	ldrb	r2, [r3, #0]
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8c:	1c5a      	adds	r2, r3, #1
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f96:	3b01      	subs	r3, #1
 8019f98:	b29a      	uxth	r2, r3
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019fa2:	b29b      	uxth	r3, r3
 8019fa4:	3b01      	subs	r3, #1
 8019fa6:	b29a      	uxth	r2, r3
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d1aa      	bne.n	8019f0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019fb4:	697a      	ldr	r2, [r7, #20]
 8019fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019fb8:	68f8      	ldr	r0, [r7, #12]
 8019fba:	f002 faa8 	bl	801c50e <I2C_WaitOnBTFFlagUntilTimeout>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d00d      	beq.n	8019fe0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fc8:	2b04      	cmp	r3, #4
 8019fca:	d107      	bne.n	8019fdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	681a      	ldr	r2, [r3, #0]
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019fda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019fdc:	2301      	movs	r3, #1
 8019fde:	e016      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	681a      	ldr	r2, [r3, #0]
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	2220      	movs	r2, #32
 8019ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	2200      	movs	r2, #0
 801a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801a008:	2300      	movs	r3, #0
 801a00a:	e000      	b.n	801a00e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 801a00c:	2302      	movs	r3, #2
  }
}
 801a00e:	4618      	mov	r0, r3
 801a010:	3718      	adds	r7, #24
 801a012:	46bd      	mov	sp, r7
 801a014:	bd80      	pop	{r7, pc}
 801a016:	bf00      	nop
 801a018:	00100002 	.word	0x00100002
 801a01c:	ffff0000 	.word	0xffff0000

0801a020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b08c      	sub	sp, #48	; 0x30
 801a024:	af02      	add	r7, sp, #8
 801a026:	60f8      	str	r0, [r7, #12]
 801a028:	4608      	mov	r0, r1
 801a02a:	4611      	mov	r1, r2
 801a02c:	461a      	mov	r2, r3
 801a02e:	4603      	mov	r3, r0
 801a030:	817b      	strh	r3, [r7, #10]
 801a032:	460b      	mov	r3, r1
 801a034:	813b      	strh	r3, [r7, #8]
 801a036:	4613      	mov	r3, r2
 801a038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801a03a:	f7fd ffe9 	bl	8018010 <HAL_GetTick>
 801a03e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a046:	b2db      	uxtb	r3, r3
 801a048:	2b20      	cmp	r3, #32
 801a04a:	f040 8208 	bne.w	801a45e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a050:	9300      	str	r3, [sp, #0]
 801a052:	2319      	movs	r3, #25
 801a054:	2201      	movs	r2, #1
 801a056:	497b      	ldr	r1, [pc, #492]	; (801a244 <HAL_I2C_Mem_Read+0x224>)
 801a058:	68f8      	ldr	r0, [r7, #12]
 801a05a:	f002 f941 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a05e:	4603      	mov	r3, r0
 801a060:	2b00      	cmp	r3, #0
 801a062:	d001      	beq.n	801a068 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 801a064:	2302      	movs	r3, #2
 801a066:	e1fb      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a06e:	2b01      	cmp	r3, #1
 801a070:	d101      	bne.n	801a076 <HAL_I2C_Mem_Read+0x56>
 801a072:	2302      	movs	r3, #2
 801a074:	e1f4      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	2201      	movs	r2, #1
 801a07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	f003 0301 	and.w	r3, r3, #1
 801a088:	2b01      	cmp	r3, #1
 801a08a:	d007      	beq.n	801a09c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	681a      	ldr	r2, [r3, #0]
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	f042 0201 	orr.w	r2, r2, #1
 801a09a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	681a      	ldr	r2, [r3, #0]
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a0aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	2222      	movs	r2, #34	; 0x22
 801a0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	2240      	movs	r2, #64	; 0x40
 801a0b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2200      	movs	r2, #0
 801a0c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801a0cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	4a5b      	ldr	r2, [pc, #364]	; (801a248 <HAL_I2C_Mem_Read+0x228>)
 801a0dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801a0de:	88f8      	ldrh	r0, [r7, #6]
 801a0e0:	893a      	ldrh	r2, [r7, #8]
 801a0e2:	8979      	ldrh	r1, [r7, #10]
 801a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0e6:	9301      	str	r3, [sp, #4]
 801a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	68f8      	ldr	r0, [r7, #12]
 801a0f0:	f001 ff66 	bl	801bfc0 <I2C_RequestMemoryRead>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d001      	beq.n	801a0fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	e1b0      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a102:	2b00      	cmp	r3, #0
 801a104:	d113      	bne.n	801a12e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a106:	2300      	movs	r3, #0
 801a108:	623b      	str	r3, [r7, #32]
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	695b      	ldr	r3, [r3, #20]
 801a110:	623b      	str	r3, [r7, #32]
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	699b      	ldr	r3, [r3, #24]
 801a118:	623b      	str	r3, [r7, #32]
 801a11a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a12a:	601a      	str	r2, [r3, #0]
 801a12c:	e184      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a132:	2b01      	cmp	r3, #1
 801a134:	d11b      	bne.n	801a16e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a146:	2300      	movs	r3, #0
 801a148:	61fb      	str	r3, [r7, #28]
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	695b      	ldr	r3, [r3, #20]
 801a150:	61fb      	str	r3, [r7, #28]
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	699b      	ldr	r3, [r3, #24]
 801a158:	61fb      	str	r3, [r7, #28]
 801a15a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a16a:	601a      	str	r2, [r3, #0]
 801a16c:	e164      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a172:	2b02      	cmp	r3, #2
 801a174:	d11b      	bne.n	801a1ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	681a      	ldr	r2, [r3, #0]
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a196:	2300      	movs	r3, #0
 801a198:	61bb      	str	r3, [r7, #24]
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	695b      	ldr	r3, [r3, #20]
 801a1a0:	61bb      	str	r3, [r7, #24]
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	699b      	ldr	r3, [r3, #24]
 801a1a8:	61bb      	str	r3, [r7, #24]
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	e144      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	617b      	str	r3, [r7, #20]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	695b      	ldr	r3, [r3, #20]
 801a1b8:	617b      	str	r3, [r7, #20]
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	699b      	ldr	r3, [r3, #24]
 801a1c0:	617b      	str	r3, [r7, #20]
 801a1c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 801a1c4:	e138      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1ca:	2b03      	cmp	r3, #3
 801a1cc:	f200 80f1 	bhi.w	801a3b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1d4:	2b01      	cmp	r3, #1
 801a1d6:	d123      	bne.n	801a220 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a1dc:	68f8      	ldr	r0, [r7, #12]
 801a1de:	f002 fa09 	bl	801c5f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d001      	beq.n	801a1ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 801a1e8:	2301      	movs	r3, #1
 801a1ea:	e139      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	691a      	ldr	r2, [r3, #16]
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1f6:	b2d2      	uxtb	r2, r2
 801a1f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1fe:	1c5a      	adds	r2, r3, #1
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a208:	3b01      	subs	r3, #1
 801a20a:	b29a      	uxth	r2, r3
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a214:	b29b      	uxth	r3, r3
 801a216:	3b01      	subs	r3, #1
 801a218:	b29a      	uxth	r2, r3
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a21e:	e10b      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a224:	2b02      	cmp	r3, #2
 801a226:	d14e      	bne.n	801a2c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22a:	9300      	str	r3, [sp, #0]
 801a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a22e:	2200      	movs	r2, #0
 801a230:	4906      	ldr	r1, [pc, #24]	; (801a24c <HAL_I2C_Mem_Read+0x22c>)
 801a232:	68f8      	ldr	r0, [r7, #12]
 801a234:	f002 f854 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a238:	4603      	mov	r3, r0
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d008      	beq.n	801a250 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801a23e:	2301      	movs	r3, #1
 801a240:	e10e      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
 801a242:	bf00      	nop
 801a244:	00100002 	.word	0x00100002
 801a248:	ffff0000 	.word	0xffff0000
 801a24c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a25e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	691a      	ldr	r2, [r3, #16]
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a26a:	b2d2      	uxtb	r2, r2
 801a26c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a272:	1c5a      	adds	r2, r3, #1
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a27c:	3b01      	subs	r3, #1
 801a27e:	b29a      	uxth	r2, r3
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a288:	b29b      	uxth	r3, r3
 801a28a:	3b01      	subs	r3, #1
 801a28c:	b29a      	uxth	r2, r3
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	691a      	ldr	r2, [r3, #16]
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a29c:	b2d2      	uxtb	r2, r2
 801a29e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a4:	1c5a      	adds	r2, r3, #1
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a2ae:	3b01      	subs	r3, #1
 801a2b0:	b29a      	uxth	r2, r3
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	3b01      	subs	r3, #1
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a2c4:	e0b8      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2c8:	9300      	str	r3, [sp, #0]
 801a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2cc:	2200      	movs	r2, #0
 801a2ce:	4966      	ldr	r1, [pc, #408]	; (801a468 <HAL_I2C_Mem_Read+0x448>)
 801a2d0:	68f8      	ldr	r0, [r7, #12]
 801a2d2:	f002 f805 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d001      	beq.n	801a2e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 801a2dc:	2301      	movs	r3, #1
 801a2de:	e0bf      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	681a      	ldr	r2, [r3, #0]
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a2ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	691a      	ldr	r2, [r3, #16]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2fa:	b2d2      	uxtb	r2, r2
 801a2fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a302:	1c5a      	adds	r2, r3, #1
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a30c:	3b01      	subs	r3, #1
 801a30e:	b29a      	uxth	r2, r3
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a318:	b29b      	uxth	r3, r3
 801a31a:	3b01      	subs	r3, #1
 801a31c:	b29a      	uxth	r2, r3
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801a322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a324:	9300      	str	r3, [sp, #0]
 801a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a328:	2200      	movs	r2, #0
 801a32a:	494f      	ldr	r1, [pc, #316]	; (801a468 <HAL_I2C_Mem_Read+0x448>)
 801a32c:	68f8      	ldr	r0, [r7, #12]
 801a32e:	f001 ffd7 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a332:	4603      	mov	r3, r0
 801a334:	2b00      	cmp	r3, #0
 801a336:	d001      	beq.n	801a33c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 801a338:	2301      	movs	r3, #1
 801a33a:	e091      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	681a      	ldr	r2, [r3, #0]
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a34a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	691a      	ldr	r2, [r3, #16]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a356:	b2d2      	uxtb	r2, r2
 801a358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a35e:	1c5a      	adds	r2, r3, #1
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a368:	3b01      	subs	r3, #1
 801a36a:	b29a      	uxth	r2, r3
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a374:	b29b      	uxth	r3, r3
 801a376:	3b01      	subs	r3, #1
 801a378:	b29a      	uxth	r2, r3
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	691a      	ldr	r2, [r3, #16]
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a388:	b2d2      	uxtb	r2, r2
 801a38a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a390:	1c5a      	adds	r2, r3, #1
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a39a:	3b01      	subs	r3, #1
 801a39c:	b29a      	uxth	r2, r3
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	3b01      	subs	r3, #1
 801a3aa:	b29a      	uxth	r2, r3
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a3b0:	e042      	b.n	801a438 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a3b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a3b6:	68f8      	ldr	r0, [r7, #12]
 801a3b8:	f002 f91c 	bl	801c5f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 801a3bc:	4603      	mov	r3, r0
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d001      	beq.n	801a3c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801a3c2:	2301      	movs	r3, #1
 801a3c4:	e04c      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	691a      	ldr	r2, [r3, #16]
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d0:	b2d2      	uxtb	r2, r2
 801a3d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d8:	1c5a      	adds	r2, r3, #1
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3e2:	3b01      	subs	r3, #1
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	3b01      	subs	r3, #1
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	695b      	ldr	r3, [r3, #20]
 801a3fe:	f003 0304 	and.w	r3, r3, #4
 801a402:	2b04      	cmp	r3, #4
 801a404:	d118      	bne.n	801a438 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	691a      	ldr	r2, [r3, #16]
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a410:	b2d2      	uxtb	r2, r2
 801a412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a418:	1c5a      	adds	r2, r3, #1
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a422:	3b01      	subs	r3, #1
 801a424:	b29a      	uxth	r2, r3
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a42e:	b29b      	uxth	r3, r3
 801a430:	3b01      	subs	r3, #1
 801a432:	b29a      	uxth	r2, r3
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	f47f aec2 	bne.w	801a1c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	2220      	movs	r2, #32
 801a446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	2200      	movs	r2, #0
 801a44e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	2200      	movs	r2, #0
 801a456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801a45a:	2300      	movs	r3, #0
 801a45c:	e000      	b.n	801a460 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 801a45e:	2302      	movs	r3, #2
  }
}
 801a460:	4618      	mov	r0, r3
 801a462:	3728      	adds	r7, #40	; 0x28
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}
 801a468:	00010004 	.word	0x00010004

0801a46c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b08a      	sub	sp, #40	; 0x28
 801a470:	af02      	add	r7, sp, #8
 801a472:	60f8      	str	r0, [r7, #12]
 801a474:	607a      	str	r2, [r7, #4]
 801a476:	603b      	str	r3, [r7, #0]
 801a478:	460b      	mov	r3, r1
 801a47a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801a47c:	f7fd fdc8 	bl	8018010 <HAL_GetTick>
 801a480:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 801a482:	2300      	movs	r3, #0
 801a484:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a48c:	b2db      	uxtb	r3, r3
 801a48e:	2b20      	cmp	r3, #32
 801a490:	f040 8111 	bne.w	801a6b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	9300      	str	r3, [sp, #0]
 801a498:	2319      	movs	r3, #25
 801a49a:	2201      	movs	r2, #1
 801a49c:	4988      	ldr	r1, [pc, #544]	; (801a6c0 <HAL_I2C_IsDeviceReady+0x254>)
 801a49e:	68f8      	ldr	r0, [r7, #12]
 801a4a0:	f001 ff1e 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a4a4:	4603      	mov	r3, r0
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d001      	beq.n	801a4ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801a4aa:	2302      	movs	r3, #2
 801a4ac:	e104      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a4b4:	2b01      	cmp	r3, #1
 801a4b6:	d101      	bne.n	801a4bc <HAL_I2C_IsDeviceReady+0x50>
 801a4b8:	2302      	movs	r3, #2
 801a4ba:	e0fd      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2201      	movs	r2, #1
 801a4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	f003 0301 	and.w	r3, r3, #1
 801a4ce:	2b01      	cmp	r3, #1
 801a4d0:	d007      	beq.n	801a4e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	681a      	ldr	r2, [r3, #0]
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	f042 0201 	orr.w	r2, r2, #1
 801a4e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	681a      	ldr	r2, [r3, #0]
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a4f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	2224      	movs	r2, #36	; 0x24
 801a4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	4a70      	ldr	r2, [pc, #448]	; (801a6c4 <HAL_I2C_IsDeviceReady+0x258>)
 801a504:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a514:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801a516:	69fb      	ldr	r3, [r7, #28]
 801a518:	9300      	str	r3, [sp, #0]
 801a51a:	683b      	ldr	r3, [r7, #0]
 801a51c:	2200      	movs	r2, #0
 801a51e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801a522:	68f8      	ldr	r0, [r7, #12]
 801a524:	f001 fedc 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a528:	4603      	mov	r3, r0
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d00d      	beq.n	801a54a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a53c:	d103      	bne.n	801a546 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a544:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801a546:	2303      	movs	r3, #3
 801a548:	e0b6      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801a54a:	897b      	ldrh	r3, [r7, #10]
 801a54c:	b2db      	uxtb	r3, r3
 801a54e:	461a      	mov	r2, r3
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801a558:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801a55a:	f7fd fd59 	bl	8018010 <HAL_GetTick>
 801a55e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	695b      	ldr	r3, [r3, #20]
 801a566:	f003 0302 	and.w	r3, r3, #2
 801a56a:	2b02      	cmp	r3, #2
 801a56c:	bf0c      	ite	eq
 801a56e:	2301      	moveq	r3, #1
 801a570:	2300      	movne	r3, #0
 801a572:	b2db      	uxtb	r3, r3
 801a574:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	695b      	ldr	r3, [r3, #20]
 801a57c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a584:	bf0c      	ite	eq
 801a586:	2301      	moveq	r3, #1
 801a588:	2300      	movne	r3, #0
 801a58a:	b2db      	uxtb	r3, r3
 801a58c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801a58e:	e025      	b.n	801a5dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a590:	f7fd fd3e 	bl	8018010 <HAL_GetTick>
 801a594:	4602      	mov	r2, r0
 801a596:	69fb      	ldr	r3, [r7, #28]
 801a598:	1ad3      	subs	r3, r2, r3
 801a59a:	683a      	ldr	r2, [r7, #0]
 801a59c:	429a      	cmp	r2, r3
 801a59e:	d302      	bcc.n	801a5a6 <HAL_I2C_IsDeviceReady+0x13a>
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d103      	bne.n	801a5ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	22a0      	movs	r2, #160	; 0xa0
 801a5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	695b      	ldr	r3, [r3, #20]
 801a5b4:	f003 0302 	and.w	r3, r3, #2
 801a5b8:	2b02      	cmp	r3, #2
 801a5ba:	bf0c      	ite	eq
 801a5bc:	2301      	moveq	r3, #1
 801a5be:	2300      	movne	r3, #0
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	695b      	ldr	r3, [r3, #20]
 801a5ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a5d2:	bf0c      	ite	eq
 801a5d4:	2301      	moveq	r3, #1
 801a5d6:	2300      	movne	r3, #0
 801a5d8:	b2db      	uxtb	r3, r3
 801a5da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a5e2:	b2db      	uxtb	r3, r3
 801a5e4:	2ba0      	cmp	r3, #160	; 0xa0
 801a5e6:	d005      	beq.n	801a5f4 <HAL_I2C_IsDeviceReady+0x188>
 801a5e8:	7dfb      	ldrb	r3, [r7, #23]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d102      	bne.n	801a5f4 <HAL_I2C_IsDeviceReady+0x188>
 801a5ee:	7dbb      	ldrb	r3, [r7, #22]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d0cd      	beq.n	801a590 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	2220      	movs	r2, #32
 801a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	695b      	ldr	r3, [r3, #20]
 801a602:	f003 0302 	and.w	r3, r3, #2
 801a606:	2b02      	cmp	r3, #2
 801a608:	d129      	bne.n	801a65e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	681a      	ldr	r2, [r3, #0]
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a618:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801a61a:	2300      	movs	r3, #0
 801a61c:	613b      	str	r3, [r7, #16]
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	695b      	ldr	r3, [r3, #20]
 801a624:	613b      	str	r3, [r7, #16]
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	699b      	ldr	r3, [r3, #24]
 801a62c:	613b      	str	r3, [r7, #16]
 801a62e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a630:	69fb      	ldr	r3, [r7, #28]
 801a632:	9300      	str	r3, [sp, #0]
 801a634:	2319      	movs	r3, #25
 801a636:	2201      	movs	r2, #1
 801a638:	4921      	ldr	r1, [pc, #132]	; (801a6c0 <HAL_I2C_IsDeviceReady+0x254>)
 801a63a:	68f8      	ldr	r0, [r7, #12]
 801a63c:	f001 fe50 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a640:	4603      	mov	r3, r0
 801a642:	2b00      	cmp	r3, #0
 801a644:	d001      	beq.n	801a64a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801a646:	2301      	movs	r3, #1
 801a648:	e036      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	2220      	movs	r2, #32
 801a64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	2200      	movs	r2, #0
 801a656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801a65a:	2300      	movs	r3, #0
 801a65c:	e02c      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a66c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a676:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	9300      	str	r3, [sp, #0]
 801a67c:	2319      	movs	r3, #25
 801a67e:	2201      	movs	r2, #1
 801a680:	490f      	ldr	r1, [pc, #60]	; (801a6c0 <HAL_I2C_IsDeviceReady+0x254>)
 801a682:	68f8      	ldr	r0, [r7, #12]
 801a684:	f001 fe2c 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801a688:	4603      	mov	r3, r0
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d001      	beq.n	801a692 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801a68e:	2301      	movs	r3, #1
 801a690:	e012      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801a692:	69bb      	ldr	r3, [r7, #24]
 801a694:	3301      	adds	r3, #1
 801a696:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801a698:	69ba      	ldr	r2, [r7, #24]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	429a      	cmp	r2, r3
 801a69e:	f4ff af32 	bcc.w	801a506 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	2220      	movs	r2, #32
 801a6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	e000      	b.n	801a6b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801a6b6:	2302      	movs	r3, #2
  }
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	3720      	adds	r7, #32
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bd80      	pop	{r7, pc}
 801a6c0:	00100002 	.word	0x00100002
 801a6c4:	ffff0000 	.word	0xffff0000

0801a6c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b088      	sub	sp, #32
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a6e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a6f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801a6f2:	7bfb      	ldrb	r3, [r7, #15]
 801a6f4:	2b10      	cmp	r3, #16
 801a6f6:	d003      	beq.n	801a700 <HAL_I2C_EV_IRQHandler+0x38>
 801a6f8:	7bfb      	ldrb	r3, [r7, #15]
 801a6fa:	2b40      	cmp	r3, #64	; 0x40
 801a6fc:	f040 80c1 	bne.w	801a882 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	699b      	ldr	r3, [r3, #24]
 801a706:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	695b      	ldr	r3, [r3, #20]
 801a70e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	f003 0301 	and.w	r3, r3, #1
 801a716:	2b00      	cmp	r3, #0
 801a718:	d10d      	bne.n	801a736 <HAL_I2C_EV_IRQHandler+0x6e>
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a720:	d003      	beq.n	801a72a <HAL_I2C_EV_IRQHandler+0x62>
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a728:	d101      	bne.n	801a72e <HAL_I2C_EV_IRQHandler+0x66>
 801a72a:	2301      	movs	r3, #1
 801a72c:	e000      	b.n	801a730 <HAL_I2C_EV_IRQHandler+0x68>
 801a72e:	2300      	movs	r3, #0
 801a730:	2b01      	cmp	r3, #1
 801a732:	f000 8132 	beq.w	801a99a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a736:	69fb      	ldr	r3, [r7, #28]
 801a738:	f003 0301 	and.w	r3, r3, #1
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d00c      	beq.n	801a75a <HAL_I2C_EV_IRQHandler+0x92>
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	0a5b      	lsrs	r3, r3, #9
 801a744:	f003 0301 	and.w	r3, r3, #1
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d006      	beq.n	801a75a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f001 ffd6 	bl	801c6fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f000 fd83 	bl	801b25e <I2C_Master_SB>
 801a758:	e092      	b.n	801a880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a75a:	69fb      	ldr	r3, [r7, #28]
 801a75c:	08db      	lsrs	r3, r3, #3
 801a75e:	f003 0301 	and.w	r3, r3, #1
 801a762:	2b00      	cmp	r3, #0
 801a764:	d009      	beq.n	801a77a <HAL_I2C_EV_IRQHandler+0xb2>
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	0a5b      	lsrs	r3, r3, #9
 801a76a:	f003 0301 	and.w	r3, r3, #1
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d003      	beq.n	801a77a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801a772:	6878      	ldr	r0, [r7, #4]
 801a774:	f000 fdf9 	bl	801b36a <I2C_Master_ADD10>
 801a778:	e082      	b.n	801a880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a77a:	69fb      	ldr	r3, [r7, #28]
 801a77c:	085b      	lsrs	r3, r3, #1
 801a77e:	f003 0301 	and.w	r3, r3, #1
 801a782:	2b00      	cmp	r3, #0
 801a784:	d009      	beq.n	801a79a <HAL_I2C_EV_IRQHandler+0xd2>
 801a786:	697b      	ldr	r3, [r7, #20]
 801a788:	0a5b      	lsrs	r3, r3, #9
 801a78a:	f003 0301 	and.w	r3, r3, #1
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d003      	beq.n	801a79a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f000 fe13 	bl	801b3be <I2C_Master_ADDR>
 801a798:	e072      	b.n	801a880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	089b      	lsrs	r3, r3, #2
 801a79e:	f003 0301 	and.w	r3, r3, #1
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d03b      	beq.n	801a81e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a7b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a7b4:	f000 80f3 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a7b8:	69fb      	ldr	r3, [r7, #28]
 801a7ba:	09db      	lsrs	r3, r3, #7
 801a7bc:	f003 0301 	and.w	r3, r3, #1
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d00f      	beq.n	801a7e4 <HAL_I2C_EV_IRQHandler+0x11c>
 801a7c4:	697b      	ldr	r3, [r7, #20]
 801a7c6:	0a9b      	lsrs	r3, r3, #10
 801a7c8:	f003 0301 	and.w	r3, r3, #1
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d009      	beq.n	801a7e4 <HAL_I2C_EV_IRQHandler+0x11c>
 801a7d0:	69fb      	ldr	r3, [r7, #28]
 801a7d2:	089b      	lsrs	r3, r3, #2
 801a7d4:	f003 0301 	and.w	r3, r3, #1
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d103      	bne.n	801a7e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f000 f9f3 	bl	801abc8 <I2C_MasterTransmit_TXE>
 801a7e2:	e04d      	b.n	801a880 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a7e4:	69fb      	ldr	r3, [r7, #28]
 801a7e6:	089b      	lsrs	r3, r3, #2
 801a7e8:	f003 0301 	and.w	r3, r3, #1
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f000 80d6 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
 801a7f2:	697b      	ldr	r3, [r7, #20]
 801a7f4:	0a5b      	lsrs	r3, r3, #9
 801a7f6:	f003 0301 	and.w	r3, r3, #1
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	f000 80cf 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801a800:	7bbb      	ldrb	r3, [r7, #14]
 801a802:	2b21      	cmp	r3, #33	; 0x21
 801a804:	d103      	bne.n	801a80e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f000 fa7a 	bl	801ad00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a80c:	e0c7      	b.n	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801a80e:	7bfb      	ldrb	r3, [r7, #15]
 801a810:	2b40      	cmp	r3, #64	; 0x40
 801a812:	f040 80c4 	bne.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801a816:	6878      	ldr	r0, [r7, #4]
 801a818:	f000 fae8 	bl	801adec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a81c:	e0bf      	b.n	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	685b      	ldr	r3, [r3, #4]
 801a824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a82c:	f000 80b7 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a830:	69fb      	ldr	r3, [r7, #28]
 801a832:	099b      	lsrs	r3, r3, #6
 801a834:	f003 0301 	and.w	r3, r3, #1
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d00f      	beq.n	801a85c <HAL_I2C_EV_IRQHandler+0x194>
 801a83c:	697b      	ldr	r3, [r7, #20]
 801a83e:	0a9b      	lsrs	r3, r3, #10
 801a840:	f003 0301 	and.w	r3, r3, #1
 801a844:	2b00      	cmp	r3, #0
 801a846:	d009      	beq.n	801a85c <HAL_I2C_EV_IRQHandler+0x194>
 801a848:	69fb      	ldr	r3, [r7, #28]
 801a84a:	089b      	lsrs	r3, r3, #2
 801a84c:	f003 0301 	and.w	r3, r3, #1
 801a850:	2b00      	cmp	r3, #0
 801a852:	d103      	bne.n	801a85c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801a854:	6878      	ldr	r0, [r7, #4]
 801a856:	f000 fb5d 	bl	801af14 <I2C_MasterReceive_RXNE>
 801a85a:	e011      	b.n	801a880 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a85c:	69fb      	ldr	r3, [r7, #28]
 801a85e:	089b      	lsrs	r3, r3, #2
 801a860:	f003 0301 	and.w	r3, r3, #1
 801a864:	2b00      	cmp	r3, #0
 801a866:	f000 809a 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
 801a86a:	697b      	ldr	r3, [r7, #20]
 801a86c:	0a5b      	lsrs	r3, r3, #9
 801a86e:	f003 0301 	and.w	r3, r3, #1
 801a872:	2b00      	cmp	r3, #0
 801a874:	f000 8093 	beq.w	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801a878:	6878      	ldr	r0, [r7, #4]
 801a87a:	f000 fc06 	bl	801b08a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a87e:	e08e      	b.n	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
 801a880:	e08d      	b.n	801a99e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a886:	2b00      	cmp	r3, #0
 801a888:	d004      	beq.n	801a894 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	695b      	ldr	r3, [r3, #20]
 801a890:	61fb      	str	r3, [r7, #28]
 801a892:	e007      	b.n	801a8a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	699b      	ldr	r3, [r3, #24]
 801a89a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	695b      	ldr	r3, [r3, #20]
 801a8a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a8a4:	69fb      	ldr	r3, [r7, #28]
 801a8a6:	085b      	lsrs	r3, r3, #1
 801a8a8:	f003 0301 	and.w	r3, r3, #1
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d012      	beq.n	801a8d6 <HAL_I2C_EV_IRQHandler+0x20e>
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	0a5b      	lsrs	r3, r3, #9
 801a8b4:	f003 0301 	and.w	r3, r3, #1
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d00c      	beq.n	801a8d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d003      	beq.n	801a8cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	699b      	ldr	r3, [r3, #24]
 801a8ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801a8cc:	69b9      	ldr	r1, [r7, #24]
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f000 ffc4 	bl	801b85c <I2C_Slave_ADDR>
 801a8d4:	e066      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a8d6:	69fb      	ldr	r3, [r7, #28]
 801a8d8:	091b      	lsrs	r3, r3, #4
 801a8da:	f003 0301 	and.w	r3, r3, #1
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d009      	beq.n	801a8f6 <HAL_I2C_EV_IRQHandler+0x22e>
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	0a5b      	lsrs	r3, r3, #9
 801a8e6:	f003 0301 	and.w	r3, r3, #1
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d003      	beq.n	801a8f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801a8ee:	6878      	ldr	r0, [r7, #4]
 801a8f0:	f000 fffe 	bl	801b8f0 <I2C_Slave_STOPF>
 801a8f4:	e056      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801a8f6:	7bbb      	ldrb	r3, [r7, #14]
 801a8f8:	2b21      	cmp	r3, #33	; 0x21
 801a8fa:	d002      	beq.n	801a902 <HAL_I2C_EV_IRQHandler+0x23a>
 801a8fc:	7bbb      	ldrb	r3, [r7, #14]
 801a8fe:	2b29      	cmp	r3, #41	; 0x29
 801a900:	d125      	bne.n	801a94e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a902:	69fb      	ldr	r3, [r7, #28]
 801a904:	09db      	lsrs	r3, r3, #7
 801a906:	f003 0301 	and.w	r3, r3, #1
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d00f      	beq.n	801a92e <HAL_I2C_EV_IRQHandler+0x266>
 801a90e:	697b      	ldr	r3, [r7, #20]
 801a910:	0a9b      	lsrs	r3, r3, #10
 801a912:	f003 0301 	and.w	r3, r3, #1
 801a916:	2b00      	cmp	r3, #0
 801a918:	d009      	beq.n	801a92e <HAL_I2C_EV_IRQHandler+0x266>
 801a91a:	69fb      	ldr	r3, [r7, #28]
 801a91c:	089b      	lsrs	r3, r3, #2
 801a91e:	f003 0301 	and.w	r3, r3, #1
 801a922:	2b00      	cmp	r3, #0
 801a924:	d103      	bne.n	801a92e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801a926:	6878      	ldr	r0, [r7, #4]
 801a928:	f000 feda 	bl	801b6e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a92c:	e039      	b.n	801a9a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a92e:	69fb      	ldr	r3, [r7, #28]
 801a930:	089b      	lsrs	r3, r3, #2
 801a932:	f003 0301 	and.w	r3, r3, #1
 801a936:	2b00      	cmp	r3, #0
 801a938:	d033      	beq.n	801a9a2 <HAL_I2C_EV_IRQHandler+0x2da>
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	0a5b      	lsrs	r3, r3, #9
 801a93e:	f003 0301 	and.w	r3, r3, #1
 801a942:	2b00      	cmp	r3, #0
 801a944:	d02d      	beq.n	801a9a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f000 ff07 	bl	801b75a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a94c:	e029      	b.n	801a9a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	099b      	lsrs	r3, r3, #6
 801a952:	f003 0301 	and.w	r3, r3, #1
 801a956:	2b00      	cmp	r3, #0
 801a958:	d00f      	beq.n	801a97a <HAL_I2C_EV_IRQHandler+0x2b2>
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	0a9b      	lsrs	r3, r3, #10
 801a95e:	f003 0301 	and.w	r3, r3, #1
 801a962:	2b00      	cmp	r3, #0
 801a964:	d009      	beq.n	801a97a <HAL_I2C_EV_IRQHandler+0x2b2>
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	089b      	lsrs	r3, r3, #2
 801a96a:	f003 0301 	and.w	r3, r3, #1
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d103      	bne.n	801a97a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	f000 ff12 	bl	801b79c <I2C_SlaveReceive_RXNE>
 801a978:	e014      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	089b      	lsrs	r3, r3, #2
 801a97e:	f003 0301 	and.w	r3, r3, #1
 801a982:	2b00      	cmp	r3, #0
 801a984:	d00e      	beq.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 801a986:	697b      	ldr	r3, [r7, #20]
 801a988:	0a5b      	lsrs	r3, r3, #9
 801a98a:	f003 0301 	and.w	r3, r3, #1
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d008      	beq.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801a992:	6878      	ldr	r0, [r7, #4]
 801a994:	f000 ff40 	bl	801b818 <I2C_SlaveReceive_BTF>
 801a998:	e004      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801a99a:	bf00      	nop
 801a99c:	e002      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801a99e:	bf00      	nop
 801a9a0:	e000      	b.n	801a9a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801a9a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801a9a4:	3720      	adds	r7, #32
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}

0801a9aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b08a      	sub	sp, #40	; 0x28
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	695b      	ldr	r3, [r3, #20]
 801a9b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	685b      	ldr	r3, [r3, #4]
 801a9c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a9cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801a9ce:	6a3b      	ldr	r3, [r7, #32]
 801a9d0:	0a1b      	lsrs	r3, r3, #8
 801a9d2:	f003 0301 	and.w	r3, r3, #1
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d00e      	beq.n	801a9f8 <HAL_I2C_ER_IRQHandler+0x4e>
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	0a1b      	lsrs	r3, r3, #8
 801a9de:	f003 0301 	and.w	r3, r3, #1
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d008      	beq.n	801a9f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9e8:	f043 0301 	orr.w	r3, r3, #1
 801a9ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801a9f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801a9f8:	6a3b      	ldr	r3, [r7, #32]
 801a9fa:	0a5b      	lsrs	r3, r3, #9
 801a9fc:	f003 0301 	and.w	r3, r3, #1
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d00e      	beq.n	801aa22 <HAL_I2C_ER_IRQHandler+0x78>
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	0a1b      	lsrs	r3, r3, #8
 801aa08:	f003 0301 	and.w	r3, r3, #1
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d008      	beq.n	801aa22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa12:	f043 0302 	orr.w	r3, r3, #2
 801aa16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801aa20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801aa22:	6a3b      	ldr	r3, [r7, #32]
 801aa24:	0a9b      	lsrs	r3, r3, #10
 801aa26:	f003 0301 	and.w	r3, r3, #1
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d03f      	beq.n	801aaae <HAL_I2C_ER_IRQHandler+0x104>
 801aa2e:	69fb      	ldr	r3, [r7, #28]
 801aa30:	0a1b      	lsrs	r3, r3, #8
 801aa32:	f003 0301 	and.w	r3, r3, #1
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d039      	beq.n	801aaae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801aa3a:	7efb      	ldrb	r3, [r7, #27]
 801aa3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801aa54:	7ebb      	ldrb	r3, [r7, #26]
 801aa56:	2b20      	cmp	r3, #32
 801aa58:	d112      	bne.n	801aa80 <HAL_I2C_ER_IRQHandler+0xd6>
 801aa5a:	697b      	ldr	r3, [r7, #20]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d10f      	bne.n	801aa80 <HAL_I2C_ER_IRQHandler+0xd6>
 801aa60:	7cfb      	ldrb	r3, [r7, #19]
 801aa62:	2b21      	cmp	r3, #33	; 0x21
 801aa64:	d008      	beq.n	801aa78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801aa66:	7cfb      	ldrb	r3, [r7, #19]
 801aa68:	2b29      	cmp	r3, #41	; 0x29
 801aa6a:	d005      	beq.n	801aa78 <HAL_I2C_ER_IRQHandler+0xce>
 801aa6c:	7cfb      	ldrb	r3, [r7, #19]
 801aa6e:	2b28      	cmp	r3, #40	; 0x28
 801aa70:	d106      	bne.n	801aa80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	2b21      	cmp	r3, #33	; 0x21
 801aa76:	d103      	bne.n	801aa80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801aa78:	6878      	ldr	r0, [r7, #4]
 801aa7a:	f001 f869 	bl	801bb50 <I2C_Slave_AF>
 801aa7e:	e016      	b.n	801aaae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801aa88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa8c:	f043 0304 	orr.w	r3, r3, #4
 801aa90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801aa92:	7efb      	ldrb	r3, [r7, #27]
 801aa94:	2b10      	cmp	r3, #16
 801aa96:	d002      	beq.n	801aa9e <HAL_I2C_ER_IRQHandler+0xf4>
 801aa98:	7efb      	ldrb	r3, [r7, #27]
 801aa9a:	2b40      	cmp	r3, #64	; 0x40
 801aa9c:	d107      	bne.n	801aaae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	681a      	ldr	r2, [r3, #0]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801aaac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801aaae:	6a3b      	ldr	r3, [r7, #32]
 801aab0:	0adb      	lsrs	r3, r3, #11
 801aab2:	f003 0301 	and.w	r3, r3, #1
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d00e      	beq.n	801aad8 <HAL_I2C_ER_IRQHandler+0x12e>
 801aaba:	69fb      	ldr	r3, [r7, #28]
 801aabc:	0a1b      	lsrs	r3, r3, #8
 801aabe:	f003 0301 	and.w	r3, r3, #1
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d008      	beq.n	801aad8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac8:	f043 0308 	orr.w	r3, r3, #8
 801aacc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801aad6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d008      	beq.n	801aaf0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae4:	431a      	orrs	r2, r3
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f001 f8a0 	bl	801bc30 <I2C_ITError>
  }
}
 801aaf0:	bf00      	nop
 801aaf2:	3728      	adds	r7, #40	; 0x28
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}

0801aaf8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b083      	sub	sp, #12
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801ab00:	bf00      	nop
 801ab02:	370c      	adds	r7, #12
 801ab04:	46bd      	mov	sp, r7
 801ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0a:	4770      	bx	lr

0801ab0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab0c:	b480      	push	{r7}
 801ab0e:	b083      	sub	sp, #12
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801ab14:	bf00      	nop
 801ab16:	370c      	adds	r7, #12
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1e:	4770      	bx	lr

0801ab20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab20:	b480      	push	{r7}
 801ab22:	b083      	sub	sp, #12
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801ab28:	bf00      	nop
 801ab2a:	370c      	adds	r7, #12
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab32:	4770      	bx	lr

0801ab34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b083      	sub	sp, #12
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801ab3c:	bf00      	nop
 801ab3e:	370c      	adds	r7, #12
 801ab40:	46bd      	mov	sp, r7
 801ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab46:	4770      	bx	lr

0801ab48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801ab48:	b480      	push	{r7}
 801ab4a:	b083      	sub	sp, #12
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	460b      	mov	r3, r1
 801ab52:	70fb      	strb	r3, [r7, #3]
 801ab54:	4613      	mov	r3, r2
 801ab56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801ab58:	bf00      	nop
 801ab5a:	370c      	adds	r7, #12
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab62:	4770      	bx	lr

0801ab64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab64:	b480      	push	{r7}
 801ab66:	b083      	sub	sp, #12
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801ab6c:	bf00      	nop
 801ab6e:	370c      	adds	r7, #12
 801ab70:	46bd      	mov	sp, r7
 801ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab76:	4770      	bx	lr

0801ab78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab78:	b480      	push	{r7}
 801ab7a:	b083      	sub	sp, #12
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801ab80:	bf00      	nop
 801ab82:	370c      	adds	r7, #12
 801ab84:	46bd      	mov	sp, r7
 801ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8a:	4770      	bx	lr

0801ab8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b083      	sub	sp, #12
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801ab94:	bf00      	nop
 801ab96:	370c      	adds	r7, #12
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr

0801aba0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b083      	sub	sp, #12
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801aba8:	bf00      	nop
 801abaa:	370c      	adds	r7, #12
 801abac:	46bd      	mov	sp, r7
 801abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb2:	4770      	bx	lr

0801abb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801abb4:	b480      	push	{r7}
 801abb6:	b083      	sub	sp, #12
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801abbc:	bf00      	nop
 801abbe:	370c      	adds	r7, #12
 801abc0:	46bd      	mov	sp, r7
 801abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc6:	4770      	bx	lr

0801abc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b084      	sub	sp, #16
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801abd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801abde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abe4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801abea:	2b00      	cmp	r3, #0
 801abec:	d150      	bne.n	801ac90 <I2C_MasterTransmit_TXE+0xc8>
 801abee:	7bfb      	ldrb	r3, [r7, #15]
 801abf0:	2b21      	cmp	r3, #33	; 0x21
 801abf2:	d14d      	bne.n	801ac90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	2b08      	cmp	r3, #8
 801abf8:	d01d      	beq.n	801ac36 <I2C_MasterTransmit_TXE+0x6e>
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	2b20      	cmp	r3, #32
 801abfe:	d01a      	beq.n	801ac36 <I2C_MasterTransmit_TXE+0x6e>
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ac06:	d016      	beq.n	801ac36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	685a      	ldr	r2, [r3, #4]
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ac16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2211      	movs	r2, #17
 801ac1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2200      	movs	r2, #0
 801ac22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2220      	movs	r2, #32
 801ac2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801ac2e:	6878      	ldr	r0, [r7, #4]
 801ac30:	f7ff ff62 	bl	801aaf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ac34:	e060      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	685a      	ldr	r2, [r3, #4]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ac44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ac54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2200      	movs	r2, #0
 801ac5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2220      	movs	r2, #32
 801ac60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ac6a:	b2db      	uxtb	r3, r3
 801ac6c:	2b40      	cmp	r3, #64	; 0x40
 801ac6e:	d107      	bne.n	801ac80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2200      	movs	r2, #0
 801ac74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7ff ff7d 	bl	801ab78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ac7e:	e03b      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f7ff ff35 	bl	801aaf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ac8e:	e033      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801ac90:	7bfb      	ldrb	r3, [r7, #15]
 801ac92:	2b21      	cmp	r3, #33	; 0x21
 801ac94:	d005      	beq.n	801aca2 <I2C_MasterTransmit_TXE+0xda>
 801ac96:	7bbb      	ldrb	r3, [r7, #14]
 801ac98:	2b40      	cmp	r3, #64	; 0x40
 801ac9a:	d12d      	bne.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801ac9c:	7bfb      	ldrb	r3, [r7, #15]
 801ac9e:	2b22      	cmp	r3, #34	; 0x22
 801aca0:	d12a      	bne.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d108      	bne.n	801acbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	685a      	ldr	r2, [r3, #4]
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801acba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801acbc:	e01c      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801acc4:	b2db      	uxtb	r3, r3
 801acc6:	2b40      	cmp	r3, #64	; 0x40
 801acc8:	d103      	bne.n	801acd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801acca:	6878      	ldr	r0, [r7, #4]
 801accc:	f000 f88e 	bl	801adec <I2C_MemoryTransmit_TXE_BTF>
}
 801acd0:	e012      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acd6:	781a      	ldrb	r2, [r3, #0]
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ace2:	1c5a      	adds	r2, r3, #1
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801acec:	b29b      	uxth	r3, r3
 801acee:	3b01      	subs	r3, #1
 801acf0:	b29a      	uxth	r2, r3
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801acf6:	e7ff      	b.n	801acf8 <I2C_MasterTransmit_TXE+0x130>
 801acf8:	bf00      	nop
 801acfa:	3710      	adds	r7, #16
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd80      	pop	{r7, pc}

0801ad00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	2b21      	cmp	r3, #33	; 0x21
 801ad18:	d164      	bne.n	801ade4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d012      	beq.n	801ad4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad28:	781a      	ldrb	r2, [r3, #0]
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad34:	1c5a      	adds	r2, r3, #1
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ad3e:	b29b      	uxth	r3, r3
 801ad40:	3b01      	subs	r3, #1
 801ad42:	b29a      	uxth	r2, r3
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801ad48:	e04c      	b.n	801ade4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	2b08      	cmp	r3, #8
 801ad4e:	d01d      	beq.n	801ad8c <I2C_MasterTransmit_BTF+0x8c>
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	2b20      	cmp	r3, #32
 801ad54:	d01a      	beq.n	801ad8c <I2C_MasterTransmit_BTF+0x8c>
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801ad5c:	d016      	beq.n	801ad8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	685a      	ldr	r2, [r3, #4]
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ad6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	2211      	movs	r2, #17
 801ad72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	2200      	movs	r2, #0
 801ad78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2220      	movs	r2, #32
 801ad80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f7ff feb7 	bl	801aaf8 <HAL_I2C_MasterTxCpltCallback>
}
 801ad8a:	e02b      	b.n	801ade4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	685a      	ldr	r2, [r3, #4]
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ad9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	681a      	ldr	r2, [r3, #0]
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801adaa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	2200      	movs	r2, #0
 801adb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	2220      	movs	r2, #32
 801adb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	2b40      	cmp	r3, #64	; 0x40
 801adc4:	d107      	bne.n	801add6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	2200      	movs	r2, #0
 801adca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801adce:	6878      	ldr	r0, [r7, #4]
 801add0:	f7ff fed2 	bl	801ab78 <HAL_I2C_MemTxCpltCallback>
}
 801add4:	e006      	b.n	801ade4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2200      	movs	r2, #0
 801adda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f7ff fe8a 	bl	801aaf8 <HAL_I2C_MasterTxCpltCallback>
}
 801ade4:	bf00      	nop
 801ade6:	3710      	adds	r7, #16
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}

0801adec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b084      	sub	sp, #16
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801adfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d11d      	bne.n	801ae40 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ae08:	2b01      	cmp	r3, #1
 801ae0a:	d10b      	bne.n	801ae24 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae10:	b2da      	uxtb	r2, r3
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae1c:	1c9a      	adds	r2, r3, #2
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801ae22:	e073      	b.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae28:	b29b      	uxth	r3, r3
 801ae2a:	121b      	asrs	r3, r3, #8
 801ae2c:	b2da      	uxtb	r2, r3
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae38:	1c5a      	adds	r2, r3, #1
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ae3e:	e065      	b.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae44:	2b01      	cmp	r3, #1
 801ae46:	d10b      	bne.n	801ae60 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae4c:	b2da      	uxtb	r2, r3
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae58:	1c5a      	adds	r2, r3, #1
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ae5e:	e055      	b.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae64:	2b02      	cmp	r3, #2
 801ae66:	d151      	bne.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801ae68:	7bfb      	ldrb	r3, [r7, #15]
 801ae6a:	2b22      	cmp	r3, #34	; 0x22
 801ae6c:	d10d      	bne.n	801ae8a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	681a      	ldr	r2, [r3, #0]
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ae7c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ae82:	1c5a      	adds	r2, r3, #1
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ae88:	e040      	b.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d015      	beq.n	801aec0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801ae94:	7bfb      	ldrb	r3, [r7, #15]
 801ae96:	2b21      	cmp	r3, #33	; 0x21
 801ae98:	d112      	bne.n	801aec0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae9e:	781a      	ldrb	r2, [r3, #0]
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeaa:	1c5a      	adds	r2, r3, #1
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aeb4:	b29b      	uxth	r3, r3
 801aeb6:	3b01      	subs	r3, #1
 801aeb8:	b29a      	uxth	r2, r3
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801aebe:	e025      	b.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d120      	bne.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
 801aeca:	7bfb      	ldrb	r3, [r7, #15]
 801aecc:	2b21      	cmp	r3, #33	; 0x21
 801aece:	d11d      	bne.n	801af0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	685a      	ldr	r2, [r3, #4]
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801aede:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	681a      	ldr	r2, [r3, #0]
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801aeee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2200      	movs	r2, #0
 801aef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2220      	movs	r2, #32
 801aefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2200      	movs	r2, #0
 801af02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	f7ff fe36 	bl	801ab78 <HAL_I2C_MemTxCpltCallback>
}
 801af0c:	bf00      	nop
 801af0e:	3710      	adds	r7, #16
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}

0801af14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b084      	sub	sp, #16
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801af22:	b2db      	uxtb	r3, r3
 801af24:	2b22      	cmp	r3, #34	; 0x22
 801af26:	f040 80ac 	bne.w	801b082 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af2e:	b29b      	uxth	r3, r3
 801af30:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	2b03      	cmp	r3, #3
 801af36:	d921      	bls.n	801af7c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	691a      	ldr	r2, [r3, #16]
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af42:	b2d2      	uxtb	r2, r2
 801af44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af4a:	1c5a      	adds	r2, r3, #1
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af54:	b29b      	uxth	r3, r3
 801af56:	3b01      	subs	r3, #1
 801af58:	b29a      	uxth	r2, r3
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801af62:	b29b      	uxth	r3, r3
 801af64:	2b03      	cmp	r3, #3
 801af66:	f040 808c 	bne.w	801b082 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	685a      	ldr	r2, [r3, #4]
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801af78:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801af7a:	e082      	b.n	801b082 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af80:	2b02      	cmp	r3, #2
 801af82:	d075      	beq.n	801b070 <I2C_MasterReceive_RXNE+0x15c>
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	2b01      	cmp	r3, #1
 801af88:	d002      	beq.n	801af90 <I2C_MasterReceive_RXNE+0x7c>
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d16f      	bne.n	801b070 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f001 fafd 	bl	801c590 <I2C_WaitOnSTOPRequestThroughIT>
 801af96:	4603      	mov	r3, r0
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d142      	bne.n	801b022 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	681a      	ldr	r2, [r3, #0]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801afaa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	685a      	ldr	r2, [r3, #4]
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801afba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	691a      	ldr	r2, [r3, #16]
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afc6:	b2d2      	uxtb	r2, r2
 801afc8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afce:	1c5a      	adds	r2, r3, #1
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801afd8:	b29b      	uxth	r3, r3
 801afda:	3b01      	subs	r3, #1
 801afdc:	b29a      	uxth	r2, r3
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	2220      	movs	r2, #32
 801afe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aff0:	b2db      	uxtb	r3, r3
 801aff2:	2b40      	cmp	r3, #64	; 0x40
 801aff4:	d10a      	bne.n	801b00c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	2200      	movs	r2, #0
 801affa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	2200      	movs	r2, #0
 801b002:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	f7ff fdc1 	bl	801ab8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801b00a:	e03a      	b.n	801b082 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2200      	movs	r2, #0
 801b010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	2212      	movs	r2, #18
 801b018:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801b01a:	6878      	ldr	r0, [r7, #4]
 801b01c:	f7ff fd76 	bl	801ab0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801b020:	e02f      	b.n	801b082 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	685a      	ldr	r2, [r3, #4]
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801b030:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	691a      	ldr	r2, [r3, #16]
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b03c:	b2d2      	uxtb	r2, r2
 801b03e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b044:	1c5a      	adds	r2, r3, #1
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b04e:	b29b      	uxth	r3, r3
 801b050:	3b01      	subs	r3, #1
 801b052:	b29a      	uxth	r2, r3
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2220      	movs	r2, #32
 801b05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	2200      	movs	r2, #0
 801b064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801b068:	6878      	ldr	r0, [r7, #4]
 801b06a:	f7ff fd99 	bl	801aba0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801b06e:	e008      	b.n	801b082 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	685a      	ldr	r2, [r3, #4]
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b07e:	605a      	str	r2, [r3, #4]
}
 801b080:	e7ff      	b.n	801b082 <I2C_MasterReceive_RXNE+0x16e>
 801b082:	bf00      	nop
 801b084:	3710      	adds	r7, #16
 801b086:	46bd      	mov	sp, r7
 801b088:	bd80      	pop	{r7, pc}

0801b08a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801b08a:	b580      	push	{r7, lr}
 801b08c:	b084      	sub	sp, #16
 801b08e:	af00      	add	r7, sp, #0
 801b090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b096:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b09c:	b29b      	uxth	r3, r3
 801b09e:	2b04      	cmp	r3, #4
 801b0a0:	d11b      	bne.n	801b0da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	685a      	ldr	r2, [r3, #4]
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b0b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	691a      	ldr	r2, [r3, #16]
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0bc:	b2d2      	uxtb	r2, r2
 801b0be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0c4:	1c5a      	adds	r2, r3, #1
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	3b01      	subs	r3, #1
 801b0d2:	b29a      	uxth	r2, r3
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801b0d8:	e0bd      	b.n	801b256 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b0de:	b29b      	uxth	r3, r3
 801b0e0:	2b03      	cmp	r3, #3
 801b0e2:	d129      	bne.n	801b138 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	685a      	ldr	r2, [r3, #4]
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b0f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	2b04      	cmp	r3, #4
 801b0f8:	d00a      	beq.n	801b110 <I2C_MasterReceive_BTF+0x86>
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	2b02      	cmp	r3, #2
 801b0fe:	d007      	beq.n	801b110 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b10e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	691a      	ldr	r2, [r3, #16]
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b11a:	b2d2      	uxtb	r2, r2
 801b11c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b122:	1c5a      	adds	r2, r3, #1
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b12c:	b29b      	uxth	r3, r3
 801b12e:	3b01      	subs	r3, #1
 801b130:	b29a      	uxth	r2, r3
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801b136:	e08e      	b.n	801b256 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b13c:	b29b      	uxth	r3, r3
 801b13e:	2b02      	cmp	r3, #2
 801b140:	d176      	bne.n	801b230 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	2b01      	cmp	r3, #1
 801b146:	d002      	beq.n	801b14e <I2C_MasterReceive_BTF+0xc4>
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	2b10      	cmp	r3, #16
 801b14c:	d108      	bne.n	801b160 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	681a      	ldr	r2, [r3, #0]
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b15c:	601a      	str	r2, [r3, #0]
 801b15e:	e019      	b.n	801b194 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	2b04      	cmp	r3, #4
 801b164:	d002      	beq.n	801b16c <I2C_MasterReceive_BTF+0xe2>
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	2b02      	cmp	r3, #2
 801b16a:	d108      	bne.n	801b17e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b17a:	601a      	str	r2, [r3, #0]
 801b17c:	e00a      	b.n	801b194 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	2b10      	cmp	r3, #16
 801b182:	d007      	beq.n	801b194 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	681a      	ldr	r2, [r3, #0]
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b192:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	691a      	ldr	r2, [r3, #16]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b19e:	b2d2      	uxtb	r2, r2
 801b1a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1a6:	1c5a      	adds	r2, r3, #1
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b1b0:	b29b      	uxth	r3, r3
 801b1b2:	3b01      	subs	r3, #1
 801b1b4:	b29a      	uxth	r2, r3
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	691a      	ldr	r2, [r3, #16]
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1c4:	b2d2      	uxtb	r2, r2
 801b1c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1cc:	1c5a      	adds	r2, r3, #1
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b1d6:	b29b      	uxth	r3, r3
 801b1d8:	3b01      	subs	r3, #1
 801b1da:	b29a      	uxth	r2, r3
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	685a      	ldr	r2, [r3, #4]
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801b1ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	2220      	movs	r2, #32
 801b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b1fe:	b2db      	uxtb	r3, r3
 801b200:	2b40      	cmp	r3, #64	; 0x40
 801b202:	d10a      	bne.n	801b21a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	2200      	movs	r2, #0
 801b208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	2200      	movs	r2, #0
 801b210:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801b212:	6878      	ldr	r0, [r7, #4]
 801b214:	f7ff fcba 	bl	801ab8c <HAL_I2C_MemRxCpltCallback>
}
 801b218:	e01d      	b.n	801b256 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	2200      	movs	r2, #0
 801b21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	2212      	movs	r2, #18
 801b226:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801b228:	6878      	ldr	r0, [r7, #4]
 801b22a:	f7ff fc6f 	bl	801ab0c <HAL_I2C_MasterRxCpltCallback>
}
 801b22e:	e012      	b.n	801b256 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	691a      	ldr	r2, [r3, #16]
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b23a:	b2d2      	uxtb	r2, r2
 801b23c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b242:	1c5a      	adds	r2, r3, #1
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b24c:	b29b      	uxth	r3, r3
 801b24e:	3b01      	subs	r3, #1
 801b250:	b29a      	uxth	r2, r3
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801b256:	bf00      	nop
 801b258:	3710      	adds	r7, #16
 801b25a:	46bd      	mov	sp, r7
 801b25c:	bd80      	pop	{r7, pc}

0801b25e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801b25e:	b480      	push	{r7}
 801b260:	b083      	sub	sp, #12
 801b262:	af00      	add	r7, sp, #0
 801b264:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b26c:	b2db      	uxtb	r3, r3
 801b26e:	2b40      	cmp	r3, #64	; 0x40
 801b270:	d117      	bne.n	801b2a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b276:	2b00      	cmp	r3, #0
 801b278:	d109      	bne.n	801b28e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b27e:	b2db      	uxtb	r3, r3
 801b280:	461a      	mov	r2, r3
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801b28a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801b28c:	e067      	b.n	801b35e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b292:	b2db      	uxtb	r3, r3
 801b294:	f043 0301 	orr.w	r3, r3, #1
 801b298:	b2da      	uxtb	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	611a      	str	r2, [r3, #16]
}
 801b2a0:	e05d      	b.n	801b35e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	691b      	ldr	r3, [r3, #16]
 801b2a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b2aa:	d133      	bne.n	801b314 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b2b2:	b2db      	uxtb	r3, r3
 801b2b4:	2b21      	cmp	r3, #33	; 0x21
 801b2b6:	d109      	bne.n	801b2cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	461a      	mov	r2, r3
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801b2c8:	611a      	str	r2, [r3, #16]
 801b2ca:	e008      	b.n	801b2de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	f043 0301 	orr.w	r3, r3, #1
 801b2d6:	b2da      	uxtb	r2, r3
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d004      	beq.n	801b2f0 <I2C_Master_SB+0x92>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d108      	bne.n	801b302 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d032      	beq.n	801b35e <I2C_Master_SB+0x100>
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d02d      	beq.n	801b35e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	685a      	ldr	r2, [r3, #4]
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b310:	605a      	str	r2, [r3, #4]
}
 801b312:	e024      	b.n	801b35e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d10e      	bne.n	801b33a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b320:	b29b      	uxth	r3, r3
 801b322:	11db      	asrs	r3, r3, #7
 801b324:	b2db      	uxtb	r3, r3
 801b326:	f003 0306 	and.w	r3, r3, #6
 801b32a:	b2db      	uxtb	r3, r3
 801b32c:	f063 030f 	orn	r3, r3, #15
 801b330:	b2da      	uxtb	r2, r3
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	611a      	str	r2, [r3, #16]
}
 801b338:	e011      	b.n	801b35e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b33e:	2b01      	cmp	r3, #1
 801b340:	d10d      	bne.n	801b35e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b346:	b29b      	uxth	r3, r3
 801b348:	11db      	asrs	r3, r3, #7
 801b34a:	b2db      	uxtb	r3, r3
 801b34c:	f003 0306 	and.w	r3, r3, #6
 801b350:	b2db      	uxtb	r3, r3
 801b352:	f063 030e 	orn	r3, r3, #14
 801b356:	b2da      	uxtb	r2, r3
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	611a      	str	r2, [r3, #16]
}
 801b35e:	bf00      	nop
 801b360:	370c      	adds	r7, #12
 801b362:	46bd      	mov	sp, r7
 801b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b368:	4770      	bx	lr

0801b36a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801b36a:	b480      	push	{r7}
 801b36c:	b083      	sub	sp, #12
 801b36e:	af00      	add	r7, sp, #0
 801b370:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b376:	b2da      	uxtb	r2, r3
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b382:	2b00      	cmp	r3, #0
 801b384:	d004      	beq.n	801b390 <I2C_Master_ADD10+0x26>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d108      	bne.n	801b3a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b394:	2b00      	cmp	r3, #0
 801b396:	d00c      	beq.n	801b3b2 <I2C_Master_ADD10+0x48>
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d007      	beq.n	801b3b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	685a      	ldr	r2, [r3, #4]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b3b0:	605a      	str	r2, [r3, #4]
  }
}
 801b3b2:	bf00      	nop
 801b3b4:	370c      	adds	r7, #12
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3bc:	4770      	bx	lr

0801b3be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801b3be:	b480      	push	{r7}
 801b3c0:	b091      	sub	sp, #68	; 0x44
 801b3c2:	af00      	add	r7, sp, #0
 801b3c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b3cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b3e2:	b2db      	uxtb	r3, r3
 801b3e4:	2b22      	cmp	r3, #34	; 0x22
 801b3e6:	f040 8169 	bne.w	801b6bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d10f      	bne.n	801b412 <I2C_Master_ADDR+0x54>
 801b3f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801b3f6:	2b40      	cmp	r3, #64	; 0x40
 801b3f8:	d10b      	bne.n	801b412 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	633b      	str	r3, [r7, #48]	; 0x30
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	695b      	ldr	r3, [r3, #20]
 801b404:	633b      	str	r3, [r7, #48]	; 0x30
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	699b      	ldr	r3, [r3, #24]
 801b40c:	633b      	str	r3, [r7, #48]	; 0x30
 801b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b410:	e160      	b.n	801b6d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b416:	2b00      	cmp	r3, #0
 801b418:	d11d      	bne.n	801b456 <I2C_Master_ADDR+0x98>
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	691b      	ldr	r3, [r3, #16]
 801b41e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801b422:	d118      	bne.n	801b456 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b424:	2300      	movs	r3, #0
 801b426:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	695b      	ldr	r3, [r3, #20]
 801b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	699b      	ldr	r3, [r3, #24]
 801b436:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b438:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	681a      	ldr	r2, [r3, #0]
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b448:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b44e:	1c5a      	adds	r2, r3, #1
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	651a      	str	r2, [r3, #80]	; 0x50
 801b454:	e13e      	b.n	801b6d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d113      	bne.n	801b488 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b460:	2300      	movs	r3, #0
 801b462:	62bb      	str	r3, [r7, #40]	; 0x28
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	695b      	ldr	r3, [r3, #20]
 801b46a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	699b      	ldr	r3, [r3, #24]
 801b472:	62bb      	str	r3, [r7, #40]	; 0x28
 801b474:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	681a      	ldr	r2, [r3, #0]
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b484:	601a      	str	r2, [r3, #0]
 801b486:	e115      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b48c:	b29b      	uxth	r3, r3
 801b48e:	2b01      	cmp	r3, #1
 801b490:	f040 808a 	bne.w	801b5a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b496:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801b49a:	d137      	bne.n	801b50c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	681a      	ldr	r2, [r3, #0]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b4aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	685b      	ldr	r3, [r3, #4]
 801b4b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b4ba:	d113      	bne.n	801b4e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	681a      	ldr	r2, [r3, #0]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b4ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	627b      	str	r3, [r7, #36]	; 0x24
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	695b      	ldr	r3, [r3, #20]
 801b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	699b      	ldr	r3, [r3, #24]
 801b4de:	627b      	str	r3, [r7, #36]	; 0x24
 801b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4e2:	e0e7      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	623b      	str	r3, [r7, #32]
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	695b      	ldr	r3, [r3, #20]
 801b4ee:	623b      	str	r3, [r7, #32]
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	699b      	ldr	r3, [r3, #24]
 801b4f6:	623b      	str	r3, [r7, #32]
 801b4f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	681a      	ldr	r2, [r3, #0]
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b508:	601a      	str	r2, [r3, #0]
 801b50a:	e0d3      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b50e:	2b08      	cmp	r3, #8
 801b510:	d02e      	beq.n	801b570 <I2C_Master_ADDR+0x1b2>
 801b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b514:	2b20      	cmp	r3, #32
 801b516:	d02b      	beq.n	801b570 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b51a:	2b12      	cmp	r3, #18
 801b51c:	d102      	bne.n	801b524 <I2C_Master_ADDR+0x166>
 801b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b520:	2b01      	cmp	r3, #1
 801b522:	d125      	bne.n	801b570 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b526:	2b04      	cmp	r3, #4
 801b528:	d00e      	beq.n	801b548 <I2C_Master_ADDR+0x18a>
 801b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b52c:	2b02      	cmp	r3, #2
 801b52e:	d00b      	beq.n	801b548 <I2C_Master_ADDR+0x18a>
 801b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b532:	2b10      	cmp	r3, #16
 801b534:	d008      	beq.n	801b548 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b544:	601a      	str	r2, [r3, #0]
 801b546:	e007      	b.n	801b558 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	681a      	ldr	r2, [r3, #0]
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b556:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b558:	2300      	movs	r3, #0
 801b55a:	61fb      	str	r3, [r7, #28]
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	695b      	ldr	r3, [r3, #20]
 801b562:	61fb      	str	r3, [r7, #28]
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	699b      	ldr	r3, [r3, #24]
 801b56a:	61fb      	str	r3, [r7, #28]
 801b56c:	69fb      	ldr	r3, [r7, #28]
 801b56e:	e0a1      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	681a      	ldr	r2, [r3, #0]
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b57e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b580:	2300      	movs	r3, #0
 801b582:	61bb      	str	r3, [r7, #24]
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	695b      	ldr	r3, [r3, #20]
 801b58a:	61bb      	str	r3, [r7, #24]
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	699b      	ldr	r3, [r3, #24]
 801b592:	61bb      	str	r3, [r7, #24]
 801b594:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	681a      	ldr	r2, [r3, #0]
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b5a4:	601a      	str	r2, [r3, #0]
 801b5a6:	e085      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b5ac:	b29b      	uxth	r3, r3
 801b5ae:	2b02      	cmp	r3, #2
 801b5b0:	d14d      	bne.n	801b64e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5b4:	2b04      	cmp	r3, #4
 801b5b6:	d016      	beq.n	801b5e6 <I2C_Master_ADDR+0x228>
 801b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5ba:	2b02      	cmp	r3, #2
 801b5bc:	d013      	beq.n	801b5e6 <I2C_Master_ADDR+0x228>
 801b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5c0:	2b10      	cmp	r3, #16
 801b5c2:	d010      	beq.n	801b5e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	681a      	ldr	r2, [r3, #0]
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b5d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	681a      	ldr	r2, [r3, #0]
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b5e2:	601a      	str	r2, [r3, #0]
 801b5e4:	e007      	b.n	801b5f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	681a      	ldr	r2, [r3, #0]
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b5f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	685b      	ldr	r3, [r3, #4]
 801b5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b604:	d117      	bne.n	801b636 <I2C_Master_ADDR+0x278>
 801b606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801b60c:	d00b      	beq.n	801b626 <I2C_Master_ADDR+0x268>
 801b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b610:	2b01      	cmp	r3, #1
 801b612:	d008      	beq.n	801b626 <I2C_Master_ADDR+0x268>
 801b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b616:	2b08      	cmp	r3, #8
 801b618:	d005      	beq.n	801b626 <I2C_Master_ADDR+0x268>
 801b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b61c:	2b10      	cmp	r3, #16
 801b61e:	d002      	beq.n	801b626 <I2C_Master_ADDR+0x268>
 801b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b622:	2b20      	cmp	r3, #32
 801b624:	d107      	bne.n	801b636 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801b634:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b636:	2300      	movs	r3, #0
 801b638:	617b      	str	r3, [r7, #20]
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	695b      	ldr	r3, [r3, #20]
 801b640:	617b      	str	r3, [r7, #20]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	699b      	ldr	r3, [r3, #24]
 801b648:	617b      	str	r3, [r7, #20]
 801b64a:	697b      	ldr	r3, [r7, #20]
 801b64c:	e032      	b.n	801b6b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	681a      	ldr	r2, [r3, #0]
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b65c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	685b      	ldr	r3, [r3, #4]
 801b664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b66c:	d117      	bne.n	801b69e <I2C_Master_ADDR+0x2e0>
 801b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801b674:	d00b      	beq.n	801b68e <I2C_Master_ADDR+0x2d0>
 801b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b678:	2b01      	cmp	r3, #1
 801b67a:	d008      	beq.n	801b68e <I2C_Master_ADDR+0x2d0>
 801b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b67e:	2b08      	cmp	r3, #8
 801b680:	d005      	beq.n	801b68e <I2C_Master_ADDR+0x2d0>
 801b682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b684:	2b10      	cmp	r3, #16
 801b686:	d002      	beq.n	801b68e <I2C_Master_ADDR+0x2d0>
 801b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b68a:	2b20      	cmp	r3, #32
 801b68c:	d107      	bne.n	801b69e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	685a      	ldr	r2, [r3, #4]
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801b69c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b69e:	2300      	movs	r3, #0
 801b6a0:	613b      	str	r3, [r7, #16]
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	695b      	ldr	r3, [r3, #20]
 801b6a8:	613b      	str	r3, [r7, #16]
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	699b      	ldr	r3, [r3, #24]
 801b6b0:	613b      	str	r3, [r7, #16]
 801b6b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801b6ba:	e00b      	b.n	801b6d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b6bc:	2300      	movs	r3, #0
 801b6be:	60fb      	str	r3, [r7, #12]
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	695b      	ldr	r3, [r3, #20]
 801b6c6:	60fb      	str	r3, [r7, #12]
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	699b      	ldr	r3, [r3, #24]
 801b6ce:	60fb      	str	r3, [r7, #12]
 801b6d0:	68fb      	ldr	r3, [r7, #12]
}
 801b6d2:	e7ff      	b.n	801b6d4 <I2C_Master_ADDR+0x316>
 801b6d4:	bf00      	nop
 801b6d6:	3744      	adds	r7, #68	; 0x44
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6de:	4770      	bx	lr

0801b6e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b084      	sub	sp, #16
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b6ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b6f4:	b29b      	uxth	r3, r3
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d02b      	beq.n	801b752 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6fe:	781a      	ldrb	r2, [r3, #0]
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b70a:	1c5a      	adds	r2, r3, #1
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b714:	b29b      	uxth	r3, r3
 801b716:	3b01      	subs	r3, #1
 801b718:	b29a      	uxth	r2, r3
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b722:	b29b      	uxth	r3, r3
 801b724:	2b00      	cmp	r3, #0
 801b726:	d114      	bne.n	801b752 <I2C_SlaveTransmit_TXE+0x72>
 801b728:	7bfb      	ldrb	r3, [r7, #15]
 801b72a:	2b29      	cmp	r3, #41	; 0x29
 801b72c:	d111      	bne.n	801b752 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	685a      	ldr	r2, [r3, #4]
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b73c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	2221      	movs	r2, #33	; 0x21
 801b742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	2228      	movs	r2, #40	; 0x28
 801b748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801b74c:	6878      	ldr	r0, [r7, #4]
 801b74e:	f7ff f9e7 	bl	801ab20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801b752:	bf00      	nop
 801b754:	3710      	adds	r7, #16
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}

0801b75a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801b75a:	b480      	push	{r7}
 801b75c:	b083      	sub	sp, #12
 801b75e:	af00      	add	r7, sp, #0
 801b760:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b766:	b29b      	uxth	r3, r3
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d011      	beq.n	801b790 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b770:	781a      	ldrb	r2, [r3, #0]
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b77c:	1c5a      	adds	r2, r3, #1
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b786:	b29b      	uxth	r3, r3
 801b788:	3b01      	subs	r3, #1
 801b78a:	b29a      	uxth	r2, r3
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801b790:	bf00      	nop
 801b792:	370c      	adds	r7, #12
 801b794:	46bd      	mov	sp, r7
 801b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b79a:	4770      	bx	lr

0801b79c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b084      	sub	sp, #16
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b7aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b7b0:	b29b      	uxth	r3, r3
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d02c      	beq.n	801b810 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	691a      	ldr	r2, [r3, #16]
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7c0:	b2d2      	uxtb	r2, r2
 801b7c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7c8:	1c5a      	adds	r2, r3, #1
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b7d2:	b29b      	uxth	r3, r3
 801b7d4:	3b01      	subs	r3, #1
 801b7d6:	b29a      	uxth	r2, r3
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d114      	bne.n	801b810 <I2C_SlaveReceive_RXNE+0x74>
 801b7e6:	7bfb      	ldrb	r3, [r7, #15]
 801b7e8:	2b2a      	cmp	r3, #42	; 0x2a
 801b7ea:	d111      	bne.n	801b810 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	685a      	ldr	r2, [r3, #4]
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b7fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2222      	movs	r2, #34	; 0x22
 801b800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	2228      	movs	r2, #40	; 0x28
 801b806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801b80a:	6878      	ldr	r0, [r7, #4]
 801b80c:	f7ff f992 	bl	801ab34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801b810:	bf00      	nop
 801b812:	3710      	adds	r7, #16
 801b814:	46bd      	mov	sp, r7
 801b816:	bd80      	pop	{r7, pc}

0801b818 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801b818:	b480      	push	{r7}
 801b81a:	b083      	sub	sp, #12
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b824:	b29b      	uxth	r3, r3
 801b826:	2b00      	cmp	r3, #0
 801b828:	d012      	beq.n	801b850 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	691a      	ldr	r2, [r3, #16]
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b834:	b2d2      	uxtb	r2, r2
 801b836:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b83c:	1c5a      	adds	r2, r3, #1
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b846:	b29b      	uxth	r3, r3
 801b848:	3b01      	subs	r3, #1
 801b84a:	b29a      	uxth	r2, r3
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801b850:	bf00      	nop
 801b852:	370c      	adds	r7, #12
 801b854:	46bd      	mov	sp, r7
 801b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85a:	4770      	bx	lr

0801b85c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801b85c:	b580      	push	{r7, lr}
 801b85e:	b084      	sub	sp, #16
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
 801b864:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801b866:	2300      	movs	r3, #0
 801b868:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b870:	b2db      	uxtb	r3, r3
 801b872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801b876:	2b28      	cmp	r3, #40	; 0x28
 801b878:	d127      	bne.n	801b8ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	685a      	ldr	r2, [r3, #4]
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b888:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801b88a:	683b      	ldr	r3, [r7, #0]
 801b88c:	089b      	lsrs	r3, r3, #2
 801b88e:	f003 0301 	and.w	r3, r3, #1
 801b892:	2b00      	cmp	r3, #0
 801b894:	d101      	bne.n	801b89a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801b896:	2301      	movs	r3, #1
 801b898:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	09db      	lsrs	r3, r3, #7
 801b89e:	f003 0301 	and.w	r3, r3, #1
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d103      	bne.n	801b8ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	68db      	ldr	r3, [r3, #12]
 801b8aa:	81bb      	strh	r3, [r7, #12]
 801b8ac:	e002      	b.n	801b8b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	699b      	ldr	r3, [r3, #24]
 801b8b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801b8bc:	89ba      	ldrh	r2, [r7, #12]
 801b8be:	7bfb      	ldrb	r3, [r7, #15]
 801b8c0:	4619      	mov	r1, r3
 801b8c2:	6878      	ldr	r0, [r7, #4]
 801b8c4:	f7ff f940 	bl	801ab48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801b8c8:	e00e      	b.n	801b8e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	60bb      	str	r3, [r7, #8]
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	695b      	ldr	r3, [r3, #20]
 801b8d4:	60bb      	str	r3, [r7, #8]
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	699b      	ldr	r3, [r3, #24]
 801b8dc:	60bb      	str	r3, [r7, #8]
 801b8de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801b8e8:	bf00      	nop
 801b8ea:	3710      	adds	r7, #16
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}

0801b8f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b084      	sub	sp, #16
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b8fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	685a      	ldr	r2, [r3, #4]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801b90e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801b910:	2300      	movs	r3, #0
 801b912:	60bb      	str	r3, [r7, #8]
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	695b      	ldr	r3, [r3, #20]
 801b91a:	60bb      	str	r3, [r7, #8]
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	681a      	ldr	r2, [r3, #0]
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	f042 0201 	orr.w	r2, r2, #1
 801b92a:	601a      	str	r2, [r3, #0]
 801b92c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b93c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	685b      	ldr	r3, [r3, #4]
 801b944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b94c:	d172      	bne.n	801ba34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801b94e:	7bfb      	ldrb	r3, [r7, #15]
 801b950:	2b22      	cmp	r3, #34	; 0x22
 801b952:	d002      	beq.n	801b95a <I2C_Slave_STOPF+0x6a>
 801b954:	7bfb      	ldrb	r3, [r7, #15]
 801b956:	2b2a      	cmp	r3, #42	; 0x2a
 801b958:	d135      	bne.n	801b9c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	685b      	ldr	r3, [r3, #4]
 801b962:	b29a      	uxth	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d005      	beq.n	801b97e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b976:	f043 0204 	orr.w	r2, r3, #4
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	685a      	ldr	r2, [r3, #4]
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b98c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b992:	4618      	mov	r0, r3
 801b994:	f7fd fb40 	bl	8019018 <HAL_DMA_GetState>
 801b998:	4603      	mov	r3, r0
 801b99a:	2b01      	cmp	r3, #1
 801b99c:	d049      	beq.n	801ba32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9a2:	4a69      	ldr	r2, [pc, #420]	; (801bb48 <I2C_Slave_STOPF+0x258>)
 801b9a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7fd f988 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d03d      	beq.n	801ba32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9bc:	687a      	ldr	r2, [r7, #4]
 801b9be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801b9c0:	4610      	mov	r0, r2
 801b9c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801b9c4:	e035      	b.n	801ba32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	b29a      	uxth	r2, r3
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b9d8:	b29b      	uxth	r3, r3
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d005      	beq.n	801b9ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b9e2:	f043 0204 	orr.w	r2, r3, #4
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	685a      	ldr	r2, [r3, #4]
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b9f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fd fb0a 	bl	8019018 <HAL_DMA_GetState>
 801ba04:	4603      	mov	r3, r0
 801ba06:	2b01      	cmp	r3, #1
 801ba08:	d014      	beq.n	801ba34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba0e:	4a4e      	ldr	r2, [pc, #312]	; (801bb48 <I2C_Slave_STOPF+0x258>)
 801ba10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba16:	4618      	mov	r0, r3
 801ba18:	f7fd f952 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d008      	beq.n	801ba34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801ba2c:	4610      	mov	r0, r2
 801ba2e:	4798      	blx	r3
 801ba30:	e000      	b.n	801ba34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801ba32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d03e      	beq.n	801babc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	695b      	ldr	r3, [r3, #20]
 801ba44:	f003 0304 	and.w	r3, r3, #4
 801ba48:	2b04      	cmp	r3, #4
 801ba4a:	d112      	bne.n	801ba72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	691a      	ldr	r2, [r3, #16]
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba56:	b2d2      	uxtb	r2, r2
 801ba58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba5e:	1c5a      	adds	r2, r3, #1
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ba68:	b29b      	uxth	r3, r3
 801ba6a:	3b01      	subs	r3, #1
 801ba6c:	b29a      	uxth	r2, r3
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	695b      	ldr	r3, [r3, #20]
 801ba78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba7c:	2b40      	cmp	r3, #64	; 0x40
 801ba7e:	d112      	bne.n	801baa6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	691a      	ldr	r2, [r3, #16]
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba8a:	b2d2      	uxtb	r2, r2
 801ba8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba92:	1c5a      	adds	r2, r3, #1
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ba9c:	b29b      	uxth	r3, r3
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	b29a      	uxth	r2, r3
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801baaa:	b29b      	uxth	r3, r3
 801baac:	2b00      	cmp	r3, #0
 801baae:	d005      	beq.n	801babc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bab4:	f043 0204 	orr.w	r2, r3, #4
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d003      	beq.n	801bacc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801bac4:	6878      	ldr	r0, [r7, #4]
 801bac6:	f000 f8b3 	bl	801bc30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801baca:	e039      	b.n	801bb40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801bacc:	7bfb      	ldrb	r3, [r7, #15]
 801bace:	2b2a      	cmp	r3, #42	; 0x2a
 801bad0:	d109      	bne.n	801bae6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	2200      	movs	r2, #0
 801bad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	2228      	movs	r2, #40	; 0x28
 801badc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f7ff f827 	bl	801ab34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b28      	cmp	r3, #40	; 0x28
 801baf0:	d111      	bne.n	801bb16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	4a15      	ldr	r2, [pc, #84]	; (801bb4c <I2C_Slave_STOPF+0x25c>)
 801baf6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	2200      	movs	r2, #0
 801bafc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	2220      	movs	r2, #32
 801bb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	2200      	movs	r2, #0
 801bb0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801bb0e:	6878      	ldr	r0, [r7, #4]
 801bb10:	f7ff f828 	bl	801ab64 <HAL_I2C_ListenCpltCallback>
}
 801bb14:	e014      	b.n	801bb40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb1a:	2b22      	cmp	r3, #34	; 0x22
 801bb1c:	d002      	beq.n	801bb24 <I2C_Slave_STOPF+0x234>
 801bb1e:	7bfb      	ldrb	r3, [r7, #15]
 801bb20:	2b22      	cmp	r3, #34	; 0x22
 801bb22:	d10d      	bne.n	801bb40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	2200      	movs	r2, #0
 801bb28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	2220      	movs	r2, #32
 801bb2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2200      	movs	r2, #0
 801bb36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801bb3a:	6878      	ldr	r0, [r7, #4]
 801bb3c:	f7fe fffa 	bl	801ab34 <HAL_I2C_SlaveRxCpltCallback>
}
 801bb40:	bf00      	nop
 801bb42:	3710      	adds	r7, #16
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bd80      	pop	{r7, pc}
 801bb48:	0801c191 	.word	0x0801c191
 801bb4c:	ffff0000 	.word	0xffff0000

0801bb50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	b084      	sub	sp, #16
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bb5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801bb66:	68bb      	ldr	r3, [r7, #8]
 801bb68:	2b08      	cmp	r3, #8
 801bb6a:	d002      	beq.n	801bb72 <I2C_Slave_AF+0x22>
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	2b20      	cmp	r3, #32
 801bb70:	d129      	bne.n	801bbc6 <I2C_Slave_AF+0x76>
 801bb72:	7bfb      	ldrb	r3, [r7, #15]
 801bb74:	2b28      	cmp	r3, #40	; 0x28
 801bb76:	d126      	bne.n	801bbc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	4a2c      	ldr	r2, [pc, #176]	; (801bc2c <I2C_Slave_AF+0xdc>)
 801bb7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	685a      	ldr	r2, [r3, #4]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801bb8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801bb96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	681a      	ldr	r2, [r3, #0]
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801bba6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	2200      	movs	r2, #0
 801bbac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	2220      	movs	r2, #32
 801bbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801bbbe:	6878      	ldr	r0, [r7, #4]
 801bbc0:	f7fe ffd0 	bl	801ab64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801bbc4:	e02e      	b.n	801bc24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801bbc6:	7bfb      	ldrb	r3, [r7, #15]
 801bbc8:	2b21      	cmp	r3, #33	; 0x21
 801bbca:	d126      	bne.n	801bc1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	4a17      	ldr	r2, [pc, #92]	; (801bc2c <I2C_Slave_AF+0xdc>)
 801bbd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	2221      	movs	r2, #33	; 0x21
 801bbd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2220      	movs	r2, #32
 801bbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	685a      	ldr	r2, [r3, #4]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801bbf6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801bc00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	681a      	ldr	r2, [r3, #0]
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801bc10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801bc12:	6878      	ldr	r0, [r7, #4]
 801bc14:	f7fe ff84 	bl	801ab20 <HAL_I2C_SlaveTxCpltCallback>
}
 801bc18:	e004      	b.n	801bc24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801bc22:	615a      	str	r2, [r3, #20]
}
 801bc24:	bf00      	nop
 801bc26:	3710      	adds	r7, #16
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	bd80      	pop	{r7, pc}
 801bc2c:	ffff0000 	.word	0xffff0000

0801bc30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b084      	sub	sp, #16
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bc3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bc46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801bc48:	7bbb      	ldrb	r3, [r7, #14]
 801bc4a:	2b10      	cmp	r3, #16
 801bc4c:	d002      	beq.n	801bc54 <I2C_ITError+0x24>
 801bc4e:	7bbb      	ldrb	r3, [r7, #14]
 801bc50:	2b40      	cmp	r3, #64	; 0x40
 801bc52:	d10a      	bne.n	801bc6a <I2C_ITError+0x3a>
 801bc54:	7bfb      	ldrb	r3, [r7, #15]
 801bc56:	2b22      	cmp	r3, #34	; 0x22
 801bc58:	d107      	bne.n	801bc6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bc68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801bc6a:	7bfb      	ldrb	r3, [r7, #15]
 801bc6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801bc70:	2b28      	cmp	r3, #40	; 0x28
 801bc72:	d107      	bne.n	801bc84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	2200      	movs	r2, #0
 801bc78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	2228      	movs	r2, #40	; 0x28
 801bc7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801bc82:	e015      	b.n	801bcb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bc8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bc92:	d00a      	beq.n	801bcaa <I2C_ITError+0x7a>
 801bc94:	7bfb      	ldrb	r3, [r7, #15]
 801bc96:	2b60      	cmp	r3, #96	; 0x60
 801bc98:	d007      	beq.n	801bcaa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	2220      	movs	r2, #32
 801bc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	2200      	movs	r2, #0
 801bca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	2200      	movs	r2, #0
 801bcae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bcba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bcbe:	d162      	bne.n	801bd86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	685a      	ldr	r2, [r3, #4]
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bcce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801bcd8:	b2db      	uxtb	r3, r3
 801bcda:	2b01      	cmp	r3, #1
 801bcdc:	d020      	beq.n	801bd20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bce2:	4a6a      	ldr	r2, [pc, #424]	; (801be8c <I2C_ITError+0x25c>)
 801bce4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bcea:	4618      	mov	r0, r3
 801bcec:	f7fc ffe8 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	f000 8089 	beq.w	801be0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	681a      	ldr	r2, [r3, #0]
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	f022 0201 	bic.w	r2, r2, #1
 801bd06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	2220      	movs	r2, #32
 801bd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801bd1a:	4610      	mov	r0, r2
 801bd1c:	4798      	blx	r3
 801bd1e:	e074      	b.n	801be0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd24:	4a59      	ldr	r2, [pc, #356]	; (801be8c <I2C_ITError+0x25c>)
 801bd26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f7fc ffc7 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d068      	beq.n	801be0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	695b      	ldr	r3, [r3, #20]
 801bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd42:	2b40      	cmp	r3, #64	; 0x40
 801bd44:	d10b      	bne.n	801bd5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	691a      	ldr	r2, [r3, #16]
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd50:	b2d2      	uxtb	r2, r2
 801bd52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd58:	1c5a      	adds	r2, r3, #1
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	681a      	ldr	r2, [r3, #0]
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	f022 0201 	bic.w	r2, r2, #1
 801bd6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	2220      	movs	r2, #32
 801bd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd7c:	687a      	ldr	r2, [r7, #4]
 801bd7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bd80:	4610      	mov	r0, r2
 801bd82:	4798      	blx	r3
 801bd84:	e041      	b.n	801be0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bd8c:	b2db      	uxtb	r3, r3
 801bd8e:	2b60      	cmp	r3, #96	; 0x60
 801bd90:	d125      	bne.n	801bdde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2220      	movs	r2, #32
 801bd96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	695b      	ldr	r3, [r3, #20]
 801bda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdaa:	2b40      	cmp	r3, #64	; 0x40
 801bdac:	d10b      	bne.n	801bdc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	691a      	ldr	r2, [r3, #16]
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdb8:	b2d2      	uxtb	r2, r2
 801bdba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdc0:	1c5a      	adds	r2, r3, #1
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	681a      	ldr	r2, [r3, #0]
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	f022 0201 	bic.w	r2, r2, #1
 801bdd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f7fe feec 	bl	801abb4 <HAL_I2C_AbortCpltCallback>
 801bddc:	e015      	b.n	801be0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	695b      	ldr	r3, [r3, #20]
 801bde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bde8:	2b40      	cmp	r3, #64	; 0x40
 801bdea:	d10b      	bne.n	801be04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	691a      	ldr	r2, [r3, #16]
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdf6:	b2d2      	uxtb	r2, r2
 801bdf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdfe:	1c5a      	adds	r2, r3, #1
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801be04:	6878      	ldr	r0, [r7, #4]
 801be06:	f7fe fecb 	bl	801aba0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801be10:	68bb      	ldr	r3, [r7, #8]
 801be12:	f003 0301 	and.w	r3, r3, #1
 801be16:	2b00      	cmp	r3, #0
 801be18:	d10e      	bne.n	801be38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801be1a:	68bb      	ldr	r3, [r7, #8]
 801be1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801be20:	2b00      	cmp	r3, #0
 801be22:	d109      	bne.n	801be38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d104      	bne.n	801be38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801be34:	2b00      	cmp	r3, #0
 801be36:	d007      	beq.n	801be48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	685a      	ldr	r2, [r3, #4]
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801be46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801be4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be54:	f003 0304 	and.w	r3, r3, #4
 801be58:	2b04      	cmp	r3, #4
 801be5a:	d113      	bne.n	801be84 <I2C_ITError+0x254>
 801be5c:	7bfb      	ldrb	r3, [r7, #15]
 801be5e:	2b28      	cmp	r3, #40	; 0x28
 801be60:	d110      	bne.n	801be84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	4a0a      	ldr	r2, [pc, #40]	; (801be90 <I2C_ITError+0x260>)
 801be66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2200      	movs	r2, #0
 801be6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	2220      	movs	r2, #32
 801be72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	2200      	movs	r2, #0
 801be7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f7fe fe70 	bl	801ab64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801be84:	bf00      	nop
 801be86:	3710      	adds	r7, #16
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	0801c191 	.word	0x0801c191
 801be90:	ffff0000 	.word	0xffff0000

0801be94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b088      	sub	sp, #32
 801be98:	af02      	add	r7, sp, #8
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	4608      	mov	r0, r1
 801be9e:	4611      	mov	r1, r2
 801bea0:	461a      	mov	r2, r3
 801bea2:	4603      	mov	r3, r0
 801bea4:	817b      	strh	r3, [r7, #10]
 801bea6:	460b      	mov	r3, r1
 801bea8:	813b      	strh	r3, [r7, #8]
 801beaa:	4613      	mov	r3, r2
 801beac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	681a      	ldr	r2, [r3, #0]
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bec0:	9300      	str	r3, [sp, #0]
 801bec2:	6a3b      	ldr	r3, [r7, #32]
 801bec4:	2200      	movs	r2, #0
 801bec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801beca:	68f8      	ldr	r0, [r7, #12]
 801becc:	f000 fa08 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801bed0:	4603      	mov	r3, r0
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d00d      	beq.n	801bef2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bee4:	d103      	bne.n	801beee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801beec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801beee:	2303      	movs	r3, #3
 801bef0:	e05f      	b.n	801bfb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801bef2:	897b      	ldrh	r3, [r7, #10]
 801bef4:	b2db      	uxtb	r3, r3
 801bef6:	461a      	mov	r2, r3
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801bf00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf04:	6a3a      	ldr	r2, [r7, #32]
 801bf06:	492d      	ldr	r1, [pc, #180]	; (801bfbc <I2C_RequestMemoryWrite+0x128>)
 801bf08:	68f8      	ldr	r0, [r7, #12]
 801bf0a:	f000 fa40 	bl	801c38e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d001      	beq.n	801bf18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801bf14:	2301      	movs	r3, #1
 801bf16:	e04c      	b.n	801bfb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801bf18:	2300      	movs	r3, #0
 801bf1a:	617b      	str	r3, [r7, #20]
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	695b      	ldr	r3, [r3, #20]
 801bf22:	617b      	str	r3, [r7, #20]
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	699b      	ldr	r3, [r3, #24]
 801bf2a:	617b      	str	r3, [r7, #20]
 801bf2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bf2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf30:	6a39      	ldr	r1, [r7, #32]
 801bf32:	68f8      	ldr	r0, [r7, #12]
 801bf34:	f000 faaa 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d00d      	beq.n	801bf5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf42:	2b04      	cmp	r3, #4
 801bf44:	d107      	bne.n	801bf56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	681a      	ldr	r2, [r3, #0]
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bf54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801bf56:	2301      	movs	r3, #1
 801bf58:	e02b      	b.n	801bfb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801bf5a:	88fb      	ldrh	r3, [r7, #6]
 801bf5c:	2b01      	cmp	r3, #1
 801bf5e:	d105      	bne.n	801bf6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801bf60:	893b      	ldrh	r3, [r7, #8]
 801bf62:	b2da      	uxtb	r2, r3
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	611a      	str	r2, [r3, #16]
 801bf6a:	e021      	b.n	801bfb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801bf6c:	893b      	ldrh	r3, [r7, #8]
 801bf6e:	0a1b      	lsrs	r3, r3, #8
 801bf70:	b29b      	uxth	r3, r3
 801bf72:	b2da      	uxtb	r2, r3
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bf7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf7c:	6a39      	ldr	r1, [r7, #32]
 801bf7e:	68f8      	ldr	r0, [r7, #12]
 801bf80:	f000 fa84 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 801bf84:	4603      	mov	r3, r0
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d00d      	beq.n	801bfa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf8e:	2b04      	cmp	r3, #4
 801bf90:	d107      	bne.n	801bfa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	681a      	ldr	r2, [r3, #0]
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801bfa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	e005      	b.n	801bfb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801bfa6:	893b      	ldrh	r3, [r7, #8]
 801bfa8:	b2da      	uxtb	r2, r3
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801bfb0:	2300      	movs	r3, #0
}
 801bfb2:	4618      	mov	r0, r3
 801bfb4:	3718      	adds	r7, #24
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	bd80      	pop	{r7, pc}
 801bfba:	bf00      	nop
 801bfbc:	00010002 	.word	0x00010002

0801bfc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	b088      	sub	sp, #32
 801bfc4:	af02      	add	r7, sp, #8
 801bfc6:	60f8      	str	r0, [r7, #12]
 801bfc8:	4608      	mov	r0, r1
 801bfca:	4611      	mov	r1, r2
 801bfcc:	461a      	mov	r2, r3
 801bfce:	4603      	mov	r3, r0
 801bfd0:	817b      	strh	r3, [r7, #10]
 801bfd2:	460b      	mov	r3, r1
 801bfd4:	813b      	strh	r3, [r7, #8]
 801bfd6:	4613      	mov	r3, r2
 801bfd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	681a      	ldr	r2, [r3, #0]
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bfe8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	681a      	ldr	r2, [r3, #0]
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bffc:	9300      	str	r3, [sp, #0]
 801bffe:	6a3b      	ldr	r3, [r7, #32]
 801c000:	2200      	movs	r2, #0
 801c002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801c006:	68f8      	ldr	r0, [r7, #12]
 801c008:	f000 f96a 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801c00c:	4603      	mov	r3, r0
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d00d      	beq.n	801c02e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c01c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c020:	d103      	bne.n	801c02a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801c02a:	2303      	movs	r3, #3
 801c02c:	e0aa      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801c02e:	897b      	ldrh	r3, [r7, #10]
 801c030:	b2db      	uxtb	r3, r3
 801c032:	461a      	mov	r2, r3
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801c03c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c040:	6a3a      	ldr	r2, [r7, #32]
 801c042:	4952      	ldr	r1, [pc, #328]	; (801c18c <I2C_RequestMemoryRead+0x1cc>)
 801c044:	68f8      	ldr	r0, [r7, #12]
 801c046:	f000 f9a2 	bl	801c38e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801c04a:	4603      	mov	r3, r0
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d001      	beq.n	801c054 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801c050:	2301      	movs	r3, #1
 801c052:	e097      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801c054:	2300      	movs	r3, #0
 801c056:	617b      	str	r3, [r7, #20]
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	695b      	ldr	r3, [r3, #20]
 801c05e:	617b      	str	r3, [r7, #20]
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	699b      	ldr	r3, [r3, #24]
 801c066:	617b      	str	r3, [r7, #20]
 801c068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c06c:	6a39      	ldr	r1, [r7, #32]
 801c06e:	68f8      	ldr	r0, [r7, #12]
 801c070:	f000 fa0c 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 801c074:	4603      	mov	r3, r0
 801c076:	2b00      	cmp	r3, #0
 801c078:	d00d      	beq.n	801c096 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c07e:	2b04      	cmp	r3, #4
 801c080:	d107      	bne.n	801c092 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	681a      	ldr	r2, [r3, #0]
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801c092:	2301      	movs	r3, #1
 801c094:	e076      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801c096:	88fb      	ldrh	r3, [r7, #6]
 801c098:	2b01      	cmp	r3, #1
 801c09a:	d105      	bne.n	801c0a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801c09c:	893b      	ldrh	r3, [r7, #8]
 801c09e:	b2da      	uxtb	r2, r3
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	611a      	str	r2, [r3, #16]
 801c0a6:	e021      	b.n	801c0ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801c0a8:	893b      	ldrh	r3, [r7, #8]
 801c0aa:	0a1b      	lsrs	r3, r3, #8
 801c0ac:	b29b      	uxth	r3, r3
 801c0ae:	b2da      	uxtb	r2, r3
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c0b8:	6a39      	ldr	r1, [r7, #32]
 801c0ba:	68f8      	ldr	r0, [r7, #12]
 801c0bc:	f000 f9e6 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d00d      	beq.n	801c0e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0ca:	2b04      	cmp	r3, #4
 801c0cc:	d107      	bne.n	801c0de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	681a      	ldr	r2, [r3, #0]
 801c0d4:	68fb      	ldr	r3, [r7, #12]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c0dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801c0de:	2301      	movs	r3, #1
 801c0e0:	e050      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801c0e2:	893b      	ldrh	r3, [r7, #8]
 801c0e4:	b2da      	uxtb	r2, r3
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c0ee:	6a39      	ldr	r1, [r7, #32]
 801c0f0:	68f8      	ldr	r0, [r7, #12]
 801c0f2:	f000 f9cb 	bl	801c48c <I2C_WaitOnTXEFlagUntilTimeout>
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d00d      	beq.n	801c118 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c100:	2b04      	cmp	r3, #4
 801c102:	d107      	bne.n	801c114 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c112:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801c114:	2301      	movs	r3, #1
 801c116:	e035      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801c126:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c12a:	9300      	str	r3, [sp, #0]
 801c12c:	6a3b      	ldr	r3, [r7, #32]
 801c12e:	2200      	movs	r2, #0
 801c130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801c134:	68f8      	ldr	r0, [r7, #12]
 801c136:	f000 f8d3 	bl	801c2e0 <I2C_WaitOnFlagUntilTimeout>
 801c13a:	4603      	mov	r3, r0
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d00d      	beq.n	801c15c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c14e:	d103      	bne.n	801c158 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801c158:	2303      	movs	r3, #3
 801c15a:	e013      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801c15c:	897b      	ldrh	r3, [r7, #10]
 801c15e:	b2db      	uxtb	r3, r3
 801c160:	f043 0301 	orr.w	r3, r3, #1
 801c164:	b2da      	uxtb	r2, r3
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c16e:	6a3a      	ldr	r2, [r7, #32]
 801c170:	4906      	ldr	r1, [pc, #24]	; (801c18c <I2C_RequestMemoryRead+0x1cc>)
 801c172:	68f8      	ldr	r0, [r7, #12]
 801c174:	f000 f90b 	bl	801c38e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801c178:	4603      	mov	r3, r0
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d001      	beq.n	801c182 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801c17e:	2301      	movs	r3, #1
 801c180:	e000      	b.n	801c184 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801c182:	2300      	movs	r3, #0
}
 801c184:	4618      	mov	r0, r3
 801c186:	3718      	adds	r7, #24
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd80      	pop	{r7, pc}
 801c18c:	00010002 	.word	0x00010002

0801c190 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b086      	sub	sp, #24
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c198:	2300      	movs	r3, #0
 801c19a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801c1a2:	697b      	ldr	r3, [r7, #20]
 801c1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c1a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801c1aa:	4b4b      	ldr	r3, [pc, #300]	; (801c2d8 <I2C_DMAAbort+0x148>)
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	08db      	lsrs	r3, r3, #3
 801c1b0:	4a4a      	ldr	r2, [pc, #296]	; (801c2dc <I2C_DMAAbort+0x14c>)
 801c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 801c1b6:	0a1a      	lsrs	r2, r3, #8
 801c1b8:	4613      	mov	r3, r2
 801c1ba:	009b      	lsls	r3, r3, #2
 801c1bc:	4413      	add	r3, r2
 801c1be:	00da      	lsls	r2, r3, #3
 801c1c0:	1ad3      	subs	r3, r2, r3
 801c1c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d106      	bne.n	801c1d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1ce:	f043 0220 	orr.w	r2, r3, #32
 801c1d2:	697b      	ldr	r3, [r7, #20]
 801c1d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801c1d6:	e00a      	b.n	801c1ee <I2C_DMAAbort+0x5e>
    }
    count--;
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	3b01      	subs	r3, #1
 801c1dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801c1de:	697b      	ldr	r3, [r7, #20]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	681b      	ldr	r3, [r3, #0]
 801c1e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c1e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c1ec:	d0ea      	beq.n	801c1c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801c1ee:	697b      	ldr	r3, [r7, #20]
 801c1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d003      	beq.n	801c1fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801c1f6:	697b      	ldr	r3, [r7, #20]
 801c1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801c1fe:	697b      	ldr	r3, [r7, #20]
 801c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c202:	2b00      	cmp	r3, #0
 801c204:	d003      	beq.n	801c20e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c20a:	2200      	movs	r2, #0
 801c20c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	681a      	ldr	r2, [r3, #0]
 801c214:	697b      	ldr	r3, [r7, #20]
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c21c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801c21e:	697b      	ldr	r3, [r7, #20]
 801c220:	2200      	movs	r2, #0
 801c222:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801c224:	697b      	ldr	r3, [r7, #20]
 801c226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d003      	beq.n	801c234 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801c22c:	697b      	ldr	r3, [r7, #20]
 801c22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c230:	2200      	movs	r2, #0
 801c232:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801c234:	697b      	ldr	r3, [r7, #20]
 801c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d003      	beq.n	801c244 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801c23c:	697b      	ldr	r3, [r7, #20]
 801c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c240:	2200      	movs	r2, #0
 801c242:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	681a      	ldr	r2, [r3, #0]
 801c24a:	697b      	ldr	r3, [r7, #20]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	f022 0201 	bic.w	r2, r2, #1
 801c252:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801c254:	697b      	ldr	r3, [r7, #20]
 801c256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c25a:	b2db      	uxtb	r3, r3
 801c25c:	2b60      	cmp	r3, #96	; 0x60
 801c25e:	d10e      	bne.n	801c27e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801c260:	697b      	ldr	r3, [r7, #20]
 801c262:	2220      	movs	r2, #32
 801c264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801c268:	697b      	ldr	r3, [r7, #20]
 801c26a:	2200      	movs	r2, #0
 801c26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801c270:	697b      	ldr	r3, [r7, #20]
 801c272:	2200      	movs	r2, #0
 801c274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801c276:	6978      	ldr	r0, [r7, #20]
 801c278:	f7fe fc9c 	bl	801abb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801c27c:	e027      	b.n	801c2ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801c27e:	7cfb      	ldrb	r3, [r7, #19]
 801c280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801c284:	2b28      	cmp	r3, #40	; 0x28
 801c286:	d117      	bne.n	801c2b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801c288:	697b      	ldr	r3, [r7, #20]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	681a      	ldr	r2, [r3, #0]
 801c28e:	697b      	ldr	r3, [r7, #20]
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	f042 0201 	orr.w	r2, r2, #1
 801c296:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	681a      	ldr	r2, [r3, #0]
 801c29e:	697b      	ldr	r3, [r7, #20]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801c2a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801c2a8:	697b      	ldr	r3, [r7, #20]
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801c2ae:	697b      	ldr	r3, [r7, #20]
 801c2b0:	2228      	movs	r2, #40	; 0x28
 801c2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801c2b6:	e007      	b.n	801c2c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801c2b8:	697b      	ldr	r3, [r7, #20]
 801c2ba:	2220      	movs	r2, #32
 801c2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801c2c8:	6978      	ldr	r0, [r7, #20]
 801c2ca:	f7fe fc69 	bl	801aba0 <HAL_I2C_ErrorCallback>
}
 801c2ce:	bf00      	nop
 801c2d0:	3718      	adds	r7, #24
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	20000188 	.word	0x20000188
 801c2dc:	14f8b589 	.word	0x14f8b589

0801c2e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b084      	sub	sp, #16
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	60f8      	str	r0, [r7, #12]
 801c2e8:	60b9      	str	r1, [r7, #8]
 801c2ea:	603b      	str	r3, [r7, #0]
 801c2ec:	4613      	mov	r3, r2
 801c2ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c2f0:	e025      	b.n	801c33e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c2f2:	683b      	ldr	r3, [r7, #0]
 801c2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2f8:	d021      	beq.n	801c33e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c2fa:	f7fb fe89 	bl	8018010 <HAL_GetTick>
 801c2fe:	4602      	mov	r2, r0
 801c300:	69bb      	ldr	r3, [r7, #24]
 801c302:	1ad3      	subs	r3, r2, r3
 801c304:	683a      	ldr	r2, [r7, #0]
 801c306:	429a      	cmp	r2, r3
 801c308:	d302      	bcc.n	801c310 <I2C_WaitOnFlagUntilTimeout+0x30>
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d116      	bne.n	801c33e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801c310:	68fb      	ldr	r3, [r7, #12]
 801c312:	2200      	movs	r2, #0
 801c314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	2220      	movs	r2, #32
 801c31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	2200      	movs	r2, #0
 801c322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c32a:	f043 0220 	orr.w	r2, r3, #32
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	2200      	movs	r2, #0
 801c336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c33a:	2301      	movs	r3, #1
 801c33c:	e023      	b.n	801c386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c33e:	68bb      	ldr	r3, [r7, #8]
 801c340:	0c1b      	lsrs	r3, r3, #16
 801c342:	b2db      	uxtb	r3, r3
 801c344:	2b01      	cmp	r3, #1
 801c346:	d10d      	bne.n	801c364 <I2C_WaitOnFlagUntilTimeout+0x84>
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	695b      	ldr	r3, [r3, #20]
 801c34e:	43da      	mvns	r2, r3
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	4013      	ands	r3, r2
 801c354:	b29b      	uxth	r3, r3
 801c356:	2b00      	cmp	r3, #0
 801c358:	bf0c      	ite	eq
 801c35a:	2301      	moveq	r3, #1
 801c35c:	2300      	movne	r3, #0
 801c35e:	b2db      	uxtb	r3, r3
 801c360:	461a      	mov	r2, r3
 801c362:	e00c      	b.n	801c37e <I2C_WaitOnFlagUntilTimeout+0x9e>
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	699b      	ldr	r3, [r3, #24]
 801c36a:	43da      	mvns	r2, r3
 801c36c:	68bb      	ldr	r3, [r7, #8]
 801c36e:	4013      	ands	r3, r2
 801c370:	b29b      	uxth	r3, r3
 801c372:	2b00      	cmp	r3, #0
 801c374:	bf0c      	ite	eq
 801c376:	2301      	moveq	r3, #1
 801c378:	2300      	movne	r3, #0
 801c37a:	b2db      	uxtb	r3, r3
 801c37c:	461a      	mov	r2, r3
 801c37e:	79fb      	ldrb	r3, [r7, #7]
 801c380:	429a      	cmp	r2, r3
 801c382:	d0b6      	beq.n	801c2f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c384:	2300      	movs	r3, #0
}
 801c386:	4618      	mov	r0, r3
 801c388:	3710      	adds	r7, #16
 801c38a:	46bd      	mov	sp, r7
 801c38c:	bd80      	pop	{r7, pc}

0801c38e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801c38e:	b580      	push	{r7, lr}
 801c390:	b084      	sub	sp, #16
 801c392:	af00      	add	r7, sp, #0
 801c394:	60f8      	str	r0, [r7, #12]
 801c396:	60b9      	str	r1, [r7, #8]
 801c398:	607a      	str	r2, [r7, #4]
 801c39a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801c39c:	e051      	b.n	801c442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	695b      	ldr	r3, [r3, #20]
 801c3a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c3ac:	d123      	bne.n	801c3f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	681a      	ldr	r2, [r3, #0]
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c3bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801c3c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	2200      	movs	r2, #0
 801c3cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	2220      	movs	r2, #32
 801c3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2200      	movs	r2, #0
 801c3da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3e2:	f043 0204 	orr.w	r2, r3, #4
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801c3f2:	2301      	movs	r3, #1
 801c3f4:	e046      	b.n	801c484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3fc:	d021      	beq.n	801c442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c3fe:	f7fb fe07 	bl	8018010 <HAL_GetTick>
 801c402:	4602      	mov	r2, r0
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	1ad3      	subs	r3, r2, r3
 801c408:	687a      	ldr	r2, [r7, #4]
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d302      	bcc.n	801c414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d116      	bne.n	801c442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2200      	movs	r2, #0
 801c418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	2220      	movs	r2, #32
 801c41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2200      	movs	r2, #0
 801c426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c42e:	f043 0220 	orr.w	r2, r3, #32
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	2200      	movs	r2, #0
 801c43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c43e:	2301      	movs	r3, #1
 801c440:	e020      	b.n	801c484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801c442:	68bb      	ldr	r3, [r7, #8]
 801c444:	0c1b      	lsrs	r3, r3, #16
 801c446:	b2db      	uxtb	r3, r3
 801c448:	2b01      	cmp	r3, #1
 801c44a:	d10c      	bne.n	801c466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	695b      	ldr	r3, [r3, #20]
 801c452:	43da      	mvns	r2, r3
 801c454:	68bb      	ldr	r3, [r7, #8]
 801c456:	4013      	ands	r3, r2
 801c458:	b29b      	uxth	r3, r3
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	bf14      	ite	ne
 801c45e:	2301      	movne	r3, #1
 801c460:	2300      	moveq	r3, #0
 801c462:	b2db      	uxtb	r3, r3
 801c464:	e00b      	b.n	801c47e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	699b      	ldr	r3, [r3, #24]
 801c46c:	43da      	mvns	r2, r3
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	4013      	ands	r3, r2
 801c472:	b29b      	uxth	r3, r3
 801c474:	2b00      	cmp	r3, #0
 801c476:	bf14      	ite	ne
 801c478:	2301      	movne	r3, #1
 801c47a:	2300      	moveq	r3, #0
 801c47c:	b2db      	uxtb	r3, r3
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d18d      	bne.n	801c39e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801c482:	2300      	movs	r3, #0
}
 801c484:	4618      	mov	r0, r3
 801c486:	3710      	adds	r7, #16
 801c488:	46bd      	mov	sp, r7
 801c48a:	bd80      	pop	{r7, pc}

0801c48c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b084      	sub	sp, #16
 801c490:	af00      	add	r7, sp, #0
 801c492:	60f8      	str	r0, [r7, #12]
 801c494:	60b9      	str	r1, [r7, #8]
 801c496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c498:	e02d      	b.n	801c4f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801c49a:	68f8      	ldr	r0, [r7, #12]
 801c49c:	f000 f900 	bl	801c6a0 <I2C_IsAcknowledgeFailed>
 801c4a0:	4603      	mov	r3, r0
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d001      	beq.n	801c4aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801c4a6:	2301      	movs	r3, #1
 801c4a8:	e02d      	b.n	801c506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c4aa:	68bb      	ldr	r3, [r7, #8]
 801c4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4b0:	d021      	beq.n	801c4f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c4b2:	f7fb fdad 	bl	8018010 <HAL_GetTick>
 801c4b6:	4602      	mov	r2, r0
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	1ad3      	subs	r3, r2, r3
 801c4bc:	68ba      	ldr	r2, [r7, #8]
 801c4be:	429a      	cmp	r2, r3
 801c4c0:	d302      	bcc.n	801c4c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801c4c2:	68bb      	ldr	r3, [r7, #8]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d116      	bne.n	801c4f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	2220      	movs	r2, #32
 801c4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	2200      	movs	r2, #0
 801c4da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4e2:	f043 0220 	orr.w	r2, r3, #32
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c4f2:	2301      	movs	r3, #1
 801c4f4:	e007      	b.n	801c506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c4f6:	68fb      	ldr	r3, [r7, #12]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	695b      	ldr	r3, [r3, #20]
 801c4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c500:	2b80      	cmp	r3, #128	; 0x80
 801c502:	d1ca      	bne.n	801c49a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801c504:	2300      	movs	r3, #0
}
 801c506:	4618      	mov	r0, r3
 801c508:	3710      	adds	r7, #16
 801c50a:	46bd      	mov	sp, r7
 801c50c:	bd80      	pop	{r7, pc}

0801c50e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c50e:	b580      	push	{r7, lr}
 801c510:	b084      	sub	sp, #16
 801c512:	af00      	add	r7, sp, #0
 801c514:	60f8      	str	r0, [r7, #12]
 801c516:	60b9      	str	r1, [r7, #8]
 801c518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801c51a:	e02d      	b.n	801c578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801c51c:	68f8      	ldr	r0, [r7, #12]
 801c51e:	f000 f8bf 	bl	801c6a0 <I2C_IsAcknowledgeFailed>
 801c522:	4603      	mov	r3, r0
 801c524:	2b00      	cmp	r3, #0
 801c526:	d001      	beq.n	801c52c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801c528:	2301      	movs	r3, #1
 801c52a:	e02d      	b.n	801c588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c52c:	68bb      	ldr	r3, [r7, #8]
 801c52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c532:	d021      	beq.n	801c578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c534:	f7fb fd6c 	bl	8018010 <HAL_GetTick>
 801c538:	4602      	mov	r2, r0
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	1ad3      	subs	r3, r2, r3
 801c53e:	68ba      	ldr	r2, [r7, #8]
 801c540:	429a      	cmp	r2, r3
 801c542:	d302      	bcc.n	801c54a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801c544:	68bb      	ldr	r3, [r7, #8]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d116      	bne.n	801c578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	2200      	movs	r2, #0
 801c54e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	2220      	movs	r2, #32
 801c554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	2200      	movs	r2, #0
 801c55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c564:	f043 0220 	orr.w	r2, r3, #32
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	2200      	movs	r2, #0
 801c570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801c574:	2301      	movs	r3, #1
 801c576:	e007      	b.n	801c588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	695b      	ldr	r3, [r3, #20]
 801c57e:	f003 0304 	and.w	r3, r3, #4
 801c582:	2b04      	cmp	r3, #4
 801c584:	d1ca      	bne.n	801c51c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801c586:	2300      	movs	r3, #0
}
 801c588:	4618      	mov	r0, r3
 801c58a:	3710      	adds	r7, #16
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}

0801c590 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801c590:	b480      	push	{r7}
 801c592:	b085      	sub	sp, #20
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801c598:	2300      	movs	r3, #0
 801c59a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801c59c:	4b13      	ldr	r3, [pc, #76]	; (801c5ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	08db      	lsrs	r3, r3, #3
 801c5a2:	4a13      	ldr	r2, [pc, #76]	; (801c5f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801c5a4:	fba2 2303 	umull	r2, r3, r2, r3
 801c5a8:	0a1a      	lsrs	r2, r3, #8
 801c5aa:	4613      	mov	r3, r2
 801c5ac:	009b      	lsls	r3, r3, #2
 801c5ae:	4413      	add	r3, r2
 801c5b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	3b01      	subs	r3, #1
 801c5b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d107      	bne.n	801c5ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c5c2:	f043 0220 	orr.w	r2, r3, #32
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801c5ca:	2301      	movs	r3, #1
 801c5cc:	e008      	b.n	801c5e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c5d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c5dc:	d0e9      	beq.n	801c5b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801c5de:	2300      	movs	r3, #0
}
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	3714      	adds	r7, #20
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ea:	4770      	bx	lr
 801c5ec:	20000188 	.word	0x20000188
 801c5f0:	14f8b589 	.word	0x14f8b589

0801c5f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b084      	sub	sp, #16
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801c600:	e042      	b.n	801c688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	695b      	ldr	r3, [r3, #20]
 801c608:	f003 0310 	and.w	r3, r3, #16
 801c60c:	2b10      	cmp	r3, #16
 801c60e:	d119      	bne.n	801c644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	f06f 0210 	mvn.w	r2, #16
 801c618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	2200      	movs	r2, #0
 801c61e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	2220      	movs	r2, #32
 801c624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	2200      	movs	r2, #0
 801c62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	2200      	movs	r2, #0
 801c63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801c640:	2301      	movs	r3, #1
 801c642:	e029      	b.n	801c698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c644:	f7fb fce4 	bl	8018010 <HAL_GetTick>
 801c648:	4602      	mov	r2, r0
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	1ad3      	subs	r3, r2, r3
 801c64e:	68ba      	ldr	r2, [r7, #8]
 801c650:	429a      	cmp	r2, r3
 801c652:	d302      	bcc.n	801c65a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d116      	bne.n	801c688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	2200      	movs	r2, #0
 801c65e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	2220      	movs	r2, #32
 801c664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	2200      	movs	r2, #0
 801c66c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c674:	f043 0220 	orr.w	r2, r3, #32
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	2200      	movs	r2, #0
 801c680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801c684:	2301      	movs	r3, #1
 801c686:	e007      	b.n	801c698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	695b      	ldr	r3, [r3, #20]
 801c68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c692:	2b40      	cmp	r3, #64	; 0x40
 801c694:	d1b5      	bne.n	801c602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801c696:	2300      	movs	r3, #0
}
 801c698:	4618      	mov	r0, r3
 801c69a:	3710      	adds	r7, #16
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}

0801c6a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801c6a0:	b480      	push	{r7}
 801c6a2:	b083      	sub	sp, #12
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	695b      	ldr	r3, [r3, #20]
 801c6ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c6b6:	d11b      	bne.n	801c6f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801c6c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	2220      	movs	r2, #32
 801c6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c6dc:	f043 0204 	orr.w	r2, r3, #4
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	2200      	movs	r2, #0
 801c6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	e000      	b.n	801c6f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801c6f0:	2300      	movs	r3, #0
}
 801c6f2:	4618      	mov	r0, r3
 801c6f4:	370c      	adds	r7, #12
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fc:	4770      	bx	lr

0801c6fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801c6fe:	b480      	push	{r7}
 801c700:	b083      	sub	sp, #12
 801c702:	af00      	add	r7, sp, #0
 801c704:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c70a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801c70e:	d103      	bne.n	801c718 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	2201      	movs	r2, #1
 801c714:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801c716:	e007      	b.n	801c728 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c71c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801c720:	d102      	bne.n	801c728 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	2208      	movs	r2, #8
 801c726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801c728:	bf00      	nop
 801c72a:	370c      	adds	r7, #12
 801c72c:	46bd      	mov	sp, r7
 801c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c732:	4770      	bx	lr

0801c734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801c734:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c736:	b08f      	sub	sp, #60	; 0x3c
 801c738:	af0a      	add	r7, sp, #40	; 0x28
 801c73a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d101      	bne.n	801c746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801c742:	2301      	movs	r3, #1
 801c744:	e10f      	b.n	801c966 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 801c752:	b2db      	uxtb	r3, r3
 801c754:	2b00      	cmp	r3, #0
 801c756:	d106      	bne.n	801c766 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	2200      	movs	r2, #0
 801c75c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	f00b f915 	bl	8027990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	2203      	movs	r2, #3
 801c76a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801c76e:	68bb      	ldr	r3, [r7, #8]
 801c770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c776:	2b00      	cmp	r3, #0
 801c778:	d102      	bne.n	801c780 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	2200      	movs	r2, #0
 801c77e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	4618      	mov	r0, r3
 801c786:	f004 f8b4 	bl	80208f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	603b      	str	r3, [r7, #0]
 801c790:	687e      	ldr	r6, [r7, #4]
 801c792:	466d      	mov	r5, sp
 801c794:	f106 0410 	add.w	r4, r6, #16
 801c798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c79a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c79c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c79e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c7a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c7a4:	e885 0003 	stmia.w	r5, {r0, r1}
 801c7a8:	1d33      	adds	r3, r6, #4
 801c7aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c7ac:	6838      	ldr	r0, [r7, #0]
 801c7ae:	f003 ff8b 	bl	80206c8 <USB_CoreInit>
 801c7b2:	4603      	mov	r3, r0
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d005      	beq.n	801c7c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	2202      	movs	r2, #2
 801c7bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 801c7c0:	2301      	movs	r3, #1
 801c7c2:	e0d0      	b.n	801c966 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	2100      	movs	r1, #0
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f004 f8a2 	bl	8020914 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	73fb      	strb	r3, [r7, #15]
 801c7d4:	e04a      	b.n	801c86c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801c7d6:	7bfa      	ldrb	r2, [r7, #15]
 801c7d8:	6879      	ldr	r1, [r7, #4]
 801c7da:	4613      	mov	r3, r2
 801c7dc:	00db      	lsls	r3, r3, #3
 801c7de:	4413      	add	r3, r2
 801c7e0:	009b      	lsls	r3, r3, #2
 801c7e2:	440b      	add	r3, r1
 801c7e4:	333d      	adds	r3, #61	; 0x3d
 801c7e6:	2201      	movs	r2, #1
 801c7e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801c7ea:	7bfa      	ldrb	r2, [r7, #15]
 801c7ec:	6879      	ldr	r1, [r7, #4]
 801c7ee:	4613      	mov	r3, r2
 801c7f0:	00db      	lsls	r3, r3, #3
 801c7f2:	4413      	add	r3, r2
 801c7f4:	009b      	lsls	r3, r3, #2
 801c7f6:	440b      	add	r3, r1
 801c7f8:	333c      	adds	r3, #60	; 0x3c
 801c7fa:	7bfa      	ldrb	r2, [r7, #15]
 801c7fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801c7fe:	7bfa      	ldrb	r2, [r7, #15]
 801c800:	7bfb      	ldrb	r3, [r7, #15]
 801c802:	b298      	uxth	r0, r3
 801c804:	6879      	ldr	r1, [r7, #4]
 801c806:	4613      	mov	r3, r2
 801c808:	00db      	lsls	r3, r3, #3
 801c80a:	4413      	add	r3, r2
 801c80c:	009b      	lsls	r3, r3, #2
 801c80e:	440b      	add	r3, r1
 801c810:	3344      	adds	r3, #68	; 0x44
 801c812:	4602      	mov	r2, r0
 801c814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801c816:	7bfa      	ldrb	r2, [r7, #15]
 801c818:	6879      	ldr	r1, [r7, #4]
 801c81a:	4613      	mov	r3, r2
 801c81c:	00db      	lsls	r3, r3, #3
 801c81e:	4413      	add	r3, r2
 801c820:	009b      	lsls	r3, r3, #2
 801c822:	440b      	add	r3, r1
 801c824:	3340      	adds	r3, #64	; 0x40
 801c826:	2200      	movs	r2, #0
 801c828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801c82a:	7bfa      	ldrb	r2, [r7, #15]
 801c82c:	6879      	ldr	r1, [r7, #4]
 801c82e:	4613      	mov	r3, r2
 801c830:	00db      	lsls	r3, r3, #3
 801c832:	4413      	add	r3, r2
 801c834:	009b      	lsls	r3, r3, #2
 801c836:	440b      	add	r3, r1
 801c838:	3348      	adds	r3, #72	; 0x48
 801c83a:	2200      	movs	r2, #0
 801c83c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801c83e:	7bfa      	ldrb	r2, [r7, #15]
 801c840:	6879      	ldr	r1, [r7, #4]
 801c842:	4613      	mov	r3, r2
 801c844:	00db      	lsls	r3, r3, #3
 801c846:	4413      	add	r3, r2
 801c848:	009b      	lsls	r3, r3, #2
 801c84a:	440b      	add	r3, r1
 801c84c:	334c      	adds	r3, #76	; 0x4c
 801c84e:	2200      	movs	r2, #0
 801c850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801c852:	7bfa      	ldrb	r2, [r7, #15]
 801c854:	6879      	ldr	r1, [r7, #4]
 801c856:	4613      	mov	r3, r2
 801c858:	00db      	lsls	r3, r3, #3
 801c85a:	4413      	add	r3, r2
 801c85c:	009b      	lsls	r3, r3, #2
 801c85e:	440b      	add	r3, r1
 801c860:	3354      	adds	r3, #84	; 0x54
 801c862:	2200      	movs	r2, #0
 801c864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c866:	7bfb      	ldrb	r3, [r7, #15]
 801c868:	3301      	adds	r3, #1
 801c86a:	73fb      	strb	r3, [r7, #15]
 801c86c:	7bfa      	ldrb	r2, [r7, #15]
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	429a      	cmp	r2, r3
 801c874:	d3af      	bcc.n	801c7d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c876:	2300      	movs	r3, #0
 801c878:	73fb      	strb	r3, [r7, #15]
 801c87a:	e044      	b.n	801c906 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801c87c:	7bfa      	ldrb	r2, [r7, #15]
 801c87e:	6879      	ldr	r1, [r7, #4]
 801c880:	4613      	mov	r3, r2
 801c882:	00db      	lsls	r3, r3, #3
 801c884:	4413      	add	r3, r2
 801c886:	009b      	lsls	r3, r3, #2
 801c888:	440b      	add	r3, r1
 801c88a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 801c88e:	2200      	movs	r2, #0
 801c890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801c892:	7bfa      	ldrb	r2, [r7, #15]
 801c894:	6879      	ldr	r1, [r7, #4]
 801c896:	4613      	mov	r3, r2
 801c898:	00db      	lsls	r3, r3, #3
 801c89a:	4413      	add	r3, r2
 801c89c:	009b      	lsls	r3, r3, #2
 801c89e:	440b      	add	r3, r1
 801c8a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801c8a4:	7bfa      	ldrb	r2, [r7, #15]
 801c8a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801c8a8:	7bfa      	ldrb	r2, [r7, #15]
 801c8aa:	6879      	ldr	r1, [r7, #4]
 801c8ac:	4613      	mov	r3, r2
 801c8ae:	00db      	lsls	r3, r3, #3
 801c8b0:	4413      	add	r3, r2
 801c8b2:	009b      	lsls	r3, r3, #2
 801c8b4:	440b      	add	r3, r1
 801c8b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801c8be:	7bfa      	ldrb	r2, [r7, #15]
 801c8c0:	6879      	ldr	r1, [r7, #4]
 801c8c2:	4613      	mov	r3, r2
 801c8c4:	00db      	lsls	r3, r3, #3
 801c8c6:	4413      	add	r3, r2
 801c8c8:	009b      	lsls	r3, r3, #2
 801c8ca:	440b      	add	r3, r1
 801c8cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801c8d4:	7bfa      	ldrb	r2, [r7, #15]
 801c8d6:	6879      	ldr	r1, [r7, #4]
 801c8d8:	4613      	mov	r3, r2
 801c8da:	00db      	lsls	r3, r3, #3
 801c8dc:	4413      	add	r3, r2
 801c8de:	009b      	lsls	r3, r3, #2
 801c8e0:	440b      	add	r3, r1
 801c8e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801c8ea:	7bfa      	ldrb	r2, [r7, #15]
 801c8ec:	6879      	ldr	r1, [r7, #4]
 801c8ee:	4613      	mov	r3, r2
 801c8f0:	00db      	lsls	r3, r3, #3
 801c8f2:	4413      	add	r3, r2
 801c8f4:	009b      	lsls	r3, r3, #2
 801c8f6:	440b      	add	r3, r1
 801c8f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c900:	7bfb      	ldrb	r3, [r7, #15]
 801c902:	3301      	adds	r3, #1
 801c904:	73fb      	strb	r3, [r7, #15]
 801c906:	7bfa      	ldrb	r2, [r7, #15]
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	685b      	ldr	r3, [r3, #4]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d3b5      	bcc.n	801c87c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	603b      	str	r3, [r7, #0]
 801c916:	687e      	ldr	r6, [r7, #4]
 801c918:	466d      	mov	r5, sp
 801c91a:	f106 0410 	add.w	r4, r6, #16
 801c91e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c926:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c92a:	e885 0003 	stmia.w	r5, {r0, r1}
 801c92e:	1d33      	adds	r3, r6, #4
 801c930:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c932:	6838      	ldr	r0, [r7, #0]
 801c934:	f004 f83a 	bl	80209ac <USB_DevInit>
 801c938:	4603      	mov	r3, r0
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d005      	beq.n	801c94a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	2202      	movs	r2, #2
 801c942:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 801c946:	2301      	movs	r3, #1
 801c948:	e00d      	b.n	801c966 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	2200      	movs	r2, #0
 801c94e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	2201      	movs	r2, #1
 801c956:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	4618      	mov	r0, r3
 801c960:	f005 f989 	bl	8021c76 <USB_DevDisconnect>

  return HAL_OK;
 801c964:	2300      	movs	r3, #0
}
 801c966:	4618      	mov	r0, r3
 801c968:	3714      	adds	r7, #20
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c96e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801c96e:	b580      	push	{r7, lr}
 801c970:	b084      	sub	sp, #16
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801c982:	2b01      	cmp	r3, #1
 801c984:	d101      	bne.n	801c98a <HAL_PCD_Start+0x1c>
 801c986:	2302      	movs	r3, #2
 801c988:	e020      	b.n	801c9cc <HAL_PCD_Start+0x5e>
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	2201      	movs	r2, #1
 801c98e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c996:	2b01      	cmp	r3, #1
 801c998:	d109      	bne.n	801c9ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801c99e:	2b01      	cmp	r3, #1
 801c9a0:	d005      	beq.n	801c9ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f003 ff8c 	bl	80208d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f005 f939 	bl	8021c34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801c9ca:	2300      	movs	r3, #0
}
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	3710      	adds	r7, #16
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bd80      	pop	{r7, pc}

0801c9d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801c9d4:	b590      	push	{r4, r7, lr}
 801c9d6:	b08d      	sub	sp, #52	; 0x34
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c9e2:	6a3b      	ldr	r3, [r7, #32]
 801c9e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f005 f9f7 	bl	8021dde <USB_GetMode>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	f040 848a 	bne.w	801d30c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	f005 f95b 	bl	8021cb8 <USB_ReadInterrupts>
 801ca02:	4603      	mov	r3, r0
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	f000 8480 	beq.w	801d30a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801ca0a:	69fb      	ldr	r3, [r7, #28]
 801ca0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ca10:	689b      	ldr	r3, [r3, #8]
 801ca12:	0a1b      	lsrs	r3, r3, #8
 801ca14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	4618      	mov	r0, r3
 801ca24:	f005 f948 	bl	8021cb8 <USB_ReadInterrupts>
 801ca28:	4603      	mov	r3, r0
 801ca2a:	f003 0302 	and.w	r3, r3, #2
 801ca2e:	2b02      	cmp	r3, #2
 801ca30:	d107      	bne.n	801ca42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	695a      	ldr	r2, [r3, #20]
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	f002 0202 	and.w	r2, r2, #2
 801ca40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	4618      	mov	r0, r3
 801ca48:	f005 f936 	bl	8021cb8 <USB_ReadInterrupts>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	f003 0310 	and.w	r3, r3, #16
 801ca52:	2b10      	cmp	r3, #16
 801ca54:	d161      	bne.n	801cb1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	699a      	ldr	r2, [r3, #24]
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	f022 0210 	bic.w	r2, r2, #16
 801ca64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 801ca66:	6a3b      	ldr	r3, [r7, #32]
 801ca68:	6a1b      	ldr	r3, [r3, #32]
 801ca6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801ca6c:	69bb      	ldr	r3, [r7, #24]
 801ca6e:	f003 020f 	and.w	r2, r3, #15
 801ca72:	4613      	mov	r3, r2
 801ca74:	00db      	lsls	r3, r3, #3
 801ca76:	4413      	add	r3, r2
 801ca78:	009b      	lsls	r3, r3, #2
 801ca7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801ca7e:	687a      	ldr	r2, [r7, #4]
 801ca80:	4413      	add	r3, r2
 801ca82:	3304      	adds	r3, #4
 801ca84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801ca86:	69bb      	ldr	r3, [r7, #24]
 801ca88:	0c5b      	lsrs	r3, r3, #17
 801ca8a:	f003 030f 	and.w	r3, r3, #15
 801ca8e:	2b02      	cmp	r3, #2
 801ca90:	d124      	bne.n	801cadc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 801ca92:	69ba      	ldr	r2, [r7, #24]
 801ca94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801ca98:	4013      	ands	r3, r2
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d035      	beq.n	801cb0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801ca9e:	697b      	ldr	r3, [r7, #20]
 801caa0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 801caa2:	69bb      	ldr	r3, [r7, #24]
 801caa4:	091b      	lsrs	r3, r3, #4
 801caa6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801caa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801caac:	b29b      	uxth	r3, r3
 801caae:	461a      	mov	r2, r3
 801cab0:	6a38      	ldr	r0, [r7, #32]
 801cab2:	f004 ff6d 	bl	8021990 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	691a      	ldr	r2, [r3, #16]
 801caba:	69bb      	ldr	r3, [r7, #24]
 801cabc:	091b      	lsrs	r3, r3, #4
 801cabe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cac2:	441a      	add	r2, r3
 801cac4:	697b      	ldr	r3, [r7, #20]
 801cac6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	6a1a      	ldr	r2, [r3, #32]
 801cacc:	69bb      	ldr	r3, [r7, #24]
 801cace:	091b      	lsrs	r3, r3, #4
 801cad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cad4:	441a      	add	r2, r3
 801cad6:	697b      	ldr	r3, [r7, #20]
 801cad8:	621a      	str	r2, [r3, #32]
 801cada:	e016      	b.n	801cb0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801cadc:	69bb      	ldr	r3, [r7, #24]
 801cade:	0c5b      	lsrs	r3, r3, #17
 801cae0:	f003 030f 	and.w	r3, r3, #15
 801cae4:	2b06      	cmp	r3, #6
 801cae6:	d110      	bne.n	801cb0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801caee:	2208      	movs	r2, #8
 801caf0:	4619      	mov	r1, r3
 801caf2:	6a38      	ldr	r0, [r7, #32]
 801caf4:	f004 ff4c 	bl	8021990 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801caf8:	697b      	ldr	r3, [r7, #20]
 801cafa:	6a1a      	ldr	r2, [r3, #32]
 801cafc:	69bb      	ldr	r3, [r7, #24]
 801cafe:	091b      	lsrs	r3, r3, #4
 801cb00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cb04:	441a      	add	r2, r3
 801cb06:	697b      	ldr	r3, [r7, #20]
 801cb08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	699a      	ldr	r2, [r3, #24]
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	f042 0210 	orr.w	r2, r2, #16
 801cb18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	4618      	mov	r0, r3
 801cb20:	f005 f8ca 	bl	8021cb8 <USB_ReadInterrupts>
 801cb24:	4603      	mov	r3, r0
 801cb26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cb2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801cb2e:	f040 80a7 	bne.w	801cc80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 801cb32:	2300      	movs	r3, #0
 801cb34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f005 f8cf 	bl	8021cde <USB_ReadDevAllOutEpInterrupt>
 801cb40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801cb42:	e099      	b.n	801cc78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 801cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb46:	f003 0301 	and.w	r3, r3, #1
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	f000 808e 	beq.w	801cc6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb56:	b2d2      	uxtb	r2, r2
 801cb58:	4611      	mov	r1, r2
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f005 f8f3 	bl	8021d46 <USB_ReadDevOutEPInterrupt>
 801cb60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801cb62:	693b      	ldr	r3, [r7, #16]
 801cb64:	f003 0301 	and.w	r3, r3, #1
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d00c      	beq.n	801cb86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb6e:	015a      	lsls	r2, r3, #5
 801cb70:	69fb      	ldr	r3, [r7, #28]
 801cb72:	4413      	add	r3, r2
 801cb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cb78:	461a      	mov	r2, r3
 801cb7a:	2301      	movs	r3, #1
 801cb7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801cb7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cb80:	6878      	ldr	r0, [r7, #4]
 801cb82:	f000 fec3 	bl	801d90c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801cb86:	693b      	ldr	r3, [r7, #16]
 801cb88:	f003 0308 	and.w	r3, r3, #8
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d00c      	beq.n	801cbaa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb92:	015a      	lsls	r2, r3, #5
 801cb94:	69fb      	ldr	r3, [r7, #28]
 801cb96:	4413      	add	r3, r2
 801cb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cb9c:	461a      	mov	r2, r3
 801cb9e:	2308      	movs	r3, #8
 801cba0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801cba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cba4:	6878      	ldr	r0, [r7, #4]
 801cba6:	f000 ff99 	bl	801dadc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801cbaa:	693b      	ldr	r3, [r7, #16]
 801cbac:	f003 0310 	and.w	r3, r3, #16
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d008      	beq.n	801cbc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbb6:	015a      	lsls	r2, r3, #5
 801cbb8:	69fb      	ldr	r3, [r7, #28]
 801cbba:	4413      	add	r3, r2
 801cbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cbc0:	461a      	mov	r2, r3
 801cbc2:	2310      	movs	r3, #16
 801cbc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 801cbc6:	693b      	ldr	r3, [r7, #16]
 801cbc8:	f003 0302 	and.w	r3, r3, #2
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d030      	beq.n	801cc32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 801cbd0:	6a3b      	ldr	r3, [r7, #32]
 801cbd2:	695b      	ldr	r3, [r3, #20]
 801cbd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cbd8:	2b80      	cmp	r3, #128	; 0x80
 801cbda:	d109      	bne.n	801cbf0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801cbdc:	69fb      	ldr	r3, [r7, #28]
 801cbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cbe2:	685b      	ldr	r3, [r3, #4]
 801cbe4:	69fa      	ldr	r2, [r7, #28]
 801cbe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cbea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801cbee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 801cbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cbf2:	4613      	mov	r3, r2
 801cbf4:	00db      	lsls	r3, r3, #3
 801cbf6:	4413      	add	r3, r2
 801cbf8:	009b      	lsls	r3, r3, #2
 801cbfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801cbfe:	687a      	ldr	r2, [r7, #4]
 801cc00:	4413      	add	r3, r2
 801cc02:	3304      	adds	r3, #4
 801cc04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801cc06:	697b      	ldr	r3, [r7, #20]
 801cc08:	78db      	ldrb	r3, [r3, #3]
 801cc0a:	2b01      	cmp	r3, #1
 801cc0c:	d108      	bne.n	801cc20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 801cc0e:	697b      	ldr	r3, [r7, #20]
 801cc10:	2200      	movs	r2, #0
 801cc12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc16:	b2db      	uxtb	r3, r3
 801cc18:	4619      	mov	r1, r3
 801cc1a:	6878      	ldr	r0, [r7, #4]
 801cc1c:	f00a ffbe 	bl	8027b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 801cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc22:	015a      	lsls	r2, r3, #5
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	4413      	add	r3, r2
 801cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cc2c:	461a      	mov	r2, r3
 801cc2e:	2302      	movs	r3, #2
 801cc30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801cc32:	693b      	ldr	r3, [r7, #16]
 801cc34:	f003 0320 	and.w	r3, r3, #32
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d008      	beq.n	801cc4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc3e:	015a      	lsls	r2, r3, #5
 801cc40:	69fb      	ldr	r3, [r7, #28]
 801cc42:	4413      	add	r3, r2
 801cc44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cc48:	461a      	mov	r2, r3
 801cc4a:	2320      	movs	r3, #32
 801cc4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801cc4e:	693b      	ldr	r3, [r7, #16]
 801cc50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d009      	beq.n	801cc6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc5a:	015a      	lsls	r2, r3, #5
 801cc5c:	69fb      	ldr	r3, [r7, #28]
 801cc5e:	4413      	add	r3, r2
 801cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cc64:	461a      	mov	r2, r3
 801cc66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801cc6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc6e:	3301      	adds	r3, #1
 801cc70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc74:	085b      	lsrs	r3, r3, #1
 801cc76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	f47f af62 	bne.w	801cb44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	4618      	mov	r0, r3
 801cc86:	f005 f817 	bl	8021cb8 <USB_ReadInterrupts>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cc90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801cc94:	f040 80db 	bne.w	801ce4e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f005 f838 	bl	8021d12 <USB_ReadDevAllInEpInterrupt>
 801cca2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801cca4:	2300      	movs	r3, #0
 801cca6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801cca8:	e0cd      	b.n	801ce46 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801ccaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccac:	f003 0301 	and.w	r3, r3, #1
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	f000 80c2 	beq.w	801ce3a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ccbc:	b2d2      	uxtb	r2, r2
 801ccbe:	4611      	mov	r1, r2
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	f005 f85e 	bl	8021d82 <USB_ReadDevInEPInterrupt>
 801ccc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801ccc8:	693b      	ldr	r3, [r7, #16]
 801ccca:	f003 0301 	and.w	r3, r3, #1
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d057      	beq.n	801cd82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccd4:	f003 030f 	and.w	r3, r3, #15
 801ccd8:	2201      	movs	r2, #1
 801ccda:	fa02 f303 	lsl.w	r3, r2, r3
 801ccde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801cce0:	69fb      	ldr	r3, [r7, #28]
 801cce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	43db      	mvns	r3, r3
 801ccec:	69f9      	ldr	r1, [r7, #28]
 801ccee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ccf2:	4013      	ands	r3, r2
 801ccf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf8:	015a      	lsls	r2, r3, #5
 801ccfa:	69fb      	ldr	r3, [r7, #28]
 801ccfc:	4413      	add	r3, r2
 801ccfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cd02:	461a      	mov	r2, r3
 801cd04:	2301      	movs	r3, #1
 801cd06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	691b      	ldr	r3, [r3, #16]
 801cd0c:	2b01      	cmp	r3, #1
 801cd0e:	d132      	bne.n	801cd76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801cd10:	6879      	ldr	r1, [r7, #4]
 801cd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd14:	4613      	mov	r3, r2
 801cd16:	00db      	lsls	r3, r3, #3
 801cd18:	4413      	add	r3, r2
 801cd1a:	009b      	lsls	r3, r3, #2
 801cd1c:	440b      	add	r3, r1
 801cd1e:	334c      	adds	r3, #76	; 0x4c
 801cd20:	6819      	ldr	r1, [r3, #0]
 801cd22:	6878      	ldr	r0, [r7, #4]
 801cd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd26:	4613      	mov	r3, r2
 801cd28:	00db      	lsls	r3, r3, #3
 801cd2a:	4413      	add	r3, r2
 801cd2c:	009b      	lsls	r3, r3, #2
 801cd2e:	4403      	add	r3, r0
 801cd30:	3348      	adds	r3, #72	; 0x48
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	4419      	add	r1, r3
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd3a:	4613      	mov	r3, r2
 801cd3c:	00db      	lsls	r3, r3, #3
 801cd3e:	4413      	add	r3, r2
 801cd40:	009b      	lsls	r3, r3, #2
 801cd42:	4403      	add	r3, r0
 801cd44:	334c      	adds	r3, #76	; 0x4c
 801cd46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d113      	bne.n	801cd76 <HAL_PCD_IRQHandler+0x3a2>
 801cd4e:	6879      	ldr	r1, [r7, #4]
 801cd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd52:	4613      	mov	r3, r2
 801cd54:	00db      	lsls	r3, r3, #3
 801cd56:	4413      	add	r3, r2
 801cd58:	009b      	lsls	r3, r3, #2
 801cd5a:	440b      	add	r3, r1
 801cd5c:	3354      	adds	r3, #84	; 0x54
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d108      	bne.n	801cd76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	6818      	ldr	r0, [r3, #0]
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801cd6e:	461a      	mov	r2, r3
 801cd70:	2101      	movs	r1, #1
 801cd72:	f005 f865 	bl	8021e40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd78:	b2db      	uxtb	r3, r3
 801cd7a:	4619      	mov	r1, r3
 801cd7c:	6878      	ldr	r0, [r7, #4]
 801cd7e:	f00a fe88 	bl	8027a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801cd82:	693b      	ldr	r3, [r7, #16]
 801cd84:	f003 0308 	and.w	r3, r3, #8
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d008      	beq.n	801cd9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd8e:	015a      	lsls	r2, r3, #5
 801cd90:	69fb      	ldr	r3, [r7, #28]
 801cd92:	4413      	add	r3, r2
 801cd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cd98:	461a      	mov	r2, r3
 801cd9a:	2308      	movs	r3, #8
 801cd9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801cd9e:	693b      	ldr	r3, [r7, #16]
 801cda0:	f003 0310 	and.w	r3, r3, #16
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d008      	beq.n	801cdba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdaa:	015a      	lsls	r2, r3, #5
 801cdac:	69fb      	ldr	r3, [r7, #28]
 801cdae:	4413      	add	r3, r2
 801cdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cdb4:	461a      	mov	r2, r3
 801cdb6:	2310      	movs	r3, #16
 801cdb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801cdba:	693b      	ldr	r3, [r7, #16]
 801cdbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d008      	beq.n	801cdd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc6:	015a      	lsls	r2, r3, #5
 801cdc8:	69fb      	ldr	r3, [r7, #28]
 801cdca:	4413      	add	r3, r2
 801cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	2340      	movs	r3, #64	; 0x40
 801cdd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801cdd6:	693b      	ldr	r3, [r7, #16]
 801cdd8:	f003 0302 	and.w	r3, r3, #2
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d023      	beq.n	801ce28 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 801cde0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cde2:	6a38      	ldr	r0, [r7, #32]
 801cde4:	f003 ff46 	bl	8020c74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 801cde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdea:	4613      	mov	r3, r2
 801cdec:	00db      	lsls	r3, r3, #3
 801cdee:	4413      	add	r3, r2
 801cdf0:	009b      	lsls	r3, r3, #2
 801cdf2:	3338      	adds	r3, #56	; 0x38
 801cdf4:	687a      	ldr	r2, [r7, #4]
 801cdf6:	4413      	add	r3, r2
 801cdf8:	3304      	adds	r3, #4
 801cdfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	78db      	ldrb	r3, [r3, #3]
 801ce00:	2b01      	cmp	r3, #1
 801ce02:	d108      	bne.n	801ce16 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 801ce04:	697b      	ldr	r3, [r7, #20]
 801ce06:	2200      	movs	r2, #0
 801ce08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0c:	b2db      	uxtb	r3, r3
 801ce0e:	4619      	mov	r1, r3
 801ce10:	6878      	ldr	r0, [r7, #4]
 801ce12:	f00a fed5 	bl	8027bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce18:	015a      	lsls	r2, r3, #5
 801ce1a:	69fb      	ldr	r3, [r7, #28]
 801ce1c:	4413      	add	r3, r2
 801ce1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ce22:	461a      	mov	r2, r3
 801ce24:	2302      	movs	r3, #2
 801ce26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801ce28:	693b      	ldr	r3, [r7, #16]
 801ce2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d003      	beq.n	801ce3a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801ce32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ce34:	6878      	ldr	r0, [r7, #4]
 801ce36:	f000 fcdb 	bl	801d7f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce3c:	3301      	adds	r3, #1
 801ce3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce42:	085b      	lsrs	r3, r3, #1
 801ce44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	f47f af2e 	bne.w	801ccaa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	4618      	mov	r0, r3
 801ce54:	f004 ff30 	bl	8021cb8 <USB_ReadInterrupts>
 801ce58:	4603      	mov	r3, r0
 801ce5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ce5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ce62:	d122      	bne.n	801ceaa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801ce64:	69fb      	ldr	r3, [r7, #28]
 801ce66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ce6a:	685b      	ldr	r3, [r3, #4]
 801ce6c:	69fa      	ldr	r2, [r7, #28]
 801ce6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ce72:	f023 0301 	bic.w	r3, r3, #1
 801ce76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801ce7e:	2b01      	cmp	r3, #1
 801ce80:	d108      	bne.n	801ce94 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2200      	movs	r2, #0
 801ce86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801ce8a:	2100      	movs	r1, #0
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f000 fec3 	bl	801dc18 <HAL_PCDEx_LPM_Callback>
 801ce92:	e002      	b.n	801ce9a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801ce94:	6878      	ldr	r0, [r7, #4]
 801ce96:	f00a fe73 	bl	8027b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	695a      	ldr	r2, [r3, #20]
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801cea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f004 ff02 	bl	8021cb8 <USB_ReadInterrupts>
 801ceb4:	4603      	mov	r3, r0
 801ceb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ceba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cebe:	d112      	bne.n	801cee6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801cec0:	69fb      	ldr	r3, [r7, #28]
 801cec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cec6:	689b      	ldr	r3, [r3, #8]
 801cec8:	f003 0301 	and.w	r3, r3, #1
 801cecc:	2b01      	cmp	r3, #1
 801cece:	d102      	bne.n	801ced6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801ced0:	6878      	ldr	r0, [r7, #4]
 801ced2:	f00a fe2f 	bl	8027b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	695a      	ldr	r2, [r3, #20]
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801cee4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4618      	mov	r0, r3
 801ceec:	f004 fee4 	bl	8021cb8 <USB_ReadInterrupts>
 801cef0:	4603      	mov	r3, r0
 801cef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cefa:	f040 80b7 	bne.w	801d06c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801cefe:	69fb      	ldr	r3, [r7, #28]
 801cf00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cf04:	685b      	ldr	r3, [r3, #4]
 801cf06:	69fa      	ldr	r2, [r7, #28]
 801cf08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cf0c:	f023 0301 	bic.w	r3, r3, #1
 801cf10:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	2110      	movs	r1, #16
 801cf18:	4618      	mov	r0, r3
 801cf1a:	f003 feab 	bl	8020c74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801cf1e:	2300      	movs	r3, #0
 801cf20:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf22:	e046      	b.n	801cfb2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf26:	015a      	lsls	r2, r3, #5
 801cf28:	69fb      	ldr	r3, [r7, #28]
 801cf2a:	4413      	add	r3, r2
 801cf2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf30:	461a      	mov	r2, r3
 801cf32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801cf36:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf3a:	015a      	lsls	r2, r3, #5
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	4413      	add	r3, r2
 801cf40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf48:	0151      	lsls	r1, r2, #5
 801cf4a:	69fa      	ldr	r2, [r7, #28]
 801cf4c:	440a      	add	r2, r1
 801cf4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cf52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801cf56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf5a:	015a      	lsls	r2, r3, #5
 801cf5c:	69fb      	ldr	r3, [r7, #28]
 801cf5e:	4413      	add	r3, r2
 801cf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cf64:	461a      	mov	r2, r3
 801cf66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801cf6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf6e:	015a      	lsls	r2, r3, #5
 801cf70:	69fb      	ldr	r3, [r7, #28]
 801cf72:	4413      	add	r3, r2
 801cf74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf7c:	0151      	lsls	r1, r2, #5
 801cf7e:	69fa      	ldr	r2, [r7, #28]
 801cf80:	440a      	add	r2, r1
 801cf82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cf86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801cf8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf8e:	015a      	lsls	r2, r3, #5
 801cf90:	69fb      	ldr	r3, [r7, #28]
 801cf92:	4413      	add	r3, r2
 801cf94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cf9c:	0151      	lsls	r1, r2, #5
 801cf9e:	69fa      	ldr	r2, [r7, #28]
 801cfa0:	440a      	add	r2, r1
 801cfa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801cfa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cfaa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfae:	3301      	adds	r3, #1
 801cfb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	685b      	ldr	r3, [r3, #4]
 801cfb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cfb8:	429a      	cmp	r2, r3
 801cfba:	d3b3      	bcc.n	801cf24 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801cfbc:	69fb      	ldr	r3, [r7, #28]
 801cfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cfc2:	69db      	ldr	r3, [r3, #28]
 801cfc4:	69fa      	ldr	r2, [r7, #28]
 801cfc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cfca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801cfce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d016      	beq.n	801d006 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801cfd8:	69fb      	ldr	r3, [r7, #28]
 801cfda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cfde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cfe2:	69fa      	ldr	r2, [r7, #28]
 801cfe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cfe8:	f043 030b 	orr.w	r3, r3, #11
 801cfec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801cff0:	69fb      	ldr	r3, [r7, #28]
 801cff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801cff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cff8:	69fa      	ldr	r2, [r7, #28]
 801cffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801cffe:	f043 030b 	orr.w	r3, r3, #11
 801d002:	6453      	str	r3, [r2, #68]	; 0x44
 801d004:	e015      	b.n	801d032 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801d006:	69fb      	ldr	r3, [r7, #28]
 801d008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d00c:	695b      	ldr	r3, [r3, #20]
 801d00e:	69fa      	ldr	r2, [r7, #28]
 801d010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d018:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801d01c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801d01e:	69fb      	ldr	r3, [r7, #28]
 801d020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d024:	691b      	ldr	r3, [r3, #16]
 801d026:	69fa      	ldr	r2, [r7, #28]
 801d028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d02c:	f043 030b 	orr.w	r3, r3, #11
 801d030:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801d032:	69fb      	ldr	r3, [r7, #28]
 801d034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	69fa      	ldr	r2, [r7, #28]
 801d03c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d040:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801d044:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	6818      	ldr	r0, [r3, #0]
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	691b      	ldr	r3, [r3, #16]
 801d04e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801d056:	461a      	mov	r2, r3
 801d058:	f004 fef2 	bl	8021e40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	695a      	ldr	r2, [r3, #20]
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801d06a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	4618      	mov	r0, r3
 801d072:	f004 fe21 	bl	8021cb8 <USB_ReadInterrupts>
 801d076:	4603      	mov	r3, r0
 801d078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d07c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d080:	d124      	bne.n	801d0cc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	4618      	mov	r0, r3
 801d088:	f004 feb7 	bl	8021dfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	4618      	mov	r0, r3
 801d092:	f003 fe6c 	bl	8020d6e <USB_GetDevSpeed>
 801d096:	4603      	mov	r3, r0
 801d098:	461a      	mov	r2, r3
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	681c      	ldr	r4, [r3, #0]
 801d0a2:	f001 fa29 	bl	801e4f8 <HAL_RCC_GetHCLKFreq>
 801d0a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801d0ac:	b2db      	uxtb	r3, r3
 801d0ae:	461a      	mov	r2, r3
 801d0b0:	4620      	mov	r0, r4
 801d0b2:	f003 fb6b 	bl	802078c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801d0b6:	6878      	ldr	r0, [r7, #4]
 801d0b8:	f00a fd13 	bl	8027ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	695a      	ldr	r2, [r3, #20]
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801d0ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	f004 fdf1 	bl	8021cb8 <USB_ReadInterrupts>
 801d0d6:	4603      	mov	r3, r0
 801d0d8:	f003 0308 	and.w	r3, r3, #8
 801d0dc:	2b08      	cmp	r3, #8
 801d0de:	d10a      	bne.n	801d0f6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801d0e0:	6878      	ldr	r0, [r7, #4]
 801d0e2:	f00a fcf0 	bl	8027ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	695a      	ldr	r2, [r3, #20]
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f002 0208 	and.w	r2, r2, #8
 801d0f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f004 fddc 	bl	8021cb8 <USB_ReadInterrupts>
 801d100:	4603      	mov	r3, r0
 801d102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d106:	2b80      	cmp	r3, #128	; 0x80
 801d108:	d122      	bne.n	801d150 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801d10a:	6a3b      	ldr	r3, [r7, #32]
 801d10c:	699b      	ldr	r3, [r3, #24]
 801d10e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d112:	6a3b      	ldr	r3, [r7, #32]
 801d114:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d116:	2301      	movs	r3, #1
 801d118:	627b      	str	r3, [r7, #36]	; 0x24
 801d11a:	e014      	b.n	801d146 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801d11c:	6879      	ldr	r1, [r7, #4]
 801d11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d120:	4613      	mov	r3, r2
 801d122:	00db      	lsls	r3, r3, #3
 801d124:	4413      	add	r3, r2
 801d126:	009b      	lsls	r3, r3, #2
 801d128:	440b      	add	r3, r1
 801d12a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801d12e:	781b      	ldrb	r3, [r3, #0]
 801d130:	2b01      	cmp	r3, #1
 801d132:	d105      	bne.n	801d140 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d136:	b2db      	uxtb	r3, r3
 801d138:	4619      	mov	r1, r3
 801d13a:	6878      	ldr	r0, [r7, #4]
 801d13c:	f000 fb27 	bl	801d78e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d142:	3301      	adds	r3, #1
 801d144:	627b      	str	r3, [r7, #36]	; 0x24
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d14c:	429a      	cmp	r2, r3
 801d14e:	d3e5      	bcc.n	801d11c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	4618      	mov	r0, r3
 801d156:	f004 fdaf 	bl	8021cb8 <USB_ReadInterrupts>
 801d15a:	4603      	mov	r3, r0
 801d15c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d164:	d13b      	bne.n	801d1de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d166:	2301      	movs	r3, #1
 801d168:	627b      	str	r3, [r7, #36]	; 0x24
 801d16a:	e02b      	b.n	801d1c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d16e:	015a      	lsls	r2, r3, #5
 801d170:	69fb      	ldr	r3, [r7, #28]
 801d172:	4413      	add	r3, r2
 801d174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801d17c:	6879      	ldr	r1, [r7, #4]
 801d17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d180:	4613      	mov	r3, r2
 801d182:	00db      	lsls	r3, r3, #3
 801d184:	4413      	add	r3, r2
 801d186:	009b      	lsls	r3, r3, #2
 801d188:	440b      	add	r3, r1
 801d18a:	3340      	adds	r3, #64	; 0x40
 801d18c:	781b      	ldrb	r3, [r3, #0]
 801d18e:	2b01      	cmp	r3, #1
 801d190:	d115      	bne.n	801d1be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801d192:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801d194:	2b00      	cmp	r3, #0
 801d196:	da12      	bge.n	801d1be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 801d198:	6879      	ldr	r1, [r7, #4]
 801d19a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d19c:	4613      	mov	r3, r2
 801d19e:	00db      	lsls	r3, r3, #3
 801d1a0:	4413      	add	r3, r2
 801d1a2:	009b      	lsls	r3, r3, #2
 801d1a4:	440b      	add	r3, r1
 801d1a6:	333f      	adds	r3, #63	; 0x3f
 801d1a8:	2201      	movs	r2, #1
 801d1aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ae:	b2db      	uxtb	r3, r3
 801d1b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d1b4:	b2db      	uxtb	r3, r3
 801d1b6:	4619      	mov	r1, r3
 801d1b8:	6878      	ldr	r0, [r7, #4]
 801d1ba:	f000 fae8 	bl	801d78e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1c0:	3301      	adds	r3, #1
 801d1c2:	627b      	str	r3, [r7, #36]	; 0x24
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1ca:	429a      	cmp	r2, r3
 801d1cc:	d3ce      	bcc.n	801d16c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	695a      	ldr	r2, [r3, #20]
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801d1dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f004 fd68 	bl	8021cb8 <USB_ReadInterrupts>
 801d1e8:	4603      	mov	r3, r0
 801d1ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d1ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d1f2:	d155      	bne.n	801d2a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d1f4:	2301      	movs	r3, #1
 801d1f6:	627b      	str	r3, [r7, #36]	; 0x24
 801d1f8:	e045      	b.n	801d286 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1fc:	015a      	lsls	r2, r3, #5
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	4413      	add	r3, r2
 801d202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801d20a:	6879      	ldr	r1, [r7, #4]
 801d20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d20e:	4613      	mov	r3, r2
 801d210:	00db      	lsls	r3, r3, #3
 801d212:	4413      	add	r3, r2
 801d214:	009b      	lsls	r3, r3, #2
 801d216:	440b      	add	r3, r1
 801d218:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801d21c:	781b      	ldrb	r3, [r3, #0]
 801d21e:	2b01      	cmp	r3, #1
 801d220:	d12e      	bne.n	801d280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801d222:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801d224:	2b00      	cmp	r3, #0
 801d226:	da2b      	bge.n	801d280 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801d228:	69bb      	ldr	r3, [r7, #24]
 801d22a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801d234:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801d238:	429a      	cmp	r2, r3
 801d23a:	d121      	bne.n	801d280 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 801d23c:	6879      	ldr	r1, [r7, #4]
 801d23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d240:	4613      	mov	r3, r2
 801d242:	00db      	lsls	r3, r3, #3
 801d244:	4413      	add	r3, r2
 801d246:	009b      	lsls	r3, r3, #2
 801d248:	440b      	add	r3, r1
 801d24a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801d24e:	2201      	movs	r2, #1
 801d250:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801d252:	6a3b      	ldr	r3, [r7, #32]
 801d254:	699b      	ldr	r3, [r3, #24]
 801d256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801d25a:	6a3b      	ldr	r3, [r7, #32]
 801d25c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 801d25e:	6a3b      	ldr	r3, [r7, #32]
 801d260:	695b      	ldr	r3, [r3, #20]
 801d262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d266:	2b00      	cmp	r3, #0
 801d268:	d10a      	bne.n	801d280 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 801d26a:	69fb      	ldr	r3, [r7, #28]
 801d26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d270:	685b      	ldr	r3, [r3, #4]
 801d272:	69fa      	ldr	r2, [r7, #28]
 801d274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801d278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801d27c:	6053      	str	r3, [r2, #4]
            break;
 801d27e:	e007      	b.n	801d290 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d282:	3301      	adds	r3, #1
 801d284:	627b      	str	r3, [r7, #36]	; 0x24
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	685b      	ldr	r3, [r3, #4]
 801d28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d28c:	429a      	cmp	r2, r3
 801d28e:	d3b4      	bcc.n	801d1fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	695a      	ldr	r2, [r3, #20]
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801d29e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f004 fd07 	bl	8021cb8 <USB_ReadInterrupts>
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801d2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d2b4:	d10a      	bne.n	801d2cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801d2b6:	6878      	ldr	r0, [r7, #4]
 801d2b8:	f00a fc94 	bl	8027be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	695a      	ldr	r2, [r3, #20]
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801d2ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f004 fcf1 	bl	8021cb8 <USB_ReadInterrupts>
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	f003 0304 	and.w	r3, r3, #4
 801d2dc:	2b04      	cmp	r3, #4
 801d2de:	d115      	bne.n	801d30c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801d2e8:	69bb      	ldr	r3, [r7, #24]
 801d2ea:	f003 0304 	and.w	r3, r3, #4
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d002      	beq.n	801d2f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f00a fc84 	bl	8027c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	6859      	ldr	r1, [r3, #4]
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	69ba      	ldr	r2, [r7, #24]
 801d304:	430a      	orrs	r2, r1
 801d306:	605a      	str	r2, [r3, #4]
 801d308:	e000      	b.n	801d30c <HAL_PCD_IRQHandler+0x938>
      return;
 801d30a:	bf00      	nop
    }
  }
}
 801d30c:	3734      	adds	r7, #52	; 0x34
 801d30e:	46bd      	mov	sp, r7
 801d310:	bd90      	pop	{r4, r7, pc}

0801d312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801d312:	b580      	push	{r7, lr}
 801d314:	b082      	sub	sp, #8
 801d316:	af00      	add	r7, sp, #0
 801d318:	6078      	str	r0, [r7, #4]
 801d31a:	460b      	mov	r3, r1
 801d31c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801d324:	2b01      	cmp	r3, #1
 801d326:	d101      	bne.n	801d32c <HAL_PCD_SetAddress+0x1a>
 801d328:	2302      	movs	r3, #2
 801d32a:	e013      	b.n	801d354 <HAL_PCD_SetAddress+0x42>
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	2201      	movs	r2, #1
 801d330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	78fa      	ldrb	r2, [r7, #3]
 801d338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	78fa      	ldrb	r2, [r7, #3]
 801d342:	4611      	mov	r1, r2
 801d344:	4618      	mov	r0, r3
 801d346:	f004 fc4f 	bl	8021be8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	2200      	movs	r2, #0
 801d34e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801d352:	2300      	movs	r3, #0
}
 801d354:	4618      	mov	r0, r3
 801d356:	3708      	adds	r7, #8
 801d358:	46bd      	mov	sp, r7
 801d35a:	bd80      	pop	{r7, pc}

0801d35c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801d35c:	b580      	push	{r7, lr}
 801d35e:	b084      	sub	sp, #16
 801d360:	af00      	add	r7, sp, #0
 801d362:	6078      	str	r0, [r7, #4]
 801d364:	4608      	mov	r0, r1
 801d366:	4611      	mov	r1, r2
 801d368:	461a      	mov	r2, r3
 801d36a:	4603      	mov	r3, r0
 801d36c:	70fb      	strb	r3, [r7, #3]
 801d36e:	460b      	mov	r3, r1
 801d370:	803b      	strh	r3, [r7, #0]
 801d372:	4613      	mov	r3, r2
 801d374:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801d376:	2300      	movs	r3, #0
 801d378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801d37a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	da0f      	bge.n	801d3a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d382:	78fb      	ldrb	r3, [r7, #3]
 801d384:	f003 020f 	and.w	r2, r3, #15
 801d388:	4613      	mov	r3, r2
 801d38a:	00db      	lsls	r3, r3, #3
 801d38c:	4413      	add	r3, r2
 801d38e:	009b      	lsls	r3, r3, #2
 801d390:	3338      	adds	r3, #56	; 0x38
 801d392:	687a      	ldr	r2, [r7, #4]
 801d394:	4413      	add	r3, r2
 801d396:	3304      	adds	r3, #4
 801d398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	2201      	movs	r2, #1
 801d39e:	705a      	strb	r2, [r3, #1]
 801d3a0:	e00f      	b.n	801d3c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d3a2:	78fb      	ldrb	r3, [r7, #3]
 801d3a4:	f003 020f 	and.w	r2, r3, #15
 801d3a8:	4613      	mov	r3, r2
 801d3aa:	00db      	lsls	r3, r3, #3
 801d3ac:	4413      	add	r3, r2
 801d3ae:	009b      	lsls	r3, r3, #2
 801d3b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d3b4:	687a      	ldr	r2, [r7, #4]
 801d3b6:	4413      	add	r3, r2
 801d3b8:	3304      	adds	r3, #4
 801d3ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	2200      	movs	r2, #0
 801d3c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801d3c2:	78fb      	ldrb	r3, [r7, #3]
 801d3c4:	f003 030f 	and.w	r3, r3, #15
 801d3c8:	b2da      	uxtb	r2, r3
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801d3ce:	883a      	ldrh	r2, [r7, #0]
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	78ba      	ldrb	r2, [r7, #2]
 801d3d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	785b      	ldrb	r3, [r3, #1]
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d004      	beq.n	801d3ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	781b      	ldrb	r3, [r3, #0]
 801d3e6:	b29a      	uxth	r2, r3
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801d3ec:	78bb      	ldrb	r3, [r7, #2]
 801d3ee:	2b02      	cmp	r3, #2
 801d3f0:	d102      	bne.n	801d3f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	2200      	movs	r2, #0
 801d3f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801d3fe:	2b01      	cmp	r3, #1
 801d400:	d101      	bne.n	801d406 <HAL_PCD_EP_Open+0xaa>
 801d402:	2302      	movs	r3, #2
 801d404:	e00e      	b.n	801d424 <HAL_PCD_EP_Open+0xc8>
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	2201      	movs	r2, #1
 801d40a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	68f9      	ldr	r1, [r7, #12]
 801d414:	4618      	mov	r0, r3
 801d416:	f003 fccf 	bl	8020db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	2200      	movs	r2, #0
 801d41e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801d422:	7afb      	ldrb	r3, [r7, #11]
}
 801d424:	4618      	mov	r0, r3
 801d426:	3710      	adds	r7, #16
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}

0801d42c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b084      	sub	sp, #16
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
 801d434:	460b      	mov	r3, r1
 801d436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801d438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	da0f      	bge.n	801d460 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d440:	78fb      	ldrb	r3, [r7, #3]
 801d442:	f003 020f 	and.w	r2, r3, #15
 801d446:	4613      	mov	r3, r2
 801d448:	00db      	lsls	r3, r3, #3
 801d44a:	4413      	add	r3, r2
 801d44c:	009b      	lsls	r3, r3, #2
 801d44e:	3338      	adds	r3, #56	; 0x38
 801d450:	687a      	ldr	r2, [r7, #4]
 801d452:	4413      	add	r3, r2
 801d454:	3304      	adds	r3, #4
 801d456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	2201      	movs	r2, #1
 801d45c:	705a      	strb	r2, [r3, #1]
 801d45e:	e00f      	b.n	801d480 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d460:	78fb      	ldrb	r3, [r7, #3]
 801d462:	f003 020f 	and.w	r2, r3, #15
 801d466:	4613      	mov	r3, r2
 801d468:	00db      	lsls	r3, r3, #3
 801d46a:	4413      	add	r3, r2
 801d46c:	009b      	lsls	r3, r3, #2
 801d46e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d472:	687a      	ldr	r2, [r7, #4]
 801d474:	4413      	add	r3, r2
 801d476:	3304      	adds	r3, #4
 801d478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2200      	movs	r2, #0
 801d47e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801d480:	78fb      	ldrb	r3, [r7, #3]
 801d482:	f003 030f 	and.w	r3, r3, #15
 801d486:	b2da      	uxtb	r2, r3
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801d492:	2b01      	cmp	r3, #1
 801d494:	d101      	bne.n	801d49a <HAL_PCD_EP_Close+0x6e>
 801d496:	2302      	movs	r3, #2
 801d498:	e00e      	b.n	801d4b8 <HAL_PCD_EP_Close+0x8c>
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	2201      	movs	r2, #1
 801d49e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	68f9      	ldr	r1, [r7, #12]
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f003 fd0d 	bl	8020ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801d4b6:	2300      	movs	r3, #0
}
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	3710      	adds	r7, #16
 801d4bc:	46bd      	mov	sp, r7
 801d4be:	bd80      	pop	{r7, pc}

0801d4c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b086      	sub	sp, #24
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	60f8      	str	r0, [r7, #12]
 801d4c8:	607a      	str	r2, [r7, #4]
 801d4ca:	603b      	str	r3, [r7, #0]
 801d4cc:	460b      	mov	r3, r1
 801d4ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d4d0:	7afb      	ldrb	r3, [r7, #11]
 801d4d2:	f003 020f 	and.w	r2, r3, #15
 801d4d6:	4613      	mov	r3, r2
 801d4d8:	00db      	lsls	r3, r3, #3
 801d4da:	4413      	add	r3, r2
 801d4dc:	009b      	lsls	r3, r3, #2
 801d4de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d4e2:	68fa      	ldr	r2, [r7, #12]
 801d4e4:	4413      	add	r3, r2
 801d4e6:	3304      	adds	r3, #4
 801d4e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801d4ea:	697b      	ldr	r3, [r7, #20]
 801d4ec:	687a      	ldr	r2, [r7, #4]
 801d4ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801d4f0:	697b      	ldr	r3, [r7, #20]
 801d4f2:	683a      	ldr	r2, [r7, #0]
 801d4f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801d4f6:	697b      	ldr	r3, [r7, #20]
 801d4f8:	2200      	movs	r2, #0
 801d4fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 801d4fc:	697b      	ldr	r3, [r7, #20]
 801d4fe:	2200      	movs	r2, #0
 801d500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801d502:	7afb      	ldrb	r3, [r7, #11]
 801d504:	f003 030f 	and.w	r3, r3, #15
 801d508:	b2da      	uxtb	r2, r3
 801d50a:	697b      	ldr	r3, [r7, #20]
 801d50c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	691b      	ldr	r3, [r3, #16]
 801d512:	2b01      	cmp	r3, #1
 801d514:	d102      	bne.n	801d51c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801d516:	687a      	ldr	r2, [r7, #4]
 801d518:	697b      	ldr	r3, [r7, #20]
 801d51a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801d51c:	7afb      	ldrb	r3, [r7, #11]
 801d51e:	f003 030f 	and.w	r3, r3, #15
 801d522:	2b00      	cmp	r3, #0
 801d524:	d109      	bne.n	801d53a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	6818      	ldr	r0, [r3, #0]
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	691b      	ldr	r3, [r3, #16]
 801d52e:	b2db      	uxtb	r3, r3
 801d530:	461a      	mov	r2, r3
 801d532:	6979      	ldr	r1, [r7, #20]
 801d534:	f003 ffec 	bl	8021510 <USB_EP0StartXfer>
 801d538:	e008      	b.n	801d54c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	6818      	ldr	r0, [r3, #0]
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	691b      	ldr	r3, [r3, #16]
 801d542:	b2db      	uxtb	r3, r3
 801d544:	461a      	mov	r2, r3
 801d546:	6979      	ldr	r1, [r7, #20]
 801d548:	f003 fd9a 	bl	8021080 <USB_EPStartXfer>
  }

  return HAL_OK;
 801d54c:	2300      	movs	r3, #0
}
 801d54e:	4618      	mov	r0, r3
 801d550:	3718      	adds	r7, #24
 801d552:	46bd      	mov	sp, r7
 801d554:	bd80      	pop	{r7, pc}

0801d556 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801d556:	b480      	push	{r7}
 801d558:	b083      	sub	sp, #12
 801d55a:	af00      	add	r7, sp, #0
 801d55c:	6078      	str	r0, [r7, #4]
 801d55e:	460b      	mov	r3, r1
 801d560:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801d562:	78fb      	ldrb	r3, [r7, #3]
 801d564:	f003 020f 	and.w	r2, r3, #15
 801d568:	6879      	ldr	r1, [r7, #4]
 801d56a:	4613      	mov	r3, r2
 801d56c:	00db      	lsls	r3, r3, #3
 801d56e:	4413      	add	r3, r2
 801d570:	009b      	lsls	r3, r3, #2
 801d572:	440b      	add	r3, r1
 801d574:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801d578:	681b      	ldr	r3, [r3, #0]
}
 801d57a:	4618      	mov	r0, r3
 801d57c:	370c      	adds	r7, #12
 801d57e:	46bd      	mov	sp, r7
 801d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d584:	4770      	bx	lr

0801d586 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801d586:	b580      	push	{r7, lr}
 801d588:	b086      	sub	sp, #24
 801d58a:	af00      	add	r7, sp, #0
 801d58c:	60f8      	str	r0, [r7, #12]
 801d58e:	607a      	str	r2, [r7, #4]
 801d590:	603b      	str	r3, [r7, #0]
 801d592:	460b      	mov	r3, r1
 801d594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d596:	7afb      	ldrb	r3, [r7, #11]
 801d598:	f003 020f 	and.w	r2, r3, #15
 801d59c:	4613      	mov	r3, r2
 801d59e:	00db      	lsls	r3, r3, #3
 801d5a0:	4413      	add	r3, r2
 801d5a2:	009b      	lsls	r3, r3, #2
 801d5a4:	3338      	adds	r3, #56	; 0x38
 801d5a6:	68fa      	ldr	r2, [r7, #12]
 801d5a8:	4413      	add	r3, r2
 801d5aa:	3304      	adds	r3, #4
 801d5ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801d5ae:	697b      	ldr	r3, [r7, #20]
 801d5b0:	687a      	ldr	r2, [r7, #4]
 801d5b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801d5b4:	697b      	ldr	r3, [r7, #20]
 801d5b6:	683a      	ldr	r2, [r7, #0]
 801d5b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801d5ba:	697b      	ldr	r3, [r7, #20]
 801d5bc:	2200      	movs	r2, #0
 801d5be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 801d5c0:	697b      	ldr	r3, [r7, #20]
 801d5c2:	2201      	movs	r2, #1
 801d5c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801d5c6:	7afb      	ldrb	r3, [r7, #11]
 801d5c8:	f003 030f 	and.w	r3, r3, #15
 801d5cc:	b2da      	uxtb	r2, r3
 801d5ce:	697b      	ldr	r3, [r7, #20]
 801d5d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	691b      	ldr	r3, [r3, #16]
 801d5d6:	2b01      	cmp	r3, #1
 801d5d8:	d102      	bne.n	801d5e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801d5da:	687a      	ldr	r2, [r7, #4]
 801d5dc:	697b      	ldr	r3, [r7, #20]
 801d5de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801d5e0:	7afb      	ldrb	r3, [r7, #11]
 801d5e2:	f003 030f 	and.w	r3, r3, #15
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d109      	bne.n	801d5fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	6818      	ldr	r0, [r3, #0]
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	691b      	ldr	r3, [r3, #16]
 801d5f2:	b2db      	uxtb	r3, r3
 801d5f4:	461a      	mov	r2, r3
 801d5f6:	6979      	ldr	r1, [r7, #20]
 801d5f8:	f003 ff8a 	bl	8021510 <USB_EP0StartXfer>
 801d5fc:	e008      	b.n	801d610 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	6818      	ldr	r0, [r3, #0]
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	691b      	ldr	r3, [r3, #16]
 801d606:	b2db      	uxtb	r3, r3
 801d608:	461a      	mov	r2, r3
 801d60a:	6979      	ldr	r1, [r7, #20]
 801d60c:	f003 fd38 	bl	8021080 <USB_EPStartXfer>
  }

  return HAL_OK;
 801d610:	2300      	movs	r3, #0
}
 801d612:	4618      	mov	r0, r3
 801d614:	3718      	adds	r7, #24
 801d616:	46bd      	mov	sp, r7
 801d618:	bd80      	pop	{r7, pc}

0801d61a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801d61a:	b580      	push	{r7, lr}
 801d61c:	b084      	sub	sp, #16
 801d61e:	af00      	add	r7, sp, #0
 801d620:	6078      	str	r0, [r7, #4]
 801d622:	460b      	mov	r3, r1
 801d624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801d626:	78fb      	ldrb	r3, [r7, #3]
 801d628:	f003 020f 	and.w	r2, r3, #15
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	685b      	ldr	r3, [r3, #4]
 801d630:	429a      	cmp	r2, r3
 801d632:	d901      	bls.n	801d638 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801d634:	2301      	movs	r3, #1
 801d636:	e050      	b.n	801d6da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801d638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	da0f      	bge.n	801d660 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d640:	78fb      	ldrb	r3, [r7, #3]
 801d642:	f003 020f 	and.w	r2, r3, #15
 801d646:	4613      	mov	r3, r2
 801d648:	00db      	lsls	r3, r3, #3
 801d64a:	4413      	add	r3, r2
 801d64c:	009b      	lsls	r3, r3, #2
 801d64e:	3338      	adds	r3, #56	; 0x38
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	4413      	add	r3, r2
 801d654:	3304      	adds	r3, #4
 801d656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	2201      	movs	r2, #1
 801d65c:	705a      	strb	r2, [r3, #1]
 801d65e:	e00d      	b.n	801d67c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801d660:	78fa      	ldrb	r2, [r7, #3]
 801d662:	4613      	mov	r3, r2
 801d664:	00db      	lsls	r3, r3, #3
 801d666:	4413      	add	r3, r2
 801d668:	009b      	lsls	r3, r3, #2
 801d66a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d66e:	687a      	ldr	r2, [r7, #4]
 801d670:	4413      	add	r3, r2
 801d672:	3304      	adds	r3, #4
 801d674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	2200      	movs	r2, #0
 801d67a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	2201      	movs	r2, #1
 801d680:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801d682:	78fb      	ldrb	r3, [r7, #3]
 801d684:	f003 030f 	and.w	r3, r3, #15
 801d688:	b2da      	uxtb	r2, r3
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801d694:	2b01      	cmp	r3, #1
 801d696:	d101      	bne.n	801d69c <HAL_PCD_EP_SetStall+0x82>
 801d698:	2302      	movs	r3, #2
 801d69a:	e01e      	b.n	801d6da <HAL_PCD_EP_SetStall+0xc0>
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2201      	movs	r2, #1
 801d6a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	68f9      	ldr	r1, [r7, #12]
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f004 f9c8 	bl	8021a40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801d6b0:	78fb      	ldrb	r3, [r7, #3]
 801d6b2:	f003 030f 	and.w	r3, r3, #15
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d10a      	bne.n	801d6d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	6818      	ldr	r0, [r3, #0]
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	691b      	ldr	r3, [r3, #16]
 801d6c2:	b2d9      	uxtb	r1, r3
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801d6ca:	461a      	mov	r2, r3
 801d6cc:	f004 fbb8 	bl	8021e40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801d6d8:	2300      	movs	r3, #0
}
 801d6da:	4618      	mov	r0, r3
 801d6dc:	3710      	adds	r7, #16
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bd80      	pop	{r7, pc}

0801d6e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801d6e2:	b580      	push	{r7, lr}
 801d6e4:	b084      	sub	sp, #16
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	6078      	str	r0, [r7, #4]
 801d6ea:	460b      	mov	r3, r1
 801d6ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801d6ee:	78fb      	ldrb	r3, [r7, #3]
 801d6f0:	f003 020f 	and.w	r2, r3, #15
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	685b      	ldr	r3, [r3, #4]
 801d6f8:	429a      	cmp	r2, r3
 801d6fa:	d901      	bls.n	801d700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	e042      	b.n	801d786 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801d700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d704:	2b00      	cmp	r3, #0
 801d706:	da0f      	bge.n	801d728 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d708:	78fb      	ldrb	r3, [r7, #3]
 801d70a:	f003 020f 	and.w	r2, r3, #15
 801d70e:	4613      	mov	r3, r2
 801d710:	00db      	lsls	r3, r3, #3
 801d712:	4413      	add	r3, r2
 801d714:	009b      	lsls	r3, r3, #2
 801d716:	3338      	adds	r3, #56	; 0x38
 801d718:	687a      	ldr	r2, [r7, #4]
 801d71a:	4413      	add	r3, r2
 801d71c:	3304      	adds	r3, #4
 801d71e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	2201      	movs	r2, #1
 801d724:	705a      	strb	r2, [r3, #1]
 801d726:	e00f      	b.n	801d748 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d728:	78fb      	ldrb	r3, [r7, #3]
 801d72a:	f003 020f 	and.w	r2, r3, #15
 801d72e:	4613      	mov	r3, r2
 801d730:	00db      	lsls	r3, r3, #3
 801d732:	4413      	add	r3, r2
 801d734:	009b      	lsls	r3, r3, #2
 801d736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d73a:	687a      	ldr	r2, [r7, #4]
 801d73c:	4413      	add	r3, r2
 801d73e:	3304      	adds	r3, #4
 801d740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	2200      	movs	r2, #0
 801d746:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	2200      	movs	r2, #0
 801d74c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801d74e:	78fb      	ldrb	r3, [r7, #3]
 801d750:	f003 030f 	and.w	r3, r3, #15
 801d754:	b2da      	uxtb	r2, r3
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801d760:	2b01      	cmp	r3, #1
 801d762:	d101      	bne.n	801d768 <HAL_PCD_EP_ClrStall+0x86>
 801d764:	2302      	movs	r3, #2
 801d766:	e00e      	b.n	801d786 <HAL_PCD_EP_ClrStall+0xa4>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	2201      	movs	r2, #1
 801d76c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	68f9      	ldr	r1, [r7, #12]
 801d776:	4618      	mov	r0, r3
 801d778:	f004 f9d0 	bl	8021b1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	2200      	movs	r2, #0
 801d780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801d784:	2300      	movs	r3, #0
}
 801d786:	4618      	mov	r0, r3
 801d788:	3710      	adds	r7, #16
 801d78a:	46bd      	mov	sp, r7
 801d78c:	bd80      	pop	{r7, pc}

0801d78e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801d78e:	b580      	push	{r7, lr}
 801d790:	b084      	sub	sp, #16
 801d792:	af00      	add	r7, sp, #0
 801d794:	6078      	str	r0, [r7, #4]
 801d796:	460b      	mov	r3, r1
 801d798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801d79a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	da0c      	bge.n	801d7bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d7a2:	78fb      	ldrb	r3, [r7, #3]
 801d7a4:	f003 020f 	and.w	r2, r3, #15
 801d7a8:	4613      	mov	r3, r2
 801d7aa:	00db      	lsls	r3, r3, #3
 801d7ac:	4413      	add	r3, r2
 801d7ae:	009b      	lsls	r3, r3, #2
 801d7b0:	3338      	adds	r3, #56	; 0x38
 801d7b2:	687a      	ldr	r2, [r7, #4]
 801d7b4:	4413      	add	r3, r2
 801d7b6:	3304      	adds	r3, #4
 801d7b8:	60fb      	str	r3, [r7, #12]
 801d7ba:	e00c      	b.n	801d7d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d7bc:	78fb      	ldrb	r3, [r7, #3]
 801d7be:	f003 020f 	and.w	r2, r3, #15
 801d7c2:	4613      	mov	r3, r2
 801d7c4:	00db      	lsls	r3, r3, #3
 801d7c6:	4413      	add	r3, r2
 801d7c8:	009b      	lsls	r3, r3, #2
 801d7ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d7ce:	687a      	ldr	r2, [r7, #4]
 801d7d0:	4413      	add	r3, r2
 801d7d2:	3304      	adds	r3, #4
 801d7d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	68f9      	ldr	r1, [r7, #12]
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f003 ffef 	bl	80217c0 <USB_EPStopXfer>
 801d7e2:	4603      	mov	r3, r0
 801d7e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 801d7e6:	7afb      	ldrb	r3, [r7, #11]
}
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3710      	adds	r7, #16
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}

0801d7f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b08a      	sub	sp, #40	; 0x28
 801d7f4:	af02      	add	r7, sp, #8
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d800:	697b      	ldr	r3, [r7, #20]
 801d802:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801d804:	683a      	ldr	r2, [r7, #0]
 801d806:	4613      	mov	r3, r2
 801d808:	00db      	lsls	r3, r3, #3
 801d80a:	4413      	add	r3, r2
 801d80c:	009b      	lsls	r3, r3, #2
 801d80e:	3338      	adds	r3, #56	; 0x38
 801d810:	687a      	ldr	r2, [r7, #4]
 801d812:	4413      	add	r3, r2
 801d814:	3304      	adds	r3, #4
 801d816:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	6a1a      	ldr	r2, [r3, #32]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	699b      	ldr	r3, [r3, #24]
 801d820:	429a      	cmp	r2, r3
 801d822:	d901      	bls.n	801d828 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801d824:	2301      	movs	r3, #1
 801d826:	e06c      	b.n	801d902 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	699a      	ldr	r2, [r3, #24]
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	6a1b      	ldr	r3, [r3, #32]
 801d830:	1ad3      	subs	r3, r2, r3
 801d832:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	68db      	ldr	r3, [r3, #12]
 801d838:	69fa      	ldr	r2, [r7, #28]
 801d83a:	429a      	cmp	r2, r3
 801d83c:	d902      	bls.n	801d844 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	68db      	ldr	r3, [r3, #12]
 801d842:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801d844:	69fb      	ldr	r3, [r7, #28]
 801d846:	3303      	adds	r3, #3
 801d848:	089b      	lsrs	r3, r3, #2
 801d84a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801d84c:	e02b      	b.n	801d8a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	699a      	ldr	r2, [r3, #24]
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	6a1b      	ldr	r3, [r3, #32]
 801d856:	1ad3      	subs	r3, r2, r3
 801d858:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	68db      	ldr	r3, [r3, #12]
 801d85e:	69fa      	ldr	r2, [r7, #28]
 801d860:	429a      	cmp	r2, r3
 801d862:	d902      	bls.n	801d86a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	68db      	ldr	r3, [r3, #12]
 801d868:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801d86a:	69fb      	ldr	r3, [r7, #28]
 801d86c:	3303      	adds	r3, #3
 801d86e:	089b      	lsrs	r3, r3, #2
 801d870:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	6919      	ldr	r1, [r3, #16]
 801d876:	683b      	ldr	r3, [r7, #0]
 801d878:	b2da      	uxtb	r2, r3
 801d87a:	69fb      	ldr	r3, [r7, #28]
 801d87c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801d882:	b2db      	uxtb	r3, r3
 801d884:	9300      	str	r3, [sp, #0]
 801d886:	4603      	mov	r3, r0
 801d888:	6978      	ldr	r0, [r7, #20]
 801d88a:	f004 f843 	bl	8021914 <USB_WritePacket>

    ep->xfer_buff  += len;
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	691a      	ldr	r2, [r3, #16]
 801d892:	69fb      	ldr	r3, [r7, #28]
 801d894:	441a      	add	r2, r3
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	6a1a      	ldr	r2, [r3, #32]
 801d89e:	69fb      	ldr	r3, [r7, #28]
 801d8a0:	441a      	add	r2, r3
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801d8a6:	683b      	ldr	r3, [r7, #0]
 801d8a8:	015a      	lsls	r2, r3, #5
 801d8aa:	693b      	ldr	r3, [r7, #16]
 801d8ac:	4413      	add	r3, r2
 801d8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801d8b2:	699b      	ldr	r3, [r3, #24]
 801d8b4:	b29b      	uxth	r3, r3
 801d8b6:	69ba      	ldr	r2, [r7, #24]
 801d8b8:	429a      	cmp	r2, r3
 801d8ba:	d809      	bhi.n	801d8d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	6a1a      	ldr	r2, [r3, #32]
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801d8c4:	429a      	cmp	r2, r3
 801d8c6:	d203      	bcs.n	801d8d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	699b      	ldr	r3, [r3, #24]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d1be      	bne.n	801d84e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	699a      	ldr	r2, [r3, #24]
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	6a1b      	ldr	r3, [r3, #32]
 801d8d8:	429a      	cmp	r2, r3
 801d8da:	d811      	bhi.n	801d900 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801d8dc:	683b      	ldr	r3, [r7, #0]
 801d8de:	f003 030f 	and.w	r3, r3, #15
 801d8e2:	2201      	movs	r2, #1
 801d8e4:	fa02 f303 	lsl.w	r3, r2, r3
 801d8e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801d8ea:	693b      	ldr	r3, [r7, #16]
 801d8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801d8f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d8f2:	68bb      	ldr	r3, [r7, #8]
 801d8f4:	43db      	mvns	r3, r3
 801d8f6:	6939      	ldr	r1, [r7, #16]
 801d8f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801d8fc:	4013      	ands	r3, r2
 801d8fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801d900:	2300      	movs	r3, #0
}
 801d902:	4618      	mov	r0, r3
 801d904:	3720      	adds	r7, #32
 801d906:	46bd      	mov	sp, r7
 801d908:	bd80      	pop	{r7, pc}
	...

0801d90c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b088      	sub	sp, #32
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
 801d914:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801d91c:	69fb      	ldr	r3, [r7, #28]
 801d91e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801d920:	69fb      	ldr	r3, [r7, #28]
 801d922:	333c      	adds	r3, #60	; 0x3c
 801d924:	3304      	adds	r3, #4
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801d92a:	683b      	ldr	r3, [r7, #0]
 801d92c:	015a      	lsls	r2, r3, #5
 801d92e:	69bb      	ldr	r3, [r7, #24]
 801d930:	4413      	add	r3, r2
 801d932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d936:	689b      	ldr	r3, [r3, #8]
 801d938:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	691b      	ldr	r3, [r3, #16]
 801d93e:	2b01      	cmp	r3, #1
 801d940:	d17b      	bne.n	801da3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801d942:	693b      	ldr	r3, [r7, #16]
 801d944:	f003 0308 	and.w	r3, r3, #8
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d015      	beq.n	801d978 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801d94c:	697b      	ldr	r3, [r7, #20]
 801d94e:	4a61      	ldr	r2, [pc, #388]	; (801dad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801d950:	4293      	cmp	r3, r2
 801d952:	f240 80b9 	bls.w	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801d956:	693b      	ldr	r3, [r7, #16]
 801d958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	f000 80b3 	beq.w	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801d962:	683b      	ldr	r3, [r7, #0]
 801d964:	015a      	lsls	r2, r3, #5
 801d966:	69bb      	ldr	r3, [r7, #24]
 801d968:	4413      	add	r3, r2
 801d96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d96e:	461a      	mov	r2, r3
 801d970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d974:	6093      	str	r3, [r2, #8]
 801d976:	e0a7      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801d978:	693b      	ldr	r3, [r7, #16]
 801d97a:	f003 0320 	and.w	r3, r3, #32
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d009      	beq.n	801d996 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801d982:	683b      	ldr	r3, [r7, #0]
 801d984:	015a      	lsls	r2, r3, #5
 801d986:	69bb      	ldr	r3, [r7, #24]
 801d988:	4413      	add	r3, r2
 801d98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d98e:	461a      	mov	r2, r3
 801d990:	2320      	movs	r3, #32
 801d992:	6093      	str	r3, [r2, #8]
 801d994:	e098      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801d996:	693b      	ldr	r3, [r7, #16]
 801d998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	f040 8093 	bne.w	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	4a4b      	ldr	r2, [pc, #300]	; (801dad4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801d9a6:	4293      	cmp	r3, r2
 801d9a8:	d90f      	bls.n	801d9ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801d9aa:	693b      	ldr	r3, [r7, #16]
 801d9ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d00a      	beq.n	801d9ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801d9b4:	683b      	ldr	r3, [r7, #0]
 801d9b6:	015a      	lsls	r2, r3, #5
 801d9b8:	69bb      	ldr	r3, [r7, #24]
 801d9ba:	4413      	add	r3, r2
 801d9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d9c0:	461a      	mov	r2, r3
 801d9c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d9c6:	6093      	str	r3, [r2, #8]
 801d9c8:	e07e      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801d9ca:	683a      	ldr	r2, [r7, #0]
 801d9cc:	4613      	mov	r3, r2
 801d9ce:	00db      	lsls	r3, r3, #3
 801d9d0:	4413      	add	r3, r2
 801d9d2:	009b      	lsls	r3, r3, #2
 801d9d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801d9d8:	687a      	ldr	r2, [r7, #4]
 801d9da:	4413      	add	r3, r2
 801d9dc:	3304      	adds	r3, #4
 801d9de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	69da      	ldr	r2, [r3, #28]
 801d9e4:	683b      	ldr	r3, [r7, #0]
 801d9e6:	0159      	lsls	r1, r3, #5
 801d9e8:	69bb      	ldr	r3, [r7, #24]
 801d9ea:	440b      	add	r3, r1
 801d9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801d9f0:	691b      	ldr	r3, [r3, #16]
 801d9f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801d9f6:	1ad2      	subs	r2, r2, r3
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 801d9fc:	683b      	ldr	r3, [r7, #0]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d114      	bne.n	801da2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	699b      	ldr	r3, [r3, #24]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d109      	bne.n	801da1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	6818      	ldr	r0, [r3, #0]
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801da14:	461a      	mov	r2, r3
 801da16:	2101      	movs	r1, #1
 801da18:	f004 fa12 	bl	8021e40 <USB_EP0_OutStart>
 801da1c:	e006      	b.n	801da2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	691a      	ldr	r2, [r3, #16]
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	6a1b      	ldr	r3, [r3, #32]
 801da26:	441a      	add	r2, r3
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801da2c:	683b      	ldr	r3, [r7, #0]
 801da2e:	b2db      	uxtb	r3, r3
 801da30:	4619      	mov	r1, r3
 801da32:	6878      	ldr	r0, [r7, #4]
 801da34:	f00a f812 	bl	8027a5c <HAL_PCD_DataOutStageCallback>
 801da38:	e046      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801da3a:	697b      	ldr	r3, [r7, #20]
 801da3c:	4a26      	ldr	r2, [pc, #152]	; (801dad8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801da3e:	4293      	cmp	r3, r2
 801da40:	d124      	bne.n	801da8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801da42:	693b      	ldr	r3, [r7, #16]
 801da44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d00a      	beq.n	801da62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801da4c:	683b      	ldr	r3, [r7, #0]
 801da4e:	015a      	lsls	r2, r3, #5
 801da50:	69bb      	ldr	r3, [r7, #24]
 801da52:	4413      	add	r3, r2
 801da54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801da58:	461a      	mov	r2, r3
 801da5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801da5e:	6093      	str	r3, [r2, #8]
 801da60:	e032      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801da62:	693b      	ldr	r3, [r7, #16]
 801da64:	f003 0320 	and.w	r3, r3, #32
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d008      	beq.n	801da7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801da6c:	683b      	ldr	r3, [r7, #0]
 801da6e:	015a      	lsls	r2, r3, #5
 801da70:	69bb      	ldr	r3, [r7, #24]
 801da72:	4413      	add	r3, r2
 801da74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801da78:	461a      	mov	r2, r3
 801da7a:	2320      	movs	r3, #32
 801da7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801da7e:	683b      	ldr	r3, [r7, #0]
 801da80:	b2db      	uxtb	r3, r3
 801da82:	4619      	mov	r1, r3
 801da84:	6878      	ldr	r0, [r7, #4]
 801da86:	f009 ffe9 	bl	8027a5c <HAL_PCD_DataOutStageCallback>
 801da8a:	e01d      	b.n	801dac8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801da8c:	683b      	ldr	r3, [r7, #0]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d114      	bne.n	801dabc <PCD_EP_OutXfrComplete_int+0x1b0>
 801da92:	6879      	ldr	r1, [r7, #4]
 801da94:	683a      	ldr	r2, [r7, #0]
 801da96:	4613      	mov	r3, r2
 801da98:	00db      	lsls	r3, r3, #3
 801da9a:	4413      	add	r3, r2
 801da9c:	009b      	lsls	r3, r3, #2
 801da9e:	440b      	add	r3, r1
 801daa0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801daa4:	681b      	ldr	r3, [r3, #0]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d108      	bne.n	801dabc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	6818      	ldr	r0, [r3, #0]
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801dab4:	461a      	mov	r2, r3
 801dab6:	2100      	movs	r1, #0
 801dab8:	f004 f9c2 	bl	8021e40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801dabc:	683b      	ldr	r3, [r7, #0]
 801dabe:	b2db      	uxtb	r3, r3
 801dac0:	4619      	mov	r1, r3
 801dac2:	6878      	ldr	r0, [r7, #4]
 801dac4:	f009 ffca 	bl	8027a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801dac8:	2300      	movs	r3, #0
}
 801daca:	4618      	mov	r0, r3
 801dacc:	3720      	adds	r7, #32
 801dace:	46bd      	mov	sp, r7
 801dad0:	bd80      	pop	{r7, pc}
 801dad2:	bf00      	nop
 801dad4:	4f54300a 	.word	0x4f54300a
 801dad8:	4f54310a 	.word	0x4f54310a

0801dadc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801dadc:	b580      	push	{r7, lr}
 801dade:	b086      	sub	sp, #24
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	6078      	str	r0, [r7, #4]
 801dae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801daec:	697b      	ldr	r3, [r7, #20]
 801daee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801daf0:	697b      	ldr	r3, [r7, #20]
 801daf2:	333c      	adds	r3, #60	; 0x3c
 801daf4:	3304      	adds	r3, #4
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801dafa:	683b      	ldr	r3, [r7, #0]
 801dafc:	015a      	lsls	r2, r3, #5
 801dafe:	693b      	ldr	r3, [r7, #16]
 801db00:	4413      	add	r3, r2
 801db02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801db06:	689b      	ldr	r3, [r3, #8]
 801db08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	4a15      	ldr	r2, [pc, #84]	; (801db64 <PCD_EP_OutSetupPacket_int+0x88>)
 801db0e:	4293      	cmp	r3, r2
 801db10:	d90e      	bls.n	801db30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801db12:	68bb      	ldr	r3, [r7, #8]
 801db14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d009      	beq.n	801db30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801db1c:	683b      	ldr	r3, [r7, #0]
 801db1e:	015a      	lsls	r2, r3, #5
 801db20:	693b      	ldr	r3, [r7, #16]
 801db22:	4413      	add	r3, r2
 801db24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801db28:	461a      	mov	r2, r3
 801db2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801db2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801db30:	6878      	ldr	r0, [r7, #4]
 801db32:	f009 ff81 	bl	8027a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	4a0a      	ldr	r2, [pc, #40]	; (801db64 <PCD_EP_OutSetupPacket_int+0x88>)
 801db3a:	4293      	cmp	r3, r2
 801db3c:	d90c      	bls.n	801db58 <PCD_EP_OutSetupPacket_int+0x7c>
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	691b      	ldr	r3, [r3, #16]
 801db42:	2b01      	cmp	r3, #1
 801db44:	d108      	bne.n	801db58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	6818      	ldr	r0, [r3, #0]
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801db50:	461a      	mov	r2, r3
 801db52:	2101      	movs	r1, #1
 801db54:	f004 f974 	bl	8021e40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801db58:	2300      	movs	r3, #0
}
 801db5a:	4618      	mov	r0, r3
 801db5c:	3718      	adds	r7, #24
 801db5e:	46bd      	mov	sp, r7
 801db60:	bd80      	pop	{r7, pc}
 801db62:	bf00      	nop
 801db64:	4f54300a 	.word	0x4f54300a

0801db68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801db68:	b480      	push	{r7}
 801db6a:	b085      	sub	sp, #20
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	6078      	str	r0, [r7, #4]
 801db70:	460b      	mov	r3, r1
 801db72:	70fb      	strb	r3, [r7, #3]
 801db74:	4613      	mov	r3, r2
 801db76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801db80:	78fb      	ldrb	r3, [r7, #3]
 801db82:	2b00      	cmp	r3, #0
 801db84:	d107      	bne.n	801db96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801db86:	883b      	ldrh	r3, [r7, #0]
 801db88:	0419      	lsls	r1, r3, #16
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	68ba      	ldr	r2, [r7, #8]
 801db90:	430a      	orrs	r2, r1
 801db92:	629a      	str	r2, [r3, #40]	; 0x28
 801db94:	e028      	b.n	801dbe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db9c:	0c1b      	lsrs	r3, r3, #16
 801db9e:	68ba      	ldr	r2, [r7, #8]
 801dba0:	4413      	add	r3, r2
 801dba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801dba4:	2300      	movs	r3, #0
 801dba6:	73fb      	strb	r3, [r7, #15]
 801dba8:	e00d      	b.n	801dbc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	681a      	ldr	r2, [r3, #0]
 801dbae:	7bfb      	ldrb	r3, [r7, #15]
 801dbb0:	3340      	adds	r3, #64	; 0x40
 801dbb2:	009b      	lsls	r3, r3, #2
 801dbb4:	4413      	add	r3, r2
 801dbb6:	685b      	ldr	r3, [r3, #4]
 801dbb8:	0c1b      	lsrs	r3, r3, #16
 801dbba:	68ba      	ldr	r2, [r7, #8]
 801dbbc:	4413      	add	r3, r2
 801dbbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801dbc0:	7bfb      	ldrb	r3, [r7, #15]
 801dbc2:	3301      	adds	r3, #1
 801dbc4:	73fb      	strb	r3, [r7, #15]
 801dbc6:	7bfa      	ldrb	r2, [r7, #15]
 801dbc8:	78fb      	ldrb	r3, [r7, #3]
 801dbca:	3b01      	subs	r3, #1
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	d3ec      	bcc.n	801dbaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801dbd0:	883b      	ldrh	r3, [r7, #0]
 801dbd2:	0418      	lsls	r0, r3, #16
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	6819      	ldr	r1, [r3, #0]
 801dbd8:	78fb      	ldrb	r3, [r7, #3]
 801dbda:	3b01      	subs	r3, #1
 801dbdc:	68ba      	ldr	r2, [r7, #8]
 801dbde:	4302      	orrs	r2, r0
 801dbe0:	3340      	adds	r3, #64	; 0x40
 801dbe2:	009b      	lsls	r3, r3, #2
 801dbe4:	440b      	add	r3, r1
 801dbe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801dbe8:	2300      	movs	r3, #0
}
 801dbea:	4618      	mov	r0, r3
 801dbec:	3714      	adds	r7, #20
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf4:	4770      	bx	lr

0801dbf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801dbf6:	b480      	push	{r7}
 801dbf8:	b083      	sub	sp, #12
 801dbfa:	af00      	add	r7, sp, #0
 801dbfc:	6078      	str	r0, [r7, #4]
 801dbfe:	460b      	mov	r3, r1
 801dc00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	887a      	ldrh	r2, [r7, #2]
 801dc08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801dc0a:	2300      	movs	r3, #0
}
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	370c      	adds	r7, #12
 801dc10:	46bd      	mov	sp, r7
 801dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc16:	4770      	bx	lr

0801dc18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801dc18:	b480      	push	{r7}
 801dc1a:	b083      	sub	sp, #12
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]
 801dc20:	460b      	mov	r3, r1
 801dc22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801dc24:	bf00      	nop
 801dc26:	370c      	adds	r7, #12
 801dc28:	46bd      	mov	sp, r7
 801dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc2e:	4770      	bx	lr

0801dc30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801dc30:	b580      	push	{r7, lr}
 801dc32:	b086      	sub	sp, #24
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d101      	bne.n	801dc42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801dc3e:	2301      	movs	r3, #1
 801dc40:	e267      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	f003 0301 	and.w	r3, r3, #1
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d075      	beq.n	801dd3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801dc4e:	4b88      	ldr	r3, [pc, #544]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc50:	689b      	ldr	r3, [r3, #8]
 801dc52:	f003 030c 	and.w	r3, r3, #12
 801dc56:	2b04      	cmp	r3, #4
 801dc58:	d00c      	beq.n	801dc74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801dc5a:	4b85      	ldr	r3, [pc, #532]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc5c:	689b      	ldr	r3, [r3, #8]
 801dc5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801dc62:	2b08      	cmp	r3, #8
 801dc64:	d112      	bne.n	801dc8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801dc66:	4b82      	ldr	r3, [pc, #520]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc68:	685b      	ldr	r3, [r3, #4]
 801dc6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801dc6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801dc72:	d10b      	bne.n	801dc8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801dc74:	4b7e      	ldr	r3, [pc, #504]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d05b      	beq.n	801dd38 <HAL_RCC_OscConfig+0x108>
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	685b      	ldr	r3, [r3, #4]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d157      	bne.n	801dd38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801dc88:	2301      	movs	r3, #1
 801dc8a:	e242      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	685b      	ldr	r3, [r3, #4]
 801dc90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dc94:	d106      	bne.n	801dca4 <HAL_RCC_OscConfig+0x74>
 801dc96:	4b76      	ldr	r3, [pc, #472]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	4a75      	ldr	r2, [pc, #468]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dc9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dca0:	6013      	str	r3, [r2, #0]
 801dca2:	e01d      	b.n	801dce0 <HAL_RCC_OscConfig+0xb0>
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	685b      	ldr	r3, [r3, #4]
 801dca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801dcac:	d10c      	bne.n	801dcc8 <HAL_RCC_OscConfig+0x98>
 801dcae:	4b70      	ldr	r3, [pc, #448]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	4a6f      	ldr	r2, [pc, #444]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801dcb8:	6013      	str	r3, [r2, #0]
 801dcba:	4b6d      	ldr	r3, [pc, #436]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	4a6c      	ldr	r2, [pc, #432]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dcc4:	6013      	str	r3, [r2, #0]
 801dcc6:	e00b      	b.n	801dce0 <HAL_RCC_OscConfig+0xb0>
 801dcc8:	4b69      	ldr	r3, [pc, #420]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	4a68      	ldr	r2, [pc, #416]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dcd2:	6013      	str	r3, [r2, #0]
 801dcd4:	4b66      	ldr	r3, [pc, #408]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	4a65      	ldr	r2, [pc, #404]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dcda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dcde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	685b      	ldr	r3, [r3, #4]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d013      	beq.n	801dd10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801dce8:	f7fa f992 	bl	8018010 <HAL_GetTick>
 801dcec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801dcee:	e008      	b.n	801dd02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801dcf0:	f7fa f98e 	bl	8018010 <HAL_GetTick>
 801dcf4:	4602      	mov	r2, r0
 801dcf6:	693b      	ldr	r3, [r7, #16]
 801dcf8:	1ad3      	subs	r3, r2, r3
 801dcfa:	2b64      	cmp	r3, #100	; 0x64
 801dcfc:	d901      	bls.n	801dd02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801dcfe:	2303      	movs	r3, #3
 801dd00:	e207      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801dd02:	4b5b      	ldr	r3, [pc, #364]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d0f0      	beq.n	801dcf0 <HAL_RCC_OscConfig+0xc0>
 801dd0e:	e014      	b.n	801dd3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801dd10:	f7fa f97e 	bl	8018010 <HAL_GetTick>
 801dd14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801dd16:	e008      	b.n	801dd2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801dd18:	f7fa f97a 	bl	8018010 <HAL_GetTick>
 801dd1c:	4602      	mov	r2, r0
 801dd1e:	693b      	ldr	r3, [r7, #16]
 801dd20:	1ad3      	subs	r3, r2, r3
 801dd22:	2b64      	cmp	r3, #100	; 0x64
 801dd24:	d901      	bls.n	801dd2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801dd26:	2303      	movs	r3, #3
 801dd28:	e1f3      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801dd2a:	4b51      	ldr	r3, [pc, #324]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d1f0      	bne.n	801dd18 <HAL_RCC_OscConfig+0xe8>
 801dd36:	e000      	b.n	801dd3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801dd38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	f003 0302 	and.w	r3, r3, #2
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d063      	beq.n	801de0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801dd46:	4b4a      	ldr	r3, [pc, #296]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd48:	689b      	ldr	r3, [r3, #8]
 801dd4a:	f003 030c 	and.w	r3, r3, #12
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d00b      	beq.n	801dd6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801dd52:	4b47      	ldr	r3, [pc, #284]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd54:	689b      	ldr	r3, [r3, #8]
 801dd56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801dd5a:	2b08      	cmp	r3, #8
 801dd5c:	d11c      	bne.n	801dd98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801dd5e:	4b44      	ldr	r3, [pc, #272]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd60:	685b      	ldr	r3, [r3, #4]
 801dd62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d116      	bne.n	801dd98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801dd6a:	4b41      	ldr	r3, [pc, #260]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	f003 0302 	and.w	r3, r3, #2
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d005      	beq.n	801dd82 <HAL_RCC_OscConfig+0x152>
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	68db      	ldr	r3, [r3, #12]
 801dd7a:	2b01      	cmp	r3, #1
 801dd7c:	d001      	beq.n	801dd82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801dd7e:	2301      	movs	r3, #1
 801dd80:	e1c7      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801dd82:	4b3b      	ldr	r3, [pc, #236]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	691b      	ldr	r3, [r3, #16]
 801dd8e:	00db      	lsls	r3, r3, #3
 801dd90:	4937      	ldr	r1, [pc, #220]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dd92:	4313      	orrs	r3, r2
 801dd94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801dd96:	e03a      	b.n	801de0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	68db      	ldr	r3, [r3, #12]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d020      	beq.n	801dde2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801dda0:	4b34      	ldr	r3, [pc, #208]	; (801de74 <HAL_RCC_OscConfig+0x244>)
 801dda2:	2201      	movs	r2, #1
 801dda4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dda6:	f7fa f933 	bl	8018010 <HAL_GetTick>
 801ddaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ddac:	e008      	b.n	801ddc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801ddae:	f7fa f92f 	bl	8018010 <HAL_GetTick>
 801ddb2:	4602      	mov	r2, r0
 801ddb4:	693b      	ldr	r3, [r7, #16]
 801ddb6:	1ad3      	subs	r3, r2, r3
 801ddb8:	2b02      	cmp	r3, #2
 801ddba:	d901      	bls.n	801ddc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801ddbc:	2303      	movs	r3, #3
 801ddbe:	e1a8      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ddc0:	4b2b      	ldr	r3, [pc, #172]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	f003 0302 	and.w	r3, r3, #2
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d0f0      	beq.n	801ddae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ddcc:	4b28      	ldr	r3, [pc, #160]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	691b      	ldr	r3, [r3, #16]
 801ddd8:	00db      	lsls	r3, r3, #3
 801ddda:	4925      	ldr	r1, [pc, #148]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801dddc:	4313      	orrs	r3, r2
 801ddde:	600b      	str	r3, [r1, #0]
 801dde0:	e015      	b.n	801de0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801dde2:	4b24      	ldr	r3, [pc, #144]	; (801de74 <HAL_RCC_OscConfig+0x244>)
 801dde4:	2200      	movs	r2, #0
 801dde6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dde8:	f7fa f912 	bl	8018010 <HAL_GetTick>
 801ddec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801ddee:	e008      	b.n	801de02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801ddf0:	f7fa f90e 	bl	8018010 <HAL_GetTick>
 801ddf4:	4602      	mov	r2, r0
 801ddf6:	693b      	ldr	r3, [r7, #16]
 801ddf8:	1ad3      	subs	r3, r2, r3
 801ddfa:	2b02      	cmp	r3, #2
 801ddfc:	d901      	bls.n	801de02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801ddfe:	2303      	movs	r3, #3
 801de00:	e187      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801de02:	4b1b      	ldr	r3, [pc, #108]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	f003 0302 	and.w	r3, r3, #2
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d1f0      	bne.n	801ddf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	f003 0308 	and.w	r3, r3, #8
 801de16:	2b00      	cmp	r3, #0
 801de18:	d036      	beq.n	801de88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	695b      	ldr	r3, [r3, #20]
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d016      	beq.n	801de50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801de22:	4b15      	ldr	r3, [pc, #84]	; (801de78 <HAL_RCC_OscConfig+0x248>)
 801de24:	2201      	movs	r2, #1
 801de26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801de28:	f7fa f8f2 	bl	8018010 <HAL_GetTick>
 801de2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801de2e:	e008      	b.n	801de42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801de30:	f7fa f8ee 	bl	8018010 <HAL_GetTick>
 801de34:	4602      	mov	r2, r0
 801de36:	693b      	ldr	r3, [r7, #16]
 801de38:	1ad3      	subs	r3, r2, r3
 801de3a:	2b02      	cmp	r3, #2
 801de3c:	d901      	bls.n	801de42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801de3e:	2303      	movs	r3, #3
 801de40:	e167      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801de42:	4b0b      	ldr	r3, [pc, #44]	; (801de70 <HAL_RCC_OscConfig+0x240>)
 801de44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de46:	f003 0302 	and.w	r3, r3, #2
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	d0f0      	beq.n	801de30 <HAL_RCC_OscConfig+0x200>
 801de4e:	e01b      	b.n	801de88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801de50:	4b09      	ldr	r3, [pc, #36]	; (801de78 <HAL_RCC_OscConfig+0x248>)
 801de52:	2200      	movs	r2, #0
 801de54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801de56:	f7fa f8db 	bl	8018010 <HAL_GetTick>
 801de5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801de5c:	e00e      	b.n	801de7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801de5e:	f7fa f8d7 	bl	8018010 <HAL_GetTick>
 801de62:	4602      	mov	r2, r0
 801de64:	693b      	ldr	r3, [r7, #16]
 801de66:	1ad3      	subs	r3, r2, r3
 801de68:	2b02      	cmp	r3, #2
 801de6a:	d907      	bls.n	801de7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801de6c:	2303      	movs	r3, #3
 801de6e:	e150      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
 801de70:	40023800 	.word	0x40023800
 801de74:	42470000 	.word	0x42470000
 801de78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801de7c:	4b88      	ldr	r3, [pc, #544]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801de7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de80:	f003 0302 	and.w	r3, r3, #2
 801de84:	2b00      	cmp	r3, #0
 801de86:	d1ea      	bne.n	801de5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	f003 0304 	and.w	r3, r3, #4
 801de90:	2b00      	cmp	r3, #0
 801de92:	f000 8097 	beq.w	801dfc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801de96:	2300      	movs	r3, #0
 801de98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801de9a:	4b81      	ldr	r3, [pc, #516]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801de9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d10f      	bne.n	801dec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801dea6:	2300      	movs	r3, #0
 801dea8:	60bb      	str	r3, [r7, #8]
 801deaa:	4b7d      	ldr	r3, [pc, #500]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801deac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801deae:	4a7c      	ldr	r2, [pc, #496]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801deb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801deb4:	6413      	str	r3, [r2, #64]	; 0x40
 801deb6:	4b7a      	ldr	r3, [pc, #488]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801deb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801deba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801debe:	60bb      	str	r3, [r7, #8]
 801dec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801dec2:	2301      	movs	r3, #1
 801dec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801dec6:	4b77      	ldr	r3, [pc, #476]	; (801e0a4 <HAL_RCC_OscConfig+0x474>)
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d118      	bne.n	801df04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801ded2:	4b74      	ldr	r3, [pc, #464]	; (801e0a4 <HAL_RCC_OscConfig+0x474>)
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	4a73      	ldr	r2, [pc, #460]	; (801e0a4 <HAL_RCC_OscConfig+0x474>)
 801ded8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801dedc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801dede:	f7fa f897 	bl	8018010 <HAL_GetTick>
 801dee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801dee4:	e008      	b.n	801def8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dee6:	f7fa f893 	bl	8018010 <HAL_GetTick>
 801deea:	4602      	mov	r2, r0
 801deec:	693b      	ldr	r3, [r7, #16]
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	2b02      	cmp	r3, #2
 801def2:	d901      	bls.n	801def8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801def4:	2303      	movs	r3, #3
 801def6:	e10c      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801def8:	4b6a      	ldr	r3, [pc, #424]	; (801e0a4 <HAL_RCC_OscConfig+0x474>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df00:	2b00      	cmp	r3, #0
 801df02:	d0f0      	beq.n	801dee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	689b      	ldr	r3, [r3, #8]
 801df08:	2b01      	cmp	r3, #1
 801df0a:	d106      	bne.n	801df1a <HAL_RCC_OscConfig+0x2ea>
 801df0c:	4b64      	ldr	r3, [pc, #400]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df10:	4a63      	ldr	r2, [pc, #396]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df12:	f043 0301 	orr.w	r3, r3, #1
 801df16:	6713      	str	r3, [r2, #112]	; 0x70
 801df18:	e01c      	b.n	801df54 <HAL_RCC_OscConfig+0x324>
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	689b      	ldr	r3, [r3, #8]
 801df1e:	2b05      	cmp	r3, #5
 801df20:	d10c      	bne.n	801df3c <HAL_RCC_OscConfig+0x30c>
 801df22:	4b5f      	ldr	r3, [pc, #380]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df26:	4a5e      	ldr	r2, [pc, #376]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df28:	f043 0304 	orr.w	r3, r3, #4
 801df2c:	6713      	str	r3, [r2, #112]	; 0x70
 801df2e:	4b5c      	ldr	r3, [pc, #368]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df32:	4a5b      	ldr	r2, [pc, #364]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df34:	f043 0301 	orr.w	r3, r3, #1
 801df38:	6713      	str	r3, [r2, #112]	; 0x70
 801df3a:	e00b      	b.n	801df54 <HAL_RCC_OscConfig+0x324>
 801df3c:	4b58      	ldr	r3, [pc, #352]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df40:	4a57      	ldr	r2, [pc, #348]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df42:	f023 0301 	bic.w	r3, r3, #1
 801df46:	6713      	str	r3, [r2, #112]	; 0x70
 801df48:	4b55      	ldr	r3, [pc, #340]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df4c:	4a54      	ldr	r2, [pc, #336]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df4e:	f023 0304 	bic.w	r3, r3, #4
 801df52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	689b      	ldr	r3, [r3, #8]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d015      	beq.n	801df88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801df5c:	f7fa f858 	bl	8018010 <HAL_GetTick>
 801df60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801df62:	e00a      	b.n	801df7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801df64:	f7fa f854 	bl	8018010 <HAL_GetTick>
 801df68:	4602      	mov	r2, r0
 801df6a:	693b      	ldr	r3, [r7, #16]
 801df6c:	1ad3      	subs	r3, r2, r3
 801df6e:	f241 3288 	movw	r2, #5000	; 0x1388
 801df72:	4293      	cmp	r3, r2
 801df74:	d901      	bls.n	801df7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801df76:	2303      	movs	r3, #3
 801df78:	e0cb      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801df7a:	4b49      	ldr	r3, [pc, #292]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801df7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df7e:	f003 0302 	and.w	r3, r3, #2
 801df82:	2b00      	cmp	r3, #0
 801df84:	d0ee      	beq.n	801df64 <HAL_RCC_OscConfig+0x334>
 801df86:	e014      	b.n	801dfb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801df88:	f7fa f842 	bl	8018010 <HAL_GetTick>
 801df8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801df8e:	e00a      	b.n	801dfa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801df90:	f7fa f83e 	bl	8018010 <HAL_GetTick>
 801df94:	4602      	mov	r2, r0
 801df96:	693b      	ldr	r3, [r7, #16]
 801df98:	1ad3      	subs	r3, r2, r3
 801df9a:	f241 3288 	movw	r2, #5000	; 0x1388
 801df9e:	4293      	cmp	r3, r2
 801dfa0:	d901      	bls.n	801dfa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801dfa2:	2303      	movs	r3, #3
 801dfa4:	e0b5      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801dfa6:	4b3e      	ldr	r3, [pc, #248]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801dfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dfaa:	f003 0302 	and.w	r3, r3, #2
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d1ee      	bne.n	801df90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801dfb2:	7dfb      	ldrb	r3, [r7, #23]
 801dfb4:	2b01      	cmp	r3, #1
 801dfb6:	d105      	bne.n	801dfc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801dfb8:	4b39      	ldr	r3, [pc, #228]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801dfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfbc:	4a38      	ldr	r2, [pc, #224]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801dfbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801dfc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	699b      	ldr	r3, [r3, #24]
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	f000 80a1 	beq.w	801e110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801dfce:	4b34      	ldr	r3, [pc, #208]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801dfd0:	689b      	ldr	r3, [r3, #8]
 801dfd2:	f003 030c 	and.w	r3, r3, #12
 801dfd6:	2b08      	cmp	r3, #8
 801dfd8:	d05c      	beq.n	801e094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	699b      	ldr	r3, [r3, #24]
 801dfde:	2b02      	cmp	r3, #2
 801dfe0:	d141      	bne.n	801e066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801dfe2:	4b31      	ldr	r3, [pc, #196]	; (801e0a8 <HAL_RCC_OscConfig+0x478>)
 801dfe4:	2200      	movs	r2, #0
 801dfe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801dfe8:	f7fa f812 	bl	8018010 <HAL_GetTick>
 801dfec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801dfee:	e008      	b.n	801e002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801dff0:	f7fa f80e 	bl	8018010 <HAL_GetTick>
 801dff4:	4602      	mov	r2, r0
 801dff6:	693b      	ldr	r3, [r7, #16]
 801dff8:	1ad3      	subs	r3, r2, r3
 801dffa:	2b02      	cmp	r3, #2
 801dffc:	d901      	bls.n	801e002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801dffe:	2303      	movs	r3, #3
 801e000:	e087      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801e002:	4b27      	ldr	r3, [pc, #156]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801e004:	681b      	ldr	r3, [r3, #0]
 801e006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d1f0      	bne.n	801dff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	69da      	ldr	r2, [r3, #28]
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	6a1b      	ldr	r3, [r3, #32]
 801e016:	431a      	orrs	r2, r3
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e01c:	019b      	lsls	r3, r3, #6
 801e01e:	431a      	orrs	r2, r3
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e024:	085b      	lsrs	r3, r3, #1
 801e026:	3b01      	subs	r3, #1
 801e028:	041b      	lsls	r3, r3, #16
 801e02a:	431a      	orrs	r2, r3
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e030:	061b      	lsls	r3, r3, #24
 801e032:	491b      	ldr	r1, [pc, #108]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801e034:	4313      	orrs	r3, r2
 801e036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801e038:	4b1b      	ldr	r3, [pc, #108]	; (801e0a8 <HAL_RCC_OscConfig+0x478>)
 801e03a:	2201      	movs	r2, #1
 801e03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801e03e:	f7f9 ffe7 	bl	8018010 <HAL_GetTick>
 801e042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801e044:	e008      	b.n	801e058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801e046:	f7f9 ffe3 	bl	8018010 <HAL_GetTick>
 801e04a:	4602      	mov	r2, r0
 801e04c:	693b      	ldr	r3, [r7, #16]
 801e04e:	1ad3      	subs	r3, r2, r3
 801e050:	2b02      	cmp	r3, #2
 801e052:	d901      	bls.n	801e058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801e054:	2303      	movs	r3, #3
 801e056:	e05c      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801e058:	4b11      	ldr	r3, [pc, #68]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e060:	2b00      	cmp	r3, #0
 801e062:	d0f0      	beq.n	801e046 <HAL_RCC_OscConfig+0x416>
 801e064:	e054      	b.n	801e110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801e066:	4b10      	ldr	r3, [pc, #64]	; (801e0a8 <HAL_RCC_OscConfig+0x478>)
 801e068:	2200      	movs	r2, #0
 801e06a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801e06c:	f7f9 ffd0 	bl	8018010 <HAL_GetTick>
 801e070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801e072:	e008      	b.n	801e086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801e074:	f7f9 ffcc 	bl	8018010 <HAL_GetTick>
 801e078:	4602      	mov	r2, r0
 801e07a:	693b      	ldr	r3, [r7, #16]
 801e07c:	1ad3      	subs	r3, r2, r3
 801e07e:	2b02      	cmp	r3, #2
 801e080:	d901      	bls.n	801e086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801e082:	2303      	movs	r3, #3
 801e084:	e045      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801e086:	4b06      	ldr	r3, [pc, #24]	; (801e0a0 <HAL_RCC_OscConfig+0x470>)
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d1f0      	bne.n	801e074 <HAL_RCC_OscConfig+0x444>
 801e092:	e03d      	b.n	801e110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	699b      	ldr	r3, [r3, #24]
 801e098:	2b01      	cmp	r3, #1
 801e09a:	d107      	bne.n	801e0ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801e09c:	2301      	movs	r3, #1
 801e09e:	e038      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
 801e0a0:	40023800 	.word	0x40023800
 801e0a4:	40007000 	.word	0x40007000
 801e0a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801e0ac:	4b1b      	ldr	r3, [pc, #108]	; (801e11c <HAL_RCC_OscConfig+0x4ec>)
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	699b      	ldr	r3, [r3, #24]
 801e0b6:	2b01      	cmp	r3, #1
 801e0b8:	d028      	beq.n	801e10c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	d121      	bne.n	801e10c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801e0d2:	429a      	cmp	r2, r3
 801e0d4:	d11a      	bne.n	801e10c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801e0d6:	68fa      	ldr	r2, [r7, #12]
 801e0d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801e0dc:	4013      	ands	r3, r2
 801e0de:	687a      	ldr	r2, [r7, #4]
 801e0e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801e0e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801e0e4:	4293      	cmp	r3, r2
 801e0e6:	d111      	bne.n	801e10c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0f2:	085b      	lsrs	r3, r3, #1
 801e0f4:	3b01      	subs	r3, #1
 801e0f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801e0f8:	429a      	cmp	r2, r3
 801e0fa:	d107      	bne.n	801e10c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801e108:	429a      	cmp	r2, r3
 801e10a:	d001      	beq.n	801e110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801e10c:	2301      	movs	r3, #1
 801e10e:	e000      	b.n	801e112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801e110:	2300      	movs	r3, #0
}
 801e112:	4618      	mov	r0, r3
 801e114:	3718      	adds	r7, #24
 801e116:	46bd      	mov	sp, r7
 801e118:	bd80      	pop	{r7, pc}
 801e11a:	bf00      	nop
 801e11c:	40023800 	.word	0x40023800

0801e120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b084      	sub	sp, #16
 801e124:	af00      	add	r7, sp, #0
 801e126:	6078      	str	r0, [r7, #4]
 801e128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d101      	bne.n	801e134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801e130:	2301      	movs	r3, #1
 801e132:	e0cc      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801e134:	4b68      	ldr	r3, [pc, #416]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	f003 0307 	and.w	r3, r3, #7
 801e13c:	683a      	ldr	r2, [r7, #0]
 801e13e:	429a      	cmp	r2, r3
 801e140:	d90c      	bls.n	801e15c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801e142:	4b65      	ldr	r3, [pc, #404]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e144:	683a      	ldr	r2, [r7, #0]
 801e146:	b2d2      	uxtb	r2, r2
 801e148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801e14a:	4b63      	ldr	r3, [pc, #396]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	f003 0307 	and.w	r3, r3, #7
 801e152:	683a      	ldr	r2, [r7, #0]
 801e154:	429a      	cmp	r2, r3
 801e156:	d001      	beq.n	801e15c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801e158:	2301      	movs	r3, #1
 801e15a:	e0b8      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	f003 0302 	and.w	r3, r3, #2
 801e164:	2b00      	cmp	r3, #0
 801e166:	d020      	beq.n	801e1aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	f003 0304 	and.w	r3, r3, #4
 801e170:	2b00      	cmp	r3, #0
 801e172:	d005      	beq.n	801e180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801e174:	4b59      	ldr	r3, [pc, #356]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e176:	689b      	ldr	r3, [r3, #8]
 801e178:	4a58      	ldr	r2, [pc, #352]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e17a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801e17e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	f003 0308 	and.w	r3, r3, #8
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d005      	beq.n	801e198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801e18c:	4b53      	ldr	r3, [pc, #332]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e18e:	689b      	ldr	r3, [r3, #8]
 801e190:	4a52      	ldr	r2, [pc, #328]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801e196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801e198:	4b50      	ldr	r3, [pc, #320]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e19a:	689b      	ldr	r3, [r3, #8]
 801e19c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	689b      	ldr	r3, [r3, #8]
 801e1a4:	494d      	ldr	r1, [pc, #308]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e1a6:	4313      	orrs	r3, r2
 801e1a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	f003 0301 	and.w	r3, r3, #1
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d044      	beq.n	801e240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	685b      	ldr	r3, [r3, #4]
 801e1ba:	2b01      	cmp	r3, #1
 801e1bc:	d107      	bne.n	801e1ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801e1be:	4b47      	ldr	r3, [pc, #284]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d119      	bne.n	801e1fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801e1ca:	2301      	movs	r3, #1
 801e1cc:	e07f      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	685b      	ldr	r3, [r3, #4]
 801e1d2:	2b02      	cmp	r3, #2
 801e1d4:	d003      	beq.n	801e1de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801e1da:	2b03      	cmp	r3, #3
 801e1dc:	d107      	bne.n	801e1ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801e1de:	4b3f      	ldr	r3, [pc, #252]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d109      	bne.n	801e1fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	e06f      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801e1ee:	4b3b      	ldr	r3, [pc, #236]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	f003 0302 	and.w	r3, r3, #2
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d101      	bne.n	801e1fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	e067      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801e1fe:	4b37      	ldr	r3, [pc, #220]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e200:	689b      	ldr	r3, [r3, #8]
 801e202:	f023 0203 	bic.w	r2, r3, #3
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	685b      	ldr	r3, [r3, #4]
 801e20a:	4934      	ldr	r1, [pc, #208]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e20c:	4313      	orrs	r3, r2
 801e20e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801e210:	f7f9 fefe 	bl	8018010 <HAL_GetTick>
 801e214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801e216:	e00a      	b.n	801e22e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e218:	f7f9 fefa 	bl	8018010 <HAL_GetTick>
 801e21c:	4602      	mov	r2, r0
 801e21e:	68fb      	ldr	r3, [r7, #12]
 801e220:	1ad3      	subs	r3, r2, r3
 801e222:	f241 3288 	movw	r2, #5000	; 0x1388
 801e226:	4293      	cmp	r3, r2
 801e228:	d901      	bls.n	801e22e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801e22a:	2303      	movs	r3, #3
 801e22c:	e04f      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801e22e:	4b2b      	ldr	r3, [pc, #172]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e230:	689b      	ldr	r3, [r3, #8]
 801e232:	f003 020c 	and.w	r2, r3, #12
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	685b      	ldr	r3, [r3, #4]
 801e23a:	009b      	lsls	r3, r3, #2
 801e23c:	429a      	cmp	r2, r3
 801e23e:	d1eb      	bne.n	801e218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801e240:	4b25      	ldr	r3, [pc, #148]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	f003 0307 	and.w	r3, r3, #7
 801e248:	683a      	ldr	r2, [r7, #0]
 801e24a:	429a      	cmp	r2, r3
 801e24c:	d20c      	bcs.n	801e268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801e24e:	4b22      	ldr	r3, [pc, #136]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e250:	683a      	ldr	r2, [r7, #0]
 801e252:	b2d2      	uxtb	r2, r2
 801e254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801e256:	4b20      	ldr	r3, [pc, #128]	; (801e2d8 <HAL_RCC_ClockConfig+0x1b8>)
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	f003 0307 	and.w	r3, r3, #7
 801e25e:	683a      	ldr	r2, [r7, #0]
 801e260:	429a      	cmp	r2, r3
 801e262:	d001      	beq.n	801e268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801e264:	2301      	movs	r3, #1
 801e266:	e032      	b.n	801e2ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	f003 0304 	and.w	r3, r3, #4
 801e270:	2b00      	cmp	r3, #0
 801e272:	d008      	beq.n	801e286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801e274:	4b19      	ldr	r3, [pc, #100]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e276:	689b      	ldr	r3, [r3, #8]
 801e278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	68db      	ldr	r3, [r3, #12]
 801e280:	4916      	ldr	r1, [pc, #88]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e282:	4313      	orrs	r3, r2
 801e284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	f003 0308 	and.w	r3, r3, #8
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d009      	beq.n	801e2a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801e292:	4b12      	ldr	r3, [pc, #72]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e294:	689b      	ldr	r3, [r3, #8]
 801e296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	691b      	ldr	r3, [r3, #16]
 801e29e:	00db      	lsls	r3, r3, #3
 801e2a0:	490e      	ldr	r1, [pc, #56]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e2a2:	4313      	orrs	r3, r2
 801e2a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801e2a6:	f000 f821 	bl	801e2ec <HAL_RCC_GetSysClockFreq>
 801e2aa:	4602      	mov	r2, r0
 801e2ac:	4b0b      	ldr	r3, [pc, #44]	; (801e2dc <HAL_RCC_ClockConfig+0x1bc>)
 801e2ae:	689b      	ldr	r3, [r3, #8]
 801e2b0:	091b      	lsrs	r3, r3, #4
 801e2b2:	f003 030f 	and.w	r3, r3, #15
 801e2b6:	490a      	ldr	r1, [pc, #40]	; (801e2e0 <HAL_RCC_ClockConfig+0x1c0>)
 801e2b8:	5ccb      	ldrb	r3, [r1, r3]
 801e2ba:	fa22 f303 	lsr.w	r3, r2, r3
 801e2be:	4a09      	ldr	r2, [pc, #36]	; (801e2e4 <HAL_RCC_ClockConfig+0x1c4>)
 801e2c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801e2c2:	4b09      	ldr	r3, [pc, #36]	; (801e2e8 <HAL_RCC_ClockConfig+0x1c8>)
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	4618      	mov	r0, r3
 801e2c8:	f7f9 fe5e 	bl	8017f88 <HAL_InitTick>

  return HAL_OK;
 801e2cc:	2300      	movs	r3, #0
}
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	3710      	adds	r7, #16
 801e2d2:	46bd      	mov	sp, r7
 801e2d4:	bd80      	pop	{r7, pc}
 801e2d6:	bf00      	nop
 801e2d8:	40023c00 	.word	0x40023c00
 801e2dc:	40023800 	.word	0x40023800
 801e2e0:	0802c978 	.word	0x0802c978
 801e2e4:	20000188 	.word	0x20000188
 801e2e8:	200003cc 	.word	0x200003cc

0801e2ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801e2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e2f0:	b094      	sub	sp, #80	; 0x50
 801e2f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	647b      	str	r3, [r7, #68]	; 0x44
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801e300:	2300      	movs	r3, #0
 801e302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801e304:	4b79      	ldr	r3, [pc, #484]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e306:	689b      	ldr	r3, [r3, #8]
 801e308:	f003 030c 	and.w	r3, r3, #12
 801e30c:	2b08      	cmp	r3, #8
 801e30e:	d00d      	beq.n	801e32c <HAL_RCC_GetSysClockFreq+0x40>
 801e310:	2b08      	cmp	r3, #8
 801e312:	f200 80e1 	bhi.w	801e4d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 801e316:	2b00      	cmp	r3, #0
 801e318:	d002      	beq.n	801e320 <HAL_RCC_GetSysClockFreq+0x34>
 801e31a:	2b04      	cmp	r3, #4
 801e31c:	d003      	beq.n	801e326 <HAL_RCC_GetSysClockFreq+0x3a>
 801e31e:	e0db      	b.n	801e4d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801e320:	4b73      	ldr	r3, [pc, #460]	; (801e4f0 <HAL_RCC_GetSysClockFreq+0x204>)
 801e322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801e324:	e0db      	b.n	801e4de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801e326:	4b73      	ldr	r3, [pc, #460]	; (801e4f4 <HAL_RCC_GetSysClockFreq+0x208>)
 801e328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801e32a:	e0d8      	b.n	801e4de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801e32c:	4b6f      	ldr	r3, [pc, #444]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e32e:	685b      	ldr	r3, [r3, #4]
 801e330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801e336:	4b6d      	ldr	r3, [pc, #436]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e338:	685b      	ldr	r3, [r3, #4]
 801e33a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d063      	beq.n	801e40a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801e342:	4b6a      	ldr	r3, [pc, #424]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e344:	685b      	ldr	r3, [r3, #4]
 801e346:	099b      	lsrs	r3, r3, #6
 801e348:	2200      	movs	r2, #0
 801e34a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e34c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e354:	633b      	str	r3, [r7, #48]	; 0x30
 801e356:	2300      	movs	r3, #0
 801e358:	637b      	str	r3, [r7, #52]	; 0x34
 801e35a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801e35e:	4622      	mov	r2, r4
 801e360:	462b      	mov	r3, r5
 801e362:	f04f 0000 	mov.w	r0, #0
 801e366:	f04f 0100 	mov.w	r1, #0
 801e36a:	0159      	lsls	r1, r3, #5
 801e36c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801e370:	0150      	lsls	r0, r2, #5
 801e372:	4602      	mov	r2, r0
 801e374:	460b      	mov	r3, r1
 801e376:	4621      	mov	r1, r4
 801e378:	1a51      	subs	r1, r2, r1
 801e37a:	6139      	str	r1, [r7, #16]
 801e37c:	4629      	mov	r1, r5
 801e37e:	eb63 0301 	sbc.w	r3, r3, r1
 801e382:	617b      	str	r3, [r7, #20]
 801e384:	f04f 0200 	mov.w	r2, #0
 801e388:	f04f 0300 	mov.w	r3, #0
 801e38c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801e390:	4659      	mov	r1, fp
 801e392:	018b      	lsls	r3, r1, #6
 801e394:	4651      	mov	r1, sl
 801e396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801e39a:	4651      	mov	r1, sl
 801e39c:	018a      	lsls	r2, r1, #6
 801e39e:	4651      	mov	r1, sl
 801e3a0:	ebb2 0801 	subs.w	r8, r2, r1
 801e3a4:	4659      	mov	r1, fp
 801e3a6:	eb63 0901 	sbc.w	r9, r3, r1
 801e3aa:	f04f 0200 	mov.w	r2, #0
 801e3ae:	f04f 0300 	mov.w	r3, #0
 801e3b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801e3b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801e3ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801e3be:	4690      	mov	r8, r2
 801e3c0:	4699      	mov	r9, r3
 801e3c2:	4623      	mov	r3, r4
 801e3c4:	eb18 0303 	adds.w	r3, r8, r3
 801e3c8:	60bb      	str	r3, [r7, #8]
 801e3ca:	462b      	mov	r3, r5
 801e3cc:	eb49 0303 	adc.w	r3, r9, r3
 801e3d0:	60fb      	str	r3, [r7, #12]
 801e3d2:	f04f 0200 	mov.w	r2, #0
 801e3d6:	f04f 0300 	mov.w	r3, #0
 801e3da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801e3de:	4629      	mov	r1, r5
 801e3e0:	024b      	lsls	r3, r1, #9
 801e3e2:	4621      	mov	r1, r4
 801e3e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801e3e8:	4621      	mov	r1, r4
 801e3ea:	024a      	lsls	r2, r1, #9
 801e3ec:	4610      	mov	r0, r2
 801e3ee:	4619      	mov	r1, r3
 801e3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e3f2:	2200      	movs	r2, #0
 801e3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 801e3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e3f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801e3fc:	f7ea fb64 	bl	8008ac8 <__aeabi_uldivmod>
 801e400:	4602      	mov	r2, r0
 801e402:	460b      	mov	r3, r1
 801e404:	4613      	mov	r3, r2
 801e406:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e408:	e058      	b.n	801e4bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801e40a:	4b38      	ldr	r3, [pc, #224]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e40c:	685b      	ldr	r3, [r3, #4]
 801e40e:	099b      	lsrs	r3, r3, #6
 801e410:	2200      	movs	r2, #0
 801e412:	4618      	mov	r0, r3
 801e414:	4611      	mov	r1, r2
 801e416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801e41a:	623b      	str	r3, [r7, #32]
 801e41c:	2300      	movs	r3, #0
 801e41e:	627b      	str	r3, [r7, #36]	; 0x24
 801e420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801e424:	4642      	mov	r2, r8
 801e426:	464b      	mov	r3, r9
 801e428:	f04f 0000 	mov.w	r0, #0
 801e42c:	f04f 0100 	mov.w	r1, #0
 801e430:	0159      	lsls	r1, r3, #5
 801e432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801e436:	0150      	lsls	r0, r2, #5
 801e438:	4602      	mov	r2, r0
 801e43a:	460b      	mov	r3, r1
 801e43c:	4641      	mov	r1, r8
 801e43e:	ebb2 0a01 	subs.w	sl, r2, r1
 801e442:	4649      	mov	r1, r9
 801e444:	eb63 0b01 	sbc.w	fp, r3, r1
 801e448:	f04f 0200 	mov.w	r2, #0
 801e44c:	f04f 0300 	mov.w	r3, #0
 801e450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801e454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801e458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801e45c:	ebb2 040a 	subs.w	r4, r2, sl
 801e460:	eb63 050b 	sbc.w	r5, r3, fp
 801e464:	f04f 0200 	mov.w	r2, #0
 801e468:	f04f 0300 	mov.w	r3, #0
 801e46c:	00eb      	lsls	r3, r5, #3
 801e46e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801e472:	00e2      	lsls	r2, r4, #3
 801e474:	4614      	mov	r4, r2
 801e476:	461d      	mov	r5, r3
 801e478:	4643      	mov	r3, r8
 801e47a:	18e3      	adds	r3, r4, r3
 801e47c:	603b      	str	r3, [r7, #0]
 801e47e:	464b      	mov	r3, r9
 801e480:	eb45 0303 	adc.w	r3, r5, r3
 801e484:	607b      	str	r3, [r7, #4]
 801e486:	f04f 0200 	mov.w	r2, #0
 801e48a:	f04f 0300 	mov.w	r3, #0
 801e48e:	e9d7 4500 	ldrd	r4, r5, [r7]
 801e492:	4629      	mov	r1, r5
 801e494:	028b      	lsls	r3, r1, #10
 801e496:	4621      	mov	r1, r4
 801e498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801e49c:	4621      	mov	r1, r4
 801e49e:	028a      	lsls	r2, r1, #10
 801e4a0:	4610      	mov	r0, r2
 801e4a2:	4619      	mov	r1, r3
 801e4a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	61bb      	str	r3, [r7, #24]
 801e4aa:	61fa      	str	r2, [r7, #28]
 801e4ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e4b0:	f7ea fb0a 	bl	8008ac8 <__aeabi_uldivmod>
 801e4b4:	4602      	mov	r2, r0
 801e4b6:	460b      	mov	r3, r1
 801e4b8:	4613      	mov	r3, r2
 801e4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801e4bc:	4b0b      	ldr	r3, [pc, #44]	; (801e4ec <HAL_RCC_GetSysClockFreq+0x200>)
 801e4be:	685b      	ldr	r3, [r3, #4]
 801e4c0:	0c1b      	lsrs	r3, r3, #16
 801e4c2:	f003 0303 	and.w	r3, r3, #3
 801e4c6:	3301      	adds	r3, #1
 801e4c8:	005b      	lsls	r3, r3, #1
 801e4ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801e4cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801e4d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801e4d6:	e002      	b.n	801e4de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801e4d8:	4b05      	ldr	r3, [pc, #20]	; (801e4f0 <HAL_RCC_GetSysClockFreq+0x204>)
 801e4da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801e4dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 801e4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	3750      	adds	r7, #80	; 0x50
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e4ea:	bf00      	nop
 801e4ec:	40023800 	.word	0x40023800
 801e4f0:	00f42400 	.word	0x00f42400
 801e4f4:	007a1200 	.word	0x007a1200

0801e4f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801e4f8:	b480      	push	{r7}
 801e4fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801e4fc:	4b03      	ldr	r3, [pc, #12]	; (801e50c <HAL_RCC_GetHCLKFreq+0x14>)
 801e4fe:	681b      	ldr	r3, [r3, #0]
}
 801e500:	4618      	mov	r0, r3
 801e502:	46bd      	mov	sp, r7
 801e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e508:	4770      	bx	lr
 801e50a:	bf00      	nop
 801e50c:	20000188 	.word	0x20000188

0801e510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801e510:	b580      	push	{r7, lr}
 801e512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801e514:	f7ff fff0 	bl	801e4f8 <HAL_RCC_GetHCLKFreq>
 801e518:	4602      	mov	r2, r0
 801e51a:	4b05      	ldr	r3, [pc, #20]	; (801e530 <HAL_RCC_GetPCLK1Freq+0x20>)
 801e51c:	689b      	ldr	r3, [r3, #8]
 801e51e:	0a9b      	lsrs	r3, r3, #10
 801e520:	f003 0307 	and.w	r3, r3, #7
 801e524:	4903      	ldr	r1, [pc, #12]	; (801e534 <HAL_RCC_GetPCLK1Freq+0x24>)
 801e526:	5ccb      	ldrb	r3, [r1, r3]
 801e528:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e52c:	4618      	mov	r0, r3
 801e52e:	bd80      	pop	{r7, pc}
 801e530:	40023800 	.word	0x40023800
 801e534:	0802c988 	.word	0x0802c988

0801e538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801e538:	b580      	push	{r7, lr}
 801e53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801e53c:	f7ff ffdc 	bl	801e4f8 <HAL_RCC_GetHCLKFreq>
 801e540:	4602      	mov	r2, r0
 801e542:	4b05      	ldr	r3, [pc, #20]	; (801e558 <HAL_RCC_GetPCLK2Freq+0x20>)
 801e544:	689b      	ldr	r3, [r3, #8]
 801e546:	0b5b      	lsrs	r3, r3, #13
 801e548:	f003 0307 	and.w	r3, r3, #7
 801e54c:	4903      	ldr	r1, [pc, #12]	; (801e55c <HAL_RCC_GetPCLK2Freq+0x24>)
 801e54e:	5ccb      	ldrb	r3, [r1, r3]
 801e550:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e554:	4618      	mov	r0, r3
 801e556:	bd80      	pop	{r7, pc}
 801e558:	40023800 	.word	0x40023800
 801e55c:	0802c988 	.word	0x0802c988

0801e560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e560:	b580      	push	{r7, lr}
 801e562:	b082      	sub	sp, #8
 801e564:	af00      	add	r7, sp, #0
 801e566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d101      	bne.n	801e572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e56e:	2301      	movs	r3, #1
 801e570:	e07b      	b.n	801e66a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e576:	2b00      	cmp	r3, #0
 801e578:	d108      	bne.n	801e58c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	685b      	ldr	r3, [r3, #4]
 801e57e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e582:	d009      	beq.n	801e598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	2200      	movs	r2, #0
 801e588:	61da      	str	r2, [r3, #28]
 801e58a:	e005      	b.n	801e598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2200      	movs	r2, #0
 801e590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	2200      	movs	r2, #0
 801e596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	2200      	movs	r2, #0
 801e59c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d106      	bne.n	801e5b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f7f6 fba2 	bl	8014cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	2202      	movs	r2, #2
 801e5bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	681a      	ldr	r2, [r3, #0]
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	685b      	ldr	r3, [r3, #4]
 801e5d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	689b      	ldr	r3, [r3, #8]
 801e5dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801e5e0:	431a      	orrs	r2, r3
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	68db      	ldr	r3, [r3, #12]
 801e5e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e5ea:	431a      	orrs	r2, r3
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	691b      	ldr	r3, [r3, #16]
 801e5f0:	f003 0302 	and.w	r3, r3, #2
 801e5f4:	431a      	orrs	r2, r3
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	695b      	ldr	r3, [r3, #20]
 801e5fa:	f003 0301 	and.w	r3, r3, #1
 801e5fe:	431a      	orrs	r2, r3
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	699b      	ldr	r3, [r3, #24]
 801e604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e608:	431a      	orrs	r2, r3
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	69db      	ldr	r3, [r3, #28]
 801e60e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e612:	431a      	orrs	r2, r3
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	6a1b      	ldr	r3, [r3, #32]
 801e618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e61c:	ea42 0103 	orr.w	r1, r2, r3
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	430a      	orrs	r2, r1
 801e62e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	699b      	ldr	r3, [r3, #24]
 801e634:	0c1b      	lsrs	r3, r3, #16
 801e636:	f003 0104 	and.w	r1, r3, #4
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e63e:	f003 0210 	and.w	r2, r3, #16
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	430a      	orrs	r2, r1
 801e648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	69da      	ldr	r2, [r3, #28]
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	2200      	movs	r2, #0
 801e65e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	2201      	movs	r2, #1
 801e664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801e668:	2300      	movs	r3, #0
}
 801e66a:	4618      	mov	r0, r3
 801e66c:	3708      	adds	r7, #8
 801e66e:	46bd      	mov	sp, r7
 801e670:	bd80      	pop	{r7, pc}

0801e672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e672:	b580      	push	{r7, lr}
 801e674:	b088      	sub	sp, #32
 801e676:	af00      	add	r7, sp, #0
 801e678:	60f8      	str	r0, [r7, #12]
 801e67a:	60b9      	str	r1, [r7, #8]
 801e67c:	603b      	str	r3, [r7, #0]
 801e67e:	4613      	mov	r3, r2
 801e680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e682:	2300      	movs	r3, #0
 801e684:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801e68c:	2b01      	cmp	r3, #1
 801e68e:	d101      	bne.n	801e694 <HAL_SPI_Transmit+0x22>
 801e690:	2302      	movs	r3, #2
 801e692:	e126      	b.n	801e8e2 <HAL_SPI_Transmit+0x270>
 801e694:	68fb      	ldr	r3, [r7, #12]
 801e696:	2201      	movs	r2, #1
 801e698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e69c:	f7f9 fcb8 	bl	8018010 <HAL_GetTick>
 801e6a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801e6a2:	88fb      	ldrh	r3, [r7, #6]
 801e6a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801e6ac:	b2db      	uxtb	r3, r3
 801e6ae:	2b01      	cmp	r3, #1
 801e6b0:	d002      	beq.n	801e6b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801e6b2:	2302      	movs	r3, #2
 801e6b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e6b6:	e10b      	b.n	801e8d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801e6b8:	68bb      	ldr	r3, [r7, #8]
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d002      	beq.n	801e6c4 <HAL_SPI_Transmit+0x52>
 801e6be:	88fb      	ldrh	r3, [r7, #6]
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d102      	bne.n	801e6ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801e6c4:	2301      	movs	r3, #1
 801e6c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e6c8:	e102      	b.n	801e8d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	2203      	movs	r2, #3
 801e6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	68ba      	ldr	r2, [r7, #8]
 801e6dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	88fa      	ldrh	r2, [r7, #6]
 801e6e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	88fa      	ldrh	r2, [r7, #6]
 801e6e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	2200      	movs	r2, #0
 801e6ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801e6fc:	68fb      	ldr	r3, [r7, #12]
 801e6fe:	2200      	movs	r2, #0
 801e700:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	2200      	movs	r2, #0
 801e706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	689b      	ldr	r3, [r3, #8]
 801e70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e710:	d10f      	bne.n	801e732 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	681a      	ldr	r2, [r3, #0]
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	681a      	ldr	r2, [r3, #0]
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e732:	68fb      	ldr	r3, [r7, #12]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e73c:	2b40      	cmp	r3, #64	; 0x40
 801e73e:	d007      	beq.n	801e750 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	681a      	ldr	r2, [r3, #0]
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e74e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	68db      	ldr	r3, [r3, #12]
 801e754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e758:	d14b      	bne.n	801e7f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e75a:	68fb      	ldr	r3, [r7, #12]
 801e75c:	685b      	ldr	r3, [r3, #4]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d002      	beq.n	801e768 <HAL_SPI_Transmit+0xf6>
 801e762:	8afb      	ldrh	r3, [r7, #22]
 801e764:	2b01      	cmp	r3, #1
 801e766:	d13e      	bne.n	801e7e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e768:	68fb      	ldr	r3, [r7, #12]
 801e76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e76c:	881a      	ldrh	r2, [r3, #0]
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e778:	1c9a      	adds	r2, r3, #2
 801e77a:	68fb      	ldr	r3, [r7, #12]
 801e77c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e782:	b29b      	uxth	r3, r3
 801e784:	3b01      	subs	r3, #1
 801e786:	b29a      	uxth	r2, r3
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801e78c:	e02b      	b.n	801e7e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e78e:	68fb      	ldr	r3, [r7, #12]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	689b      	ldr	r3, [r3, #8]
 801e794:	f003 0302 	and.w	r3, r3, #2
 801e798:	2b02      	cmp	r3, #2
 801e79a:	d112      	bne.n	801e7c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e7a0:	881a      	ldrh	r2, [r3, #0]
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e7ac:	1c9a      	adds	r2, r3, #2
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801e7b2:	68fb      	ldr	r3, [r7, #12]
 801e7b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e7b6:	b29b      	uxth	r3, r3
 801e7b8:	3b01      	subs	r3, #1
 801e7ba:	b29a      	uxth	r2, r3
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	86da      	strh	r2, [r3, #54]	; 0x36
 801e7c0:	e011      	b.n	801e7e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e7c2:	f7f9 fc25 	bl	8018010 <HAL_GetTick>
 801e7c6:	4602      	mov	r2, r0
 801e7c8:	69bb      	ldr	r3, [r7, #24]
 801e7ca:	1ad3      	subs	r3, r2, r3
 801e7cc:	683a      	ldr	r2, [r7, #0]
 801e7ce:	429a      	cmp	r2, r3
 801e7d0:	d803      	bhi.n	801e7da <HAL_SPI_Transmit+0x168>
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e7d8:	d102      	bne.n	801e7e0 <HAL_SPI_Transmit+0x16e>
 801e7da:	683b      	ldr	r3, [r7, #0]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d102      	bne.n	801e7e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801e7e0:	2303      	movs	r3, #3
 801e7e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e7e4:	e074      	b.n	801e8d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e7ea:	b29b      	uxth	r3, r3
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d1ce      	bne.n	801e78e <HAL_SPI_Transmit+0x11c>
 801e7f0:	e04c      	b.n	801e88c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	685b      	ldr	r3, [r3, #4]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d002      	beq.n	801e800 <HAL_SPI_Transmit+0x18e>
 801e7fa:	8afb      	ldrh	r3, [r7, #22]
 801e7fc:	2b01      	cmp	r3, #1
 801e7fe:	d140      	bne.n	801e882 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e804:	68fb      	ldr	r3, [r7, #12]
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	330c      	adds	r3, #12
 801e80a:	7812      	ldrb	r2, [r2, #0]
 801e80c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e812:	1c5a      	adds	r2, r3, #1
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e81c:	b29b      	uxth	r3, r3
 801e81e:	3b01      	subs	r3, #1
 801e820:	b29a      	uxth	r2, r3
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801e826:	e02c      	b.n	801e882 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	689b      	ldr	r3, [r3, #8]
 801e82e:	f003 0302 	and.w	r3, r3, #2
 801e832:	2b02      	cmp	r3, #2
 801e834:	d113      	bne.n	801e85e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e836:	68fb      	ldr	r3, [r7, #12]
 801e838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	330c      	adds	r3, #12
 801e840:	7812      	ldrb	r2, [r2, #0]
 801e842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e848:	1c5a      	adds	r2, r3, #1
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e852:	b29b      	uxth	r3, r3
 801e854:	3b01      	subs	r3, #1
 801e856:	b29a      	uxth	r2, r3
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	86da      	strh	r2, [r3, #54]	; 0x36
 801e85c:	e011      	b.n	801e882 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e85e:	f7f9 fbd7 	bl	8018010 <HAL_GetTick>
 801e862:	4602      	mov	r2, r0
 801e864:	69bb      	ldr	r3, [r7, #24]
 801e866:	1ad3      	subs	r3, r2, r3
 801e868:	683a      	ldr	r2, [r7, #0]
 801e86a:	429a      	cmp	r2, r3
 801e86c:	d803      	bhi.n	801e876 <HAL_SPI_Transmit+0x204>
 801e86e:	683b      	ldr	r3, [r7, #0]
 801e870:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e874:	d102      	bne.n	801e87c <HAL_SPI_Transmit+0x20a>
 801e876:	683b      	ldr	r3, [r7, #0]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d102      	bne.n	801e882 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801e87c:	2303      	movs	r3, #3
 801e87e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e880:	e026      	b.n	801e8d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801e886:	b29b      	uxth	r3, r3
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d1cd      	bne.n	801e828 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e88c:	69ba      	ldr	r2, [r7, #24]
 801e88e:	6839      	ldr	r1, [r7, #0]
 801e890:	68f8      	ldr	r0, [r7, #12]
 801e892:	f000 fcdf 	bl	801f254 <SPI_EndRxTxTransaction>
 801e896:	4603      	mov	r3, r0
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d002      	beq.n	801e8a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	2220      	movs	r2, #32
 801e8a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	689b      	ldr	r3, [r3, #8]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d10a      	bne.n	801e8c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	613b      	str	r3, [r7, #16]
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	68db      	ldr	r3, [r3, #12]
 801e8b4:	613b      	str	r3, [r7, #16]
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	689b      	ldr	r3, [r3, #8]
 801e8bc:	613b      	str	r3, [r7, #16]
 801e8be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d002      	beq.n	801e8ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801e8c8:	2301      	movs	r3, #1
 801e8ca:	77fb      	strb	r3, [r7, #31]
 801e8cc:	e000      	b.n	801e8d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 801e8ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	2201      	movs	r2, #1
 801e8d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	2200      	movs	r2, #0
 801e8dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801e8e0:	7ffb      	ldrb	r3, [r7, #31]
}
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	3720      	adds	r7, #32
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	bd80      	pop	{r7, pc}

0801e8ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e8ea:	b580      	push	{r7, lr}
 801e8ec:	b088      	sub	sp, #32
 801e8ee:	af02      	add	r7, sp, #8
 801e8f0:	60f8      	str	r0, [r7, #12]
 801e8f2:	60b9      	str	r1, [r7, #8]
 801e8f4:	603b      	str	r3, [r7, #0]
 801e8f6:	4613      	mov	r3, r2
 801e8f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e8fa:	2300      	movs	r3, #0
 801e8fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	685b      	ldr	r3, [r3, #4]
 801e902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e906:	d112      	bne.n	801e92e <HAL_SPI_Receive+0x44>
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	689b      	ldr	r3, [r3, #8]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d10e      	bne.n	801e92e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	2204      	movs	r2, #4
 801e914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801e918:	88fa      	ldrh	r2, [r7, #6]
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	9300      	str	r3, [sp, #0]
 801e91e:	4613      	mov	r3, r2
 801e920:	68ba      	ldr	r2, [r7, #8]
 801e922:	68b9      	ldr	r1, [r7, #8]
 801e924:	68f8      	ldr	r0, [r7, #12]
 801e926:	f000 f8f1 	bl	801eb0c <HAL_SPI_TransmitReceive>
 801e92a:	4603      	mov	r3, r0
 801e92c:	e0ea      	b.n	801eb04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801e934:	2b01      	cmp	r3, #1
 801e936:	d101      	bne.n	801e93c <HAL_SPI_Receive+0x52>
 801e938:	2302      	movs	r3, #2
 801e93a:	e0e3      	b.n	801eb04 <HAL_SPI_Receive+0x21a>
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	2201      	movs	r2, #1
 801e940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e944:	f7f9 fb64 	bl	8018010 <HAL_GetTick>
 801e948:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801e950:	b2db      	uxtb	r3, r3
 801e952:	2b01      	cmp	r3, #1
 801e954:	d002      	beq.n	801e95c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801e956:	2302      	movs	r3, #2
 801e958:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e95a:	e0ca      	b.n	801eaf2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801e95c:	68bb      	ldr	r3, [r7, #8]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d002      	beq.n	801e968 <HAL_SPI_Receive+0x7e>
 801e962:	88fb      	ldrh	r3, [r7, #6]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d102      	bne.n	801e96e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801e968:	2301      	movs	r3, #1
 801e96a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e96c:	e0c1      	b.n	801eaf2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	2204      	movs	r2, #4
 801e972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e976:	68fb      	ldr	r3, [r7, #12]
 801e978:	2200      	movs	r2, #0
 801e97a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	68ba      	ldr	r2, [r7, #8]
 801e980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	88fa      	ldrh	r2, [r7, #6]
 801e986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801e988:	68fb      	ldr	r3, [r7, #12]
 801e98a:	88fa      	ldrh	r2, [r7, #6]
 801e98c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	2200      	movs	r2, #0
 801e992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	2200      	movs	r2, #0
 801e998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801e99a:	68fb      	ldr	r3, [r7, #12]
 801e99c:	2200      	movs	r2, #0
 801e99e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	2200      	movs	r2, #0
 801e9a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801e9a6:	68fb      	ldr	r3, [r7, #12]
 801e9a8:	2200      	movs	r2, #0
 801e9aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	689b      	ldr	r3, [r3, #8]
 801e9b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e9b4:	d10f      	bne.n	801e9d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	681a      	ldr	r2, [r3, #0]
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	681b      	ldr	r3, [r3, #0]
 801e9c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e9c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	681a      	ldr	r2, [r3, #0]
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801e9d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e9e0:	2b40      	cmp	r3, #64	; 0x40
 801e9e2:	d007      	beq.n	801e9f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	681a      	ldr	r2, [r3, #0]
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e9f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	68db      	ldr	r3, [r3, #12]
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	d162      	bne.n	801eac2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e9fc:	e02e      	b.n	801ea5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e9fe:	68fb      	ldr	r3, [r7, #12]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	689b      	ldr	r3, [r3, #8]
 801ea04:	f003 0301 	and.w	r3, r3, #1
 801ea08:	2b01      	cmp	r3, #1
 801ea0a:	d115      	bne.n	801ea38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	f103 020c 	add.w	r2, r3, #12
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea18:	7812      	ldrb	r2, [r2, #0]
 801ea1a:	b2d2      	uxtb	r2, r2
 801ea1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea22:	1c5a      	adds	r2, r3, #1
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801ea28:	68fb      	ldr	r3, [r7, #12]
 801ea2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ea2c:	b29b      	uxth	r3, r3
 801ea2e:	3b01      	subs	r3, #1
 801ea30:	b29a      	uxth	r2, r3
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ea36:	e011      	b.n	801ea5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801ea38:	f7f9 faea 	bl	8018010 <HAL_GetTick>
 801ea3c:	4602      	mov	r2, r0
 801ea3e:	693b      	ldr	r3, [r7, #16]
 801ea40:	1ad3      	subs	r3, r2, r3
 801ea42:	683a      	ldr	r2, [r7, #0]
 801ea44:	429a      	cmp	r2, r3
 801ea46:	d803      	bhi.n	801ea50 <HAL_SPI_Receive+0x166>
 801ea48:	683b      	ldr	r3, [r7, #0]
 801ea4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea4e:	d102      	bne.n	801ea56 <HAL_SPI_Receive+0x16c>
 801ea50:	683b      	ldr	r3, [r7, #0]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d102      	bne.n	801ea5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801ea56:	2303      	movs	r3, #3
 801ea58:	75fb      	strb	r3, [r7, #23]
          goto error;
 801ea5a:	e04a      	b.n	801eaf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ea60:	b29b      	uxth	r3, r3
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	d1cb      	bne.n	801e9fe <HAL_SPI_Receive+0x114>
 801ea66:	e031      	b.n	801eacc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	689b      	ldr	r3, [r3, #8]
 801ea6e:	f003 0301 	and.w	r3, r3, #1
 801ea72:	2b01      	cmp	r3, #1
 801ea74:	d113      	bne.n	801ea9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	68da      	ldr	r2, [r3, #12]
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea80:	b292      	uxth	r2, r2
 801ea82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea88:	1c9a      	adds	r2, r3, #2
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ea92:	b29b      	uxth	r3, r3
 801ea94:	3b01      	subs	r3, #1
 801ea96:	b29a      	uxth	r2, r3
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ea9c:	e011      	b.n	801eac2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801ea9e:	f7f9 fab7 	bl	8018010 <HAL_GetTick>
 801eaa2:	4602      	mov	r2, r0
 801eaa4:	693b      	ldr	r3, [r7, #16]
 801eaa6:	1ad3      	subs	r3, r2, r3
 801eaa8:	683a      	ldr	r2, [r7, #0]
 801eaaa:	429a      	cmp	r2, r3
 801eaac:	d803      	bhi.n	801eab6 <HAL_SPI_Receive+0x1cc>
 801eaae:	683b      	ldr	r3, [r7, #0]
 801eab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eab4:	d102      	bne.n	801eabc <HAL_SPI_Receive+0x1d2>
 801eab6:	683b      	ldr	r3, [r7, #0]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d102      	bne.n	801eac2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801eabc:	2303      	movs	r3, #3
 801eabe:	75fb      	strb	r3, [r7, #23]
          goto error;
 801eac0:	e017      	b.n	801eaf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801eac6:	b29b      	uxth	r3, r3
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d1cd      	bne.n	801ea68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801eacc:	693a      	ldr	r2, [r7, #16]
 801eace:	6839      	ldr	r1, [r7, #0]
 801ead0:	68f8      	ldr	r0, [r7, #12]
 801ead2:	f000 fb59 	bl	801f188 <SPI_EndRxTransaction>
 801ead6:	4603      	mov	r3, r0
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d002      	beq.n	801eae2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	2220      	movs	r2, #32
 801eae0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801eae2:	68fb      	ldr	r3, [r7, #12]
 801eae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d002      	beq.n	801eaf0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801eaea:	2301      	movs	r3, #1
 801eaec:	75fb      	strb	r3, [r7, #23]
 801eaee:	e000      	b.n	801eaf2 <HAL_SPI_Receive+0x208>
  }

error :
 801eaf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	2201      	movs	r2, #1
 801eaf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801eafa:	68fb      	ldr	r3, [r7, #12]
 801eafc:	2200      	movs	r2, #0
 801eafe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801eb02:	7dfb      	ldrb	r3, [r7, #23]
}
 801eb04:	4618      	mov	r0, r3
 801eb06:	3718      	adds	r7, #24
 801eb08:	46bd      	mov	sp, r7
 801eb0a:	bd80      	pop	{r7, pc}

0801eb0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801eb0c:	b580      	push	{r7, lr}
 801eb0e:	b08c      	sub	sp, #48	; 0x30
 801eb10:	af00      	add	r7, sp, #0
 801eb12:	60f8      	str	r0, [r7, #12]
 801eb14:	60b9      	str	r1, [r7, #8]
 801eb16:	607a      	str	r2, [r7, #4]
 801eb18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801eb1e:	2300      	movs	r3, #0
 801eb20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801eb2a:	2b01      	cmp	r3, #1
 801eb2c:	d101      	bne.n	801eb32 <HAL_SPI_TransmitReceive+0x26>
 801eb2e:	2302      	movs	r3, #2
 801eb30:	e18a      	b.n	801ee48 <HAL_SPI_TransmitReceive+0x33c>
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	2201      	movs	r2, #1
 801eb36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801eb3a:	f7f9 fa69 	bl	8018010 <HAL_GetTick>
 801eb3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801eb46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801eb4a:	68fb      	ldr	r3, [r7, #12]
 801eb4c:	685b      	ldr	r3, [r3, #4]
 801eb4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801eb50:	887b      	ldrh	r3, [r7, #2]
 801eb52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801eb54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801eb58:	2b01      	cmp	r3, #1
 801eb5a:	d00f      	beq.n	801eb7c <HAL_SPI_TransmitReceive+0x70>
 801eb5c:	69fb      	ldr	r3, [r7, #28]
 801eb5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801eb62:	d107      	bne.n	801eb74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	689b      	ldr	r3, [r3, #8]
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d103      	bne.n	801eb74 <HAL_SPI_TransmitReceive+0x68>
 801eb6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801eb70:	2b04      	cmp	r3, #4
 801eb72:	d003      	beq.n	801eb7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801eb74:	2302      	movs	r3, #2
 801eb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801eb7a:	e15b      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801eb7c:	68bb      	ldr	r3, [r7, #8]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d005      	beq.n	801eb8e <HAL_SPI_TransmitReceive+0x82>
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d002      	beq.n	801eb8e <HAL_SPI_TransmitReceive+0x82>
 801eb88:	887b      	ldrh	r3, [r7, #2]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d103      	bne.n	801eb96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801eb8e:	2301      	movs	r3, #1
 801eb90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801eb94:	e14e      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801eb9c:	b2db      	uxtb	r3, r3
 801eb9e:	2b04      	cmp	r3, #4
 801eba0:	d003      	beq.n	801ebaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	2205      	movs	r2, #5
 801eba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	2200      	movs	r2, #0
 801ebae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	687a      	ldr	r2, [r7, #4]
 801ebb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	887a      	ldrh	r2, [r7, #2]
 801ebba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	887a      	ldrh	r2, [r7, #2]
 801ebc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801ebc2:	68fb      	ldr	r3, [r7, #12]
 801ebc4:	68ba      	ldr	r2, [r7, #8]
 801ebc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	887a      	ldrh	r2, [r7, #2]
 801ebcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	887a      	ldrh	r2, [r7, #2]
 801ebd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801ebd4:	68fb      	ldr	r3, [r7, #12]
 801ebd6:	2200      	movs	r2, #0
 801ebd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	2200      	movs	r2, #0
 801ebde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ebe0:	68fb      	ldr	r3, [r7, #12]
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ebea:	2b40      	cmp	r3, #64	; 0x40
 801ebec:	d007      	beq.n	801ebfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	681a      	ldr	r2, [r3, #0]
 801ebf4:	68fb      	ldr	r3, [r7, #12]
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ebfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801ebfe:	68fb      	ldr	r3, [r7, #12]
 801ec00:	68db      	ldr	r3, [r3, #12]
 801ec02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ec06:	d178      	bne.n	801ecfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	685b      	ldr	r3, [r3, #4]
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d002      	beq.n	801ec16 <HAL_SPI_TransmitReceive+0x10a>
 801ec10:	8b7b      	ldrh	r3, [r7, #26]
 801ec12:	2b01      	cmp	r3, #1
 801ec14:	d166      	bne.n	801ece4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec1a:	881a      	ldrh	r2, [r3, #0]
 801ec1c:	68fb      	ldr	r3, [r7, #12]
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec26:	1c9a      	adds	r2, r3, #2
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ec30:	b29b      	uxth	r3, r3
 801ec32:	3b01      	subs	r3, #1
 801ec34:	b29a      	uxth	r2, r3
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ec3a:	e053      	b.n	801ece4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	689b      	ldr	r3, [r3, #8]
 801ec42:	f003 0302 	and.w	r3, r3, #2
 801ec46:	2b02      	cmp	r3, #2
 801ec48:	d11b      	bne.n	801ec82 <HAL_SPI_TransmitReceive+0x176>
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ec4e:	b29b      	uxth	r3, r3
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d016      	beq.n	801ec82 <HAL_SPI_TransmitReceive+0x176>
 801ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec56:	2b01      	cmp	r3, #1
 801ec58:	d113      	bne.n	801ec82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec5e:	881a      	ldrh	r2, [r3, #0]
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ec66:	68fb      	ldr	r3, [r7, #12]
 801ec68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ec6a:	1c9a      	adds	r2, r3, #2
 801ec6c:	68fb      	ldr	r3, [r7, #12]
 801ec6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	3b01      	subs	r3, #1
 801ec78:	b29a      	uxth	r2, r3
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	689b      	ldr	r3, [r3, #8]
 801ec88:	f003 0301 	and.w	r3, r3, #1
 801ec8c:	2b01      	cmp	r3, #1
 801ec8e:	d119      	bne.n	801ecc4 <HAL_SPI_TransmitReceive+0x1b8>
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ec94:	b29b      	uxth	r3, r3
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d014      	beq.n	801ecc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	68da      	ldr	r2, [r3, #12]
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eca4:	b292      	uxth	r2, r2
 801eca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ecac:	1c9a      	adds	r2, r3, #2
 801ecae:	68fb      	ldr	r3, [r7, #12]
 801ecb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ecb6:	b29b      	uxth	r3, r3
 801ecb8:	3b01      	subs	r3, #1
 801ecba:	b29a      	uxth	r2, r3
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ecc0:	2301      	movs	r3, #1
 801ecc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ecc4:	f7f9 f9a4 	bl	8018010 <HAL_GetTick>
 801ecc8:	4602      	mov	r2, r0
 801ecca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eccc:	1ad3      	subs	r3, r2, r3
 801ecce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ecd0:	429a      	cmp	r2, r3
 801ecd2:	d807      	bhi.n	801ece4 <HAL_SPI_TransmitReceive+0x1d8>
 801ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ecd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ecda:	d003      	beq.n	801ece4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801ecdc:	2303      	movs	r3, #3
 801ecde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801ece2:	e0a7      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ece8:	b29b      	uxth	r3, r3
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	d1a6      	bne.n	801ec3c <HAL_SPI_TransmitReceive+0x130>
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ecf2:	b29b      	uxth	r3, r3
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d1a1      	bne.n	801ec3c <HAL_SPI_TransmitReceive+0x130>
 801ecf8:	e07c      	b.n	801edf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ecfa:	68fb      	ldr	r3, [r7, #12]
 801ecfc:	685b      	ldr	r3, [r3, #4]
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d002      	beq.n	801ed08 <HAL_SPI_TransmitReceive+0x1fc>
 801ed02:	8b7b      	ldrh	r3, [r7, #26]
 801ed04:	2b01      	cmp	r3, #1
 801ed06:	d16b      	bne.n	801ede0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	330c      	adds	r3, #12
 801ed12:	7812      	ldrb	r2, [r2, #0]
 801ed14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed1a:	1c5a      	adds	r2, r3, #1
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ed24:	b29b      	uxth	r3, r3
 801ed26:	3b01      	subs	r3, #1
 801ed28:	b29a      	uxth	r2, r3
 801ed2a:	68fb      	ldr	r3, [r7, #12]
 801ed2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ed2e:	e057      	b.n	801ede0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	689b      	ldr	r3, [r3, #8]
 801ed36:	f003 0302 	and.w	r3, r3, #2
 801ed3a:	2b02      	cmp	r3, #2
 801ed3c:	d11c      	bne.n	801ed78 <HAL_SPI_TransmitReceive+0x26c>
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ed42:	b29b      	uxth	r3, r3
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d017      	beq.n	801ed78 <HAL_SPI_TransmitReceive+0x26c>
 801ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed4a:	2b01      	cmp	r3, #1
 801ed4c:	d114      	bne.n	801ed78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	330c      	adds	r3, #12
 801ed58:	7812      	ldrb	r2, [r2, #0]
 801ed5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ed60:	1c5a      	adds	r2, r3, #1
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ed6a:	b29b      	uxth	r3, r3
 801ed6c:	3b01      	subs	r3, #1
 801ed6e:	b29a      	uxth	r2, r3
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ed74:	2300      	movs	r3, #0
 801ed76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	681b      	ldr	r3, [r3, #0]
 801ed7c:	689b      	ldr	r3, [r3, #8]
 801ed7e:	f003 0301 	and.w	r3, r3, #1
 801ed82:	2b01      	cmp	r3, #1
 801ed84:	d119      	bne.n	801edba <HAL_SPI_TransmitReceive+0x2ae>
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed8a:	b29b      	uxth	r3, r3
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	d014      	beq.n	801edba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	68da      	ldr	r2, [r3, #12]
 801ed96:	68fb      	ldr	r3, [r7, #12]
 801ed98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed9a:	b2d2      	uxtb	r2, r2
 801ed9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eda2:	1c5a      	adds	r2, r3, #1
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801eda8:	68fb      	ldr	r3, [r7, #12]
 801edaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801edac:	b29b      	uxth	r3, r3
 801edae:	3b01      	subs	r3, #1
 801edb0:	b29a      	uxth	r2, r3
 801edb2:	68fb      	ldr	r3, [r7, #12]
 801edb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801edb6:	2301      	movs	r3, #1
 801edb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801edba:	f7f9 f929 	bl	8018010 <HAL_GetTick>
 801edbe:	4602      	mov	r2, r0
 801edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edc2:	1ad3      	subs	r3, r2, r3
 801edc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801edc6:	429a      	cmp	r2, r3
 801edc8:	d803      	bhi.n	801edd2 <HAL_SPI_TransmitReceive+0x2c6>
 801edca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edd0:	d102      	bne.n	801edd8 <HAL_SPI_TransmitReceive+0x2cc>
 801edd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d103      	bne.n	801ede0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801edd8:	2303      	movs	r3, #3
 801edda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801edde:	e029      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ede4:	b29b      	uxth	r3, r3
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d1a2      	bne.n	801ed30 <HAL_SPI_TransmitReceive+0x224>
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801edee:	b29b      	uxth	r3, r3
 801edf0:	2b00      	cmp	r3, #0
 801edf2:	d19d      	bne.n	801ed30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801edf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801edf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801edf8:	68f8      	ldr	r0, [r7, #12]
 801edfa:	f000 fa2b 	bl	801f254 <SPI_EndRxTxTransaction>
 801edfe:	4603      	mov	r3, r0
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d006      	beq.n	801ee12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801ee04:	2301      	movs	r3, #1
 801ee06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	2220      	movs	r2, #32
 801ee0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801ee10:	e010      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	689b      	ldr	r3, [r3, #8]
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	d10b      	bne.n	801ee32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ee1a:	2300      	movs	r3, #0
 801ee1c:	617b      	str	r3, [r7, #20]
 801ee1e:	68fb      	ldr	r3, [r7, #12]
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	68db      	ldr	r3, [r3, #12]
 801ee24:	617b      	str	r3, [r7, #20]
 801ee26:	68fb      	ldr	r3, [r7, #12]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	689b      	ldr	r3, [r3, #8]
 801ee2c:	617b      	str	r3, [r7, #20]
 801ee2e:	697b      	ldr	r3, [r7, #20]
 801ee30:	e000      	b.n	801ee34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801ee32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	2201      	movs	r2, #1
 801ee38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	2200      	movs	r2, #0
 801ee40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801ee44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801ee48:	4618      	mov	r0, r3
 801ee4a:	3730      	adds	r7, #48	; 0x30
 801ee4c:	46bd      	mov	sp, r7
 801ee4e:	bd80      	pop	{r7, pc}

0801ee50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801ee50:	b580      	push	{r7, lr}
 801ee52:	b088      	sub	sp, #32
 801ee54:	af00      	add	r7, sp, #0
 801ee56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	685b      	ldr	r3, [r3, #4]
 801ee5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	689b      	ldr	r3, [r3, #8]
 801ee66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801ee68:	69bb      	ldr	r3, [r7, #24]
 801ee6a:	099b      	lsrs	r3, r3, #6
 801ee6c:	f003 0301 	and.w	r3, r3, #1
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d10f      	bne.n	801ee94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801ee74:	69bb      	ldr	r3, [r7, #24]
 801ee76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d00a      	beq.n	801ee94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801ee7e:	69fb      	ldr	r3, [r7, #28]
 801ee80:	099b      	lsrs	r3, r3, #6
 801ee82:	f003 0301 	and.w	r3, r3, #1
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d004      	beq.n	801ee94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee8e:	6878      	ldr	r0, [r7, #4]
 801ee90:	4798      	blx	r3
    return;
 801ee92:	e0d7      	b.n	801f044 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801ee94:	69bb      	ldr	r3, [r7, #24]
 801ee96:	085b      	lsrs	r3, r3, #1
 801ee98:	f003 0301 	and.w	r3, r3, #1
 801ee9c:	2b00      	cmp	r3, #0
 801ee9e:	d00a      	beq.n	801eeb6 <HAL_SPI_IRQHandler+0x66>
 801eea0:	69fb      	ldr	r3, [r7, #28]
 801eea2:	09db      	lsrs	r3, r3, #7
 801eea4:	f003 0301 	and.w	r3, r3, #1
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	d004      	beq.n	801eeb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eeb0:	6878      	ldr	r0, [r7, #4]
 801eeb2:	4798      	blx	r3
    return;
 801eeb4:	e0c6      	b.n	801f044 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801eeb6:	69bb      	ldr	r3, [r7, #24]
 801eeb8:	095b      	lsrs	r3, r3, #5
 801eeba:	f003 0301 	and.w	r3, r3, #1
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	d10c      	bne.n	801eedc <HAL_SPI_IRQHandler+0x8c>
 801eec2:	69bb      	ldr	r3, [r7, #24]
 801eec4:	099b      	lsrs	r3, r3, #6
 801eec6:	f003 0301 	and.w	r3, r3, #1
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d106      	bne.n	801eedc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801eece:	69bb      	ldr	r3, [r7, #24]
 801eed0:	0a1b      	lsrs	r3, r3, #8
 801eed2:	f003 0301 	and.w	r3, r3, #1
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	f000 80b4 	beq.w	801f044 <HAL_SPI_IRQHandler+0x1f4>
 801eedc:	69fb      	ldr	r3, [r7, #28]
 801eede:	095b      	lsrs	r3, r3, #5
 801eee0:	f003 0301 	and.w	r3, r3, #1
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	f000 80ad 	beq.w	801f044 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801eeea:	69bb      	ldr	r3, [r7, #24]
 801eeec:	099b      	lsrs	r3, r3, #6
 801eeee:	f003 0301 	and.w	r3, r3, #1
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d023      	beq.n	801ef3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801eefc:	b2db      	uxtb	r3, r3
 801eefe:	2b03      	cmp	r3, #3
 801ef00:	d011      	beq.n	801ef26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ef06:	f043 0204 	orr.w	r2, r3, #4
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ef0e:	2300      	movs	r3, #0
 801ef10:	617b      	str	r3, [r7, #20]
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	68db      	ldr	r3, [r3, #12]
 801ef18:	617b      	str	r3, [r7, #20]
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	689b      	ldr	r3, [r3, #8]
 801ef20:	617b      	str	r3, [r7, #20]
 801ef22:	697b      	ldr	r3, [r7, #20]
 801ef24:	e00b      	b.n	801ef3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ef26:	2300      	movs	r3, #0
 801ef28:	613b      	str	r3, [r7, #16]
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	68db      	ldr	r3, [r3, #12]
 801ef30:	613b      	str	r3, [r7, #16]
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	689b      	ldr	r3, [r3, #8]
 801ef38:	613b      	str	r3, [r7, #16]
 801ef3a:	693b      	ldr	r3, [r7, #16]
        return;
 801ef3c:	e082      	b.n	801f044 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ef3e:	69bb      	ldr	r3, [r7, #24]
 801ef40:	095b      	lsrs	r3, r3, #5
 801ef42:	f003 0301 	and.w	r3, r3, #1
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d014      	beq.n	801ef74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ef4e:	f043 0201 	orr.w	r2, r3, #1
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ef56:	2300      	movs	r3, #0
 801ef58:	60fb      	str	r3, [r7, #12]
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	689b      	ldr	r3, [r3, #8]
 801ef60:	60fb      	str	r3, [r7, #12]
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	681b      	ldr	r3, [r3, #0]
 801ef66:	681a      	ldr	r2, [r3, #0]
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ef70:	601a      	str	r2, [r3, #0]
 801ef72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ef74:	69bb      	ldr	r3, [r7, #24]
 801ef76:	0a1b      	lsrs	r3, r3, #8
 801ef78:	f003 0301 	and.w	r3, r3, #1
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d00c      	beq.n	801ef9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ef84:	f043 0208 	orr.w	r2, r3, #8
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	60bb      	str	r3, [r7, #8]
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	689b      	ldr	r3, [r3, #8]
 801ef96:	60bb      	str	r3, [r7, #8]
 801ef98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d04f      	beq.n	801f042 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	685a      	ldr	r2, [r3, #4]
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801efb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	2201      	movs	r2, #1
 801efb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801efba:	69fb      	ldr	r3, [r7, #28]
 801efbc:	f003 0302 	and.w	r3, r3, #2
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d104      	bne.n	801efce <HAL_SPI_IRQHandler+0x17e>
 801efc4:	69fb      	ldr	r3, [r7, #28]
 801efc6:	f003 0301 	and.w	r3, r3, #1
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d034      	beq.n	801f038 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	685a      	ldr	r2, [r3, #4]
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	f022 0203 	bic.w	r2, r2, #3
 801efdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d011      	beq.n	801f00a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801efea:	4a18      	ldr	r2, [pc, #96]	; (801f04c <HAL_SPI_IRQHandler+0x1fc>)
 801efec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eff2:	4618      	mov	r0, r3
 801eff4:	f7f9 fe64 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801eff8:	4603      	mov	r3, r0
 801effa:	2b00      	cmp	r3, #0
 801effc:	d005      	beq.n	801f00a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d016      	beq.n	801f040 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f016:	4a0d      	ldr	r2, [pc, #52]	; (801f04c <HAL_SPI_IRQHandler+0x1fc>)
 801f018:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f01e:	4618      	mov	r0, r3
 801f020:	f7f9 fe4e 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801f024:	4603      	mov	r3, r0
 801f026:	2b00      	cmp	r3, #0
 801f028:	d00a      	beq.n	801f040 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f02e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801f036:	e003      	b.n	801f040 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801f038:	6878      	ldr	r0, [r7, #4]
 801f03a:	f7f5 fe3f 	bl	8014cbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f03e:	e000      	b.n	801f042 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801f040:	bf00      	nop
    return;
 801f042:	bf00      	nop
  }
}
 801f044:	3720      	adds	r7, #32
 801f046:	46bd      	mov	sp, r7
 801f048:	bd80      	pop	{r7, pc}
 801f04a:	bf00      	nop
 801f04c:	0801f051 	.word	0x0801f051

0801f050 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b084      	sub	sp, #16
 801f054:	af00      	add	r7, sp, #0
 801f056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f05c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	2200      	movs	r2, #0
 801f062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801f064:	68fb      	ldr	r3, [r7, #12]
 801f066:	2200      	movs	r2, #0
 801f068:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f06a:	68f8      	ldr	r0, [r7, #12]
 801f06c:	f7f5 fe26 	bl	8014cbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f070:	bf00      	nop
 801f072:	3710      	adds	r7, #16
 801f074:	46bd      	mov	sp, r7
 801f076:	bd80      	pop	{r7, pc}

0801f078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b088      	sub	sp, #32
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	60f8      	str	r0, [r7, #12]
 801f080:	60b9      	str	r1, [r7, #8]
 801f082:	603b      	str	r3, [r7, #0]
 801f084:	4613      	mov	r3, r2
 801f086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801f088:	f7f8 ffc2 	bl	8018010 <HAL_GetTick>
 801f08c:	4602      	mov	r2, r0
 801f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f090:	1a9b      	subs	r3, r3, r2
 801f092:	683a      	ldr	r2, [r7, #0]
 801f094:	4413      	add	r3, r2
 801f096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801f098:	f7f8 ffba 	bl	8018010 <HAL_GetTick>
 801f09c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801f09e:	4b39      	ldr	r3, [pc, #228]	; (801f184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	015b      	lsls	r3, r3, #5
 801f0a4:	0d1b      	lsrs	r3, r3, #20
 801f0a6:	69fa      	ldr	r2, [r7, #28]
 801f0a8:	fb02 f303 	mul.w	r3, r2, r3
 801f0ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f0ae:	e054      	b.n	801f15a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801f0b0:	683b      	ldr	r3, [r7, #0]
 801f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0b6:	d050      	beq.n	801f15a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801f0b8:	f7f8 ffaa 	bl	8018010 <HAL_GetTick>
 801f0bc:	4602      	mov	r2, r0
 801f0be:	69bb      	ldr	r3, [r7, #24]
 801f0c0:	1ad3      	subs	r3, r2, r3
 801f0c2:	69fa      	ldr	r2, [r7, #28]
 801f0c4:	429a      	cmp	r2, r3
 801f0c6:	d902      	bls.n	801f0ce <SPI_WaitFlagStateUntilTimeout+0x56>
 801f0c8:	69fb      	ldr	r3, [r7, #28]
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d13d      	bne.n	801f14a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	685a      	ldr	r2, [r3, #4]
 801f0d4:	68fb      	ldr	r3, [r7, #12]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801f0dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	685b      	ldr	r3, [r3, #4]
 801f0e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f0e6:	d111      	bne.n	801f10c <SPI_WaitFlagStateUntilTimeout+0x94>
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	689b      	ldr	r3, [r3, #8]
 801f0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f0f0:	d004      	beq.n	801f0fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f0f2:	68fb      	ldr	r3, [r7, #12]
 801f0f4:	689b      	ldr	r3, [r3, #8]
 801f0f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f0fa:	d107      	bne.n	801f10c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	681a      	ldr	r2, [r3, #0]
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f10a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801f10c:	68fb      	ldr	r3, [r7, #12]
 801f10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f114:	d10f      	bne.n	801f136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	681a      	ldr	r2, [r3, #0]
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f124:	601a      	str	r2, [r3, #0]
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	681a      	ldr	r2, [r3, #0]
 801f12c:	68fb      	ldr	r3, [r7, #12]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	2201      	movs	r2, #1
 801f13a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801f13e:	68fb      	ldr	r3, [r7, #12]
 801f140:	2200      	movs	r2, #0
 801f142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801f146:	2303      	movs	r3, #3
 801f148:	e017      	b.n	801f17a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801f14a:	697b      	ldr	r3, [r7, #20]
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	d101      	bne.n	801f154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801f150:	2300      	movs	r3, #0
 801f152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801f154:	697b      	ldr	r3, [r7, #20]
 801f156:	3b01      	subs	r3, #1
 801f158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f15a:	68fb      	ldr	r3, [r7, #12]
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	689a      	ldr	r2, [r3, #8]
 801f160:	68bb      	ldr	r3, [r7, #8]
 801f162:	4013      	ands	r3, r2
 801f164:	68ba      	ldr	r2, [r7, #8]
 801f166:	429a      	cmp	r2, r3
 801f168:	bf0c      	ite	eq
 801f16a:	2301      	moveq	r3, #1
 801f16c:	2300      	movne	r3, #0
 801f16e:	b2db      	uxtb	r3, r3
 801f170:	461a      	mov	r2, r3
 801f172:	79fb      	ldrb	r3, [r7, #7]
 801f174:	429a      	cmp	r2, r3
 801f176:	d19b      	bne.n	801f0b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801f178:	2300      	movs	r3, #0
}
 801f17a:	4618      	mov	r0, r3
 801f17c:	3720      	adds	r7, #32
 801f17e:	46bd      	mov	sp, r7
 801f180:	bd80      	pop	{r7, pc}
 801f182:	bf00      	nop
 801f184:	20000188 	.word	0x20000188

0801f188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801f188:	b580      	push	{r7, lr}
 801f18a:	b086      	sub	sp, #24
 801f18c:	af02      	add	r7, sp, #8
 801f18e:	60f8      	str	r0, [r7, #12]
 801f190:	60b9      	str	r1, [r7, #8]
 801f192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	685b      	ldr	r3, [r3, #4]
 801f198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f19c:	d111      	bne.n	801f1c2 <SPI_EndRxTransaction+0x3a>
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	689b      	ldr	r3, [r3, #8]
 801f1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f1a6:	d004      	beq.n	801f1b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	689b      	ldr	r3, [r3, #8]
 801f1ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f1b0:	d107      	bne.n	801f1c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	681a      	ldr	r2, [r3, #0]
 801f1b8:	68fb      	ldr	r3, [r7, #12]
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f1c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	685b      	ldr	r3, [r3, #4]
 801f1c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f1ca:	d12a      	bne.n	801f222 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801f1cc:	68fb      	ldr	r3, [r7, #12]
 801f1ce:	689b      	ldr	r3, [r3, #8]
 801f1d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f1d4:	d012      	beq.n	801f1fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	9300      	str	r3, [sp, #0]
 801f1da:	68bb      	ldr	r3, [r7, #8]
 801f1dc:	2200      	movs	r2, #0
 801f1de:	2180      	movs	r1, #128	; 0x80
 801f1e0:	68f8      	ldr	r0, [r7, #12]
 801f1e2:	f7ff ff49 	bl	801f078 <SPI_WaitFlagStateUntilTimeout>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	2b00      	cmp	r3, #0
 801f1ea:	d02d      	beq.n	801f248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f1f0:	f043 0220 	orr.w	r2, r3, #32
 801f1f4:	68fb      	ldr	r3, [r7, #12]
 801f1f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801f1f8:	2303      	movs	r3, #3
 801f1fa:	e026      	b.n	801f24a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	9300      	str	r3, [sp, #0]
 801f200:	68bb      	ldr	r3, [r7, #8]
 801f202:	2200      	movs	r2, #0
 801f204:	2101      	movs	r1, #1
 801f206:	68f8      	ldr	r0, [r7, #12]
 801f208:	f7ff ff36 	bl	801f078 <SPI_WaitFlagStateUntilTimeout>
 801f20c:	4603      	mov	r3, r0
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d01a      	beq.n	801f248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f212:	68fb      	ldr	r3, [r7, #12]
 801f214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f216:	f043 0220 	orr.w	r2, r3, #32
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801f21e:	2303      	movs	r3, #3
 801f220:	e013      	b.n	801f24a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	9300      	str	r3, [sp, #0]
 801f226:	68bb      	ldr	r3, [r7, #8]
 801f228:	2200      	movs	r2, #0
 801f22a:	2101      	movs	r1, #1
 801f22c:	68f8      	ldr	r0, [r7, #12]
 801f22e:	f7ff ff23 	bl	801f078 <SPI_WaitFlagStateUntilTimeout>
 801f232:	4603      	mov	r3, r0
 801f234:	2b00      	cmp	r3, #0
 801f236:	d007      	beq.n	801f248 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f238:	68fb      	ldr	r3, [r7, #12]
 801f23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f23c:	f043 0220 	orr.w	r2, r3, #32
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801f244:	2303      	movs	r3, #3
 801f246:	e000      	b.n	801f24a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801f248:	2300      	movs	r3, #0
}
 801f24a:	4618      	mov	r0, r3
 801f24c:	3710      	adds	r7, #16
 801f24e:	46bd      	mov	sp, r7
 801f250:	bd80      	pop	{r7, pc}
	...

0801f254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801f254:	b580      	push	{r7, lr}
 801f256:	b088      	sub	sp, #32
 801f258:	af02      	add	r7, sp, #8
 801f25a:	60f8      	str	r0, [r7, #12]
 801f25c:	60b9      	str	r1, [r7, #8]
 801f25e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801f260:	4b1b      	ldr	r3, [pc, #108]	; (801f2d0 <SPI_EndRxTxTransaction+0x7c>)
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	4a1b      	ldr	r2, [pc, #108]	; (801f2d4 <SPI_EndRxTxTransaction+0x80>)
 801f266:	fba2 2303 	umull	r2, r3, r2, r3
 801f26a:	0d5b      	lsrs	r3, r3, #21
 801f26c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f270:	fb02 f303 	mul.w	r3, r2, r3
 801f274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	685b      	ldr	r3, [r3, #4]
 801f27a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f27e:	d112      	bne.n	801f2a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	9300      	str	r3, [sp, #0]
 801f284:	68bb      	ldr	r3, [r7, #8]
 801f286:	2200      	movs	r2, #0
 801f288:	2180      	movs	r1, #128	; 0x80
 801f28a:	68f8      	ldr	r0, [r7, #12]
 801f28c:	f7ff fef4 	bl	801f078 <SPI_WaitFlagStateUntilTimeout>
 801f290:	4603      	mov	r3, r0
 801f292:	2b00      	cmp	r3, #0
 801f294:	d016      	beq.n	801f2c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f29a:	f043 0220 	orr.w	r2, r3, #32
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801f2a2:	2303      	movs	r3, #3
 801f2a4:	e00f      	b.n	801f2c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801f2a6:	697b      	ldr	r3, [r7, #20]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d00a      	beq.n	801f2c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801f2ac:	697b      	ldr	r3, [r7, #20]
 801f2ae:	3b01      	subs	r3, #1
 801f2b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	689b      	ldr	r3, [r3, #8]
 801f2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f2bc:	2b80      	cmp	r3, #128	; 0x80
 801f2be:	d0f2      	beq.n	801f2a6 <SPI_EndRxTxTransaction+0x52>
 801f2c0:	e000      	b.n	801f2c4 <SPI_EndRxTxTransaction+0x70>
        break;
 801f2c2:	bf00      	nop
  }

  return HAL_OK;
 801f2c4:	2300      	movs	r3, #0
}
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	3718      	adds	r7, #24
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	bd80      	pop	{r7, pc}
 801f2ce:	bf00      	nop
 801f2d0:	20000188 	.word	0x20000188
 801f2d4:	165e9f81 	.word	0x165e9f81

0801f2d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	b082      	sub	sp, #8
 801f2dc:	af00      	add	r7, sp, #0
 801f2de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d101      	bne.n	801f2ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f2e6:	2301      	movs	r3, #1
 801f2e8:	e03f      	b.n	801f36a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f2f0:	b2db      	uxtb	r3, r3
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d106      	bne.n	801f304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f2fe:	6878      	ldr	r0, [r7, #4]
 801f300:	f7f6 fc3e 	bl	8015b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	2224      	movs	r2, #36	; 0x24
 801f308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	68da      	ldr	r2, [r3, #12]
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f31a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801f31c:	6878      	ldr	r0, [r7, #4]
 801f31e:	f000 ff5f 	bl	80201e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	691a      	ldr	r2, [r3, #16]
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	695a      	ldr	r2, [r3, #20]
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	68da      	ldr	r2, [r3, #12]
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	2200      	movs	r2, #0
 801f356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	2220      	movs	r2, #32
 801f35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	2220      	movs	r2, #32
 801f364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801f368:	2300      	movs	r3, #0
}
 801f36a:	4618      	mov	r0, r3
 801f36c:	3708      	adds	r7, #8
 801f36e:	46bd      	mov	sp, r7
 801f370:	bd80      	pop	{r7, pc}

0801f372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f372:	b580      	push	{r7, lr}
 801f374:	b08a      	sub	sp, #40	; 0x28
 801f376:	af02      	add	r7, sp, #8
 801f378:	60f8      	str	r0, [r7, #12]
 801f37a:	60b9      	str	r1, [r7, #8]
 801f37c:	603b      	str	r3, [r7, #0]
 801f37e:	4613      	mov	r3, r2
 801f380:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801f382:	2300      	movs	r3, #0
 801f384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f38c:	b2db      	uxtb	r3, r3
 801f38e:	2b20      	cmp	r3, #32
 801f390:	d17c      	bne.n	801f48c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801f392:	68bb      	ldr	r3, [r7, #8]
 801f394:	2b00      	cmp	r3, #0
 801f396:	d002      	beq.n	801f39e <HAL_UART_Transmit+0x2c>
 801f398:	88fb      	ldrh	r3, [r7, #6]
 801f39a:	2b00      	cmp	r3, #0
 801f39c:	d101      	bne.n	801f3a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801f39e:	2301      	movs	r3, #1
 801f3a0:	e075      	b.n	801f48e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f3a8:	2b01      	cmp	r3, #1
 801f3aa:	d101      	bne.n	801f3b0 <HAL_UART_Transmit+0x3e>
 801f3ac:	2302      	movs	r3, #2
 801f3ae:	e06e      	b.n	801f48e <HAL_UART_Transmit+0x11c>
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	2201      	movs	r2, #1
 801f3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	2200      	movs	r2, #0
 801f3bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	2221      	movs	r2, #33	; 0x21
 801f3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f3c6:	f7f8 fe23 	bl	8018010 <HAL_GetTick>
 801f3ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801f3cc:	68fb      	ldr	r3, [r7, #12]
 801f3ce:	88fa      	ldrh	r2, [r7, #6]
 801f3d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	88fa      	ldrh	r2, [r7, #6]
 801f3d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	689b      	ldr	r3, [r3, #8]
 801f3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f3e0:	d108      	bne.n	801f3f4 <HAL_UART_Transmit+0x82>
 801f3e2:	68fb      	ldr	r3, [r7, #12]
 801f3e4:	691b      	ldr	r3, [r3, #16]
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d104      	bne.n	801f3f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801f3ea:	2300      	movs	r3, #0
 801f3ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f3ee:	68bb      	ldr	r3, [r7, #8]
 801f3f0:	61bb      	str	r3, [r7, #24]
 801f3f2:	e003      	b.n	801f3fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801f3f4:	68bb      	ldr	r3, [r7, #8]
 801f3f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	2200      	movs	r2, #0
 801f400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801f404:	e02a      	b.n	801f45c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f406:	683b      	ldr	r3, [r7, #0]
 801f408:	9300      	str	r3, [sp, #0]
 801f40a:	697b      	ldr	r3, [r7, #20]
 801f40c:	2200      	movs	r2, #0
 801f40e:	2180      	movs	r1, #128	; 0x80
 801f410:	68f8      	ldr	r0, [r7, #12]
 801f412:	f000 fc17 	bl	801fc44 <UART_WaitOnFlagUntilTimeout>
 801f416:	4603      	mov	r3, r0
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d001      	beq.n	801f420 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801f41c:	2303      	movs	r3, #3
 801f41e:	e036      	b.n	801f48e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801f420:	69fb      	ldr	r3, [r7, #28]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d10b      	bne.n	801f43e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f426:	69bb      	ldr	r3, [r7, #24]
 801f428:	881b      	ldrh	r3, [r3, #0]
 801f42a:	461a      	mov	r2, r3
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801f436:	69bb      	ldr	r3, [r7, #24]
 801f438:	3302      	adds	r3, #2
 801f43a:	61bb      	str	r3, [r7, #24]
 801f43c:	e007      	b.n	801f44e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801f43e:	69fb      	ldr	r3, [r7, #28]
 801f440:	781a      	ldrb	r2, [r3, #0]
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801f448:	69fb      	ldr	r3, [r7, #28]
 801f44a:	3301      	adds	r3, #1
 801f44c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801f452:	b29b      	uxth	r3, r3
 801f454:	3b01      	subs	r3, #1
 801f456:	b29a      	uxth	r2, r3
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801f45c:	68fb      	ldr	r3, [r7, #12]
 801f45e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801f460:	b29b      	uxth	r3, r3
 801f462:	2b00      	cmp	r3, #0
 801f464:	d1cf      	bne.n	801f406 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f466:	683b      	ldr	r3, [r7, #0]
 801f468:	9300      	str	r3, [sp, #0]
 801f46a:	697b      	ldr	r3, [r7, #20]
 801f46c:	2200      	movs	r2, #0
 801f46e:	2140      	movs	r1, #64	; 0x40
 801f470:	68f8      	ldr	r0, [r7, #12]
 801f472:	f000 fbe7 	bl	801fc44 <UART_WaitOnFlagUntilTimeout>
 801f476:	4603      	mov	r3, r0
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d001      	beq.n	801f480 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801f47c:	2303      	movs	r3, #3
 801f47e:	e006      	b.n	801f48e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f480:	68fb      	ldr	r3, [r7, #12]
 801f482:	2220      	movs	r2, #32
 801f484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801f488:	2300      	movs	r3, #0
 801f48a:	e000      	b.n	801f48e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801f48c:	2302      	movs	r3, #2
  }
}
 801f48e:	4618      	mov	r0, r3
 801f490:	3720      	adds	r7, #32
 801f492:	46bd      	mov	sp, r7
 801f494:	bd80      	pop	{r7, pc}

0801f496 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f496:	b580      	push	{r7, lr}
 801f498:	b084      	sub	sp, #16
 801f49a:	af00      	add	r7, sp, #0
 801f49c:	60f8      	str	r0, [r7, #12]
 801f49e:	60b9      	str	r1, [r7, #8]
 801f4a0:	4613      	mov	r3, r2
 801f4a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f4aa:	b2db      	uxtb	r3, r3
 801f4ac:	2b20      	cmp	r3, #32
 801f4ae:	d11d      	bne.n	801f4ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801f4b0:	68bb      	ldr	r3, [r7, #8]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d002      	beq.n	801f4bc <HAL_UART_Receive_DMA+0x26>
 801f4b6:	88fb      	ldrh	r3, [r7, #6]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d101      	bne.n	801f4c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801f4bc:	2301      	movs	r3, #1
 801f4be:	e016      	b.n	801f4ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f4c6:	2b01      	cmp	r3, #1
 801f4c8:	d101      	bne.n	801f4ce <HAL_UART_Receive_DMA+0x38>
 801f4ca:	2302      	movs	r3, #2
 801f4cc:	e00f      	b.n	801f4ee <HAL_UART_Receive_DMA+0x58>
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	2201      	movs	r2, #1
 801f4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	2200      	movs	r2, #0
 801f4da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801f4dc:	88fb      	ldrh	r3, [r7, #6]
 801f4de:	461a      	mov	r2, r3
 801f4e0:	68b9      	ldr	r1, [r7, #8]
 801f4e2:	68f8      	ldr	r0, [r7, #12]
 801f4e4:	f000 fc1c 	bl	801fd20 <UART_Start_Receive_DMA>
 801f4e8:	4603      	mov	r3, r0
 801f4ea:	e000      	b.n	801f4ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 801f4ec:	2302      	movs	r3, #2
  }
}
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	3710      	adds	r7, #16
 801f4f2:	46bd      	mov	sp, r7
 801f4f4:	bd80      	pop	{r7, pc}
	...

0801f4f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	b0ba      	sub	sp, #232	; 0xe8
 801f4fc:	af00      	add	r7, sp, #0
 801f4fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	68db      	ldr	r3, [r3, #12]
 801f510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	695b      	ldr	r3, [r3, #20]
 801f51a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801f51e:	2300      	movs	r3, #0
 801f520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801f524:	2300      	movs	r3, #0
 801f526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801f52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f52e:	f003 030f 	and.w	r3, r3, #15
 801f532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801f536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d10f      	bne.n	801f55e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801f53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f542:	f003 0320 	and.w	r3, r3, #32
 801f546:	2b00      	cmp	r3, #0
 801f548:	d009      	beq.n	801f55e <HAL_UART_IRQHandler+0x66>
 801f54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f54e:	f003 0320 	and.w	r3, r3, #32
 801f552:	2b00      	cmp	r3, #0
 801f554:	d003      	beq.n	801f55e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801f556:	6878      	ldr	r0, [r7, #4]
 801f558:	f000 fd87 	bl	802006a <UART_Receive_IT>
      return;
 801f55c:	e256      	b.n	801fa0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801f55e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f562:	2b00      	cmp	r3, #0
 801f564:	f000 80de 	beq.w	801f724 <HAL_UART_IRQHandler+0x22c>
 801f568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f56c:	f003 0301 	and.w	r3, r3, #1
 801f570:	2b00      	cmp	r3, #0
 801f572:	d106      	bne.n	801f582 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801f574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f578:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	f000 80d1 	beq.w	801f724 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801f582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f586:	f003 0301 	and.w	r3, r3, #1
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d00b      	beq.n	801f5a6 <HAL_UART_IRQHandler+0xae>
 801f58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f596:	2b00      	cmp	r3, #0
 801f598:	d005      	beq.n	801f5a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f59e:	f043 0201 	orr.w	r2, r3, #1
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801f5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f5aa:	f003 0304 	and.w	r3, r3, #4
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d00b      	beq.n	801f5ca <HAL_UART_IRQHandler+0xd2>
 801f5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f5b6:	f003 0301 	and.w	r3, r3, #1
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d005      	beq.n	801f5ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f5c2:	f043 0202 	orr.w	r2, r3, #2
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801f5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f5ce:	f003 0302 	and.w	r3, r3, #2
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d00b      	beq.n	801f5ee <HAL_UART_IRQHandler+0xf6>
 801f5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f5da:	f003 0301 	and.w	r3, r3, #1
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d005      	beq.n	801f5ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f5e6:	f043 0204 	orr.w	r2, r3, #4
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801f5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f5f2:	f003 0308 	and.w	r3, r3, #8
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d011      	beq.n	801f61e <HAL_UART_IRQHandler+0x126>
 801f5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f5fe:	f003 0320 	and.w	r3, r3, #32
 801f602:	2b00      	cmp	r3, #0
 801f604:	d105      	bne.n	801f612 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801f606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f60a:	f003 0301 	and.w	r3, r3, #1
 801f60e:	2b00      	cmp	r3, #0
 801f610:	d005      	beq.n	801f61e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f616:	f043 0208 	orr.w	r2, r3, #8
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f622:	2b00      	cmp	r3, #0
 801f624:	f000 81ed 	beq.w	801fa02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801f628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f62c:	f003 0320 	and.w	r3, r3, #32
 801f630:	2b00      	cmp	r3, #0
 801f632:	d008      	beq.n	801f646 <HAL_UART_IRQHandler+0x14e>
 801f634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f638:	f003 0320 	and.w	r3, r3, #32
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d002      	beq.n	801f646 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801f640:	6878      	ldr	r0, [r7, #4]
 801f642:	f000 fd12 	bl	802006a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	695b      	ldr	r3, [r3, #20]
 801f64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f650:	2b40      	cmp	r3, #64	; 0x40
 801f652:	bf0c      	ite	eq
 801f654:	2301      	moveq	r3, #1
 801f656:	2300      	movne	r3, #0
 801f658:	b2db      	uxtb	r3, r3
 801f65a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f662:	f003 0308 	and.w	r3, r3, #8
 801f666:	2b00      	cmp	r3, #0
 801f668:	d103      	bne.n	801f672 <HAL_UART_IRQHandler+0x17a>
 801f66a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d04f      	beq.n	801f712 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801f672:	6878      	ldr	r0, [r7, #4]
 801f674:	f000 fc1a 	bl	801feac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	695b      	ldr	r3, [r3, #20]
 801f67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f682:	2b40      	cmp	r3, #64	; 0x40
 801f684:	d141      	bne.n	801f70a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	3314      	adds	r3, #20
 801f68c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f694:	e853 3f00 	ldrex	r3, [r3]
 801f698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801f69c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f6a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f6a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	3314      	adds	r3, #20
 801f6ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801f6b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801f6b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f6ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801f6be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801f6c2:	e841 2300 	strex	r3, r2, [r1]
 801f6c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801f6ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d1d9      	bne.n	801f686 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d013      	beq.n	801f702 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6de:	4a7d      	ldr	r2, [pc, #500]	; (801f8d4 <HAL_UART_IRQHandler+0x3dc>)
 801f6e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6e6:	4618      	mov	r0, r3
 801f6e8:	f7f9 faea 	bl	8018cc0 <HAL_DMA_Abort_IT>
 801f6ec:	4603      	mov	r3, r0
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d016      	beq.n	801f720 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f6f8:	687a      	ldr	r2, [r7, #4]
 801f6fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f6fc:	4610      	mov	r0, r2
 801f6fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f700:	e00e      	b.n	801f720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801f702:	6878      	ldr	r0, [r7, #4]
 801f704:	f7f6 fa24 	bl	8015b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f708:	e00a      	b.n	801f720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801f70a:	6878      	ldr	r0, [r7, #4]
 801f70c:	f7f6 fa20 	bl	8015b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f710:	e006      	b.n	801f720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801f712:	6878      	ldr	r0, [r7, #4]
 801f714:	f7f6 fa1c 	bl	8015b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	2200      	movs	r2, #0
 801f71c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801f71e:	e170      	b.n	801fa02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f720:	bf00      	nop
    return;
 801f722:	e16e      	b.n	801fa02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f728:	2b01      	cmp	r3, #1
 801f72a:	f040 814a 	bne.w	801f9c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801f72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f732:	f003 0310 	and.w	r3, r3, #16
 801f736:	2b00      	cmp	r3, #0
 801f738:	f000 8143 	beq.w	801f9c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801f73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f740:	f003 0310 	and.w	r3, r3, #16
 801f744:	2b00      	cmp	r3, #0
 801f746:	f000 813c 	beq.w	801f9c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801f74a:	2300      	movs	r3, #0
 801f74c:	60bb      	str	r3, [r7, #8]
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	60bb      	str	r3, [r7, #8]
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	685b      	ldr	r3, [r3, #4]
 801f75c:	60bb      	str	r3, [r7, #8]
 801f75e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	695b      	ldr	r3, [r3, #20]
 801f766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f76a:	2b40      	cmp	r3, #64	; 0x40
 801f76c:	f040 80b4 	bne.w	801f8d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f774:	681b      	ldr	r3, [r3, #0]
 801f776:	685b      	ldr	r3, [r3, #4]
 801f778:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801f77c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801f780:	2b00      	cmp	r3, #0
 801f782:	f000 8140 	beq.w	801fa06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801f786:	687b      	ldr	r3, [r7, #4]
 801f788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801f78a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f78e:	429a      	cmp	r2, r3
 801f790:	f080 8139 	bcs.w	801fa06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f79a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7a0:	69db      	ldr	r3, [r3, #28]
 801f7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f7a6:	f000 8088 	beq.w	801f8ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	330c      	adds	r3, #12
 801f7b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f7b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f7b8:	e853 3f00 	ldrex	r3, [r3]
 801f7bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801f7c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f7c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f7c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	330c      	adds	r3, #12
 801f7d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801f7d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801f7da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f7de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801f7e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801f7e6:	e841 2300 	strex	r3, r2, [r1]
 801f7ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801f7ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d1d9      	bne.n	801f7aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	3314      	adds	r3, #20
 801f7fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f7fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f800:	e853 3f00 	ldrex	r3, [r3]
 801f804:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801f806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f808:	f023 0301 	bic.w	r3, r3, #1
 801f80c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	3314      	adds	r3, #20
 801f816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f81a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801f81e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f820:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801f822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801f826:	e841 2300 	strex	r3, r2, [r1]
 801f82a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801f82c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d1e1      	bne.n	801f7f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	3314      	adds	r3, #20
 801f838:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f83c:	e853 3f00 	ldrex	r3, [r3]
 801f840:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801f842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	3314      	adds	r3, #20
 801f852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801f856:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f858:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f85a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801f85c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f85e:	e841 2300 	strex	r3, r2, [r1]
 801f862:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801f864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f866:	2b00      	cmp	r3, #0
 801f868:	d1e3      	bne.n	801f832 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	2220      	movs	r2, #32
 801f86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	2200      	movs	r2, #0
 801f876:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	330c      	adds	r3, #12
 801f87e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f882:	e853 3f00 	ldrex	r3, [r3]
 801f886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801f888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f88a:	f023 0310 	bic.w	r3, r3, #16
 801f88e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	330c      	adds	r3, #12
 801f898:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801f89c:	65ba      	str	r2, [r7, #88]	; 0x58
 801f89e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f8a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f8a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f8a4:	e841 2300 	strex	r3, r2, [r1]
 801f8a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801f8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d1e3      	bne.n	801f878 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8b4:	4618      	mov	r0, r3
 801f8b6:	f7f9 f993 	bl	8018be0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801f8c2:	b29b      	uxth	r3, r3
 801f8c4:	1ad3      	subs	r3, r2, r3
 801f8c6:	b29b      	uxth	r3, r3
 801f8c8:	4619      	mov	r1, r3
 801f8ca:	6878      	ldr	r0, [r7, #4]
 801f8cc:	f000 f8b6 	bl	801fa3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801f8d0:	e099      	b.n	801fa06 <HAL_UART_IRQHandler+0x50e>
 801f8d2:	bf00      	nop
 801f8d4:	0801ff73 	.word	0x0801ff73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801f8e0:	b29b      	uxth	r3, r3
 801f8e2:	1ad3      	subs	r3, r2, r3
 801f8e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	f000 808b 	beq.w	801fa0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801f8f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	f000 8086 	beq.w	801fa0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	681b      	ldr	r3, [r3, #0]
 801f902:	330c      	adds	r3, #12
 801f904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f908:	e853 3f00 	ldrex	r3, [r3]
 801f90c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	330c      	adds	r3, #12
 801f91e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801f922:	647a      	str	r2, [r7, #68]	; 0x44
 801f924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f92a:	e841 2300 	strex	r3, r2, [r1]
 801f92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f932:	2b00      	cmp	r3, #0
 801f934:	d1e3      	bne.n	801f8fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	3314      	adds	r3, #20
 801f93c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f940:	e853 3f00 	ldrex	r3, [r3]
 801f944:	623b      	str	r3, [r7, #32]
   return(result);
 801f946:	6a3b      	ldr	r3, [r7, #32]
 801f948:	f023 0301 	bic.w	r3, r3, #1
 801f94c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	681b      	ldr	r3, [r3, #0]
 801f954:	3314      	adds	r3, #20
 801f956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801f95a:	633a      	str	r2, [r7, #48]	; 0x30
 801f95c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f962:	e841 2300 	strex	r3, r2, [r1]
 801f966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d1e3      	bne.n	801f936 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	2220      	movs	r2, #32
 801f972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	2200      	movs	r2, #0
 801f97a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	330c      	adds	r3, #12
 801f982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f984:	693b      	ldr	r3, [r7, #16]
 801f986:	e853 3f00 	ldrex	r3, [r3]
 801f98a:	60fb      	str	r3, [r7, #12]
   return(result);
 801f98c:	68fb      	ldr	r3, [r7, #12]
 801f98e:	f023 0310 	bic.w	r3, r3, #16
 801f992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	330c      	adds	r3, #12
 801f99c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801f9a0:	61fa      	str	r2, [r7, #28]
 801f9a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f9a4:	69b9      	ldr	r1, [r7, #24]
 801f9a6:	69fa      	ldr	r2, [r7, #28]
 801f9a8:	e841 2300 	strex	r3, r2, [r1]
 801f9ac:	617b      	str	r3, [r7, #20]
   return(result);
 801f9ae:	697b      	ldr	r3, [r7, #20]
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d1e3      	bne.n	801f97c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801f9b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801f9b8:	4619      	mov	r1, r3
 801f9ba:	6878      	ldr	r0, [r7, #4]
 801f9bc:	f000 f83e 	bl	801fa3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801f9c0:	e023      	b.n	801fa0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801f9c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d009      	beq.n	801f9e2 <HAL_UART_IRQHandler+0x4ea>
 801f9ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d003      	beq.n	801f9e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801f9da:	6878      	ldr	r0, [r7, #4]
 801f9dc:	f000 fadd 	bl	801ff9a <UART_Transmit_IT>
    return;
 801f9e0:	e014      	b.n	801fa0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801f9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	d00e      	beq.n	801fa0c <HAL_UART_IRQHandler+0x514>
 801f9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d008      	beq.n	801fa0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801f9fa:	6878      	ldr	r0, [r7, #4]
 801f9fc:	f000 fb1d 	bl	802003a <UART_EndTransmit_IT>
    return;
 801fa00:	e004      	b.n	801fa0c <HAL_UART_IRQHandler+0x514>
    return;
 801fa02:	bf00      	nop
 801fa04:	e002      	b.n	801fa0c <HAL_UART_IRQHandler+0x514>
      return;
 801fa06:	bf00      	nop
 801fa08:	e000      	b.n	801fa0c <HAL_UART_IRQHandler+0x514>
      return;
 801fa0a:	bf00      	nop
  }
}
 801fa0c:	37e8      	adds	r7, #232	; 0xe8
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	bd80      	pop	{r7, pc}
 801fa12:	bf00      	nop

0801fa14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801fa14:	b480      	push	{r7}
 801fa16:	b083      	sub	sp, #12
 801fa18:	af00      	add	r7, sp, #0
 801fa1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801fa1c:	bf00      	nop
 801fa1e:	370c      	adds	r7, #12
 801fa20:	46bd      	mov	sp, r7
 801fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa26:	4770      	bx	lr

0801fa28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801fa28:	b480      	push	{r7}
 801fa2a:	b083      	sub	sp, #12
 801fa2c:	af00      	add	r7, sp, #0
 801fa2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801fa30:	bf00      	nop
 801fa32:	370c      	adds	r7, #12
 801fa34:	46bd      	mov	sp, r7
 801fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa3a:	4770      	bx	lr

0801fa3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801fa3c:	b480      	push	{r7}
 801fa3e:	b083      	sub	sp, #12
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	6078      	str	r0, [r7, #4]
 801fa44:	460b      	mov	r3, r1
 801fa46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801fa48:	bf00      	nop
 801fa4a:	370c      	adds	r7, #12
 801fa4c:	46bd      	mov	sp, r7
 801fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa52:	4770      	bx	lr

0801fa54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801fa54:	b580      	push	{r7, lr}
 801fa56:	b09c      	sub	sp, #112	; 0x70
 801fa58:	af00      	add	r7, sp, #0
 801fa5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fa60:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	681b      	ldr	r3, [r3, #0]
 801fa68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d172      	bne.n	801fb56 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801fa70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fa72:	2200      	movs	r2, #0
 801fa74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801fa76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	330c      	adds	r3, #12
 801fa7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa80:	e853 3f00 	ldrex	r3, [r3]
 801fa84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801fa86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fa8c:	66bb      	str	r3, [r7, #104]	; 0x68
 801fa8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	330c      	adds	r3, #12
 801fa94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fa96:	65ba      	str	r2, [r7, #88]	; 0x58
 801fa98:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801fa9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fa9e:	e841 2300 	strex	r3, r2, [r1]
 801faa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801faa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d1e5      	bne.n	801fa76 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801faaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	3314      	adds	r3, #20
 801fab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fab4:	e853 3f00 	ldrex	r3, [r3]
 801fab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801faba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fabc:	f023 0301 	bic.w	r3, r3, #1
 801fac0:	667b      	str	r3, [r7, #100]	; 0x64
 801fac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	3314      	adds	r3, #20
 801fac8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801faca:	647a      	str	r2, [r7, #68]	; 0x44
 801facc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801face:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801fad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fad2:	e841 2300 	strex	r3, r2, [r1]
 801fad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801fad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d1e5      	bne.n	801faaa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	3314      	adds	r3, #20
 801fae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fae8:	e853 3f00 	ldrex	r3, [r3]
 801faec:	623b      	str	r3, [r7, #32]
   return(result);
 801faee:	6a3b      	ldr	r3, [r7, #32]
 801faf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801faf4:	663b      	str	r3, [r7, #96]	; 0x60
 801faf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	3314      	adds	r3, #20
 801fafc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fafe:	633a      	str	r2, [r7, #48]	; 0x30
 801fb00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fb06:	e841 2300 	strex	r3, r2, [r1]
 801fb0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801fb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	d1e5      	bne.n	801fade <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801fb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb14:	2220      	movs	r2, #32
 801fb16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fb1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb1e:	2b01      	cmp	r3, #1
 801fb20:	d119      	bne.n	801fb56 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb24:	681b      	ldr	r3, [r3, #0]
 801fb26:	330c      	adds	r3, #12
 801fb28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb2a:	693b      	ldr	r3, [r7, #16]
 801fb2c:	e853 3f00 	ldrex	r3, [r3]
 801fb30:	60fb      	str	r3, [r7, #12]
   return(result);
 801fb32:	68fb      	ldr	r3, [r7, #12]
 801fb34:	f023 0310 	bic.w	r3, r3, #16
 801fb38:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	330c      	adds	r3, #12
 801fb40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fb42:	61fa      	str	r2, [r7, #28]
 801fb44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb46:	69b9      	ldr	r1, [r7, #24]
 801fb48:	69fa      	ldr	r2, [r7, #28]
 801fb4a:	e841 2300 	strex	r3, r2, [r1]
 801fb4e:	617b      	str	r3, [r7, #20]
   return(result);
 801fb50:	697b      	ldr	r3, [r7, #20]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d1e5      	bne.n	801fb22 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb5a:	2b01      	cmp	r3, #1
 801fb5c:	d106      	bne.n	801fb6c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801fb5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801fb62:	4619      	mov	r1, r3
 801fb64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801fb66:	f7ff ff69 	bl	801fa3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801fb6a:	e002      	b.n	801fb72 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801fb6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801fb6e:	f7f5 fffd 	bl	8015b6c <HAL_UART_RxCpltCallback>
}
 801fb72:	bf00      	nop
 801fb74:	3770      	adds	r7, #112	; 0x70
 801fb76:	46bd      	mov	sp, r7
 801fb78:	bd80      	pop	{r7, pc}

0801fb7a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801fb7a:	b580      	push	{r7, lr}
 801fb7c:	b084      	sub	sp, #16
 801fb7e:	af00      	add	r7, sp, #0
 801fb80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb86:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fb88:	68fb      	ldr	r3, [r7, #12]
 801fb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb8c:	2b01      	cmp	r3, #1
 801fb8e:	d108      	bne.n	801fba2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801fb94:	085b      	lsrs	r3, r3, #1
 801fb96:	b29b      	uxth	r3, r3
 801fb98:	4619      	mov	r1, r3
 801fb9a:	68f8      	ldr	r0, [r7, #12]
 801fb9c:	f7ff ff4e 	bl	801fa3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801fba0:	e002      	b.n	801fba8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801fba2:	68f8      	ldr	r0, [r7, #12]
 801fba4:	f7ff ff40 	bl	801fa28 <HAL_UART_RxHalfCpltCallback>
}
 801fba8:	bf00      	nop
 801fbaa:	3710      	adds	r7, #16
 801fbac:	46bd      	mov	sp, r7
 801fbae:	bd80      	pop	{r7, pc}

0801fbb0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801fbb0:	b580      	push	{r7, lr}
 801fbb2:	b084      	sub	sp, #16
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801fbb8:	2300      	movs	r3, #0
 801fbba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fbc0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801fbc2:	68bb      	ldr	r3, [r7, #8]
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	695b      	ldr	r3, [r3, #20]
 801fbc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fbcc:	2b80      	cmp	r3, #128	; 0x80
 801fbce:	bf0c      	ite	eq
 801fbd0:	2301      	moveq	r3, #1
 801fbd2:	2300      	movne	r3, #0
 801fbd4:	b2db      	uxtb	r3, r3
 801fbd6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801fbd8:	68bb      	ldr	r3, [r7, #8]
 801fbda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fbde:	b2db      	uxtb	r3, r3
 801fbe0:	2b21      	cmp	r3, #33	; 0x21
 801fbe2:	d108      	bne.n	801fbf6 <UART_DMAError+0x46>
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d005      	beq.n	801fbf6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801fbea:	68bb      	ldr	r3, [r7, #8]
 801fbec:	2200      	movs	r2, #0
 801fbee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801fbf0:	68b8      	ldr	r0, [r7, #8]
 801fbf2:	f000 f933 	bl	801fe5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801fbf6:	68bb      	ldr	r3, [r7, #8]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	695b      	ldr	r3, [r3, #20]
 801fbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc00:	2b40      	cmp	r3, #64	; 0x40
 801fc02:	bf0c      	ite	eq
 801fc04:	2301      	moveq	r3, #1
 801fc06:	2300      	movne	r3, #0
 801fc08:	b2db      	uxtb	r3, r3
 801fc0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801fc0c:	68bb      	ldr	r3, [r7, #8]
 801fc0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fc12:	b2db      	uxtb	r3, r3
 801fc14:	2b22      	cmp	r3, #34	; 0x22
 801fc16:	d108      	bne.n	801fc2a <UART_DMAError+0x7a>
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d005      	beq.n	801fc2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801fc1e:	68bb      	ldr	r3, [r7, #8]
 801fc20:	2200      	movs	r2, #0
 801fc22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801fc24:	68b8      	ldr	r0, [r7, #8]
 801fc26:	f000 f941 	bl	801feac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801fc2a:	68bb      	ldr	r3, [r7, #8]
 801fc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc2e:	f043 0210 	orr.w	r2, r3, #16
 801fc32:	68bb      	ldr	r3, [r7, #8]
 801fc34:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801fc36:	68b8      	ldr	r0, [r7, #8]
 801fc38:	f7f5 ff8a 	bl	8015b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801fc3c:	bf00      	nop
 801fc3e:	3710      	adds	r7, #16
 801fc40:	46bd      	mov	sp, r7
 801fc42:	bd80      	pop	{r7, pc}

0801fc44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801fc44:	b580      	push	{r7, lr}
 801fc46:	b090      	sub	sp, #64	; 0x40
 801fc48:	af00      	add	r7, sp, #0
 801fc4a:	60f8      	str	r0, [r7, #12]
 801fc4c:	60b9      	str	r1, [r7, #8]
 801fc4e:	603b      	str	r3, [r7, #0]
 801fc50:	4613      	mov	r3, r2
 801fc52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fc54:	e050      	b.n	801fcf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fc56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc5c:	d04c      	beq.n	801fcf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801fc5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	d007      	beq.n	801fc74 <UART_WaitOnFlagUntilTimeout+0x30>
 801fc64:	f7f8 f9d4 	bl	8018010 <HAL_GetTick>
 801fc68:	4602      	mov	r2, r0
 801fc6a:	683b      	ldr	r3, [r7, #0]
 801fc6c:	1ad3      	subs	r3, r2, r3
 801fc6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fc70:	429a      	cmp	r2, r3
 801fc72:	d241      	bcs.n	801fcf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	330c      	adds	r3, #12
 801fc7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc7e:	e853 3f00 	ldrex	r3, [r3]
 801fc82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	330c      	adds	r3, #12
 801fc92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fc94:	637a      	str	r2, [r7, #52]	; 0x34
 801fc96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fc9c:	e841 2300 	strex	r3, r2, [r1]
 801fca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d1e5      	bne.n	801fc74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	3314      	adds	r3, #20
 801fcae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcb0:	697b      	ldr	r3, [r7, #20]
 801fcb2:	e853 3f00 	ldrex	r3, [r3]
 801fcb6:	613b      	str	r3, [r7, #16]
   return(result);
 801fcb8:	693b      	ldr	r3, [r7, #16]
 801fcba:	f023 0301 	bic.w	r3, r3, #1
 801fcbe:	63bb      	str	r3, [r7, #56]	; 0x38
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	3314      	adds	r3, #20
 801fcc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fcc8:	623a      	str	r2, [r7, #32]
 801fcca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fccc:	69f9      	ldr	r1, [r7, #28]
 801fcce:	6a3a      	ldr	r2, [r7, #32]
 801fcd0:	e841 2300 	strex	r3, r2, [r1]
 801fcd4:	61bb      	str	r3, [r7, #24]
   return(result);
 801fcd6:	69bb      	ldr	r3, [r7, #24]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d1e5      	bne.n	801fca8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801fcdc:	68fb      	ldr	r3, [r7, #12]
 801fcde:	2220      	movs	r2, #32
 801fce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801fce4:	68fb      	ldr	r3, [r7, #12]
 801fce6:	2220      	movs	r2, #32
 801fce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	2200      	movs	r2, #0
 801fcf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801fcf4:	2303      	movs	r3, #3
 801fcf6:	e00f      	b.n	801fd18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	681a      	ldr	r2, [r3, #0]
 801fcfe:	68bb      	ldr	r3, [r7, #8]
 801fd00:	4013      	ands	r3, r2
 801fd02:	68ba      	ldr	r2, [r7, #8]
 801fd04:	429a      	cmp	r2, r3
 801fd06:	bf0c      	ite	eq
 801fd08:	2301      	moveq	r3, #1
 801fd0a:	2300      	movne	r3, #0
 801fd0c:	b2db      	uxtb	r3, r3
 801fd0e:	461a      	mov	r2, r3
 801fd10:	79fb      	ldrb	r3, [r7, #7]
 801fd12:	429a      	cmp	r2, r3
 801fd14:	d09f      	beq.n	801fc56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801fd16:	2300      	movs	r3, #0
}
 801fd18:	4618      	mov	r0, r3
 801fd1a:	3740      	adds	r7, #64	; 0x40
 801fd1c:	46bd      	mov	sp, r7
 801fd1e:	bd80      	pop	{r7, pc}

0801fd20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b098      	sub	sp, #96	; 0x60
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	60f8      	str	r0, [r7, #12]
 801fd28:	60b9      	str	r1, [r7, #8]
 801fd2a:	4613      	mov	r3, r2
 801fd2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801fd2e:	68ba      	ldr	r2, [r7, #8]
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	88fa      	ldrh	r2, [r7, #6]
 801fd38:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	2200      	movs	r2, #0
 801fd3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	2222      	movs	r2, #34	; 0x22
 801fd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd4c:	4a40      	ldr	r2, [pc, #256]	; (801fe50 <UART_Start_Receive_DMA+0x130>)
 801fd4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd54:	4a3f      	ldr	r2, [pc, #252]	; (801fe54 <UART_Start_Receive_DMA+0x134>)
 801fd56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd5c:	4a3e      	ldr	r2, [pc, #248]	; (801fe58 <UART_Start_Receive_DMA+0x138>)
 801fd5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd64:	2200      	movs	r2, #0
 801fd66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801fd68:	f107 0308 	add.w	r3, r7, #8
 801fd6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801fd6e:	68fb      	ldr	r3, [r7, #12]
 801fd70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801fd72:	68fb      	ldr	r3, [r7, #12]
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	3304      	adds	r3, #4
 801fd78:	4619      	mov	r1, r3
 801fd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fd7c:	681a      	ldr	r2, [r3, #0]
 801fd7e:	88fb      	ldrh	r3, [r7, #6]
 801fd80:	f7f8 fed6 	bl	8018b30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801fd84:	2300      	movs	r3, #0
 801fd86:	613b      	str	r3, [r7, #16]
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	613b      	str	r3, [r7, #16]
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	685b      	ldr	r3, [r3, #4]
 801fd96:	613b      	str	r3, [r7, #16]
 801fd98:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	2200      	movs	r2, #0
 801fd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	691b      	ldr	r3, [r3, #16]
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d019      	beq.n	801fdde <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801fdaa:	68fb      	ldr	r3, [r7, #12]
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	330c      	adds	r3, #12
 801fdb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fdb4:	e853 3f00 	ldrex	r3, [r3]
 801fdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801fdba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fdc0:	65bb      	str	r3, [r7, #88]	; 0x58
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	330c      	adds	r3, #12
 801fdc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fdca:	64fa      	str	r2, [r7, #76]	; 0x4c
 801fdcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fdce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801fdd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801fdd2:	e841 2300 	strex	r3, r2, [r1]
 801fdd6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801fdd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d1e5      	bne.n	801fdaa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	3314      	adds	r3, #20
 801fde4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fde8:	e853 3f00 	ldrex	r3, [r3]
 801fdec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fdf0:	f043 0301 	orr.w	r3, r3, #1
 801fdf4:	657b      	str	r3, [r7, #84]	; 0x54
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	3314      	adds	r3, #20
 801fdfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fdfe:	63ba      	str	r2, [r7, #56]	; 0x38
 801fe00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fe04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fe06:	e841 2300 	strex	r3, r2, [r1]
 801fe0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801fe0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d1e5      	bne.n	801fdde <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	3314      	adds	r3, #20
 801fe18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe1a:	69bb      	ldr	r3, [r7, #24]
 801fe1c:	e853 3f00 	ldrex	r3, [r3]
 801fe20:	617b      	str	r3, [r7, #20]
   return(result);
 801fe22:	697b      	ldr	r3, [r7, #20]
 801fe24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe28:	653b      	str	r3, [r7, #80]	; 0x50
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	3314      	adds	r3, #20
 801fe30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801fe32:	627a      	str	r2, [r7, #36]	; 0x24
 801fe34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe36:	6a39      	ldr	r1, [r7, #32]
 801fe38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe3a:	e841 2300 	strex	r3, r2, [r1]
 801fe3e:	61fb      	str	r3, [r7, #28]
   return(result);
 801fe40:	69fb      	ldr	r3, [r7, #28]
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d1e5      	bne.n	801fe12 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801fe46:	2300      	movs	r3, #0
}
 801fe48:	4618      	mov	r0, r3
 801fe4a:	3760      	adds	r7, #96	; 0x60
 801fe4c:	46bd      	mov	sp, r7
 801fe4e:	bd80      	pop	{r7, pc}
 801fe50:	0801fa55 	.word	0x0801fa55
 801fe54:	0801fb7b 	.word	0x0801fb7b
 801fe58:	0801fbb1 	.word	0x0801fbb1

0801fe5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801fe5c:	b480      	push	{r7}
 801fe5e:	b089      	sub	sp, #36	; 0x24
 801fe60:	af00      	add	r7, sp, #0
 801fe62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	330c      	adds	r3, #12
 801fe6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe6c:	68fb      	ldr	r3, [r7, #12]
 801fe6e:	e853 3f00 	ldrex	r3, [r3]
 801fe72:	60bb      	str	r3, [r7, #8]
   return(result);
 801fe74:	68bb      	ldr	r3, [r7, #8]
 801fe76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801fe7a:	61fb      	str	r3, [r7, #28]
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	330c      	adds	r3, #12
 801fe82:	69fa      	ldr	r2, [r7, #28]
 801fe84:	61ba      	str	r2, [r7, #24]
 801fe86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe88:	6979      	ldr	r1, [r7, #20]
 801fe8a:	69ba      	ldr	r2, [r7, #24]
 801fe8c:	e841 2300 	strex	r3, r2, [r1]
 801fe90:	613b      	str	r3, [r7, #16]
   return(result);
 801fe92:	693b      	ldr	r3, [r7, #16]
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d1e5      	bne.n	801fe64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	2220      	movs	r2, #32
 801fe9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801fea0:	bf00      	nop
 801fea2:	3724      	adds	r7, #36	; 0x24
 801fea4:	46bd      	mov	sp, r7
 801fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feaa:	4770      	bx	lr

0801feac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801feac:	b480      	push	{r7}
 801feae:	b095      	sub	sp, #84	; 0x54
 801feb0:	af00      	add	r7, sp, #0
 801feb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	330c      	adds	r3, #12
 801feba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801febc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801febe:	e853 3f00 	ldrex	r3, [r3]
 801fec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801feca:	64fb      	str	r3, [r7, #76]	; 0x4c
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	330c      	adds	r3, #12
 801fed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801fed4:	643a      	str	r2, [r7, #64]	; 0x40
 801fed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801feda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fedc:	e841 2300 	strex	r3, r2, [r1]
 801fee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d1e5      	bne.n	801feb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	3314      	adds	r3, #20
 801feee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fef0:	6a3b      	ldr	r3, [r7, #32]
 801fef2:	e853 3f00 	ldrex	r3, [r3]
 801fef6:	61fb      	str	r3, [r7, #28]
   return(result);
 801fef8:	69fb      	ldr	r3, [r7, #28]
 801fefa:	f023 0301 	bic.w	r3, r3, #1
 801fefe:	64bb      	str	r3, [r7, #72]	; 0x48
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	3314      	adds	r3, #20
 801ff06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ff08:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ff0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ff0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff10:	e841 2300 	strex	r3, r2, [r1]
 801ff14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ff16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d1e5      	bne.n	801fee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff20:	2b01      	cmp	r3, #1
 801ff22:	d119      	bne.n	801ff58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	330c      	adds	r3, #12
 801ff2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff2c:	68fb      	ldr	r3, [r7, #12]
 801ff2e:	e853 3f00 	ldrex	r3, [r3]
 801ff32:	60bb      	str	r3, [r7, #8]
   return(result);
 801ff34:	68bb      	ldr	r3, [r7, #8]
 801ff36:	f023 0310 	bic.w	r3, r3, #16
 801ff3a:	647b      	str	r3, [r7, #68]	; 0x44
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	330c      	adds	r3, #12
 801ff42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff44:	61ba      	str	r2, [r7, #24]
 801ff46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff48:	6979      	ldr	r1, [r7, #20]
 801ff4a:	69ba      	ldr	r2, [r7, #24]
 801ff4c:	e841 2300 	strex	r3, r2, [r1]
 801ff50:	613b      	str	r3, [r7, #16]
   return(result);
 801ff52:	693b      	ldr	r3, [r7, #16]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d1e5      	bne.n	801ff24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	2220      	movs	r2, #32
 801ff5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	2200      	movs	r2, #0
 801ff64:	631a      	str	r2, [r3, #48]	; 0x30
}
 801ff66:	bf00      	nop
 801ff68:	3754      	adds	r7, #84	; 0x54
 801ff6a:	46bd      	mov	sp, r7
 801ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff70:	4770      	bx	lr

0801ff72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ff72:	b580      	push	{r7, lr}
 801ff74:	b084      	sub	sp, #16
 801ff76:	af00      	add	r7, sp, #0
 801ff78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801ff80:	68fb      	ldr	r3, [r7, #12]
 801ff82:	2200      	movs	r2, #0
 801ff84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	2200      	movs	r2, #0
 801ff8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ff8c:	68f8      	ldr	r0, [r7, #12]
 801ff8e:	f7f5 fddf 	bl	8015b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ff92:	bf00      	nop
 801ff94:	3710      	adds	r7, #16
 801ff96:	46bd      	mov	sp, r7
 801ff98:	bd80      	pop	{r7, pc}

0801ff9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801ff9a:	b480      	push	{r7}
 801ff9c:	b085      	sub	sp, #20
 801ff9e:	af00      	add	r7, sp, #0
 801ffa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ffa8:	b2db      	uxtb	r3, r3
 801ffaa:	2b21      	cmp	r3, #33	; 0x21
 801ffac:	d13e      	bne.n	802002c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ffae:	687b      	ldr	r3, [r7, #4]
 801ffb0:	689b      	ldr	r3, [r3, #8]
 801ffb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ffb6:	d114      	bne.n	801ffe2 <UART_Transmit_IT+0x48>
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	691b      	ldr	r3, [r3, #16]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d110      	bne.n	801ffe2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	6a1b      	ldr	r3, [r3, #32]
 801ffc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	881b      	ldrh	r3, [r3, #0]
 801ffca:	461a      	mov	r2, r3
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ffd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	6a1b      	ldr	r3, [r3, #32]
 801ffda:	1c9a      	adds	r2, r3, #2
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	621a      	str	r2, [r3, #32]
 801ffe0:	e008      	b.n	801fff4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	6a1b      	ldr	r3, [r3, #32]
 801ffe6:	1c59      	adds	r1, r3, #1
 801ffe8:	687a      	ldr	r2, [r7, #4]
 801ffea:	6211      	str	r1, [r2, #32]
 801ffec:	781a      	ldrb	r2, [r3, #0]
 801ffee:	687b      	ldr	r3, [r7, #4]
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801fff8:	b29b      	uxth	r3, r3
 801fffa:	3b01      	subs	r3, #1
 801fffc:	b29b      	uxth	r3, r3
 801fffe:	687a      	ldr	r2, [r7, #4]
 8020000:	4619      	mov	r1, r3
 8020002:	84d1      	strh	r1, [r2, #38]	; 0x26
 8020004:	2b00      	cmp	r3, #0
 8020006:	d10f      	bne.n	8020028 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	68da      	ldr	r2, [r3, #12]
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020016:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	68da      	ldr	r2, [r3, #12]
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8020026:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8020028:	2300      	movs	r3, #0
 802002a:	e000      	b.n	802002e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802002c:	2302      	movs	r3, #2
  }
}
 802002e:	4618      	mov	r0, r3
 8020030:	3714      	adds	r7, #20
 8020032:	46bd      	mov	sp, r7
 8020034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020038:	4770      	bx	lr

0802003a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802003a:	b580      	push	{r7, lr}
 802003c:	b082      	sub	sp, #8
 802003e:	af00      	add	r7, sp, #0
 8020040:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	68da      	ldr	r2, [r3, #12]
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8020050:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	2220      	movs	r2, #32
 8020056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802005a:	6878      	ldr	r0, [r7, #4]
 802005c:	f7ff fcda 	bl	801fa14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8020060:	2300      	movs	r3, #0
}
 8020062:	4618      	mov	r0, r3
 8020064:	3708      	adds	r7, #8
 8020066:	46bd      	mov	sp, r7
 8020068:	bd80      	pop	{r7, pc}

0802006a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802006a:	b580      	push	{r7, lr}
 802006c:	b08c      	sub	sp, #48	; 0x30
 802006e:	af00      	add	r7, sp, #0
 8020070:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020078:	b2db      	uxtb	r3, r3
 802007a:	2b22      	cmp	r3, #34	; 0x22
 802007c:	f040 80ab 	bne.w	80201d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	689b      	ldr	r3, [r3, #8]
 8020084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020088:	d117      	bne.n	80200ba <UART_Receive_IT+0x50>
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	691b      	ldr	r3, [r3, #16]
 802008e:	2b00      	cmp	r3, #0
 8020090:	d113      	bne.n	80200ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8020092:	2300      	movs	r3, #0
 8020094:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802009a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	685b      	ldr	r3, [r3, #4]
 80200a2:	b29b      	uxth	r3, r3
 80200a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80200a8:	b29a      	uxth	r2, r3
 80200aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80200ae:	687b      	ldr	r3, [r7, #4]
 80200b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200b2:	1c9a      	adds	r2, r3, #2
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	629a      	str	r2, [r3, #40]	; 0x28
 80200b8:	e026      	b.n	8020108 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80200c0:	2300      	movs	r3, #0
 80200c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	689b      	ldr	r3, [r3, #8]
 80200c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80200cc:	d007      	beq.n	80200de <UART_Receive_IT+0x74>
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	689b      	ldr	r3, [r3, #8]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d10a      	bne.n	80200ec <UART_Receive_IT+0x82>
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	691b      	ldr	r3, [r3, #16]
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d106      	bne.n	80200ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	685b      	ldr	r3, [r3, #4]
 80200e4:	b2da      	uxtb	r2, r3
 80200e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200e8:	701a      	strb	r2, [r3, #0]
 80200ea:	e008      	b.n	80200fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	685b      	ldr	r3, [r3, #4]
 80200f2:	b2db      	uxtb	r3, r3
 80200f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80200f8:	b2da      	uxtb	r2, r3
 80200fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020102:	1c5a      	adds	r2, r3, #1
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802010c:	b29b      	uxth	r3, r3
 802010e:	3b01      	subs	r3, #1
 8020110:	b29b      	uxth	r3, r3
 8020112:	687a      	ldr	r2, [r7, #4]
 8020114:	4619      	mov	r1, r3
 8020116:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8020118:	2b00      	cmp	r3, #0
 802011a:	d15a      	bne.n	80201d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	68da      	ldr	r2, [r3, #12]
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	f022 0220 	bic.w	r2, r2, #32
 802012a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	68da      	ldr	r2, [r3, #12]
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802013a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	695a      	ldr	r2, [r3, #20]
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	f022 0201 	bic.w	r2, r2, #1
 802014a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	2220      	movs	r2, #32
 8020150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020158:	2b01      	cmp	r3, #1
 802015a:	d135      	bne.n	80201c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	2200      	movs	r2, #0
 8020160:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	330c      	adds	r3, #12
 8020168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802016a:	697b      	ldr	r3, [r7, #20]
 802016c:	e853 3f00 	ldrex	r3, [r3]
 8020170:	613b      	str	r3, [r7, #16]
   return(result);
 8020172:	693b      	ldr	r3, [r7, #16]
 8020174:	f023 0310 	bic.w	r3, r3, #16
 8020178:	627b      	str	r3, [r7, #36]	; 0x24
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	330c      	adds	r3, #12
 8020180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020182:	623a      	str	r2, [r7, #32]
 8020184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020186:	69f9      	ldr	r1, [r7, #28]
 8020188:	6a3a      	ldr	r2, [r7, #32]
 802018a:	e841 2300 	strex	r3, r2, [r1]
 802018e:	61bb      	str	r3, [r7, #24]
   return(result);
 8020190:	69bb      	ldr	r3, [r7, #24]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d1e5      	bne.n	8020162 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	681b      	ldr	r3, [r3, #0]
 802019a:	681b      	ldr	r3, [r3, #0]
 802019c:	f003 0310 	and.w	r3, r3, #16
 80201a0:	2b10      	cmp	r3, #16
 80201a2:	d10a      	bne.n	80201ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80201a4:	2300      	movs	r3, #0
 80201a6:	60fb      	str	r3, [r7, #12]
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	60fb      	str	r3, [r7, #12]
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	685b      	ldr	r3, [r3, #4]
 80201b6:	60fb      	str	r3, [r7, #12]
 80201b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80201be:	4619      	mov	r1, r3
 80201c0:	6878      	ldr	r0, [r7, #4]
 80201c2:	f7ff fc3b 	bl	801fa3c <HAL_UARTEx_RxEventCallback>
 80201c6:	e002      	b.n	80201ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80201c8:	6878      	ldr	r0, [r7, #4]
 80201ca:	f7f5 fccf 	bl	8015b6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80201ce:	2300      	movs	r3, #0
 80201d0:	e002      	b.n	80201d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80201d2:	2300      	movs	r3, #0
 80201d4:	e000      	b.n	80201d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80201d6:	2302      	movs	r3, #2
  }
}
 80201d8:	4618      	mov	r0, r3
 80201da:	3730      	adds	r7, #48	; 0x30
 80201dc:	46bd      	mov	sp, r7
 80201de:	bd80      	pop	{r7, pc}

080201e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80201e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80201e4:	b0c0      	sub	sp, #256	; 0x100
 80201e6:	af00      	add	r7, sp, #0
 80201e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80201ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80201f0:	681b      	ldr	r3, [r3, #0]
 80201f2:	691b      	ldr	r3, [r3, #16]
 80201f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80201f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80201fc:	68d9      	ldr	r1, [r3, #12]
 80201fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020202:	681a      	ldr	r2, [r3, #0]
 8020204:	ea40 0301 	orr.w	r3, r0, r1
 8020208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802020a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802020e:	689a      	ldr	r2, [r3, #8]
 8020210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020214:	691b      	ldr	r3, [r3, #16]
 8020216:	431a      	orrs	r2, r3
 8020218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802021c:	695b      	ldr	r3, [r3, #20]
 802021e:	431a      	orrs	r2, r3
 8020220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020224:	69db      	ldr	r3, [r3, #28]
 8020226:	4313      	orrs	r3, r2
 8020228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802022c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	68db      	ldr	r3, [r3, #12]
 8020234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8020238:	f021 010c 	bic.w	r1, r1, #12
 802023c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020240:	681a      	ldr	r2, [r3, #0]
 8020242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020246:	430b      	orrs	r3, r1
 8020248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802024a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	695b      	ldr	r3, [r3, #20]
 8020252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8020256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802025a:	6999      	ldr	r1, [r3, #24]
 802025c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020260:	681a      	ldr	r2, [r3, #0]
 8020262:	ea40 0301 	orr.w	r3, r0, r1
 8020266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8020268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802026c:	681a      	ldr	r2, [r3, #0]
 802026e:	4b8f      	ldr	r3, [pc, #572]	; (80204ac <UART_SetConfig+0x2cc>)
 8020270:	429a      	cmp	r2, r3
 8020272:	d005      	beq.n	8020280 <UART_SetConfig+0xa0>
 8020274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020278:	681a      	ldr	r2, [r3, #0]
 802027a:	4b8d      	ldr	r3, [pc, #564]	; (80204b0 <UART_SetConfig+0x2d0>)
 802027c:	429a      	cmp	r2, r3
 802027e:	d104      	bne.n	802028a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8020280:	f7fe f95a 	bl	801e538 <HAL_RCC_GetPCLK2Freq>
 8020284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8020288:	e003      	b.n	8020292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802028a:	f7fe f941 	bl	801e510 <HAL_RCC_GetPCLK1Freq>
 802028e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020296:	69db      	ldr	r3, [r3, #28]
 8020298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802029c:	f040 810c 	bne.w	80204b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80202a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80202a4:	2200      	movs	r2, #0
 80202a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80202aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80202ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80202b2:	4622      	mov	r2, r4
 80202b4:	462b      	mov	r3, r5
 80202b6:	1891      	adds	r1, r2, r2
 80202b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80202ba:	415b      	adcs	r3, r3
 80202bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80202be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80202c2:	4621      	mov	r1, r4
 80202c4:	eb12 0801 	adds.w	r8, r2, r1
 80202c8:	4629      	mov	r1, r5
 80202ca:	eb43 0901 	adc.w	r9, r3, r1
 80202ce:	f04f 0200 	mov.w	r2, #0
 80202d2:	f04f 0300 	mov.w	r3, #0
 80202d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80202da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80202de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80202e2:	4690      	mov	r8, r2
 80202e4:	4699      	mov	r9, r3
 80202e6:	4623      	mov	r3, r4
 80202e8:	eb18 0303 	adds.w	r3, r8, r3
 80202ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80202f0:	462b      	mov	r3, r5
 80202f2:	eb49 0303 	adc.w	r3, r9, r3
 80202f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80202fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80202fe:	685b      	ldr	r3, [r3, #4]
 8020300:	2200      	movs	r2, #0
 8020302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8020306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802030a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802030e:	460b      	mov	r3, r1
 8020310:	18db      	adds	r3, r3, r3
 8020312:	653b      	str	r3, [r7, #80]	; 0x50
 8020314:	4613      	mov	r3, r2
 8020316:	eb42 0303 	adc.w	r3, r2, r3
 802031a:	657b      	str	r3, [r7, #84]	; 0x54
 802031c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8020320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8020324:	f7e8 fbd0 	bl	8008ac8 <__aeabi_uldivmod>
 8020328:	4602      	mov	r2, r0
 802032a:	460b      	mov	r3, r1
 802032c:	4b61      	ldr	r3, [pc, #388]	; (80204b4 <UART_SetConfig+0x2d4>)
 802032e:	fba3 2302 	umull	r2, r3, r3, r2
 8020332:	095b      	lsrs	r3, r3, #5
 8020334:	011c      	lsls	r4, r3, #4
 8020336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802033a:	2200      	movs	r2, #0
 802033c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8020344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8020348:	4642      	mov	r2, r8
 802034a:	464b      	mov	r3, r9
 802034c:	1891      	adds	r1, r2, r2
 802034e:	64b9      	str	r1, [r7, #72]	; 0x48
 8020350:	415b      	adcs	r3, r3
 8020352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8020358:	4641      	mov	r1, r8
 802035a:	eb12 0a01 	adds.w	sl, r2, r1
 802035e:	4649      	mov	r1, r9
 8020360:	eb43 0b01 	adc.w	fp, r3, r1
 8020364:	f04f 0200 	mov.w	r2, #0
 8020368:	f04f 0300 	mov.w	r3, #0
 802036c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8020370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8020374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8020378:	4692      	mov	sl, r2
 802037a:	469b      	mov	fp, r3
 802037c:	4643      	mov	r3, r8
 802037e:	eb1a 0303 	adds.w	r3, sl, r3
 8020382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8020386:	464b      	mov	r3, r9
 8020388:	eb4b 0303 	adc.w	r3, fp, r3
 802038c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8020390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020394:	685b      	ldr	r3, [r3, #4]
 8020396:	2200      	movs	r2, #0
 8020398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802039c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80203a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80203a4:	460b      	mov	r3, r1
 80203a6:	18db      	adds	r3, r3, r3
 80203a8:	643b      	str	r3, [r7, #64]	; 0x40
 80203aa:	4613      	mov	r3, r2
 80203ac:	eb42 0303 	adc.w	r3, r2, r3
 80203b0:	647b      	str	r3, [r7, #68]	; 0x44
 80203b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80203b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80203ba:	f7e8 fb85 	bl	8008ac8 <__aeabi_uldivmod>
 80203be:	4602      	mov	r2, r0
 80203c0:	460b      	mov	r3, r1
 80203c2:	4611      	mov	r1, r2
 80203c4:	4b3b      	ldr	r3, [pc, #236]	; (80204b4 <UART_SetConfig+0x2d4>)
 80203c6:	fba3 2301 	umull	r2, r3, r3, r1
 80203ca:	095b      	lsrs	r3, r3, #5
 80203cc:	2264      	movs	r2, #100	; 0x64
 80203ce:	fb02 f303 	mul.w	r3, r2, r3
 80203d2:	1acb      	subs	r3, r1, r3
 80203d4:	00db      	lsls	r3, r3, #3
 80203d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80203da:	4b36      	ldr	r3, [pc, #216]	; (80204b4 <UART_SetConfig+0x2d4>)
 80203dc:	fba3 2302 	umull	r2, r3, r3, r2
 80203e0:	095b      	lsrs	r3, r3, #5
 80203e2:	005b      	lsls	r3, r3, #1
 80203e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80203e8:	441c      	add	r4, r3
 80203ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80203ee:	2200      	movs	r2, #0
 80203f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80203f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80203f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80203fc:	4642      	mov	r2, r8
 80203fe:	464b      	mov	r3, r9
 8020400:	1891      	adds	r1, r2, r2
 8020402:	63b9      	str	r1, [r7, #56]	; 0x38
 8020404:	415b      	adcs	r3, r3
 8020406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802040c:	4641      	mov	r1, r8
 802040e:	1851      	adds	r1, r2, r1
 8020410:	6339      	str	r1, [r7, #48]	; 0x30
 8020412:	4649      	mov	r1, r9
 8020414:	414b      	adcs	r3, r1
 8020416:	637b      	str	r3, [r7, #52]	; 0x34
 8020418:	f04f 0200 	mov.w	r2, #0
 802041c:	f04f 0300 	mov.w	r3, #0
 8020420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8020424:	4659      	mov	r1, fp
 8020426:	00cb      	lsls	r3, r1, #3
 8020428:	4651      	mov	r1, sl
 802042a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802042e:	4651      	mov	r1, sl
 8020430:	00ca      	lsls	r2, r1, #3
 8020432:	4610      	mov	r0, r2
 8020434:	4619      	mov	r1, r3
 8020436:	4603      	mov	r3, r0
 8020438:	4642      	mov	r2, r8
 802043a:	189b      	adds	r3, r3, r2
 802043c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8020440:	464b      	mov	r3, r9
 8020442:	460a      	mov	r2, r1
 8020444:	eb42 0303 	adc.w	r3, r2, r3
 8020448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802044c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020450:	685b      	ldr	r3, [r3, #4]
 8020452:	2200      	movs	r2, #0
 8020454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8020458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802045c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8020460:	460b      	mov	r3, r1
 8020462:	18db      	adds	r3, r3, r3
 8020464:	62bb      	str	r3, [r7, #40]	; 0x28
 8020466:	4613      	mov	r3, r2
 8020468:	eb42 0303 	adc.w	r3, r2, r3
 802046c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802046e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8020476:	f7e8 fb27 	bl	8008ac8 <__aeabi_uldivmod>
 802047a:	4602      	mov	r2, r0
 802047c:	460b      	mov	r3, r1
 802047e:	4b0d      	ldr	r3, [pc, #52]	; (80204b4 <UART_SetConfig+0x2d4>)
 8020480:	fba3 1302 	umull	r1, r3, r3, r2
 8020484:	095b      	lsrs	r3, r3, #5
 8020486:	2164      	movs	r1, #100	; 0x64
 8020488:	fb01 f303 	mul.w	r3, r1, r3
 802048c:	1ad3      	subs	r3, r2, r3
 802048e:	00db      	lsls	r3, r3, #3
 8020490:	3332      	adds	r3, #50	; 0x32
 8020492:	4a08      	ldr	r2, [pc, #32]	; (80204b4 <UART_SetConfig+0x2d4>)
 8020494:	fba2 2303 	umull	r2, r3, r2, r3
 8020498:	095b      	lsrs	r3, r3, #5
 802049a:	f003 0207 	and.w	r2, r3, #7
 802049e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	4422      	add	r2, r4
 80204a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80204a8:	e105      	b.n	80206b6 <UART_SetConfig+0x4d6>
 80204aa:	bf00      	nop
 80204ac:	40011000 	.word	0x40011000
 80204b0:	40011400 	.word	0x40011400
 80204b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80204b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80204bc:	2200      	movs	r2, #0
 80204be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80204c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80204c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80204ca:	4642      	mov	r2, r8
 80204cc:	464b      	mov	r3, r9
 80204ce:	1891      	adds	r1, r2, r2
 80204d0:	6239      	str	r1, [r7, #32]
 80204d2:	415b      	adcs	r3, r3
 80204d4:	627b      	str	r3, [r7, #36]	; 0x24
 80204d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80204da:	4641      	mov	r1, r8
 80204dc:	1854      	adds	r4, r2, r1
 80204de:	4649      	mov	r1, r9
 80204e0:	eb43 0501 	adc.w	r5, r3, r1
 80204e4:	f04f 0200 	mov.w	r2, #0
 80204e8:	f04f 0300 	mov.w	r3, #0
 80204ec:	00eb      	lsls	r3, r5, #3
 80204ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80204f2:	00e2      	lsls	r2, r4, #3
 80204f4:	4614      	mov	r4, r2
 80204f6:	461d      	mov	r5, r3
 80204f8:	4643      	mov	r3, r8
 80204fa:	18e3      	adds	r3, r4, r3
 80204fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8020500:	464b      	mov	r3, r9
 8020502:	eb45 0303 	adc.w	r3, r5, r3
 8020506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802050a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802050e:	685b      	ldr	r3, [r3, #4]
 8020510:	2200      	movs	r2, #0
 8020512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802051a:	f04f 0200 	mov.w	r2, #0
 802051e:	f04f 0300 	mov.w	r3, #0
 8020522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8020526:	4629      	mov	r1, r5
 8020528:	008b      	lsls	r3, r1, #2
 802052a:	4621      	mov	r1, r4
 802052c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8020530:	4621      	mov	r1, r4
 8020532:	008a      	lsls	r2, r1, #2
 8020534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8020538:	f7e8 fac6 	bl	8008ac8 <__aeabi_uldivmod>
 802053c:	4602      	mov	r2, r0
 802053e:	460b      	mov	r3, r1
 8020540:	4b60      	ldr	r3, [pc, #384]	; (80206c4 <UART_SetConfig+0x4e4>)
 8020542:	fba3 2302 	umull	r2, r3, r3, r2
 8020546:	095b      	lsrs	r3, r3, #5
 8020548:	011c      	lsls	r4, r3, #4
 802054a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802054e:	2200      	movs	r2, #0
 8020550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8020554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8020558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802055c:	4642      	mov	r2, r8
 802055e:	464b      	mov	r3, r9
 8020560:	1891      	adds	r1, r2, r2
 8020562:	61b9      	str	r1, [r7, #24]
 8020564:	415b      	adcs	r3, r3
 8020566:	61fb      	str	r3, [r7, #28]
 8020568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802056c:	4641      	mov	r1, r8
 802056e:	1851      	adds	r1, r2, r1
 8020570:	6139      	str	r1, [r7, #16]
 8020572:	4649      	mov	r1, r9
 8020574:	414b      	adcs	r3, r1
 8020576:	617b      	str	r3, [r7, #20]
 8020578:	f04f 0200 	mov.w	r2, #0
 802057c:	f04f 0300 	mov.w	r3, #0
 8020580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8020584:	4659      	mov	r1, fp
 8020586:	00cb      	lsls	r3, r1, #3
 8020588:	4651      	mov	r1, sl
 802058a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802058e:	4651      	mov	r1, sl
 8020590:	00ca      	lsls	r2, r1, #3
 8020592:	4610      	mov	r0, r2
 8020594:	4619      	mov	r1, r3
 8020596:	4603      	mov	r3, r0
 8020598:	4642      	mov	r2, r8
 802059a:	189b      	adds	r3, r3, r2
 802059c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80205a0:	464b      	mov	r3, r9
 80205a2:	460a      	mov	r2, r1
 80205a4:	eb42 0303 	adc.w	r3, r2, r3
 80205a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80205ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80205b0:	685b      	ldr	r3, [r3, #4]
 80205b2:	2200      	movs	r2, #0
 80205b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80205b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80205b8:	f04f 0200 	mov.w	r2, #0
 80205bc:	f04f 0300 	mov.w	r3, #0
 80205c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80205c4:	4649      	mov	r1, r9
 80205c6:	008b      	lsls	r3, r1, #2
 80205c8:	4641      	mov	r1, r8
 80205ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80205ce:	4641      	mov	r1, r8
 80205d0:	008a      	lsls	r2, r1, #2
 80205d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80205d6:	f7e8 fa77 	bl	8008ac8 <__aeabi_uldivmod>
 80205da:	4602      	mov	r2, r0
 80205dc:	460b      	mov	r3, r1
 80205de:	4b39      	ldr	r3, [pc, #228]	; (80206c4 <UART_SetConfig+0x4e4>)
 80205e0:	fba3 1302 	umull	r1, r3, r3, r2
 80205e4:	095b      	lsrs	r3, r3, #5
 80205e6:	2164      	movs	r1, #100	; 0x64
 80205e8:	fb01 f303 	mul.w	r3, r1, r3
 80205ec:	1ad3      	subs	r3, r2, r3
 80205ee:	011b      	lsls	r3, r3, #4
 80205f0:	3332      	adds	r3, #50	; 0x32
 80205f2:	4a34      	ldr	r2, [pc, #208]	; (80206c4 <UART_SetConfig+0x4e4>)
 80205f4:	fba2 2303 	umull	r2, r3, r2, r3
 80205f8:	095b      	lsrs	r3, r3, #5
 80205fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80205fe:	441c      	add	r4, r3
 8020600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8020604:	2200      	movs	r2, #0
 8020606:	673b      	str	r3, [r7, #112]	; 0x70
 8020608:	677a      	str	r2, [r7, #116]	; 0x74
 802060a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802060e:	4642      	mov	r2, r8
 8020610:	464b      	mov	r3, r9
 8020612:	1891      	adds	r1, r2, r2
 8020614:	60b9      	str	r1, [r7, #8]
 8020616:	415b      	adcs	r3, r3
 8020618:	60fb      	str	r3, [r7, #12]
 802061a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802061e:	4641      	mov	r1, r8
 8020620:	1851      	adds	r1, r2, r1
 8020622:	6039      	str	r1, [r7, #0]
 8020624:	4649      	mov	r1, r9
 8020626:	414b      	adcs	r3, r1
 8020628:	607b      	str	r3, [r7, #4]
 802062a:	f04f 0200 	mov.w	r2, #0
 802062e:	f04f 0300 	mov.w	r3, #0
 8020632:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8020636:	4659      	mov	r1, fp
 8020638:	00cb      	lsls	r3, r1, #3
 802063a:	4651      	mov	r1, sl
 802063c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8020640:	4651      	mov	r1, sl
 8020642:	00ca      	lsls	r2, r1, #3
 8020644:	4610      	mov	r0, r2
 8020646:	4619      	mov	r1, r3
 8020648:	4603      	mov	r3, r0
 802064a:	4642      	mov	r2, r8
 802064c:	189b      	adds	r3, r3, r2
 802064e:	66bb      	str	r3, [r7, #104]	; 0x68
 8020650:	464b      	mov	r3, r9
 8020652:	460a      	mov	r2, r1
 8020654:	eb42 0303 	adc.w	r3, r2, r3
 8020658:	66fb      	str	r3, [r7, #108]	; 0x6c
 802065a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802065e:	685b      	ldr	r3, [r3, #4]
 8020660:	2200      	movs	r2, #0
 8020662:	663b      	str	r3, [r7, #96]	; 0x60
 8020664:	667a      	str	r2, [r7, #100]	; 0x64
 8020666:	f04f 0200 	mov.w	r2, #0
 802066a:	f04f 0300 	mov.w	r3, #0
 802066e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8020672:	4649      	mov	r1, r9
 8020674:	008b      	lsls	r3, r1, #2
 8020676:	4641      	mov	r1, r8
 8020678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802067c:	4641      	mov	r1, r8
 802067e:	008a      	lsls	r2, r1, #2
 8020680:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8020684:	f7e8 fa20 	bl	8008ac8 <__aeabi_uldivmod>
 8020688:	4602      	mov	r2, r0
 802068a:	460b      	mov	r3, r1
 802068c:	4b0d      	ldr	r3, [pc, #52]	; (80206c4 <UART_SetConfig+0x4e4>)
 802068e:	fba3 1302 	umull	r1, r3, r3, r2
 8020692:	095b      	lsrs	r3, r3, #5
 8020694:	2164      	movs	r1, #100	; 0x64
 8020696:	fb01 f303 	mul.w	r3, r1, r3
 802069a:	1ad3      	subs	r3, r2, r3
 802069c:	011b      	lsls	r3, r3, #4
 802069e:	3332      	adds	r3, #50	; 0x32
 80206a0:	4a08      	ldr	r2, [pc, #32]	; (80206c4 <UART_SetConfig+0x4e4>)
 80206a2:	fba2 2303 	umull	r2, r3, r2, r3
 80206a6:	095b      	lsrs	r3, r3, #5
 80206a8:	f003 020f 	and.w	r2, r3, #15
 80206ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	4422      	add	r2, r4
 80206b4:	609a      	str	r2, [r3, #8]
}
 80206b6:	bf00      	nop
 80206b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80206bc:	46bd      	mov	sp, r7
 80206be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80206c2:	bf00      	nop
 80206c4:	51eb851f 	.word	0x51eb851f

080206c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80206c8:	b084      	sub	sp, #16
 80206ca:	b580      	push	{r7, lr}
 80206cc:	b084      	sub	sp, #16
 80206ce:	af00      	add	r7, sp, #0
 80206d0:	6078      	str	r0, [r7, #4]
 80206d2:	f107 001c 	add.w	r0, r7, #28
 80206d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80206da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80206dc:	2b01      	cmp	r3, #1
 80206de:	d122      	bne.n	8020726 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	68db      	ldr	r3, [r3, #12]
 80206f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80206f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80206f8:	687a      	ldr	r2, [r7, #4]
 80206fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	68db      	ldr	r3, [r3, #12]
 8020700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8020708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802070a:	2b01      	cmp	r3, #1
 802070c:	d105      	bne.n	802071a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	68db      	ldr	r3, [r3, #12]
 8020712:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802071a:	6878      	ldr	r0, [r7, #4]
 802071c:	f001 fbee 	bl	8021efc <USB_CoreReset>
 8020720:	4603      	mov	r3, r0
 8020722:	73fb      	strb	r3, [r7, #15]
 8020724:	e01a      	b.n	802075c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	68db      	ldr	r3, [r3, #12]
 802072a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802072e:	687b      	ldr	r3, [r7, #4]
 8020730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8020732:	6878      	ldr	r0, [r7, #4]
 8020734:	f001 fbe2 	bl	8021efc <USB_CoreReset>
 8020738:	4603      	mov	r3, r0
 802073a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802073c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802073e:	2b00      	cmp	r3, #0
 8020740:	d106      	bne.n	8020750 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020746:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	639a      	str	r2, [r3, #56]	; 0x38
 802074e:	e005      	b.n	802075c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802075e:	2b01      	cmp	r3, #1
 8020760:	d10b      	bne.n	802077a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	689b      	ldr	r3, [r3, #8]
 8020766:	f043 0206 	orr.w	r2, r3, #6
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	689b      	ldr	r3, [r3, #8]
 8020772:	f043 0220 	orr.w	r2, r3, #32
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802077a:	7bfb      	ldrb	r3, [r7, #15]
}
 802077c:	4618      	mov	r0, r3
 802077e:	3710      	adds	r7, #16
 8020780:	46bd      	mov	sp, r7
 8020782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020786:	b004      	add	sp, #16
 8020788:	4770      	bx	lr
	...

0802078c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802078c:	b480      	push	{r7}
 802078e:	b087      	sub	sp, #28
 8020790:	af00      	add	r7, sp, #0
 8020792:	60f8      	str	r0, [r7, #12]
 8020794:	60b9      	str	r1, [r7, #8]
 8020796:	4613      	mov	r3, r2
 8020798:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802079a:	79fb      	ldrb	r3, [r7, #7]
 802079c:	2b02      	cmp	r3, #2
 802079e:	d165      	bne.n	802086c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80207a0:	68bb      	ldr	r3, [r7, #8]
 80207a2:	4a41      	ldr	r2, [pc, #260]	; (80208a8 <USB_SetTurnaroundTime+0x11c>)
 80207a4:	4293      	cmp	r3, r2
 80207a6:	d906      	bls.n	80207b6 <USB_SetTurnaroundTime+0x2a>
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	4a40      	ldr	r2, [pc, #256]	; (80208ac <USB_SetTurnaroundTime+0x120>)
 80207ac:	4293      	cmp	r3, r2
 80207ae:	d202      	bcs.n	80207b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80207b0:	230f      	movs	r3, #15
 80207b2:	617b      	str	r3, [r7, #20]
 80207b4:	e062      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80207b6:	68bb      	ldr	r3, [r7, #8]
 80207b8:	4a3c      	ldr	r2, [pc, #240]	; (80208ac <USB_SetTurnaroundTime+0x120>)
 80207ba:	4293      	cmp	r3, r2
 80207bc:	d306      	bcc.n	80207cc <USB_SetTurnaroundTime+0x40>
 80207be:	68bb      	ldr	r3, [r7, #8]
 80207c0:	4a3b      	ldr	r2, [pc, #236]	; (80208b0 <USB_SetTurnaroundTime+0x124>)
 80207c2:	4293      	cmp	r3, r2
 80207c4:	d202      	bcs.n	80207cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80207c6:	230e      	movs	r3, #14
 80207c8:	617b      	str	r3, [r7, #20]
 80207ca:	e057      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80207cc:	68bb      	ldr	r3, [r7, #8]
 80207ce:	4a38      	ldr	r2, [pc, #224]	; (80208b0 <USB_SetTurnaroundTime+0x124>)
 80207d0:	4293      	cmp	r3, r2
 80207d2:	d306      	bcc.n	80207e2 <USB_SetTurnaroundTime+0x56>
 80207d4:	68bb      	ldr	r3, [r7, #8]
 80207d6:	4a37      	ldr	r2, [pc, #220]	; (80208b4 <USB_SetTurnaroundTime+0x128>)
 80207d8:	4293      	cmp	r3, r2
 80207da:	d202      	bcs.n	80207e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80207dc:	230d      	movs	r3, #13
 80207de:	617b      	str	r3, [r7, #20]
 80207e0:	e04c      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80207e2:	68bb      	ldr	r3, [r7, #8]
 80207e4:	4a33      	ldr	r2, [pc, #204]	; (80208b4 <USB_SetTurnaroundTime+0x128>)
 80207e6:	4293      	cmp	r3, r2
 80207e8:	d306      	bcc.n	80207f8 <USB_SetTurnaroundTime+0x6c>
 80207ea:	68bb      	ldr	r3, [r7, #8]
 80207ec:	4a32      	ldr	r2, [pc, #200]	; (80208b8 <USB_SetTurnaroundTime+0x12c>)
 80207ee:	4293      	cmp	r3, r2
 80207f0:	d802      	bhi.n	80207f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80207f2:	230c      	movs	r3, #12
 80207f4:	617b      	str	r3, [r7, #20]
 80207f6:	e041      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80207f8:	68bb      	ldr	r3, [r7, #8]
 80207fa:	4a2f      	ldr	r2, [pc, #188]	; (80208b8 <USB_SetTurnaroundTime+0x12c>)
 80207fc:	4293      	cmp	r3, r2
 80207fe:	d906      	bls.n	802080e <USB_SetTurnaroundTime+0x82>
 8020800:	68bb      	ldr	r3, [r7, #8]
 8020802:	4a2e      	ldr	r2, [pc, #184]	; (80208bc <USB_SetTurnaroundTime+0x130>)
 8020804:	4293      	cmp	r3, r2
 8020806:	d802      	bhi.n	802080e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8020808:	230b      	movs	r3, #11
 802080a:	617b      	str	r3, [r7, #20]
 802080c:	e036      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802080e:	68bb      	ldr	r3, [r7, #8]
 8020810:	4a2a      	ldr	r2, [pc, #168]	; (80208bc <USB_SetTurnaroundTime+0x130>)
 8020812:	4293      	cmp	r3, r2
 8020814:	d906      	bls.n	8020824 <USB_SetTurnaroundTime+0x98>
 8020816:	68bb      	ldr	r3, [r7, #8]
 8020818:	4a29      	ldr	r2, [pc, #164]	; (80208c0 <USB_SetTurnaroundTime+0x134>)
 802081a:	4293      	cmp	r3, r2
 802081c:	d802      	bhi.n	8020824 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802081e:	230a      	movs	r3, #10
 8020820:	617b      	str	r3, [r7, #20]
 8020822:	e02b      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8020824:	68bb      	ldr	r3, [r7, #8]
 8020826:	4a26      	ldr	r2, [pc, #152]	; (80208c0 <USB_SetTurnaroundTime+0x134>)
 8020828:	4293      	cmp	r3, r2
 802082a:	d906      	bls.n	802083a <USB_SetTurnaroundTime+0xae>
 802082c:	68bb      	ldr	r3, [r7, #8]
 802082e:	4a25      	ldr	r2, [pc, #148]	; (80208c4 <USB_SetTurnaroundTime+0x138>)
 8020830:	4293      	cmp	r3, r2
 8020832:	d202      	bcs.n	802083a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8020834:	2309      	movs	r3, #9
 8020836:	617b      	str	r3, [r7, #20]
 8020838:	e020      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802083a:	68bb      	ldr	r3, [r7, #8]
 802083c:	4a21      	ldr	r2, [pc, #132]	; (80208c4 <USB_SetTurnaroundTime+0x138>)
 802083e:	4293      	cmp	r3, r2
 8020840:	d306      	bcc.n	8020850 <USB_SetTurnaroundTime+0xc4>
 8020842:	68bb      	ldr	r3, [r7, #8]
 8020844:	4a20      	ldr	r2, [pc, #128]	; (80208c8 <USB_SetTurnaroundTime+0x13c>)
 8020846:	4293      	cmp	r3, r2
 8020848:	d802      	bhi.n	8020850 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802084a:	2308      	movs	r3, #8
 802084c:	617b      	str	r3, [r7, #20]
 802084e:	e015      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8020850:	68bb      	ldr	r3, [r7, #8]
 8020852:	4a1d      	ldr	r2, [pc, #116]	; (80208c8 <USB_SetTurnaroundTime+0x13c>)
 8020854:	4293      	cmp	r3, r2
 8020856:	d906      	bls.n	8020866 <USB_SetTurnaroundTime+0xda>
 8020858:	68bb      	ldr	r3, [r7, #8]
 802085a:	4a1c      	ldr	r2, [pc, #112]	; (80208cc <USB_SetTurnaroundTime+0x140>)
 802085c:	4293      	cmp	r3, r2
 802085e:	d202      	bcs.n	8020866 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8020860:	2307      	movs	r3, #7
 8020862:	617b      	str	r3, [r7, #20]
 8020864:	e00a      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8020866:	2306      	movs	r3, #6
 8020868:	617b      	str	r3, [r7, #20]
 802086a:	e007      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802086c:	79fb      	ldrb	r3, [r7, #7]
 802086e:	2b00      	cmp	r3, #0
 8020870:	d102      	bne.n	8020878 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8020872:	2309      	movs	r3, #9
 8020874:	617b      	str	r3, [r7, #20]
 8020876:	e001      	b.n	802087c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8020878:	2309      	movs	r3, #9
 802087a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802087c:	68fb      	ldr	r3, [r7, #12]
 802087e:	68db      	ldr	r3, [r3, #12]
 8020880:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	68da      	ldr	r2, [r3, #12]
 802088c:	697b      	ldr	r3, [r7, #20]
 802088e:	029b      	lsls	r3, r3, #10
 8020890:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8020894:	431a      	orrs	r2, r3
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802089a:	2300      	movs	r3, #0
}
 802089c:	4618      	mov	r0, r3
 802089e:	371c      	adds	r7, #28
 80208a0:	46bd      	mov	sp, r7
 80208a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a6:	4770      	bx	lr
 80208a8:	00d8acbf 	.word	0x00d8acbf
 80208ac:	00e4e1c0 	.word	0x00e4e1c0
 80208b0:	00f42400 	.word	0x00f42400
 80208b4:	01067380 	.word	0x01067380
 80208b8:	011a499f 	.word	0x011a499f
 80208bc:	01312cff 	.word	0x01312cff
 80208c0:	014ca43f 	.word	0x014ca43f
 80208c4:	016e3600 	.word	0x016e3600
 80208c8:	01a6ab1f 	.word	0x01a6ab1f
 80208cc:	01e84800 	.word	0x01e84800

080208d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80208d0:	b480      	push	{r7}
 80208d2:	b083      	sub	sp, #12
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	689b      	ldr	r3, [r3, #8]
 80208dc:	f043 0201 	orr.w	r2, r3, #1
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80208e4:	2300      	movs	r3, #0
}
 80208e6:	4618      	mov	r0, r3
 80208e8:	370c      	adds	r7, #12
 80208ea:	46bd      	mov	sp, r7
 80208ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f0:	4770      	bx	lr

080208f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80208f2:	b480      	push	{r7}
 80208f4:	b083      	sub	sp, #12
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	689b      	ldr	r3, [r3, #8]
 80208fe:	f023 0201 	bic.w	r2, r3, #1
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8020906:	2300      	movs	r3, #0
}
 8020908:	4618      	mov	r0, r3
 802090a:	370c      	adds	r7, #12
 802090c:	46bd      	mov	sp, r7
 802090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020912:	4770      	bx	lr

08020914 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8020914:	b580      	push	{r7, lr}
 8020916:	b084      	sub	sp, #16
 8020918:	af00      	add	r7, sp, #0
 802091a:	6078      	str	r0, [r7, #4]
 802091c:	460b      	mov	r3, r1
 802091e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8020920:	2300      	movs	r3, #0
 8020922:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	68db      	ldr	r3, [r3, #12]
 8020928:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8020930:	78fb      	ldrb	r3, [r7, #3]
 8020932:	2b01      	cmp	r3, #1
 8020934:	d115      	bne.n	8020962 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	68db      	ldr	r3, [r3, #12]
 802093a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8020942:	2001      	movs	r0, #1
 8020944:	f7f7 fb70 	bl	8018028 <HAL_Delay>
      ms++;
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	3301      	adds	r3, #1
 802094c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802094e:	6878      	ldr	r0, [r7, #4]
 8020950:	f001 fa45 	bl	8021dde <USB_GetMode>
 8020954:	4603      	mov	r3, r0
 8020956:	2b01      	cmp	r3, #1
 8020958:	d01e      	beq.n	8020998 <USB_SetCurrentMode+0x84>
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	2b31      	cmp	r3, #49	; 0x31
 802095e:	d9f0      	bls.n	8020942 <USB_SetCurrentMode+0x2e>
 8020960:	e01a      	b.n	8020998 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8020962:	78fb      	ldrb	r3, [r7, #3]
 8020964:	2b00      	cmp	r3, #0
 8020966:	d115      	bne.n	8020994 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	68db      	ldr	r3, [r3, #12]
 802096c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8020974:	2001      	movs	r0, #1
 8020976:	f7f7 fb57 	bl	8018028 <HAL_Delay>
      ms++;
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	3301      	adds	r3, #1
 802097e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8020980:	6878      	ldr	r0, [r7, #4]
 8020982:	f001 fa2c 	bl	8021dde <USB_GetMode>
 8020986:	4603      	mov	r3, r0
 8020988:	2b00      	cmp	r3, #0
 802098a:	d005      	beq.n	8020998 <USB_SetCurrentMode+0x84>
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	2b31      	cmp	r3, #49	; 0x31
 8020990:	d9f0      	bls.n	8020974 <USB_SetCurrentMode+0x60>
 8020992:	e001      	b.n	8020998 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8020994:	2301      	movs	r3, #1
 8020996:	e005      	b.n	80209a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8020998:	68fb      	ldr	r3, [r7, #12]
 802099a:	2b32      	cmp	r3, #50	; 0x32
 802099c:	d101      	bne.n	80209a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802099e:	2301      	movs	r3, #1
 80209a0:	e000      	b.n	80209a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80209a2:	2300      	movs	r3, #0
}
 80209a4:	4618      	mov	r0, r3
 80209a6:	3710      	adds	r7, #16
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}

080209ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80209ac:	b084      	sub	sp, #16
 80209ae:	b580      	push	{r7, lr}
 80209b0:	b086      	sub	sp, #24
 80209b2:	af00      	add	r7, sp, #0
 80209b4:	6078      	str	r0, [r7, #4]
 80209b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80209ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80209be:	2300      	movs	r3, #0
 80209c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80209c6:	2300      	movs	r3, #0
 80209c8:	613b      	str	r3, [r7, #16]
 80209ca:	e009      	b.n	80209e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80209cc:	687a      	ldr	r2, [r7, #4]
 80209ce:	693b      	ldr	r3, [r7, #16]
 80209d0:	3340      	adds	r3, #64	; 0x40
 80209d2:	009b      	lsls	r3, r3, #2
 80209d4:	4413      	add	r3, r2
 80209d6:	2200      	movs	r2, #0
 80209d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80209da:	693b      	ldr	r3, [r7, #16]
 80209dc:	3301      	adds	r3, #1
 80209de:	613b      	str	r3, [r7, #16]
 80209e0:	693b      	ldr	r3, [r7, #16]
 80209e2:	2b0e      	cmp	r3, #14
 80209e4:	d9f2      	bls.n	80209cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80209e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d11c      	bne.n	8020a26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80209f2:	685b      	ldr	r3, [r3, #4]
 80209f4:	68fa      	ldr	r2, [r7, #12]
 80209f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80209fa:	f043 0302 	orr.w	r3, r3, #2
 80209fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8020a00:	687b      	ldr	r3, [r7, #4]
 8020a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	639a      	str	r2, [r3, #56]	; 0x38
 8020a24:	e00b      	b.n	8020a3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8020a3e:	68fb      	ldr	r3, [r7, #12]
 8020a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8020a44:	461a      	mov	r2, r3
 8020a46:	2300      	movs	r3, #0
 8020a48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020a50:	4619      	mov	r1, r3
 8020a52:	68fb      	ldr	r3, [r7, #12]
 8020a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020a58:	461a      	mov	r2, r3
 8020a5a:	680b      	ldr	r3, [r1, #0]
 8020a5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8020a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a60:	2b01      	cmp	r3, #1
 8020a62:	d10c      	bne.n	8020a7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8020a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d104      	bne.n	8020a74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8020a6a:	2100      	movs	r1, #0
 8020a6c:	6878      	ldr	r0, [r7, #4]
 8020a6e:	f000 f965 	bl	8020d3c <USB_SetDevSpeed>
 8020a72:	e008      	b.n	8020a86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8020a74:	2101      	movs	r1, #1
 8020a76:	6878      	ldr	r0, [r7, #4]
 8020a78:	f000 f960 	bl	8020d3c <USB_SetDevSpeed>
 8020a7c:	e003      	b.n	8020a86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8020a7e:	2103      	movs	r1, #3
 8020a80:	6878      	ldr	r0, [r7, #4]
 8020a82:	f000 f95b 	bl	8020d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8020a86:	2110      	movs	r1, #16
 8020a88:	6878      	ldr	r0, [r7, #4]
 8020a8a:	f000 f8f3 	bl	8020c74 <USB_FlushTxFifo>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d001      	beq.n	8020a98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8020a94:	2301      	movs	r3, #1
 8020a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8020a98:	6878      	ldr	r0, [r7, #4]
 8020a9a:	f000 f91f 	bl	8020cdc <USB_FlushRxFifo>
 8020a9e:	4603      	mov	r3, r0
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d001      	beq.n	8020aa8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8020aa4:	2301      	movs	r3, #1
 8020aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8020aa8:	68fb      	ldr	r3, [r7, #12]
 8020aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020aae:	461a      	mov	r2, r3
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8020ab4:	68fb      	ldr	r3, [r7, #12]
 8020ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020aba:	461a      	mov	r2, r3
 8020abc:	2300      	movs	r3, #0
 8020abe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020ac6:	461a      	mov	r2, r3
 8020ac8:	2300      	movs	r3, #0
 8020aca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8020acc:	2300      	movs	r3, #0
 8020ace:	613b      	str	r3, [r7, #16]
 8020ad0:	e043      	b.n	8020b5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8020ad2:	693b      	ldr	r3, [r7, #16]
 8020ad4:	015a      	lsls	r2, r3, #5
 8020ad6:	68fb      	ldr	r3, [r7, #12]
 8020ad8:	4413      	add	r3, r2
 8020ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8020ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020ae8:	d118      	bne.n	8020b1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8020aea:	693b      	ldr	r3, [r7, #16]
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d10a      	bne.n	8020b06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8020af0:	693b      	ldr	r3, [r7, #16]
 8020af2:	015a      	lsls	r2, r3, #5
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	4413      	add	r3, r2
 8020af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020afc:	461a      	mov	r2, r3
 8020afe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020b02:	6013      	str	r3, [r2, #0]
 8020b04:	e013      	b.n	8020b2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8020b06:	693b      	ldr	r3, [r7, #16]
 8020b08:	015a      	lsls	r2, r3, #5
 8020b0a:	68fb      	ldr	r3, [r7, #12]
 8020b0c:	4413      	add	r3, r2
 8020b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020b12:	461a      	mov	r2, r3
 8020b14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8020b18:	6013      	str	r3, [r2, #0]
 8020b1a:	e008      	b.n	8020b2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8020b1c:	693b      	ldr	r3, [r7, #16]
 8020b1e:	015a      	lsls	r2, r3, #5
 8020b20:	68fb      	ldr	r3, [r7, #12]
 8020b22:	4413      	add	r3, r2
 8020b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020b28:	461a      	mov	r2, r3
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8020b2e:	693b      	ldr	r3, [r7, #16]
 8020b30:	015a      	lsls	r2, r3, #5
 8020b32:	68fb      	ldr	r3, [r7, #12]
 8020b34:	4413      	add	r3, r2
 8020b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020b3a:	461a      	mov	r2, r3
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8020b40:	693b      	ldr	r3, [r7, #16]
 8020b42:	015a      	lsls	r2, r3, #5
 8020b44:	68fb      	ldr	r3, [r7, #12]
 8020b46:	4413      	add	r3, r2
 8020b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020b4c:	461a      	mov	r2, r3
 8020b4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8020b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8020b54:	693b      	ldr	r3, [r7, #16]
 8020b56:	3301      	adds	r3, #1
 8020b58:	613b      	str	r3, [r7, #16]
 8020b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b5c:	693a      	ldr	r2, [r7, #16]
 8020b5e:	429a      	cmp	r2, r3
 8020b60:	d3b7      	bcc.n	8020ad2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8020b62:	2300      	movs	r3, #0
 8020b64:	613b      	str	r3, [r7, #16]
 8020b66:	e043      	b.n	8020bf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8020b68:	693b      	ldr	r3, [r7, #16]
 8020b6a:	015a      	lsls	r2, r3, #5
 8020b6c:	68fb      	ldr	r3, [r7, #12]
 8020b6e:	4413      	add	r3, r2
 8020b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8020b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020b7e:	d118      	bne.n	8020bb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8020b80:	693b      	ldr	r3, [r7, #16]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d10a      	bne.n	8020b9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8020b86:	693b      	ldr	r3, [r7, #16]
 8020b88:	015a      	lsls	r2, r3, #5
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	4413      	add	r3, r2
 8020b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020b92:	461a      	mov	r2, r3
 8020b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020b98:	6013      	str	r3, [r2, #0]
 8020b9a:	e013      	b.n	8020bc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8020b9c:	693b      	ldr	r3, [r7, #16]
 8020b9e:	015a      	lsls	r2, r3, #5
 8020ba0:	68fb      	ldr	r3, [r7, #12]
 8020ba2:	4413      	add	r3, r2
 8020ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020ba8:	461a      	mov	r2, r3
 8020baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8020bae:	6013      	str	r3, [r2, #0]
 8020bb0:	e008      	b.n	8020bc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8020bb2:	693b      	ldr	r3, [r7, #16]
 8020bb4:	015a      	lsls	r2, r3, #5
 8020bb6:	68fb      	ldr	r3, [r7, #12]
 8020bb8:	4413      	add	r3, r2
 8020bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020bbe:	461a      	mov	r2, r3
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8020bc4:	693b      	ldr	r3, [r7, #16]
 8020bc6:	015a      	lsls	r2, r3, #5
 8020bc8:	68fb      	ldr	r3, [r7, #12]
 8020bca:	4413      	add	r3, r2
 8020bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020bd0:	461a      	mov	r2, r3
 8020bd2:	2300      	movs	r3, #0
 8020bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8020bd6:	693b      	ldr	r3, [r7, #16]
 8020bd8:	015a      	lsls	r2, r3, #5
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	4413      	add	r3, r2
 8020bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020be2:	461a      	mov	r2, r3
 8020be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8020be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8020bea:	693b      	ldr	r3, [r7, #16]
 8020bec:	3301      	adds	r3, #1
 8020bee:	613b      	str	r3, [r7, #16]
 8020bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020bf2:	693a      	ldr	r2, [r7, #16]
 8020bf4:	429a      	cmp	r2, r3
 8020bf6:	d3b7      	bcc.n	8020b68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020bfe:	691b      	ldr	r3, [r3, #16]
 8020c00:	68fa      	ldr	r2, [r7, #12]
 8020c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8020c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020c0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	2200      	movs	r2, #0
 8020c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8020c18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8020c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	d105      	bne.n	8020c2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	699b      	ldr	r3, [r3, #24]
 8020c24:	f043 0210 	orr.w	r2, r3, #16
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	699a      	ldr	r2, [r3, #24]
 8020c30:	4b0f      	ldr	r3, [pc, #60]	; (8020c70 <USB_DevInit+0x2c4>)
 8020c32:	4313      	orrs	r3, r2
 8020c34:	687a      	ldr	r2, [r7, #4]
 8020c36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8020c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d005      	beq.n	8020c4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8020c3e:	687b      	ldr	r3, [r7, #4]
 8020c40:	699b      	ldr	r3, [r3, #24]
 8020c42:	f043 0208 	orr.w	r2, r3, #8
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8020c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020c4c:	2b01      	cmp	r3, #1
 8020c4e:	d107      	bne.n	8020c60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	699b      	ldr	r3, [r3, #24]
 8020c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8020c58:	f043 0304 	orr.w	r3, r3, #4
 8020c5c:	687a      	ldr	r2, [r7, #4]
 8020c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8020c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8020c62:	4618      	mov	r0, r3
 8020c64:	3718      	adds	r7, #24
 8020c66:	46bd      	mov	sp, r7
 8020c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020c6c:	b004      	add	sp, #16
 8020c6e:	4770      	bx	lr
 8020c70:	803c3800 	.word	0x803c3800

08020c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8020c74:	b480      	push	{r7}
 8020c76:	b085      	sub	sp, #20
 8020c78:	af00      	add	r7, sp, #0
 8020c7a:	6078      	str	r0, [r7, #4]
 8020c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8020c7e:	2300      	movs	r3, #0
 8020c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8020c82:	68fb      	ldr	r3, [r7, #12]
 8020c84:	3301      	adds	r3, #1
 8020c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8020c88:	68fb      	ldr	r3, [r7, #12]
 8020c8a:	4a13      	ldr	r2, [pc, #76]	; (8020cd8 <USB_FlushTxFifo+0x64>)
 8020c8c:	4293      	cmp	r3, r2
 8020c8e:	d901      	bls.n	8020c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8020c90:	2303      	movs	r3, #3
 8020c92:	e01b      	b.n	8020ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	691b      	ldr	r3, [r3, #16]
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	daf2      	bge.n	8020c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8020ca0:	683b      	ldr	r3, [r7, #0]
 8020ca2:	019b      	lsls	r3, r3, #6
 8020ca4:	f043 0220 	orr.w	r2, r3, #32
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	3301      	adds	r3, #1
 8020cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8020cb2:	68fb      	ldr	r3, [r7, #12]
 8020cb4:	4a08      	ldr	r2, [pc, #32]	; (8020cd8 <USB_FlushTxFifo+0x64>)
 8020cb6:	4293      	cmp	r3, r2
 8020cb8:	d901      	bls.n	8020cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8020cba:	2303      	movs	r3, #3
 8020cbc:	e006      	b.n	8020ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	691b      	ldr	r3, [r3, #16]
 8020cc2:	f003 0320 	and.w	r3, r3, #32
 8020cc6:	2b20      	cmp	r3, #32
 8020cc8:	d0f0      	beq.n	8020cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8020cca:	2300      	movs	r3, #0
}
 8020ccc:	4618      	mov	r0, r3
 8020cce:	3714      	adds	r7, #20
 8020cd0:	46bd      	mov	sp, r7
 8020cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cd6:	4770      	bx	lr
 8020cd8:	00030d40 	.word	0x00030d40

08020cdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8020cdc:	b480      	push	{r7}
 8020cde:	b085      	sub	sp, #20
 8020ce0:	af00      	add	r7, sp, #0
 8020ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	3301      	adds	r3, #1
 8020cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8020cee:	68fb      	ldr	r3, [r7, #12]
 8020cf0:	4a11      	ldr	r2, [pc, #68]	; (8020d38 <USB_FlushRxFifo+0x5c>)
 8020cf2:	4293      	cmp	r3, r2
 8020cf4:	d901      	bls.n	8020cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8020cf6:	2303      	movs	r3, #3
 8020cf8:	e018      	b.n	8020d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	691b      	ldr	r3, [r3, #16]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	daf2      	bge.n	8020ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8020d02:	2300      	movs	r3, #0
 8020d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	2210      	movs	r2, #16
 8020d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	3301      	adds	r3, #1
 8020d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	4a08      	ldr	r2, [pc, #32]	; (8020d38 <USB_FlushRxFifo+0x5c>)
 8020d16:	4293      	cmp	r3, r2
 8020d18:	d901      	bls.n	8020d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8020d1a:	2303      	movs	r3, #3
 8020d1c:	e006      	b.n	8020d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	691b      	ldr	r3, [r3, #16]
 8020d22:	f003 0310 	and.w	r3, r3, #16
 8020d26:	2b10      	cmp	r3, #16
 8020d28:	d0f0      	beq.n	8020d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8020d2a:	2300      	movs	r3, #0
}
 8020d2c:	4618      	mov	r0, r3
 8020d2e:	3714      	adds	r7, #20
 8020d30:	46bd      	mov	sp, r7
 8020d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d36:	4770      	bx	lr
 8020d38:	00030d40 	.word	0x00030d40

08020d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8020d3c:	b480      	push	{r7}
 8020d3e:	b085      	sub	sp, #20
 8020d40:	af00      	add	r7, sp, #0
 8020d42:	6078      	str	r0, [r7, #4]
 8020d44:	460b      	mov	r3, r1
 8020d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020d52:	681a      	ldr	r2, [r3, #0]
 8020d54:	78fb      	ldrb	r3, [r7, #3]
 8020d56:	68f9      	ldr	r1, [r7, #12]
 8020d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8020d5c:	4313      	orrs	r3, r2
 8020d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8020d60:	2300      	movs	r3, #0
}
 8020d62:	4618      	mov	r0, r3
 8020d64:	3714      	adds	r7, #20
 8020d66:	46bd      	mov	sp, r7
 8020d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d6c:	4770      	bx	lr

08020d6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8020d6e:	b480      	push	{r7}
 8020d70:	b087      	sub	sp, #28
 8020d72:	af00      	add	r7, sp, #0
 8020d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8020d7a:	693b      	ldr	r3, [r7, #16]
 8020d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020d80:	689b      	ldr	r3, [r3, #8]
 8020d82:	f003 0306 	and.w	r3, r3, #6
 8020d86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8020d88:	68fb      	ldr	r3, [r7, #12]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d102      	bne.n	8020d94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8020d8e:	2300      	movs	r3, #0
 8020d90:	75fb      	strb	r3, [r7, #23]
 8020d92:	e00a      	b.n	8020daa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	2b02      	cmp	r3, #2
 8020d98:	d002      	beq.n	8020da0 <USB_GetDevSpeed+0x32>
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	2b06      	cmp	r3, #6
 8020d9e:	d102      	bne.n	8020da6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8020da0:	2302      	movs	r3, #2
 8020da2:	75fb      	strb	r3, [r7, #23]
 8020da4:	e001      	b.n	8020daa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8020da6:	230f      	movs	r3, #15
 8020da8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8020daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8020dac:	4618      	mov	r0, r3
 8020dae:	371c      	adds	r7, #28
 8020db0:	46bd      	mov	sp, r7
 8020db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db6:	4770      	bx	lr

08020db8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8020db8:	b480      	push	{r7}
 8020dba:	b085      	sub	sp, #20
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
 8020dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8020dc6:	683b      	ldr	r3, [r7, #0]
 8020dc8:	781b      	ldrb	r3, [r3, #0]
 8020dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8020dcc:	683b      	ldr	r3, [r7, #0]
 8020dce:	785b      	ldrb	r3, [r3, #1]
 8020dd0:	2b01      	cmp	r3, #1
 8020dd2:	d13a      	bne.n	8020e4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8020dd4:	68fb      	ldr	r3, [r7, #12]
 8020dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020dda:	69da      	ldr	r2, [r3, #28]
 8020ddc:	683b      	ldr	r3, [r7, #0]
 8020dde:	781b      	ldrb	r3, [r3, #0]
 8020de0:	f003 030f 	and.w	r3, r3, #15
 8020de4:	2101      	movs	r1, #1
 8020de6:	fa01 f303 	lsl.w	r3, r1, r3
 8020dea:	b29b      	uxth	r3, r3
 8020dec:	68f9      	ldr	r1, [r7, #12]
 8020dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8020df2:	4313      	orrs	r3, r2
 8020df4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8020df6:	68bb      	ldr	r3, [r7, #8]
 8020df8:	015a      	lsls	r2, r3, #5
 8020dfa:	68fb      	ldr	r3, [r7, #12]
 8020dfc:	4413      	add	r3, r2
 8020dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d155      	bne.n	8020eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8020e0c:	68bb      	ldr	r3, [r7, #8]
 8020e0e:	015a      	lsls	r2, r3, #5
 8020e10:	68fb      	ldr	r3, [r7, #12]
 8020e12:	4413      	add	r3, r2
 8020e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020e18:	681a      	ldr	r2, [r3, #0]
 8020e1a:	683b      	ldr	r3, [r7, #0]
 8020e1c:	68db      	ldr	r3, [r3, #12]
 8020e1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8020e22:	683b      	ldr	r3, [r7, #0]
 8020e24:	791b      	ldrb	r3, [r3, #4]
 8020e26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8020e28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8020e2a:	68bb      	ldr	r3, [r7, #8]
 8020e2c:	059b      	lsls	r3, r3, #22
 8020e2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8020e30:	4313      	orrs	r3, r2
 8020e32:	68ba      	ldr	r2, [r7, #8]
 8020e34:	0151      	lsls	r1, r2, #5
 8020e36:	68fa      	ldr	r2, [r7, #12]
 8020e38:	440a      	add	r2, r1
 8020e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8020e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020e46:	6013      	str	r3, [r2, #0]
 8020e48:	e036      	b.n	8020eb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8020e4a:	68fb      	ldr	r3, [r7, #12]
 8020e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020e50:	69da      	ldr	r2, [r3, #28]
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	781b      	ldrb	r3, [r3, #0]
 8020e56:	f003 030f 	and.w	r3, r3, #15
 8020e5a:	2101      	movs	r1, #1
 8020e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8020e60:	041b      	lsls	r3, r3, #16
 8020e62:	68f9      	ldr	r1, [r7, #12]
 8020e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8020e68:	4313      	orrs	r3, r2
 8020e6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8020e6c:	68bb      	ldr	r3, [r7, #8]
 8020e6e:	015a      	lsls	r2, r3, #5
 8020e70:	68fb      	ldr	r3, [r7, #12]
 8020e72:	4413      	add	r3, r2
 8020e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d11a      	bne.n	8020eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8020e82:	68bb      	ldr	r3, [r7, #8]
 8020e84:	015a      	lsls	r2, r3, #5
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	4413      	add	r3, r2
 8020e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020e8e:	681a      	ldr	r2, [r3, #0]
 8020e90:	683b      	ldr	r3, [r7, #0]
 8020e92:	68db      	ldr	r3, [r3, #12]
 8020e94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8020e98:	683b      	ldr	r3, [r7, #0]
 8020e9a:	791b      	ldrb	r3, [r3, #4]
 8020e9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8020e9e:	430b      	orrs	r3, r1
 8020ea0:	4313      	orrs	r3, r2
 8020ea2:	68ba      	ldr	r2, [r7, #8]
 8020ea4:	0151      	lsls	r1, r2, #5
 8020ea6:	68fa      	ldr	r2, [r7, #12]
 8020ea8:	440a      	add	r2, r1
 8020eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8020eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020eb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8020eb8:	2300      	movs	r3, #0
}
 8020eba:	4618      	mov	r0, r3
 8020ebc:	3714      	adds	r7, #20
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec4:	4770      	bx	lr
	...

08020ec8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8020ec8:	b480      	push	{r7}
 8020eca:	b085      	sub	sp, #20
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
 8020ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8020ed6:	683b      	ldr	r3, [r7, #0]
 8020ed8:	781b      	ldrb	r3, [r3, #0]
 8020eda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8020edc:	683b      	ldr	r3, [r7, #0]
 8020ede:	785b      	ldrb	r3, [r3, #1]
 8020ee0:	2b01      	cmp	r3, #1
 8020ee2:	d161      	bne.n	8020fa8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8020ee4:	68bb      	ldr	r3, [r7, #8]
 8020ee6:	015a      	lsls	r2, r3, #5
 8020ee8:	68fb      	ldr	r3, [r7, #12]
 8020eea:	4413      	add	r3, r2
 8020eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8020ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020efa:	d11f      	bne.n	8020f3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8020efc:	68bb      	ldr	r3, [r7, #8]
 8020efe:	015a      	lsls	r2, r3, #5
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	4413      	add	r3, r2
 8020f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020f08:	681b      	ldr	r3, [r3, #0]
 8020f0a:	68ba      	ldr	r2, [r7, #8]
 8020f0c:	0151      	lsls	r1, r2, #5
 8020f0e:	68fa      	ldr	r2, [r7, #12]
 8020f10:	440a      	add	r2, r1
 8020f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8020f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8020f1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8020f1c:	68bb      	ldr	r3, [r7, #8]
 8020f1e:	015a      	lsls	r2, r3, #5
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	4413      	add	r3, r2
 8020f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020f28:	681b      	ldr	r3, [r3, #0]
 8020f2a:	68ba      	ldr	r2, [r7, #8]
 8020f2c:	0151      	lsls	r1, r2, #5
 8020f2e:	68fa      	ldr	r2, [r7, #12]
 8020f30:	440a      	add	r2, r1
 8020f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8020f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8020f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8020f3c:	68fb      	ldr	r3, [r7, #12]
 8020f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020f44:	683b      	ldr	r3, [r7, #0]
 8020f46:	781b      	ldrb	r3, [r3, #0]
 8020f48:	f003 030f 	and.w	r3, r3, #15
 8020f4c:	2101      	movs	r1, #1
 8020f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8020f52:	b29b      	uxth	r3, r3
 8020f54:	43db      	mvns	r3, r3
 8020f56:	68f9      	ldr	r1, [r7, #12]
 8020f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8020f5c:	4013      	ands	r3, r2
 8020f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8020f66:	69da      	ldr	r2, [r3, #28]
 8020f68:	683b      	ldr	r3, [r7, #0]
 8020f6a:	781b      	ldrb	r3, [r3, #0]
 8020f6c:	f003 030f 	and.w	r3, r3, #15
 8020f70:	2101      	movs	r1, #1
 8020f72:	fa01 f303 	lsl.w	r3, r1, r3
 8020f76:	b29b      	uxth	r3, r3
 8020f78:	43db      	mvns	r3, r3
 8020f7a:	68f9      	ldr	r1, [r7, #12]
 8020f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8020f80:	4013      	ands	r3, r2
 8020f82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8020f84:	68bb      	ldr	r3, [r7, #8]
 8020f86:	015a      	lsls	r2, r3, #5
 8020f88:	68fb      	ldr	r3, [r7, #12]
 8020f8a:	4413      	add	r3, r2
 8020f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020f90:	681a      	ldr	r2, [r3, #0]
 8020f92:	68bb      	ldr	r3, [r7, #8]
 8020f94:	0159      	lsls	r1, r3, #5
 8020f96:	68fb      	ldr	r3, [r7, #12]
 8020f98:	440b      	add	r3, r1
 8020f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8020f9e:	4619      	mov	r1, r3
 8020fa0:	4b35      	ldr	r3, [pc, #212]	; (8021078 <USB_DeactivateEndpoint+0x1b0>)
 8020fa2:	4013      	ands	r3, r2
 8020fa4:	600b      	str	r3, [r1, #0]
 8020fa6:	e060      	b.n	802106a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8020fa8:	68bb      	ldr	r3, [r7, #8]
 8020faa:	015a      	lsls	r2, r3, #5
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	4413      	add	r3, r2
 8020fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8020fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8020fbe:	d11f      	bne.n	8021000 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8020fc0:	68bb      	ldr	r3, [r7, #8]
 8020fc2:	015a      	lsls	r2, r3, #5
 8020fc4:	68fb      	ldr	r3, [r7, #12]
 8020fc6:	4413      	add	r3, r2
 8020fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	68ba      	ldr	r2, [r7, #8]
 8020fd0:	0151      	lsls	r1, r2, #5
 8020fd2:	68fa      	ldr	r2, [r7, #12]
 8020fd4:	440a      	add	r2, r1
 8020fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8020fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8020fde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8020fe0:	68bb      	ldr	r3, [r7, #8]
 8020fe2:	015a      	lsls	r2, r3, #5
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	4413      	add	r3, r2
 8020fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8020fec:	681b      	ldr	r3, [r3, #0]
 8020fee:	68ba      	ldr	r2, [r7, #8]
 8020ff0:	0151      	lsls	r1, r2, #5
 8020ff2:	68fa      	ldr	r2, [r7, #12]
 8020ff4:	440a      	add	r2, r1
 8020ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8020ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8020ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8021000:	68fb      	ldr	r3, [r7, #12]
 8021002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021008:	683b      	ldr	r3, [r7, #0]
 802100a:	781b      	ldrb	r3, [r3, #0]
 802100c:	f003 030f 	and.w	r3, r3, #15
 8021010:	2101      	movs	r1, #1
 8021012:	fa01 f303 	lsl.w	r3, r1, r3
 8021016:	041b      	lsls	r3, r3, #16
 8021018:	43db      	mvns	r3, r3
 802101a:	68f9      	ldr	r1, [r7, #12]
 802101c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8021020:	4013      	ands	r3, r2
 8021022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802102a:	69da      	ldr	r2, [r3, #28]
 802102c:	683b      	ldr	r3, [r7, #0]
 802102e:	781b      	ldrb	r3, [r3, #0]
 8021030:	f003 030f 	and.w	r3, r3, #15
 8021034:	2101      	movs	r1, #1
 8021036:	fa01 f303 	lsl.w	r3, r1, r3
 802103a:	041b      	lsls	r3, r3, #16
 802103c:	43db      	mvns	r3, r3
 802103e:	68f9      	ldr	r1, [r7, #12]
 8021040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8021044:	4013      	ands	r3, r2
 8021046:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8021048:	68bb      	ldr	r3, [r7, #8]
 802104a:	015a      	lsls	r2, r3, #5
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	4413      	add	r3, r2
 8021050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021054:	681a      	ldr	r2, [r3, #0]
 8021056:	68bb      	ldr	r3, [r7, #8]
 8021058:	0159      	lsls	r1, r3, #5
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	440b      	add	r3, r1
 802105e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021062:	4619      	mov	r1, r3
 8021064:	4b05      	ldr	r3, [pc, #20]	; (802107c <USB_DeactivateEndpoint+0x1b4>)
 8021066:	4013      	ands	r3, r2
 8021068:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802106a:	2300      	movs	r3, #0
}
 802106c:	4618      	mov	r0, r3
 802106e:	3714      	adds	r7, #20
 8021070:	46bd      	mov	sp, r7
 8021072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021076:	4770      	bx	lr
 8021078:	ec337800 	.word	0xec337800
 802107c:	eff37800 	.word	0xeff37800

08021080 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8021080:	b580      	push	{r7, lr}
 8021082:	b08a      	sub	sp, #40	; 0x28
 8021084:	af02      	add	r7, sp, #8
 8021086:	60f8      	str	r0, [r7, #12]
 8021088:	60b9      	str	r1, [r7, #8]
 802108a:	4613      	mov	r3, r2
 802108c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802108e:	68fb      	ldr	r3, [r7, #12]
 8021090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	781b      	ldrb	r3, [r3, #0]
 8021096:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8021098:	68bb      	ldr	r3, [r7, #8]
 802109a:	785b      	ldrb	r3, [r3, #1]
 802109c:	2b01      	cmp	r3, #1
 802109e:	f040 815c 	bne.w	802135a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80210a2:	68bb      	ldr	r3, [r7, #8]
 80210a4:	699b      	ldr	r3, [r3, #24]
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d132      	bne.n	8021110 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80210aa:	69bb      	ldr	r3, [r7, #24]
 80210ac:	015a      	lsls	r2, r3, #5
 80210ae:	69fb      	ldr	r3, [r7, #28]
 80210b0:	4413      	add	r3, r2
 80210b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80210b6:	691b      	ldr	r3, [r3, #16]
 80210b8:	69ba      	ldr	r2, [r7, #24]
 80210ba:	0151      	lsls	r1, r2, #5
 80210bc:	69fa      	ldr	r2, [r7, #28]
 80210be:	440a      	add	r2, r1
 80210c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80210c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80210c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80210cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80210ce:	69bb      	ldr	r3, [r7, #24]
 80210d0:	015a      	lsls	r2, r3, #5
 80210d2:	69fb      	ldr	r3, [r7, #28]
 80210d4:	4413      	add	r3, r2
 80210d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80210da:	691b      	ldr	r3, [r3, #16]
 80210dc:	69ba      	ldr	r2, [r7, #24]
 80210de:	0151      	lsls	r1, r2, #5
 80210e0:	69fa      	ldr	r2, [r7, #28]
 80210e2:	440a      	add	r2, r1
 80210e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80210e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80210ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80210ee:	69bb      	ldr	r3, [r7, #24]
 80210f0:	015a      	lsls	r2, r3, #5
 80210f2:	69fb      	ldr	r3, [r7, #28]
 80210f4:	4413      	add	r3, r2
 80210f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80210fa:	691b      	ldr	r3, [r3, #16]
 80210fc:	69ba      	ldr	r2, [r7, #24]
 80210fe:	0151      	lsls	r1, r2, #5
 8021100:	69fa      	ldr	r2, [r7, #28]
 8021102:	440a      	add	r2, r1
 8021104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021108:	0cdb      	lsrs	r3, r3, #19
 802110a:	04db      	lsls	r3, r3, #19
 802110c:	6113      	str	r3, [r2, #16]
 802110e:	e074      	b.n	80211fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8021110:	69bb      	ldr	r3, [r7, #24]
 8021112:	015a      	lsls	r2, r3, #5
 8021114:	69fb      	ldr	r3, [r7, #28]
 8021116:	4413      	add	r3, r2
 8021118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802111c:	691b      	ldr	r3, [r3, #16]
 802111e:	69ba      	ldr	r2, [r7, #24]
 8021120:	0151      	lsls	r1, r2, #5
 8021122:	69fa      	ldr	r2, [r7, #28]
 8021124:	440a      	add	r2, r1
 8021126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802112a:	0cdb      	lsrs	r3, r3, #19
 802112c:	04db      	lsls	r3, r3, #19
 802112e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8021130:	69bb      	ldr	r3, [r7, #24]
 8021132:	015a      	lsls	r2, r3, #5
 8021134:	69fb      	ldr	r3, [r7, #28]
 8021136:	4413      	add	r3, r2
 8021138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802113c:	691b      	ldr	r3, [r3, #16]
 802113e:	69ba      	ldr	r2, [r7, #24]
 8021140:	0151      	lsls	r1, r2, #5
 8021142:	69fa      	ldr	r2, [r7, #28]
 8021144:	440a      	add	r2, r1
 8021146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802114a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802114e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8021152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8021154:	69bb      	ldr	r3, [r7, #24]
 8021156:	015a      	lsls	r2, r3, #5
 8021158:	69fb      	ldr	r3, [r7, #28]
 802115a:	4413      	add	r3, r2
 802115c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021160:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8021162:	68bb      	ldr	r3, [r7, #8]
 8021164:	6999      	ldr	r1, [r3, #24]
 8021166:	68bb      	ldr	r3, [r7, #8]
 8021168:	68db      	ldr	r3, [r3, #12]
 802116a:	440b      	add	r3, r1
 802116c:	1e59      	subs	r1, r3, #1
 802116e:	68bb      	ldr	r3, [r7, #8]
 8021170:	68db      	ldr	r3, [r3, #12]
 8021172:	fbb1 f3f3 	udiv	r3, r1, r3
 8021176:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8021178:	4b9d      	ldr	r3, [pc, #628]	; (80213f0 <USB_EPStartXfer+0x370>)
 802117a:	400b      	ands	r3, r1
 802117c:	69b9      	ldr	r1, [r7, #24]
 802117e:	0148      	lsls	r0, r1, #5
 8021180:	69f9      	ldr	r1, [r7, #28]
 8021182:	4401      	add	r1, r0
 8021184:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8021188:	4313      	orrs	r3, r2
 802118a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802118c:	69bb      	ldr	r3, [r7, #24]
 802118e:	015a      	lsls	r2, r3, #5
 8021190:	69fb      	ldr	r3, [r7, #28]
 8021192:	4413      	add	r3, r2
 8021194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021198:	691a      	ldr	r2, [r3, #16]
 802119a:	68bb      	ldr	r3, [r7, #8]
 802119c:	699b      	ldr	r3, [r3, #24]
 802119e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80211a2:	69b9      	ldr	r1, [r7, #24]
 80211a4:	0148      	lsls	r0, r1, #5
 80211a6:	69f9      	ldr	r1, [r7, #28]
 80211a8:	4401      	add	r1, r0
 80211aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80211ae:	4313      	orrs	r3, r2
 80211b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80211b2:	68bb      	ldr	r3, [r7, #8]
 80211b4:	791b      	ldrb	r3, [r3, #4]
 80211b6:	2b01      	cmp	r3, #1
 80211b8:	d11f      	bne.n	80211fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80211ba:	69bb      	ldr	r3, [r7, #24]
 80211bc:	015a      	lsls	r2, r3, #5
 80211be:	69fb      	ldr	r3, [r7, #28]
 80211c0:	4413      	add	r3, r2
 80211c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80211c6:	691b      	ldr	r3, [r3, #16]
 80211c8:	69ba      	ldr	r2, [r7, #24]
 80211ca:	0151      	lsls	r1, r2, #5
 80211cc:	69fa      	ldr	r2, [r7, #28]
 80211ce:	440a      	add	r2, r1
 80211d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80211d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80211d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80211da:	69bb      	ldr	r3, [r7, #24]
 80211dc:	015a      	lsls	r2, r3, #5
 80211de:	69fb      	ldr	r3, [r7, #28]
 80211e0:	4413      	add	r3, r2
 80211e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80211e6:	691b      	ldr	r3, [r3, #16]
 80211e8:	69ba      	ldr	r2, [r7, #24]
 80211ea:	0151      	lsls	r1, r2, #5
 80211ec:	69fa      	ldr	r2, [r7, #28]
 80211ee:	440a      	add	r2, r1
 80211f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80211f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80211f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80211fa:	79fb      	ldrb	r3, [r7, #7]
 80211fc:	2b01      	cmp	r3, #1
 80211fe:	d14b      	bne.n	8021298 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8021200:	68bb      	ldr	r3, [r7, #8]
 8021202:	695b      	ldr	r3, [r3, #20]
 8021204:	2b00      	cmp	r3, #0
 8021206:	d009      	beq.n	802121c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8021208:	69bb      	ldr	r3, [r7, #24]
 802120a:	015a      	lsls	r2, r3, #5
 802120c:	69fb      	ldr	r3, [r7, #28]
 802120e:	4413      	add	r3, r2
 8021210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021214:	461a      	mov	r2, r3
 8021216:	68bb      	ldr	r3, [r7, #8]
 8021218:	695b      	ldr	r3, [r3, #20]
 802121a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802121c:	68bb      	ldr	r3, [r7, #8]
 802121e:	791b      	ldrb	r3, [r3, #4]
 8021220:	2b01      	cmp	r3, #1
 8021222:	d128      	bne.n	8021276 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8021224:	69fb      	ldr	r3, [r7, #28]
 8021226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802122a:	689b      	ldr	r3, [r3, #8]
 802122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021230:	2b00      	cmp	r3, #0
 8021232:	d110      	bne.n	8021256 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8021234:	69bb      	ldr	r3, [r7, #24]
 8021236:	015a      	lsls	r2, r3, #5
 8021238:	69fb      	ldr	r3, [r7, #28]
 802123a:	4413      	add	r3, r2
 802123c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	69ba      	ldr	r2, [r7, #24]
 8021244:	0151      	lsls	r1, r2, #5
 8021246:	69fa      	ldr	r2, [r7, #28]
 8021248:	440a      	add	r2, r1
 802124a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802124e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021252:	6013      	str	r3, [r2, #0]
 8021254:	e00f      	b.n	8021276 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8021256:	69bb      	ldr	r3, [r7, #24]
 8021258:	015a      	lsls	r2, r3, #5
 802125a:	69fb      	ldr	r3, [r7, #28]
 802125c:	4413      	add	r3, r2
 802125e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	69ba      	ldr	r2, [r7, #24]
 8021266:	0151      	lsls	r1, r2, #5
 8021268:	69fa      	ldr	r2, [r7, #28]
 802126a:	440a      	add	r2, r1
 802126c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021274:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8021276:	69bb      	ldr	r3, [r7, #24]
 8021278:	015a      	lsls	r2, r3, #5
 802127a:	69fb      	ldr	r3, [r7, #28]
 802127c:	4413      	add	r3, r2
 802127e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	69ba      	ldr	r2, [r7, #24]
 8021286:	0151      	lsls	r1, r2, #5
 8021288:	69fa      	ldr	r2, [r7, #28]
 802128a:	440a      	add	r2, r1
 802128c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8021294:	6013      	str	r3, [r2, #0]
 8021296:	e133      	b.n	8021500 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8021298:	69bb      	ldr	r3, [r7, #24]
 802129a:	015a      	lsls	r2, r3, #5
 802129c:	69fb      	ldr	r3, [r7, #28]
 802129e:	4413      	add	r3, r2
 80212a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80212a4:	681b      	ldr	r3, [r3, #0]
 80212a6:	69ba      	ldr	r2, [r7, #24]
 80212a8:	0151      	lsls	r1, r2, #5
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	440a      	add	r2, r1
 80212ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80212b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80212b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80212b8:	68bb      	ldr	r3, [r7, #8]
 80212ba:	791b      	ldrb	r3, [r3, #4]
 80212bc:	2b01      	cmp	r3, #1
 80212be:	d015      	beq.n	80212ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80212c0:	68bb      	ldr	r3, [r7, #8]
 80212c2:	699b      	ldr	r3, [r3, #24]
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	f000 811b 	beq.w	8021500 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80212ca:	69fb      	ldr	r3, [r7, #28]
 80212cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80212d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80212d2:	68bb      	ldr	r3, [r7, #8]
 80212d4:	781b      	ldrb	r3, [r3, #0]
 80212d6:	f003 030f 	and.w	r3, r3, #15
 80212da:	2101      	movs	r1, #1
 80212dc:	fa01 f303 	lsl.w	r3, r1, r3
 80212e0:	69f9      	ldr	r1, [r7, #28]
 80212e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80212e6:	4313      	orrs	r3, r2
 80212e8:	634b      	str	r3, [r1, #52]	; 0x34
 80212ea:	e109      	b.n	8021500 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80212ec:	69fb      	ldr	r3, [r7, #28]
 80212ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80212f2:	689b      	ldr	r3, [r3, #8]
 80212f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d110      	bne.n	802131e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80212fc:	69bb      	ldr	r3, [r7, #24]
 80212fe:	015a      	lsls	r2, r3, #5
 8021300:	69fb      	ldr	r3, [r7, #28]
 8021302:	4413      	add	r3, r2
 8021304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021308:	681b      	ldr	r3, [r3, #0]
 802130a:	69ba      	ldr	r2, [r7, #24]
 802130c:	0151      	lsls	r1, r2, #5
 802130e:	69fa      	ldr	r2, [r7, #28]
 8021310:	440a      	add	r2, r1
 8021312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802131a:	6013      	str	r3, [r2, #0]
 802131c:	e00f      	b.n	802133e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802131e:	69bb      	ldr	r3, [r7, #24]
 8021320:	015a      	lsls	r2, r3, #5
 8021322:	69fb      	ldr	r3, [r7, #28]
 8021324:	4413      	add	r3, r2
 8021326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	69ba      	ldr	r2, [r7, #24]
 802132e:	0151      	lsls	r1, r2, #5
 8021330:	69fa      	ldr	r2, [r7, #28]
 8021332:	440a      	add	r2, r1
 8021334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802133c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802133e:	68bb      	ldr	r3, [r7, #8]
 8021340:	6919      	ldr	r1, [r3, #16]
 8021342:	68bb      	ldr	r3, [r7, #8]
 8021344:	781a      	ldrb	r2, [r3, #0]
 8021346:	68bb      	ldr	r3, [r7, #8]
 8021348:	699b      	ldr	r3, [r3, #24]
 802134a:	b298      	uxth	r0, r3
 802134c:	79fb      	ldrb	r3, [r7, #7]
 802134e:	9300      	str	r3, [sp, #0]
 8021350:	4603      	mov	r3, r0
 8021352:	68f8      	ldr	r0, [r7, #12]
 8021354:	f000 fade 	bl	8021914 <USB_WritePacket>
 8021358:	e0d2      	b.n	8021500 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802135a:	69bb      	ldr	r3, [r7, #24]
 802135c:	015a      	lsls	r2, r3, #5
 802135e:	69fb      	ldr	r3, [r7, #28]
 8021360:	4413      	add	r3, r2
 8021362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021366:	691b      	ldr	r3, [r3, #16]
 8021368:	69ba      	ldr	r2, [r7, #24]
 802136a:	0151      	lsls	r1, r2, #5
 802136c:	69fa      	ldr	r2, [r7, #28]
 802136e:	440a      	add	r2, r1
 8021370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021374:	0cdb      	lsrs	r3, r3, #19
 8021376:	04db      	lsls	r3, r3, #19
 8021378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802137a:	69bb      	ldr	r3, [r7, #24]
 802137c:	015a      	lsls	r2, r3, #5
 802137e:	69fb      	ldr	r3, [r7, #28]
 8021380:	4413      	add	r3, r2
 8021382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021386:	691b      	ldr	r3, [r3, #16]
 8021388:	69ba      	ldr	r2, [r7, #24]
 802138a:	0151      	lsls	r1, r2, #5
 802138c:	69fa      	ldr	r2, [r7, #28]
 802138e:	440a      	add	r2, r1
 8021390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8021398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802139c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802139e:	68bb      	ldr	r3, [r7, #8]
 80213a0:	699b      	ldr	r3, [r3, #24]
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d126      	bne.n	80213f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80213a6:	69bb      	ldr	r3, [r7, #24]
 80213a8:	015a      	lsls	r2, r3, #5
 80213aa:	69fb      	ldr	r3, [r7, #28]
 80213ac:	4413      	add	r3, r2
 80213ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80213b2:	691a      	ldr	r2, [r3, #16]
 80213b4:	68bb      	ldr	r3, [r7, #8]
 80213b6:	68db      	ldr	r3, [r3, #12]
 80213b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80213bc:	69b9      	ldr	r1, [r7, #24]
 80213be:	0148      	lsls	r0, r1, #5
 80213c0:	69f9      	ldr	r1, [r7, #28]
 80213c2:	4401      	add	r1, r0
 80213c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80213c8:	4313      	orrs	r3, r2
 80213ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80213cc:	69bb      	ldr	r3, [r7, #24]
 80213ce:	015a      	lsls	r2, r3, #5
 80213d0:	69fb      	ldr	r3, [r7, #28]
 80213d2:	4413      	add	r3, r2
 80213d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80213d8:	691b      	ldr	r3, [r3, #16]
 80213da:	69ba      	ldr	r2, [r7, #24]
 80213dc:	0151      	lsls	r1, r2, #5
 80213de:	69fa      	ldr	r2, [r7, #28]
 80213e0:	440a      	add	r2, r1
 80213e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80213e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80213ea:	6113      	str	r3, [r2, #16]
 80213ec:	e03a      	b.n	8021464 <USB_EPStartXfer+0x3e4>
 80213ee:	bf00      	nop
 80213f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80213f4:	68bb      	ldr	r3, [r7, #8]
 80213f6:	699a      	ldr	r2, [r3, #24]
 80213f8:	68bb      	ldr	r3, [r7, #8]
 80213fa:	68db      	ldr	r3, [r3, #12]
 80213fc:	4413      	add	r3, r2
 80213fe:	1e5a      	subs	r2, r3, #1
 8021400:	68bb      	ldr	r3, [r7, #8]
 8021402:	68db      	ldr	r3, [r3, #12]
 8021404:	fbb2 f3f3 	udiv	r3, r2, r3
 8021408:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802140a:	68bb      	ldr	r3, [r7, #8]
 802140c:	68db      	ldr	r3, [r3, #12]
 802140e:	8afa      	ldrh	r2, [r7, #22]
 8021410:	fb03 f202 	mul.w	r2, r3, r2
 8021414:	68bb      	ldr	r3, [r7, #8]
 8021416:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8021418:	69bb      	ldr	r3, [r7, #24]
 802141a:	015a      	lsls	r2, r3, #5
 802141c:	69fb      	ldr	r3, [r7, #28]
 802141e:	4413      	add	r3, r2
 8021420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021424:	691a      	ldr	r2, [r3, #16]
 8021426:	8afb      	ldrh	r3, [r7, #22]
 8021428:	04d9      	lsls	r1, r3, #19
 802142a:	4b38      	ldr	r3, [pc, #224]	; (802150c <USB_EPStartXfer+0x48c>)
 802142c:	400b      	ands	r3, r1
 802142e:	69b9      	ldr	r1, [r7, #24]
 8021430:	0148      	lsls	r0, r1, #5
 8021432:	69f9      	ldr	r1, [r7, #28]
 8021434:	4401      	add	r1, r0
 8021436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802143a:	4313      	orrs	r3, r2
 802143c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802143e:	69bb      	ldr	r3, [r7, #24]
 8021440:	015a      	lsls	r2, r3, #5
 8021442:	69fb      	ldr	r3, [r7, #28]
 8021444:	4413      	add	r3, r2
 8021446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802144a:	691a      	ldr	r2, [r3, #16]
 802144c:	68bb      	ldr	r3, [r7, #8]
 802144e:	69db      	ldr	r3, [r3, #28]
 8021450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8021454:	69b9      	ldr	r1, [r7, #24]
 8021456:	0148      	lsls	r0, r1, #5
 8021458:	69f9      	ldr	r1, [r7, #28]
 802145a:	4401      	add	r1, r0
 802145c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8021460:	4313      	orrs	r3, r2
 8021462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8021464:	79fb      	ldrb	r3, [r7, #7]
 8021466:	2b01      	cmp	r3, #1
 8021468:	d10d      	bne.n	8021486 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802146a:	68bb      	ldr	r3, [r7, #8]
 802146c:	691b      	ldr	r3, [r3, #16]
 802146e:	2b00      	cmp	r3, #0
 8021470:	d009      	beq.n	8021486 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8021472:	68bb      	ldr	r3, [r7, #8]
 8021474:	6919      	ldr	r1, [r3, #16]
 8021476:	69bb      	ldr	r3, [r7, #24]
 8021478:	015a      	lsls	r2, r3, #5
 802147a:	69fb      	ldr	r3, [r7, #28]
 802147c:	4413      	add	r3, r2
 802147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021482:	460a      	mov	r2, r1
 8021484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8021486:	68bb      	ldr	r3, [r7, #8]
 8021488:	791b      	ldrb	r3, [r3, #4]
 802148a:	2b01      	cmp	r3, #1
 802148c:	d128      	bne.n	80214e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802148e:	69fb      	ldr	r3, [r7, #28]
 8021490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021494:	689b      	ldr	r3, [r3, #8]
 8021496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802149a:	2b00      	cmp	r3, #0
 802149c:	d110      	bne.n	80214c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802149e:	69bb      	ldr	r3, [r7, #24]
 80214a0:	015a      	lsls	r2, r3, #5
 80214a2:	69fb      	ldr	r3, [r7, #28]
 80214a4:	4413      	add	r3, r2
 80214a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	69ba      	ldr	r2, [r7, #24]
 80214ae:	0151      	lsls	r1, r2, #5
 80214b0:	69fa      	ldr	r2, [r7, #28]
 80214b2:	440a      	add	r2, r1
 80214b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80214b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80214bc:	6013      	str	r3, [r2, #0]
 80214be:	e00f      	b.n	80214e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80214c0:	69bb      	ldr	r3, [r7, #24]
 80214c2:	015a      	lsls	r2, r3, #5
 80214c4:	69fb      	ldr	r3, [r7, #28]
 80214c6:	4413      	add	r3, r2
 80214c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	69ba      	ldr	r2, [r7, #24]
 80214d0:	0151      	lsls	r1, r2, #5
 80214d2:	69fa      	ldr	r2, [r7, #28]
 80214d4:	440a      	add	r2, r1
 80214d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80214da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80214de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80214e0:	69bb      	ldr	r3, [r7, #24]
 80214e2:	015a      	lsls	r2, r3, #5
 80214e4:	69fb      	ldr	r3, [r7, #28]
 80214e6:	4413      	add	r3, r2
 80214e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	69ba      	ldr	r2, [r7, #24]
 80214f0:	0151      	lsls	r1, r2, #5
 80214f2:	69fa      	ldr	r2, [r7, #28]
 80214f4:	440a      	add	r2, r1
 80214f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80214fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80214fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8021500:	2300      	movs	r3, #0
}
 8021502:	4618      	mov	r0, r3
 8021504:	3720      	adds	r7, #32
 8021506:	46bd      	mov	sp, r7
 8021508:	bd80      	pop	{r7, pc}
 802150a:	bf00      	nop
 802150c:	1ff80000 	.word	0x1ff80000

08021510 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8021510:	b480      	push	{r7}
 8021512:	b087      	sub	sp, #28
 8021514:	af00      	add	r7, sp, #0
 8021516:	60f8      	str	r0, [r7, #12]
 8021518:	60b9      	str	r1, [r7, #8]
 802151a:	4613      	mov	r3, r2
 802151c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8021522:	68bb      	ldr	r3, [r7, #8]
 8021524:	781b      	ldrb	r3, [r3, #0]
 8021526:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8021528:	68bb      	ldr	r3, [r7, #8]
 802152a:	785b      	ldrb	r3, [r3, #1]
 802152c:	2b01      	cmp	r3, #1
 802152e:	f040 80ce 	bne.w	80216ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8021532:	68bb      	ldr	r3, [r7, #8]
 8021534:	699b      	ldr	r3, [r3, #24]
 8021536:	2b00      	cmp	r3, #0
 8021538:	d132      	bne.n	80215a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802153a:	693b      	ldr	r3, [r7, #16]
 802153c:	015a      	lsls	r2, r3, #5
 802153e:	697b      	ldr	r3, [r7, #20]
 8021540:	4413      	add	r3, r2
 8021542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021546:	691b      	ldr	r3, [r3, #16]
 8021548:	693a      	ldr	r2, [r7, #16]
 802154a:	0151      	lsls	r1, r2, #5
 802154c:	697a      	ldr	r2, [r7, #20]
 802154e:	440a      	add	r2, r1
 8021550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8021558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802155c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802155e:	693b      	ldr	r3, [r7, #16]
 8021560:	015a      	lsls	r2, r3, #5
 8021562:	697b      	ldr	r3, [r7, #20]
 8021564:	4413      	add	r3, r2
 8021566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802156a:	691b      	ldr	r3, [r3, #16]
 802156c:	693a      	ldr	r2, [r7, #16]
 802156e:	0151      	lsls	r1, r2, #5
 8021570:	697a      	ldr	r2, [r7, #20]
 8021572:	440a      	add	r2, r1
 8021574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802157c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802157e:	693b      	ldr	r3, [r7, #16]
 8021580:	015a      	lsls	r2, r3, #5
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	4413      	add	r3, r2
 8021586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802158a:	691b      	ldr	r3, [r3, #16]
 802158c:	693a      	ldr	r2, [r7, #16]
 802158e:	0151      	lsls	r1, r2, #5
 8021590:	697a      	ldr	r2, [r7, #20]
 8021592:	440a      	add	r2, r1
 8021594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021598:	0cdb      	lsrs	r3, r3, #19
 802159a:	04db      	lsls	r3, r3, #19
 802159c:	6113      	str	r3, [r2, #16]
 802159e:	e04e      	b.n	802163e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80215a0:	693b      	ldr	r3, [r7, #16]
 80215a2:	015a      	lsls	r2, r3, #5
 80215a4:	697b      	ldr	r3, [r7, #20]
 80215a6:	4413      	add	r3, r2
 80215a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80215ac:	691b      	ldr	r3, [r3, #16]
 80215ae:	693a      	ldr	r2, [r7, #16]
 80215b0:	0151      	lsls	r1, r2, #5
 80215b2:	697a      	ldr	r2, [r7, #20]
 80215b4:	440a      	add	r2, r1
 80215b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80215ba:	0cdb      	lsrs	r3, r3, #19
 80215bc:	04db      	lsls	r3, r3, #19
 80215be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80215c0:	693b      	ldr	r3, [r7, #16]
 80215c2:	015a      	lsls	r2, r3, #5
 80215c4:	697b      	ldr	r3, [r7, #20]
 80215c6:	4413      	add	r3, r2
 80215c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80215cc:	691b      	ldr	r3, [r3, #16]
 80215ce:	693a      	ldr	r2, [r7, #16]
 80215d0:	0151      	lsls	r1, r2, #5
 80215d2:	697a      	ldr	r2, [r7, #20]
 80215d4:	440a      	add	r2, r1
 80215d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80215da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80215de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80215e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80215e4:	68bb      	ldr	r3, [r7, #8]
 80215e6:	699a      	ldr	r2, [r3, #24]
 80215e8:	68bb      	ldr	r3, [r7, #8]
 80215ea:	68db      	ldr	r3, [r3, #12]
 80215ec:	429a      	cmp	r2, r3
 80215ee:	d903      	bls.n	80215f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80215f0:	68bb      	ldr	r3, [r7, #8]
 80215f2:	68da      	ldr	r2, [r3, #12]
 80215f4:	68bb      	ldr	r3, [r7, #8]
 80215f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80215f8:	693b      	ldr	r3, [r7, #16]
 80215fa:	015a      	lsls	r2, r3, #5
 80215fc:	697b      	ldr	r3, [r7, #20]
 80215fe:	4413      	add	r3, r2
 8021600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021604:	691b      	ldr	r3, [r3, #16]
 8021606:	693a      	ldr	r2, [r7, #16]
 8021608:	0151      	lsls	r1, r2, #5
 802160a:	697a      	ldr	r2, [r7, #20]
 802160c:	440a      	add	r2, r1
 802160e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8021616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8021618:	693b      	ldr	r3, [r7, #16]
 802161a:	015a      	lsls	r2, r3, #5
 802161c:	697b      	ldr	r3, [r7, #20]
 802161e:	4413      	add	r3, r2
 8021620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021624:	691a      	ldr	r2, [r3, #16]
 8021626:	68bb      	ldr	r3, [r7, #8]
 8021628:	699b      	ldr	r3, [r3, #24]
 802162a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802162e:	6939      	ldr	r1, [r7, #16]
 8021630:	0148      	lsls	r0, r1, #5
 8021632:	6979      	ldr	r1, [r7, #20]
 8021634:	4401      	add	r1, r0
 8021636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802163a:	4313      	orrs	r3, r2
 802163c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802163e:	79fb      	ldrb	r3, [r7, #7]
 8021640:	2b01      	cmp	r3, #1
 8021642:	d11e      	bne.n	8021682 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8021644:	68bb      	ldr	r3, [r7, #8]
 8021646:	695b      	ldr	r3, [r3, #20]
 8021648:	2b00      	cmp	r3, #0
 802164a:	d009      	beq.n	8021660 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802164c:	693b      	ldr	r3, [r7, #16]
 802164e:	015a      	lsls	r2, r3, #5
 8021650:	697b      	ldr	r3, [r7, #20]
 8021652:	4413      	add	r3, r2
 8021654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021658:	461a      	mov	r2, r3
 802165a:	68bb      	ldr	r3, [r7, #8]
 802165c:	695b      	ldr	r3, [r3, #20]
 802165e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8021660:	693b      	ldr	r3, [r7, #16]
 8021662:	015a      	lsls	r2, r3, #5
 8021664:	697b      	ldr	r3, [r7, #20]
 8021666:	4413      	add	r3, r2
 8021668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	693a      	ldr	r2, [r7, #16]
 8021670:	0151      	lsls	r1, r2, #5
 8021672:	697a      	ldr	r2, [r7, #20]
 8021674:	440a      	add	r2, r1
 8021676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802167a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802167e:	6013      	str	r3, [r2, #0]
 8021680:	e097      	b.n	80217b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8021682:	693b      	ldr	r3, [r7, #16]
 8021684:	015a      	lsls	r2, r3, #5
 8021686:	697b      	ldr	r3, [r7, #20]
 8021688:	4413      	add	r3, r2
 802168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	693a      	ldr	r2, [r7, #16]
 8021692:	0151      	lsls	r1, r2, #5
 8021694:	697a      	ldr	r2, [r7, #20]
 8021696:	440a      	add	r2, r1
 8021698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802169c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80216a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80216a2:	68bb      	ldr	r3, [r7, #8]
 80216a4:	699b      	ldr	r3, [r3, #24]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	f000 8083 	beq.w	80217b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80216ac:	697b      	ldr	r3, [r7, #20]
 80216ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80216b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80216b4:	68bb      	ldr	r3, [r7, #8]
 80216b6:	781b      	ldrb	r3, [r3, #0]
 80216b8:	f003 030f 	and.w	r3, r3, #15
 80216bc:	2101      	movs	r1, #1
 80216be:	fa01 f303 	lsl.w	r3, r1, r3
 80216c2:	6979      	ldr	r1, [r7, #20]
 80216c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80216c8:	4313      	orrs	r3, r2
 80216ca:	634b      	str	r3, [r1, #52]	; 0x34
 80216cc:	e071      	b.n	80217b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80216ce:	693b      	ldr	r3, [r7, #16]
 80216d0:	015a      	lsls	r2, r3, #5
 80216d2:	697b      	ldr	r3, [r7, #20]
 80216d4:	4413      	add	r3, r2
 80216d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80216da:	691b      	ldr	r3, [r3, #16]
 80216dc:	693a      	ldr	r2, [r7, #16]
 80216de:	0151      	lsls	r1, r2, #5
 80216e0:	697a      	ldr	r2, [r7, #20]
 80216e2:	440a      	add	r2, r1
 80216e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80216e8:	0cdb      	lsrs	r3, r3, #19
 80216ea:	04db      	lsls	r3, r3, #19
 80216ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80216ee:	693b      	ldr	r3, [r7, #16]
 80216f0:	015a      	lsls	r2, r3, #5
 80216f2:	697b      	ldr	r3, [r7, #20]
 80216f4:	4413      	add	r3, r2
 80216f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80216fa:	691b      	ldr	r3, [r3, #16]
 80216fc:	693a      	ldr	r2, [r7, #16]
 80216fe:	0151      	lsls	r1, r2, #5
 8021700:	697a      	ldr	r2, [r7, #20]
 8021702:	440a      	add	r2, r1
 8021704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802170c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8021710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8021712:	68bb      	ldr	r3, [r7, #8]
 8021714:	699b      	ldr	r3, [r3, #24]
 8021716:	2b00      	cmp	r3, #0
 8021718:	d003      	beq.n	8021722 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802171a:	68bb      	ldr	r3, [r7, #8]
 802171c:	68da      	ldr	r2, [r3, #12]
 802171e:	68bb      	ldr	r3, [r7, #8]
 8021720:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8021722:	68bb      	ldr	r3, [r7, #8]
 8021724:	68da      	ldr	r2, [r3, #12]
 8021726:	68bb      	ldr	r3, [r7, #8]
 8021728:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802172a:	693b      	ldr	r3, [r7, #16]
 802172c:	015a      	lsls	r2, r3, #5
 802172e:	697b      	ldr	r3, [r7, #20]
 8021730:	4413      	add	r3, r2
 8021732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021736:	691b      	ldr	r3, [r3, #16]
 8021738:	693a      	ldr	r2, [r7, #16]
 802173a:	0151      	lsls	r1, r2, #5
 802173c:	697a      	ldr	r2, [r7, #20]
 802173e:	440a      	add	r2, r1
 8021740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8021748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802174a:	693b      	ldr	r3, [r7, #16]
 802174c:	015a      	lsls	r2, r3, #5
 802174e:	697b      	ldr	r3, [r7, #20]
 8021750:	4413      	add	r3, r2
 8021752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021756:	691a      	ldr	r2, [r3, #16]
 8021758:	68bb      	ldr	r3, [r7, #8]
 802175a:	69db      	ldr	r3, [r3, #28]
 802175c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8021760:	6939      	ldr	r1, [r7, #16]
 8021762:	0148      	lsls	r0, r1, #5
 8021764:	6979      	ldr	r1, [r7, #20]
 8021766:	4401      	add	r1, r0
 8021768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802176c:	4313      	orrs	r3, r2
 802176e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8021770:	79fb      	ldrb	r3, [r7, #7]
 8021772:	2b01      	cmp	r3, #1
 8021774:	d10d      	bne.n	8021792 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8021776:	68bb      	ldr	r3, [r7, #8]
 8021778:	691b      	ldr	r3, [r3, #16]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d009      	beq.n	8021792 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	6919      	ldr	r1, [r3, #16]
 8021782:	693b      	ldr	r3, [r7, #16]
 8021784:	015a      	lsls	r2, r3, #5
 8021786:	697b      	ldr	r3, [r7, #20]
 8021788:	4413      	add	r3, r2
 802178a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802178e:	460a      	mov	r2, r1
 8021790:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8021792:	693b      	ldr	r3, [r7, #16]
 8021794:	015a      	lsls	r2, r3, #5
 8021796:	697b      	ldr	r3, [r7, #20]
 8021798:	4413      	add	r3, r2
 802179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802179e:	681b      	ldr	r3, [r3, #0]
 80217a0:	693a      	ldr	r2, [r7, #16]
 80217a2:	0151      	lsls	r1, r2, #5
 80217a4:	697a      	ldr	r2, [r7, #20]
 80217a6:	440a      	add	r2, r1
 80217a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80217ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80217b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80217b2:	2300      	movs	r3, #0
}
 80217b4:	4618      	mov	r0, r3
 80217b6:	371c      	adds	r7, #28
 80217b8:	46bd      	mov	sp, r7
 80217ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217be:	4770      	bx	lr

080217c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80217c0:	b480      	push	{r7}
 80217c2:	b087      	sub	sp, #28
 80217c4:	af00      	add	r7, sp, #0
 80217c6:	6078      	str	r0, [r7, #4]
 80217c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80217ca:	2300      	movs	r3, #0
 80217cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80217ce:	2300      	movs	r3, #0
 80217d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	785b      	ldrb	r3, [r3, #1]
 80217da:	2b01      	cmp	r3, #1
 80217dc:	d14a      	bne.n	8021874 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80217de:	683b      	ldr	r3, [r7, #0]
 80217e0:	781b      	ldrb	r3, [r3, #0]
 80217e2:	015a      	lsls	r2, r3, #5
 80217e4:	693b      	ldr	r3, [r7, #16]
 80217e6:	4413      	add	r3, r2
 80217e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80217f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80217f6:	f040 8086 	bne.w	8021906 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80217fa:	683b      	ldr	r3, [r7, #0]
 80217fc:	781b      	ldrb	r3, [r3, #0]
 80217fe:	015a      	lsls	r2, r3, #5
 8021800:	693b      	ldr	r3, [r7, #16]
 8021802:	4413      	add	r3, r2
 8021804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021808:	681b      	ldr	r3, [r3, #0]
 802180a:	683a      	ldr	r2, [r7, #0]
 802180c:	7812      	ldrb	r2, [r2, #0]
 802180e:	0151      	lsls	r1, r2, #5
 8021810:	693a      	ldr	r2, [r7, #16]
 8021812:	440a      	add	r2, r1
 8021814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802181c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802181e:	683b      	ldr	r3, [r7, #0]
 8021820:	781b      	ldrb	r3, [r3, #0]
 8021822:	015a      	lsls	r2, r3, #5
 8021824:	693b      	ldr	r3, [r7, #16]
 8021826:	4413      	add	r3, r2
 8021828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	683a      	ldr	r2, [r7, #0]
 8021830:	7812      	ldrb	r2, [r2, #0]
 8021832:	0151      	lsls	r1, r2, #5
 8021834:	693a      	ldr	r2, [r7, #16]
 8021836:	440a      	add	r2, r1
 8021838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802183c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8021840:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	3301      	adds	r3, #1
 8021846:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8021848:	68fb      	ldr	r3, [r7, #12]
 802184a:	f242 7210 	movw	r2, #10000	; 0x2710
 802184e:	4293      	cmp	r3, r2
 8021850:	d902      	bls.n	8021858 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8021852:	2301      	movs	r3, #1
 8021854:	75fb      	strb	r3, [r7, #23]
          break;
 8021856:	e056      	b.n	8021906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8021858:	683b      	ldr	r3, [r7, #0]
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	015a      	lsls	r2, r3, #5
 802185e:	693b      	ldr	r3, [r7, #16]
 8021860:	4413      	add	r3, r2
 8021862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021866:	681b      	ldr	r3, [r3, #0]
 8021868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802186c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021870:	d0e7      	beq.n	8021842 <USB_EPStopXfer+0x82>
 8021872:	e048      	b.n	8021906 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8021874:	683b      	ldr	r3, [r7, #0]
 8021876:	781b      	ldrb	r3, [r3, #0]
 8021878:	015a      	lsls	r2, r3, #5
 802187a:	693b      	ldr	r3, [r7, #16]
 802187c:	4413      	add	r3, r2
 802187e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021882:	681b      	ldr	r3, [r3, #0]
 8021884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8021888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802188c:	d13b      	bne.n	8021906 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802188e:	683b      	ldr	r3, [r7, #0]
 8021890:	781b      	ldrb	r3, [r3, #0]
 8021892:	015a      	lsls	r2, r3, #5
 8021894:	693b      	ldr	r3, [r7, #16]
 8021896:	4413      	add	r3, r2
 8021898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	683a      	ldr	r2, [r7, #0]
 80218a0:	7812      	ldrb	r2, [r2, #0]
 80218a2:	0151      	lsls	r1, r2, #5
 80218a4:	693a      	ldr	r2, [r7, #16]
 80218a6:	440a      	add	r2, r1
 80218a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80218ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80218b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80218b2:	683b      	ldr	r3, [r7, #0]
 80218b4:	781b      	ldrb	r3, [r3, #0]
 80218b6:	015a      	lsls	r2, r3, #5
 80218b8:	693b      	ldr	r3, [r7, #16]
 80218ba:	4413      	add	r3, r2
 80218bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	683a      	ldr	r2, [r7, #0]
 80218c4:	7812      	ldrb	r2, [r2, #0]
 80218c6:	0151      	lsls	r1, r2, #5
 80218c8:	693a      	ldr	r2, [r7, #16]
 80218ca:	440a      	add	r2, r1
 80218cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80218d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80218d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80218d6:	68fb      	ldr	r3, [r7, #12]
 80218d8:	3301      	adds	r3, #1
 80218da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80218dc:	68fb      	ldr	r3, [r7, #12]
 80218de:	f242 7210 	movw	r2, #10000	; 0x2710
 80218e2:	4293      	cmp	r3, r2
 80218e4:	d902      	bls.n	80218ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80218e6:	2301      	movs	r3, #1
 80218e8:	75fb      	strb	r3, [r7, #23]
          break;
 80218ea:	e00c      	b.n	8021906 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80218ec:	683b      	ldr	r3, [r7, #0]
 80218ee:	781b      	ldrb	r3, [r3, #0]
 80218f0:	015a      	lsls	r2, r3, #5
 80218f2:	693b      	ldr	r3, [r7, #16]
 80218f4:	4413      	add	r3, r2
 80218f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8021900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021904:	d0e7      	beq.n	80218d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8021906:	7dfb      	ldrb	r3, [r7, #23]
}
 8021908:	4618      	mov	r0, r3
 802190a:	371c      	adds	r7, #28
 802190c:	46bd      	mov	sp, r7
 802190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021912:	4770      	bx	lr

08021914 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8021914:	b480      	push	{r7}
 8021916:	b089      	sub	sp, #36	; 0x24
 8021918:	af00      	add	r7, sp, #0
 802191a:	60f8      	str	r0, [r7, #12]
 802191c:	60b9      	str	r1, [r7, #8]
 802191e:	4611      	mov	r1, r2
 8021920:	461a      	mov	r2, r3
 8021922:	460b      	mov	r3, r1
 8021924:	71fb      	strb	r3, [r7, #7]
 8021926:	4613      	mov	r3, r2
 8021928:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802192a:	68fb      	ldr	r3, [r7, #12]
 802192c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802192e:	68bb      	ldr	r3, [r7, #8]
 8021930:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8021932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8021936:	2b00      	cmp	r3, #0
 8021938:	d123      	bne.n	8021982 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802193a:	88bb      	ldrh	r3, [r7, #4]
 802193c:	3303      	adds	r3, #3
 802193e:	089b      	lsrs	r3, r3, #2
 8021940:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8021942:	2300      	movs	r3, #0
 8021944:	61bb      	str	r3, [r7, #24]
 8021946:	e018      	b.n	802197a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8021948:	79fb      	ldrb	r3, [r7, #7]
 802194a:	031a      	lsls	r2, r3, #12
 802194c:	697b      	ldr	r3, [r7, #20]
 802194e:	4413      	add	r3, r2
 8021950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021954:	461a      	mov	r2, r3
 8021956:	69fb      	ldr	r3, [r7, #28]
 8021958:	681b      	ldr	r3, [r3, #0]
 802195a:	6013      	str	r3, [r2, #0]
      pSrc++;
 802195c:	69fb      	ldr	r3, [r7, #28]
 802195e:	3301      	adds	r3, #1
 8021960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8021962:	69fb      	ldr	r3, [r7, #28]
 8021964:	3301      	adds	r3, #1
 8021966:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8021968:	69fb      	ldr	r3, [r7, #28]
 802196a:	3301      	adds	r3, #1
 802196c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802196e:	69fb      	ldr	r3, [r7, #28]
 8021970:	3301      	adds	r3, #1
 8021972:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8021974:	69bb      	ldr	r3, [r7, #24]
 8021976:	3301      	adds	r3, #1
 8021978:	61bb      	str	r3, [r7, #24]
 802197a:	69ba      	ldr	r2, [r7, #24]
 802197c:	693b      	ldr	r3, [r7, #16]
 802197e:	429a      	cmp	r2, r3
 8021980:	d3e2      	bcc.n	8021948 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8021982:	2300      	movs	r3, #0
}
 8021984:	4618      	mov	r0, r3
 8021986:	3724      	adds	r7, #36	; 0x24
 8021988:	46bd      	mov	sp, r7
 802198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802198e:	4770      	bx	lr

08021990 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8021990:	b480      	push	{r7}
 8021992:	b08b      	sub	sp, #44	; 0x2c
 8021994:	af00      	add	r7, sp, #0
 8021996:	60f8      	str	r0, [r7, #12]
 8021998:	60b9      	str	r1, [r7, #8]
 802199a:	4613      	mov	r3, r2
 802199c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80219a2:	68bb      	ldr	r3, [r7, #8]
 80219a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80219a6:	88fb      	ldrh	r3, [r7, #6]
 80219a8:	089b      	lsrs	r3, r3, #2
 80219aa:	b29b      	uxth	r3, r3
 80219ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80219ae:	88fb      	ldrh	r3, [r7, #6]
 80219b0:	f003 0303 	and.w	r3, r3, #3
 80219b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80219b6:	2300      	movs	r3, #0
 80219b8:	623b      	str	r3, [r7, #32]
 80219ba:	e014      	b.n	80219e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80219bc:	69bb      	ldr	r3, [r7, #24]
 80219be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219c2:	681a      	ldr	r2, [r3, #0]
 80219c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80219c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219ca:	3301      	adds	r3, #1
 80219cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80219ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219d0:	3301      	adds	r3, #1
 80219d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80219d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219d6:	3301      	adds	r3, #1
 80219d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80219da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219dc:	3301      	adds	r3, #1
 80219de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80219e0:	6a3b      	ldr	r3, [r7, #32]
 80219e2:	3301      	adds	r3, #1
 80219e4:	623b      	str	r3, [r7, #32]
 80219e6:	6a3a      	ldr	r2, [r7, #32]
 80219e8:	697b      	ldr	r3, [r7, #20]
 80219ea:	429a      	cmp	r2, r3
 80219ec:	d3e6      	bcc.n	80219bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80219ee:	8bfb      	ldrh	r3, [r7, #30]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d01e      	beq.n	8021a32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80219f4:	2300      	movs	r3, #0
 80219f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80219f8:	69bb      	ldr	r3, [r7, #24]
 80219fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219fe:	461a      	mov	r2, r3
 8021a00:	f107 0310 	add.w	r3, r7, #16
 8021a04:	6812      	ldr	r2, [r2, #0]
 8021a06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8021a08:	693a      	ldr	r2, [r7, #16]
 8021a0a:	6a3b      	ldr	r3, [r7, #32]
 8021a0c:	b2db      	uxtb	r3, r3
 8021a0e:	00db      	lsls	r3, r3, #3
 8021a10:	fa22 f303 	lsr.w	r3, r2, r3
 8021a14:	b2da      	uxtb	r2, r3
 8021a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a18:	701a      	strb	r2, [r3, #0]
      i++;
 8021a1a:	6a3b      	ldr	r3, [r7, #32]
 8021a1c:	3301      	adds	r3, #1
 8021a1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8021a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a22:	3301      	adds	r3, #1
 8021a24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8021a26:	8bfb      	ldrh	r3, [r7, #30]
 8021a28:	3b01      	subs	r3, #1
 8021a2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8021a2c:	8bfb      	ldrh	r3, [r7, #30]
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d1ea      	bne.n	8021a08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8021a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021a34:	4618      	mov	r0, r3
 8021a36:	372c      	adds	r7, #44	; 0x2c
 8021a38:	46bd      	mov	sp, r7
 8021a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a3e:	4770      	bx	lr

08021a40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8021a40:	b480      	push	{r7}
 8021a42:	b085      	sub	sp, #20
 8021a44:	af00      	add	r7, sp, #0
 8021a46:	6078      	str	r0, [r7, #4]
 8021a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8021a4e:	683b      	ldr	r3, [r7, #0]
 8021a50:	781b      	ldrb	r3, [r3, #0]
 8021a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8021a54:	683b      	ldr	r3, [r7, #0]
 8021a56:	785b      	ldrb	r3, [r3, #1]
 8021a58:	2b01      	cmp	r3, #1
 8021a5a:	d12c      	bne.n	8021ab6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8021a5c:	68bb      	ldr	r3, [r7, #8]
 8021a5e:	015a      	lsls	r2, r3, #5
 8021a60:	68fb      	ldr	r3, [r7, #12]
 8021a62:	4413      	add	r3, r2
 8021a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	db12      	blt.n	8021a94 <USB_EPSetStall+0x54>
 8021a6e:	68bb      	ldr	r3, [r7, #8]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d00f      	beq.n	8021a94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8021a74:	68bb      	ldr	r3, [r7, #8]
 8021a76:	015a      	lsls	r2, r3, #5
 8021a78:	68fb      	ldr	r3, [r7, #12]
 8021a7a:	4413      	add	r3, r2
 8021a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	68ba      	ldr	r2, [r7, #8]
 8021a84:	0151      	lsls	r1, r2, #5
 8021a86:	68fa      	ldr	r2, [r7, #12]
 8021a88:	440a      	add	r2, r1
 8021a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8021a92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8021a94:	68bb      	ldr	r3, [r7, #8]
 8021a96:	015a      	lsls	r2, r3, #5
 8021a98:	68fb      	ldr	r3, [r7, #12]
 8021a9a:	4413      	add	r3, r2
 8021a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021aa0:	681b      	ldr	r3, [r3, #0]
 8021aa2:	68ba      	ldr	r2, [r7, #8]
 8021aa4:	0151      	lsls	r1, r2, #5
 8021aa6:	68fa      	ldr	r2, [r7, #12]
 8021aa8:	440a      	add	r2, r1
 8021aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021ab2:	6013      	str	r3, [r2, #0]
 8021ab4:	e02b      	b.n	8021b0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8021ab6:	68bb      	ldr	r3, [r7, #8]
 8021ab8:	015a      	lsls	r2, r3, #5
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	4413      	add	r3, r2
 8021abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	db12      	blt.n	8021aee <USB_EPSetStall+0xae>
 8021ac8:	68bb      	ldr	r3, [r7, #8]
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d00f      	beq.n	8021aee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8021ace:	68bb      	ldr	r3, [r7, #8]
 8021ad0:	015a      	lsls	r2, r3, #5
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	4413      	add	r3, r2
 8021ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	68ba      	ldr	r2, [r7, #8]
 8021ade:	0151      	lsls	r1, r2, #5
 8021ae0:	68fa      	ldr	r2, [r7, #12]
 8021ae2:	440a      	add	r2, r1
 8021ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8021aec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8021aee:	68bb      	ldr	r3, [r7, #8]
 8021af0:	015a      	lsls	r2, r3, #5
 8021af2:	68fb      	ldr	r3, [r7, #12]
 8021af4:	4413      	add	r3, r2
 8021af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	68ba      	ldr	r2, [r7, #8]
 8021afe:	0151      	lsls	r1, r2, #5
 8021b00:	68fa      	ldr	r2, [r7, #12]
 8021b02:	440a      	add	r2, r1
 8021b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8021b0e:	2300      	movs	r3, #0
}
 8021b10:	4618      	mov	r0, r3
 8021b12:	3714      	adds	r7, #20
 8021b14:	46bd      	mov	sp, r7
 8021b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b1a:	4770      	bx	lr

08021b1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8021b1c:	b480      	push	{r7}
 8021b1e:	b085      	sub	sp, #20
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
 8021b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8021b2a:	683b      	ldr	r3, [r7, #0]
 8021b2c:	781b      	ldrb	r3, [r3, #0]
 8021b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8021b30:	683b      	ldr	r3, [r7, #0]
 8021b32:	785b      	ldrb	r3, [r3, #1]
 8021b34:	2b01      	cmp	r3, #1
 8021b36:	d128      	bne.n	8021b8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8021b38:	68bb      	ldr	r3, [r7, #8]
 8021b3a:	015a      	lsls	r2, r3, #5
 8021b3c:	68fb      	ldr	r3, [r7, #12]
 8021b3e:	4413      	add	r3, r2
 8021b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	68ba      	ldr	r2, [r7, #8]
 8021b48:	0151      	lsls	r1, r2, #5
 8021b4a:	68fa      	ldr	r2, [r7, #12]
 8021b4c:	440a      	add	r2, r1
 8021b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8021b56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8021b58:	683b      	ldr	r3, [r7, #0]
 8021b5a:	791b      	ldrb	r3, [r3, #4]
 8021b5c:	2b03      	cmp	r3, #3
 8021b5e:	d003      	beq.n	8021b68 <USB_EPClearStall+0x4c>
 8021b60:	683b      	ldr	r3, [r7, #0]
 8021b62:	791b      	ldrb	r3, [r3, #4]
 8021b64:	2b02      	cmp	r3, #2
 8021b66:	d138      	bne.n	8021bda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8021b68:	68bb      	ldr	r3, [r7, #8]
 8021b6a:	015a      	lsls	r2, r3, #5
 8021b6c:	68fb      	ldr	r3, [r7, #12]
 8021b6e:	4413      	add	r3, r2
 8021b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	68ba      	ldr	r2, [r7, #8]
 8021b78:	0151      	lsls	r1, r2, #5
 8021b7a:	68fa      	ldr	r2, [r7, #12]
 8021b7c:	440a      	add	r2, r1
 8021b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021b86:	6013      	str	r3, [r2, #0]
 8021b88:	e027      	b.n	8021bda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8021b8a:	68bb      	ldr	r3, [r7, #8]
 8021b8c:	015a      	lsls	r2, r3, #5
 8021b8e:	68fb      	ldr	r3, [r7, #12]
 8021b90:	4413      	add	r3, r2
 8021b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	68ba      	ldr	r2, [r7, #8]
 8021b9a:	0151      	lsls	r1, r2, #5
 8021b9c:	68fa      	ldr	r2, [r7, #12]
 8021b9e:	440a      	add	r2, r1
 8021ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021ba4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8021ba8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8021baa:	683b      	ldr	r3, [r7, #0]
 8021bac:	791b      	ldrb	r3, [r3, #4]
 8021bae:	2b03      	cmp	r3, #3
 8021bb0:	d003      	beq.n	8021bba <USB_EPClearStall+0x9e>
 8021bb2:	683b      	ldr	r3, [r7, #0]
 8021bb4:	791b      	ldrb	r3, [r3, #4]
 8021bb6:	2b02      	cmp	r3, #2
 8021bb8:	d10f      	bne.n	8021bda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8021bba:	68bb      	ldr	r3, [r7, #8]
 8021bbc:	015a      	lsls	r2, r3, #5
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	4413      	add	r3, r2
 8021bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	68ba      	ldr	r2, [r7, #8]
 8021bca:	0151      	lsls	r1, r2, #5
 8021bcc:	68fa      	ldr	r2, [r7, #12]
 8021bce:	440a      	add	r2, r1
 8021bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021bd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8021bda:	2300      	movs	r3, #0
}
 8021bdc:	4618      	mov	r0, r3
 8021bde:	3714      	adds	r7, #20
 8021be0:	46bd      	mov	sp, r7
 8021be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021be6:	4770      	bx	lr

08021be8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8021be8:	b480      	push	{r7}
 8021bea:	b085      	sub	sp, #20
 8021bec:	af00      	add	r7, sp, #0
 8021bee:	6078      	str	r0, [r7, #4]
 8021bf0:	460b      	mov	r3, r1
 8021bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8021bf8:	68fb      	ldr	r3, [r7, #12]
 8021bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	68fa      	ldr	r2, [r7, #12]
 8021c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021c06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8021c0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021c12:	681a      	ldr	r2, [r3, #0]
 8021c14:	78fb      	ldrb	r3, [r7, #3]
 8021c16:	011b      	lsls	r3, r3, #4
 8021c18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8021c1c:	68f9      	ldr	r1, [r7, #12]
 8021c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8021c22:	4313      	orrs	r3, r2
 8021c24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8021c26:	2300      	movs	r3, #0
}
 8021c28:	4618      	mov	r0, r3
 8021c2a:	3714      	adds	r7, #20
 8021c2c:	46bd      	mov	sp, r7
 8021c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c32:	4770      	bx	lr

08021c34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8021c34:	b480      	push	{r7}
 8021c36:	b085      	sub	sp, #20
 8021c38:	af00      	add	r7, sp, #0
 8021c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8021c40:	68fb      	ldr	r3, [r7, #12]
 8021c42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	68fa      	ldr	r2, [r7, #12]
 8021c4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8021c4e:	f023 0303 	bic.w	r3, r3, #3
 8021c52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8021c54:	68fb      	ldr	r3, [r7, #12]
 8021c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021c5a:	685b      	ldr	r3, [r3, #4]
 8021c5c:	68fa      	ldr	r2, [r7, #12]
 8021c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021c62:	f023 0302 	bic.w	r3, r3, #2
 8021c66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8021c68:	2300      	movs	r3, #0
}
 8021c6a:	4618      	mov	r0, r3
 8021c6c:	3714      	adds	r7, #20
 8021c6e:	46bd      	mov	sp, r7
 8021c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c74:	4770      	bx	lr

08021c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8021c76:	b480      	push	{r7}
 8021c78:	b085      	sub	sp, #20
 8021c7a:	af00      	add	r7, sp, #0
 8021c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8021c82:	68fb      	ldr	r3, [r7, #12]
 8021c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	68fa      	ldr	r2, [r7, #12]
 8021c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8021c90:	f023 0303 	bic.w	r3, r3, #3
 8021c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8021c96:	68fb      	ldr	r3, [r7, #12]
 8021c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021c9c:	685b      	ldr	r3, [r3, #4]
 8021c9e:	68fa      	ldr	r2, [r7, #12]
 8021ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021ca4:	f043 0302 	orr.w	r3, r3, #2
 8021ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8021caa:	2300      	movs	r3, #0
}
 8021cac:	4618      	mov	r0, r3
 8021cae:	3714      	adds	r7, #20
 8021cb0:	46bd      	mov	sp, r7
 8021cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb6:	4770      	bx	lr

08021cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8021cb8:	b480      	push	{r7}
 8021cba:	b085      	sub	sp, #20
 8021cbc:	af00      	add	r7, sp, #0
 8021cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	695b      	ldr	r3, [r3, #20]
 8021cc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	699b      	ldr	r3, [r3, #24]
 8021cca:	68fa      	ldr	r2, [r7, #12]
 8021ccc:	4013      	ands	r3, r2
 8021cce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8021cd0:	68fb      	ldr	r3, [r7, #12]
}
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	3714      	adds	r7, #20
 8021cd6:	46bd      	mov	sp, r7
 8021cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cdc:	4770      	bx	lr

08021cde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8021cde:	b480      	push	{r7}
 8021ce0:	b085      	sub	sp, #20
 8021ce2:	af00      	add	r7, sp, #0
 8021ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8021cea:	68fb      	ldr	r3, [r7, #12]
 8021cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021cf0:	699b      	ldr	r3, [r3, #24]
 8021cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021cfa:	69db      	ldr	r3, [r3, #28]
 8021cfc:	68ba      	ldr	r2, [r7, #8]
 8021cfe:	4013      	ands	r3, r2
 8021d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8021d02:	68bb      	ldr	r3, [r7, #8]
 8021d04:	0c1b      	lsrs	r3, r3, #16
}
 8021d06:	4618      	mov	r0, r3
 8021d08:	3714      	adds	r7, #20
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d10:	4770      	bx	lr

08021d12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8021d12:	b480      	push	{r7}
 8021d14:	b085      	sub	sp, #20
 8021d16:	af00      	add	r7, sp, #0
 8021d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021d24:	699b      	ldr	r3, [r3, #24]
 8021d26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8021d28:	68fb      	ldr	r3, [r7, #12]
 8021d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021d2e:	69db      	ldr	r3, [r3, #28]
 8021d30:	68ba      	ldr	r2, [r7, #8]
 8021d32:	4013      	ands	r3, r2
 8021d34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8021d36:	68bb      	ldr	r3, [r7, #8]
 8021d38:	b29b      	uxth	r3, r3
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	3714      	adds	r7, #20
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d44:	4770      	bx	lr

08021d46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8021d46:	b480      	push	{r7}
 8021d48:	b085      	sub	sp, #20
 8021d4a:	af00      	add	r7, sp, #0
 8021d4c:	6078      	str	r0, [r7, #4]
 8021d4e:	460b      	mov	r3, r1
 8021d50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8021d56:	78fb      	ldrb	r3, [r7, #3]
 8021d58:	015a      	lsls	r2, r3, #5
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	4413      	add	r3, r2
 8021d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021d62:	689b      	ldr	r3, [r3, #8]
 8021d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8021d66:	68fb      	ldr	r3, [r7, #12]
 8021d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021d6c:	695b      	ldr	r3, [r3, #20]
 8021d6e:	68ba      	ldr	r2, [r7, #8]
 8021d70:	4013      	ands	r3, r2
 8021d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8021d74:	68bb      	ldr	r3, [r7, #8]
}
 8021d76:	4618      	mov	r0, r3
 8021d78:	3714      	adds	r7, #20
 8021d7a:	46bd      	mov	sp, r7
 8021d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d80:	4770      	bx	lr

08021d82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8021d82:	b480      	push	{r7}
 8021d84:	b087      	sub	sp, #28
 8021d86:	af00      	add	r7, sp, #0
 8021d88:	6078      	str	r0, [r7, #4]
 8021d8a:	460b      	mov	r3, r1
 8021d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8021d92:	697b      	ldr	r3, [r7, #20]
 8021d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021d98:	691b      	ldr	r3, [r3, #16]
 8021d9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8021d9c:	697b      	ldr	r3, [r7, #20]
 8021d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021da4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8021da6:	78fb      	ldrb	r3, [r7, #3]
 8021da8:	f003 030f 	and.w	r3, r3, #15
 8021dac:	68fa      	ldr	r2, [r7, #12]
 8021dae:	fa22 f303 	lsr.w	r3, r2, r3
 8021db2:	01db      	lsls	r3, r3, #7
 8021db4:	b2db      	uxtb	r3, r3
 8021db6:	693a      	ldr	r2, [r7, #16]
 8021db8:	4313      	orrs	r3, r2
 8021dba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8021dbc:	78fb      	ldrb	r3, [r7, #3]
 8021dbe:	015a      	lsls	r2, r3, #5
 8021dc0:	697b      	ldr	r3, [r7, #20]
 8021dc2:	4413      	add	r3, r2
 8021dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021dc8:	689b      	ldr	r3, [r3, #8]
 8021dca:	693a      	ldr	r2, [r7, #16]
 8021dcc:	4013      	ands	r3, r2
 8021dce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8021dd0:	68bb      	ldr	r3, [r7, #8]
}
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	371c      	adds	r7, #28
 8021dd6:	46bd      	mov	sp, r7
 8021dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ddc:	4770      	bx	lr

08021dde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8021dde:	b480      	push	{r7}
 8021de0:	b083      	sub	sp, #12
 8021de2:	af00      	add	r7, sp, #0
 8021de4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	695b      	ldr	r3, [r3, #20]
 8021dea:	f003 0301 	and.w	r3, r3, #1
}
 8021dee:	4618      	mov	r0, r3
 8021df0:	370c      	adds	r7, #12
 8021df2:	46bd      	mov	sp, r7
 8021df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021df8:	4770      	bx	lr

08021dfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8021dfa:	b480      	push	{r7}
 8021dfc:	b085      	sub	sp, #20
 8021dfe:	af00      	add	r7, sp, #0
 8021e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8021e06:	68fb      	ldr	r3, [r7, #12]
 8021e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	68fa      	ldr	r2, [r7, #12]
 8021e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8021e14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8021e18:	f023 0307 	bic.w	r3, r3, #7
 8021e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8021e24:	685b      	ldr	r3, [r3, #4]
 8021e26:	68fa      	ldr	r2, [r7, #12]
 8021e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8021e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8021e32:	2300      	movs	r3, #0
}
 8021e34:	4618      	mov	r0, r3
 8021e36:	3714      	adds	r7, #20
 8021e38:	46bd      	mov	sp, r7
 8021e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e3e:	4770      	bx	lr

08021e40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8021e40:	b480      	push	{r7}
 8021e42:	b087      	sub	sp, #28
 8021e44:	af00      	add	r7, sp, #0
 8021e46:	60f8      	str	r0, [r7, #12]
 8021e48:	460b      	mov	r3, r1
 8021e4a:	607a      	str	r2, [r7, #4]
 8021e4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8021e4e:	68fb      	ldr	r3, [r7, #12]
 8021e50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	333c      	adds	r3, #60	; 0x3c
 8021e56:	3304      	adds	r3, #4
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8021e5c:	693b      	ldr	r3, [r7, #16]
 8021e5e:	4a26      	ldr	r2, [pc, #152]	; (8021ef8 <USB_EP0_OutStart+0xb8>)
 8021e60:	4293      	cmp	r3, r2
 8021e62:	d90a      	bls.n	8021e7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8021e64:	697b      	ldr	r3, [r7, #20]
 8021e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8021e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8021e74:	d101      	bne.n	8021e7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8021e76:	2300      	movs	r3, #0
 8021e78:	e037      	b.n	8021eea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8021e7a:	697b      	ldr	r3, [r7, #20]
 8021e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021e80:	461a      	mov	r2, r3
 8021e82:	2300      	movs	r3, #0
 8021e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021e8c:	691b      	ldr	r3, [r3, #16]
 8021e8e:	697a      	ldr	r2, [r7, #20]
 8021e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8021e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8021e9a:	697b      	ldr	r3, [r7, #20]
 8021e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021ea0:	691b      	ldr	r3, [r3, #16]
 8021ea2:	697a      	ldr	r2, [r7, #20]
 8021ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021ea8:	f043 0318 	orr.w	r3, r3, #24
 8021eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8021eae:	697b      	ldr	r3, [r7, #20]
 8021eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021eb4:	691b      	ldr	r3, [r3, #16]
 8021eb6:	697a      	ldr	r2, [r7, #20]
 8021eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021ebc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8021ec0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8021ec2:	7afb      	ldrb	r3, [r7, #11]
 8021ec4:	2b01      	cmp	r3, #1
 8021ec6:	d10f      	bne.n	8021ee8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8021ec8:	697b      	ldr	r3, [r7, #20]
 8021eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021ece:	461a      	mov	r2, r3
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8021ed4:	697b      	ldr	r3, [r7, #20]
 8021ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	697a      	ldr	r2, [r7, #20]
 8021ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8021ee2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8021ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8021ee8:	2300      	movs	r3, #0
}
 8021eea:	4618      	mov	r0, r3
 8021eec:	371c      	adds	r7, #28
 8021eee:	46bd      	mov	sp, r7
 8021ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ef4:	4770      	bx	lr
 8021ef6:	bf00      	nop
 8021ef8:	4f54300a 	.word	0x4f54300a

08021efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8021efc:	b480      	push	{r7}
 8021efe:	b085      	sub	sp, #20
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8021f04:	2300      	movs	r3, #0
 8021f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	3301      	adds	r3, #1
 8021f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8021f0e:	68fb      	ldr	r3, [r7, #12]
 8021f10:	4a13      	ldr	r2, [pc, #76]	; (8021f60 <USB_CoreReset+0x64>)
 8021f12:	4293      	cmp	r3, r2
 8021f14:	d901      	bls.n	8021f1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8021f16:	2303      	movs	r3, #3
 8021f18:	e01b      	b.n	8021f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	691b      	ldr	r3, [r3, #16]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	daf2      	bge.n	8021f08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8021f22:	2300      	movs	r3, #0
 8021f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	691b      	ldr	r3, [r3, #16]
 8021f2a:	f043 0201 	orr.w	r2, r3, #1
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8021f32:	68fb      	ldr	r3, [r7, #12]
 8021f34:	3301      	adds	r3, #1
 8021f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	4a09      	ldr	r2, [pc, #36]	; (8021f60 <USB_CoreReset+0x64>)
 8021f3c:	4293      	cmp	r3, r2
 8021f3e:	d901      	bls.n	8021f44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8021f40:	2303      	movs	r3, #3
 8021f42:	e006      	b.n	8021f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	691b      	ldr	r3, [r3, #16]
 8021f48:	f003 0301 	and.w	r3, r3, #1
 8021f4c:	2b01      	cmp	r3, #1
 8021f4e:	d0f0      	beq.n	8021f32 <USB_CoreReset+0x36>

  return HAL_OK;
 8021f50:	2300      	movs	r3, #0
}
 8021f52:	4618      	mov	r0, r3
 8021f54:	3714      	adds	r7, #20
 8021f56:	46bd      	mov	sp, r7
 8021f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f5c:	4770      	bx	lr
 8021f5e:	bf00      	nop
 8021f60:	00030d40 	.word	0x00030d40

08021f64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021f64:	b580      	push	{r7, lr}
 8021f66:	b084      	sub	sp, #16
 8021f68:	af00      	add	r7, sp, #0
 8021f6a:	6078      	str	r0, [r7, #4]
 8021f6c:	460b      	mov	r3, r1
 8021f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8021f70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8021f74:	f005 ffdc 	bl	8027f30 <USBD_static_malloc>
 8021f78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8021f7a:	68fb      	ldr	r3, [r7, #12]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d109      	bne.n	8021f94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	32b0      	adds	r2, #176	; 0xb0
 8021f8a:	2100      	movs	r1, #0
 8021f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8021f90:	2302      	movs	r3, #2
 8021f92:	e0d4      	b.n	802213e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8021f94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8021f98:	2100      	movs	r1, #0
 8021f9a:	68f8      	ldr	r0, [r7, #12]
 8021f9c:	f006 f86a 	bl	8028074 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	32b0      	adds	r2, #176	; 0xb0
 8021faa:	68f9      	ldr	r1, [r7, #12]
 8021fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	32b0      	adds	r2, #176	; 0xb0
 8021fba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	7c1b      	ldrb	r3, [r3, #16]
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d138      	bne.n	802203e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8021fcc:	4b5e      	ldr	r3, [pc, #376]	; (8022148 <USBD_CDC_Init+0x1e4>)
 8021fce:	7819      	ldrb	r1, [r3, #0]
 8021fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021fd4:	2202      	movs	r2, #2
 8021fd6:	6878      	ldr	r0, [r7, #4]
 8021fd8:	f005 fe87 	bl	8027cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8021fdc:	4b5a      	ldr	r3, [pc, #360]	; (8022148 <USBD_CDC_Init+0x1e4>)
 8021fde:	781b      	ldrb	r3, [r3, #0]
 8021fe0:	f003 020f 	and.w	r2, r3, #15
 8021fe4:	6879      	ldr	r1, [r7, #4]
 8021fe6:	4613      	mov	r3, r2
 8021fe8:	009b      	lsls	r3, r3, #2
 8021fea:	4413      	add	r3, r2
 8021fec:	009b      	lsls	r3, r3, #2
 8021fee:	440b      	add	r3, r1
 8021ff0:	3324      	adds	r3, #36	; 0x24
 8021ff2:	2201      	movs	r2, #1
 8021ff4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8021ff6:	4b55      	ldr	r3, [pc, #340]	; (802214c <USBD_CDC_Init+0x1e8>)
 8021ff8:	7819      	ldrb	r1, [r3, #0]
 8021ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021ffe:	2202      	movs	r2, #2
 8022000:	6878      	ldr	r0, [r7, #4]
 8022002:	f005 fe72 	bl	8027cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8022006:	4b51      	ldr	r3, [pc, #324]	; (802214c <USBD_CDC_Init+0x1e8>)
 8022008:	781b      	ldrb	r3, [r3, #0]
 802200a:	f003 020f 	and.w	r2, r3, #15
 802200e:	6879      	ldr	r1, [r7, #4]
 8022010:	4613      	mov	r3, r2
 8022012:	009b      	lsls	r3, r3, #2
 8022014:	4413      	add	r3, r2
 8022016:	009b      	lsls	r3, r3, #2
 8022018:	440b      	add	r3, r1
 802201a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802201e:	2201      	movs	r2, #1
 8022020:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8022022:	4b4b      	ldr	r3, [pc, #300]	; (8022150 <USBD_CDC_Init+0x1ec>)
 8022024:	781b      	ldrb	r3, [r3, #0]
 8022026:	f003 020f 	and.w	r2, r3, #15
 802202a:	6879      	ldr	r1, [r7, #4]
 802202c:	4613      	mov	r3, r2
 802202e:	009b      	lsls	r3, r3, #2
 8022030:	4413      	add	r3, r2
 8022032:	009b      	lsls	r3, r3, #2
 8022034:	440b      	add	r3, r1
 8022036:	3326      	adds	r3, #38	; 0x26
 8022038:	2210      	movs	r2, #16
 802203a:	801a      	strh	r2, [r3, #0]
 802203c:	e035      	b.n	80220aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802203e:	4b42      	ldr	r3, [pc, #264]	; (8022148 <USBD_CDC_Init+0x1e4>)
 8022040:	7819      	ldrb	r1, [r3, #0]
 8022042:	2340      	movs	r3, #64	; 0x40
 8022044:	2202      	movs	r2, #2
 8022046:	6878      	ldr	r0, [r7, #4]
 8022048:	f005 fe4f 	bl	8027cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802204c:	4b3e      	ldr	r3, [pc, #248]	; (8022148 <USBD_CDC_Init+0x1e4>)
 802204e:	781b      	ldrb	r3, [r3, #0]
 8022050:	f003 020f 	and.w	r2, r3, #15
 8022054:	6879      	ldr	r1, [r7, #4]
 8022056:	4613      	mov	r3, r2
 8022058:	009b      	lsls	r3, r3, #2
 802205a:	4413      	add	r3, r2
 802205c:	009b      	lsls	r3, r3, #2
 802205e:	440b      	add	r3, r1
 8022060:	3324      	adds	r3, #36	; 0x24
 8022062:	2201      	movs	r2, #1
 8022064:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8022066:	4b39      	ldr	r3, [pc, #228]	; (802214c <USBD_CDC_Init+0x1e8>)
 8022068:	7819      	ldrb	r1, [r3, #0]
 802206a:	2340      	movs	r3, #64	; 0x40
 802206c:	2202      	movs	r2, #2
 802206e:	6878      	ldr	r0, [r7, #4]
 8022070:	f005 fe3b 	bl	8027cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8022074:	4b35      	ldr	r3, [pc, #212]	; (802214c <USBD_CDC_Init+0x1e8>)
 8022076:	781b      	ldrb	r3, [r3, #0]
 8022078:	f003 020f 	and.w	r2, r3, #15
 802207c:	6879      	ldr	r1, [r7, #4]
 802207e:	4613      	mov	r3, r2
 8022080:	009b      	lsls	r3, r3, #2
 8022082:	4413      	add	r3, r2
 8022084:	009b      	lsls	r3, r3, #2
 8022086:	440b      	add	r3, r1
 8022088:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802208c:	2201      	movs	r2, #1
 802208e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8022090:	4b2f      	ldr	r3, [pc, #188]	; (8022150 <USBD_CDC_Init+0x1ec>)
 8022092:	781b      	ldrb	r3, [r3, #0]
 8022094:	f003 020f 	and.w	r2, r3, #15
 8022098:	6879      	ldr	r1, [r7, #4]
 802209a:	4613      	mov	r3, r2
 802209c:	009b      	lsls	r3, r3, #2
 802209e:	4413      	add	r3, r2
 80220a0:	009b      	lsls	r3, r3, #2
 80220a2:	440b      	add	r3, r1
 80220a4:	3326      	adds	r3, #38	; 0x26
 80220a6:	2210      	movs	r2, #16
 80220a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80220aa:	4b29      	ldr	r3, [pc, #164]	; (8022150 <USBD_CDC_Init+0x1ec>)
 80220ac:	7819      	ldrb	r1, [r3, #0]
 80220ae:	2308      	movs	r3, #8
 80220b0:	2203      	movs	r2, #3
 80220b2:	6878      	ldr	r0, [r7, #4]
 80220b4:	f005 fe19 	bl	8027cea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80220b8:	4b25      	ldr	r3, [pc, #148]	; (8022150 <USBD_CDC_Init+0x1ec>)
 80220ba:	781b      	ldrb	r3, [r3, #0]
 80220bc:	f003 020f 	and.w	r2, r3, #15
 80220c0:	6879      	ldr	r1, [r7, #4]
 80220c2:	4613      	mov	r3, r2
 80220c4:	009b      	lsls	r3, r3, #2
 80220c6:	4413      	add	r3, r2
 80220c8:	009b      	lsls	r3, r3, #2
 80220ca:	440b      	add	r3, r1
 80220cc:	3324      	adds	r3, #36	; 0x24
 80220ce:	2201      	movs	r2, #1
 80220d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80220d2:	68fb      	ldr	r3, [r7, #12]
 80220d4:	2200      	movs	r2, #0
 80220d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80220e0:	687a      	ldr	r2, [r7, #4]
 80220e2:	33b0      	adds	r3, #176	; 0xb0
 80220e4:	009b      	lsls	r3, r3, #2
 80220e6:	4413      	add	r3, r2
 80220e8:	685b      	ldr	r3, [r3, #4]
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	2200      	movs	r2, #0
 80220f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80220f6:	68fb      	ldr	r3, [r7, #12]
 80220f8:	2200      	movs	r2, #0
 80220fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8022104:	2b00      	cmp	r3, #0
 8022106:	d101      	bne.n	802210c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8022108:	2302      	movs	r3, #2
 802210a:	e018      	b.n	802213e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	7c1b      	ldrb	r3, [r3, #16]
 8022110:	2b00      	cmp	r3, #0
 8022112:	d10a      	bne.n	802212a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8022114:	4b0d      	ldr	r3, [pc, #52]	; (802214c <USBD_CDC_Init+0x1e8>)
 8022116:	7819      	ldrb	r1, [r3, #0]
 8022118:	68fb      	ldr	r3, [r7, #12]
 802211a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802211e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022122:	6878      	ldr	r0, [r7, #4]
 8022124:	f005 fed0 	bl	8027ec8 <USBD_LL_PrepareReceive>
 8022128:	e008      	b.n	802213c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802212a:	4b08      	ldr	r3, [pc, #32]	; (802214c <USBD_CDC_Init+0x1e8>)
 802212c:	7819      	ldrb	r1, [r3, #0]
 802212e:	68fb      	ldr	r3, [r7, #12]
 8022130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8022134:	2340      	movs	r3, #64	; 0x40
 8022136:	6878      	ldr	r0, [r7, #4]
 8022138:	f005 fec6 	bl	8027ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802213c:	2300      	movs	r3, #0
}
 802213e:	4618      	mov	r0, r3
 8022140:	3710      	adds	r7, #16
 8022142:	46bd      	mov	sp, r7
 8022144:	bd80      	pop	{r7, pc}
 8022146:	bf00      	nop
 8022148:	2000045b 	.word	0x2000045b
 802214c:	2000045c 	.word	0x2000045c
 8022150:	2000045d 	.word	0x2000045d

08022154 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8022154:	b580      	push	{r7, lr}
 8022156:	b082      	sub	sp, #8
 8022158:	af00      	add	r7, sp, #0
 802215a:	6078      	str	r0, [r7, #4]
 802215c:	460b      	mov	r3, r1
 802215e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8022160:	4b3a      	ldr	r3, [pc, #232]	; (802224c <USBD_CDC_DeInit+0xf8>)
 8022162:	781b      	ldrb	r3, [r3, #0]
 8022164:	4619      	mov	r1, r3
 8022166:	6878      	ldr	r0, [r7, #4]
 8022168:	f005 fde5 	bl	8027d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802216c:	4b37      	ldr	r3, [pc, #220]	; (802224c <USBD_CDC_DeInit+0xf8>)
 802216e:	781b      	ldrb	r3, [r3, #0]
 8022170:	f003 020f 	and.w	r2, r3, #15
 8022174:	6879      	ldr	r1, [r7, #4]
 8022176:	4613      	mov	r3, r2
 8022178:	009b      	lsls	r3, r3, #2
 802217a:	4413      	add	r3, r2
 802217c:	009b      	lsls	r3, r3, #2
 802217e:	440b      	add	r3, r1
 8022180:	3324      	adds	r3, #36	; 0x24
 8022182:	2200      	movs	r2, #0
 8022184:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8022186:	4b32      	ldr	r3, [pc, #200]	; (8022250 <USBD_CDC_DeInit+0xfc>)
 8022188:	781b      	ldrb	r3, [r3, #0]
 802218a:	4619      	mov	r1, r3
 802218c:	6878      	ldr	r0, [r7, #4]
 802218e:	f005 fdd2 	bl	8027d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8022192:	4b2f      	ldr	r3, [pc, #188]	; (8022250 <USBD_CDC_DeInit+0xfc>)
 8022194:	781b      	ldrb	r3, [r3, #0]
 8022196:	f003 020f 	and.w	r2, r3, #15
 802219a:	6879      	ldr	r1, [r7, #4]
 802219c:	4613      	mov	r3, r2
 802219e:	009b      	lsls	r3, r3, #2
 80221a0:	4413      	add	r3, r2
 80221a2:	009b      	lsls	r3, r3, #2
 80221a4:	440b      	add	r3, r1
 80221a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80221aa:	2200      	movs	r2, #0
 80221ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80221ae:	4b29      	ldr	r3, [pc, #164]	; (8022254 <USBD_CDC_DeInit+0x100>)
 80221b0:	781b      	ldrb	r3, [r3, #0]
 80221b2:	4619      	mov	r1, r3
 80221b4:	6878      	ldr	r0, [r7, #4]
 80221b6:	f005 fdbe 	bl	8027d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80221ba:	4b26      	ldr	r3, [pc, #152]	; (8022254 <USBD_CDC_DeInit+0x100>)
 80221bc:	781b      	ldrb	r3, [r3, #0]
 80221be:	f003 020f 	and.w	r2, r3, #15
 80221c2:	6879      	ldr	r1, [r7, #4]
 80221c4:	4613      	mov	r3, r2
 80221c6:	009b      	lsls	r3, r3, #2
 80221c8:	4413      	add	r3, r2
 80221ca:	009b      	lsls	r3, r3, #2
 80221cc:	440b      	add	r3, r1
 80221ce:	3324      	adds	r3, #36	; 0x24
 80221d0:	2200      	movs	r2, #0
 80221d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80221d4:	4b1f      	ldr	r3, [pc, #124]	; (8022254 <USBD_CDC_DeInit+0x100>)
 80221d6:	781b      	ldrb	r3, [r3, #0]
 80221d8:	f003 020f 	and.w	r2, r3, #15
 80221dc:	6879      	ldr	r1, [r7, #4]
 80221de:	4613      	mov	r3, r2
 80221e0:	009b      	lsls	r3, r3, #2
 80221e2:	4413      	add	r3, r2
 80221e4:	009b      	lsls	r3, r3, #2
 80221e6:	440b      	add	r3, r1
 80221e8:	3326      	adds	r3, #38	; 0x26
 80221ea:	2200      	movs	r2, #0
 80221ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80221f4:	687b      	ldr	r3, [r7, #4]
 80221f6:	32b0      	adds	r2, #176	; 0xb0
 80221f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d01f      	beq.n	8022240 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8022206:	687a      	ldr	r2, [r7, #4]
 8022208:	33b0      	adds	r3, #176	; 0xb0
 802220a:	009b      	lsls	r3, r3, #2
 802220c:	4413      	add	r3, r2
 802220e:	685b      	ldr	r3, [r3, #4]
 8022210:	685b      	ldr	r3, [r3, #4]
 8022212:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	32b0      	adds	r2, #176	; 0xb0
 802221e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022222:	4618      	mov	r0, r3
 8022224:	f005 fe92 	bl	8027f4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	32b0      	adds	r2, #176	; 0xb0
 8022232:	2100      	movs	r1, #0
 8022234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	2200      	movs	r2, #0
 802223c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8022240:	2300      	movs	r3, #0
}
 8022242:	4618      	mov	r0, r3
 8022244:	3708      	adds	r7, #8
 8022246:	46bd      	mov	sp, r7
 8022248:	bd80      	pop	{r7, pc}
 802224a:	bf00      	nop
 802224c:	2000045b 	.word	0x2000045b
 8022250:	2000045c 	.word	0x2000045c
 8022254:	2000045d 	.word	0x2000045d

08022258 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8022258:	b580      	push	{r7, lr}
 802225a:	b08a      	sub	sp, #40	; 0x28
 802225c:	af00      	add	r7, sp, #0
 802225e:	6078      	str	r0, [r7, #4]
 8022260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	32b0      	adds	r2, #176	; 0xb0
 802226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022270:	623b      	str	r3, [r7, #32]
  uint16_t len;
  uint8_t ifalt = 0U;
 8022272:	2300      	movs	r3, #0
 8022274:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8022276:	2300      	movs	r3, #0
 8022278:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 802227a:	2300      	movs	r3, #0
 802227c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hcdc == NULL)
 8022280:	6a3b      	ldr	r3, [r7, #32]
 8022282:	2b00      	cmp	r3, #0
 8022284:	d101      	bne.n	802228a <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8022286:	2303      	movs	r3, #3
 8022288:	e0cc      	b.n	8022424 <USBD_CDC_Setup+0x1cc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802228a:	683b      	ldr	r3, [r7, #0]
 802228c:	781b      	ldrb	r3, [r3, #0]
 802228e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8022292:	2b00      	cmp	r3, #0
 8022294:	d057      	beq.n	8022346 <USBD_CDC_Setup+0xee>
 8022296:	2b20      	cmp	r3, #32
 8022298:	f040 80ba 	bne.w	8022410 <USBD_CDC_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802229c:	683b      	ldr	r3, [r7, #0]
 802229e:	88db      	ldrh	r3, [r3, #6]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d041      	beq.n	8022328 <USBD_CDC_Setup+0xd0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80222a4:	683b      	ldr	r3, [r7, #0]
 80222a6:	781b      	ldrb	r3, [r3, #0]
 80222a8:	b25b      	sxtb	r3, r3
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	da20      	bge.n	80222f0 <USBD_CDC_Setup+0x98>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80222b4:	687a      	ldr	r2, [r7, #4]
 80222b6:	33b0      	adds	r3, #176	; 0xb0
 80222b8:	009b      	lsls	r3, r3, #2
 80222ba:	4413      	add	r3, r2
 80222bc:	685b      	ldr	r3, [r3, #4]
 80222be:	689b      	ldr	r3, [r3, #8]
 80222c0:	683a      	ldr	r2, [r7, #0]
 80222c2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80222c4:	6a39      	ldr	r1, [r7, #32]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80222c6:	683a      	ldr	r2, [r7, #0]
 80222c8:	88d2      	ldrh	r2, [r2, #6]
 80222ca:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80222cc:	2307      	movs	r3, #7
 80222ce:	617b      	str	r3, [r7, #20]
 80222d0:	683b      	ldr	r3, [r7, #0]
 80222d2:	88db      	ldrh	r3, [r3, #6]
 80222d4:	827b      	strh	r3, [r7, #18]
 80222d6:	8a7a      	ldrh	r2, [r7, #18]
 80222d8:	697b      	ldr	r3, [r7, #20]
 80222da:	4293      	cmp	r3, r2
 80222dc:	bf28      	it	cs
 80222de:	4613      	movcs	r3, r2
 80222e0:	823b      	strh	r3, [r7, #16]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80222e2:	6a3b      	ldr	r3, [r7, #32]
 80222e4:	8a3a      	ldrh	r2, [r7, #16]
 80222e6:	4619      	mov	r1, r3
 80222e8:	6878      	ldr	r0, [r7, #4]
 80222ea:	f001 fd99 	bl	8023e20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80222ee:	e097      	b.n	8022420 <USBD_CDC_Setup+0x1c8>
          hcdc->CmdOpCode = req->bRequest;
 80222f0:	683b      	ldr	r3, [r7, #0]
 80222f2:	785a      	ldrb	r2, [r3, #1]
 80222f4:	6a3b      	ldr	r3, [r7, #32]
 80222f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80222fa:	683b      	ldr	r3, [r7, #0]
 80222fc:	88db      	ldrh	r3, [r3, #6]
 80222fe:	83fb      	strh	r3, [r7, #30]
 8022300:	2340      	movs	r3, #64	; 0x40
 8022302:	61bb      	str	r3, [r7, #24]
 8022304:	8bfa      	ldrh	r2, [r7, #30]
 8022306:	69bb      	ldr	r3, [r7, #24]
 8022308:	4293      	cmp	r3, r2
 802230a:	bf28      	it	cs
 802230c:	4613      	movcs	r3, r2
 802230e:	b2da      	uxtb	r2, r3
 8022310:	6a3b      	ldr	r3, [r7, #32]
 8022312:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8022316:	6a39      	ldr	r1, [r7, #32]
 8022318:	6a3b      	ldr	r3, [r7, #32]
 802231a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 802231e:	461a      	mov	r2, r3
 8022320:	6878      	ldr	r0, [r7, #4]
 8022322:	f001 fda9 	bl	8023e78 <USBD_CtlPrepareRx>
      break;
 8022326:	e07b      	b.n	8022420 <USBD_CDC_Setup+0x1c8>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802232e:	687a      	ldr	r2, [r7, #4]
 8022330:	33b0      	adds	r3, #176	; 0xb0
 8022332:	009b      	lsls	r3, r3, #2
 8022334:	4413      	add	r3, r2
 8022336:	685b      	ldr	r3, [r3, #4]
 8022338:	689b      	ldr	r3, [r3, #8]
 802233a:	683a      	ldr	r2, [r7, #0]
 802233c:	7850      	ldrb	r0, [r2, #1]
 802233e:	2200      	movs	r2, #0
 8022340:	6839      	ldr	r1, [r7, #0]
 8022342:	4798      	blx	r3
      break;
 8022344:	e06c      	b.n	8022420 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8022346:	683b      	ldr	r3, [r7, #0]
 8022348:	785b      	ldrb	r3, [r3, #1]
 802234a:	2b0b      	cmp	r3, #11
 802234c:	d854      	bhi.n	80223f8 <USBD_CDC_Setup+0x1a0>
 802234e:	a201      	add	r2, pc, #4	; (adr r2, 8022354 <USBD_CDC_Setup+0xfc>)
 8022350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022354:	08022385 	.word	0x08022385
 8022358:	08022409 	.word	0x08022409
 802235c:	080223f9 	.word	0x080223f9
 8022360:	080223f9 	.word	0x080223f9
 8022364:	080223f9 	.word	0x080223f9
 8022368:	080223f9 	.word	0x080223f9
 802236c:	080223f9 	.word	0x080223f9
 8022370:	080223f9 	.word	0x080223f9
 8022374:	080223f9 	.word	0x080223f9
 8022378:	080223f9 	.word	0x080223f9
 802237c:	080223b1 	.word	0x080223b1
 8022380:	080223dd 	.word	0x080223dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802238a:	b2db      	uxtb	r3, r3
 802238c:	2b03      	cmp	r3, #3
 802238e:	d107      	bne.n	80223a0 <USBD_CDC_Setup+0x148>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8022390:	f107 030c 	add.w	r3, r7, #12
 8022394:	2202      	movs	r2, #2
 8022396:	4619      	mov	r1, r3
 8022398:	6878      	ldr	r0, [r7, #4]
 802239a:	f001 fd41 	bl	8023e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802239e:	e036      	b.n	802240e <USBD_CDC_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80223a0:	6839      	ldr	r1, [r7, #0]
 80223a2:	6878      	ldr	r0, [r7, #4]
 80223a4:	f001 fccb 	bl	8023d3e <USBD_CtlError>
            ret = USBD_FAIL;
 80223a8:	2303      	movs	r3, #3
 80223aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80223ae:	e02e      	b.n	802240e <USBD_CDC_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80223b6:	b2db      	uxtb	r3, r3
 80223b8:	2b03      	cmp	r3, #3
 80223ba:	d107      	bne.n	80223cc <USBD_CDC_Setup+0x174>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80223bc:	f107 030f 	add.w	r3, r7, #15
 80223c0:	2201      	movs	r2, #1
 80223c2:	4619      	mov	r1, r3
 80223c4:	6878      	ldr	r0, [r7, #4]
 80223c6:	f001 fd2b 	bl	8023e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80223ca:	e020      	b.n	802240e <USBD_CDC_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80223cc:	6839      	ldr	r1, [r7, #0]
 80223ce:	6878      	ldr	r0, [r7, #4]
 80223d0:	f001 fcb5 	bl	8023d3e <USBD_CtlError>
            ret = USBD_FAIL;
 80223d4:	2303      	movs	r3, #3
 80223d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80223da:	e018      	b.n	802240e <USBD_CDC_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80223e2:	b2db      	uxtb	r3, r3
 80223e4:	2b03      	cmp	r3, #3
 80223e6:	d011      	beq.n	802240c <USBD_CDC_Setup+0x1b4>
          {
            USBD_CtlError(pdev, req);
 80223e8:	6839      	ldr	r1, [r7, #0]
 80223ea:	6878      	ldr	r0, [r7, #4]
 80223ec:	f001 fca7 	bl	8023d3e <USBD_CtlError>
            ret = USBD_FAIL;
 80223f0:	2303      	movs	r3, #3
 80223f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
          break;
 80223f6:	e009      	b.n	802240c <USBD_CDC_Setup+0x1b4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80223f8:	6839      	ldr	r1, [r7, #0]
 80223fa:	6878      	ldr	r0, [r7, #4]
 80223fc:	f001 fc9f 	bl	8023d3e <USBD_CtlError>
          ret = USBD_FAIL;
 8022400:	2303      	movs	r3, #3
 8022402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8022406:	e002      	b.n	802240e <USBD_CDC_Setup+0x1b6>
          break;
 8022408:	bf00      	nop
 802240a:	e009      	b.n	8022420 <USBD_CDC_Setup+0x1c8>
          break;
 802240c:	bf00      	nop
      }
      break;
 802240e:	e007      	b.n	8022420 <USBD_CDC_Setup+0x1c8>

    default:
      USBD_CtlError(pdev, req);
 8022410:	6839      	ldr	r1, [r7, #0]
 8022412:	6878      	ldr	r0, [r7, #4]
 8022414:	f001 fc93 	bl	8023d3e <USBD_CtlError>
      ret = USBD_FAIL;
 8022418:	2303      	movs	r3, #3
 802241a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 802241e:	bf00      	nop
  }

  return (uint8_t)ret;
 8022420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8022424:	4618      	mov	r0, r3
 8022426:	3728      	adds	r7, #40	; 0x28
 8022428:	46bd      	mov	sp, r7
 802242a:	bd80      	pop	{r7, pc}

0802242c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802242c:	b580      	push	{r7, lr}
 802242e:	b084      	sub	sp, #16
 8022430:	af00      	add	r7, sp, #0
 8022432:	6078      	str	r0, [r7, #4]
 8022434:	460b      	mov	r3, r1
 8022436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802243e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	32b0      	adds	r2, #176	; 0xb0
 802244a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802244e:	2b00      	cmp	r3, #0
 8022450:	d101      	bne.n	8022456 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8022452:	2303      	movs	r3, #3
 8022454:	e065      	b.n	8022522 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	32b0      	adds	r2, #176	; 0xb0
 8022460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022464:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8022466:	78fb      	ldrb	r3, [r7, #3]
 8022468:	f003 020f 	and.w	r2, r3, #15
 802246c:	6879      	ldr	r1, [r7, #4]
 802246e:	4613      	mov	r3, r2
 8022470:	009b      	lsls	r3, r3, #2
 8022472:	4413      	add	r3, r2
 8022474:	009b      	lsls	r3, r3, #2
 8022476:	440b      	add	r3, r1
 8022478:	3318      	adds	r3, #24
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d02f      	beq.n	80224e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8022480:	78fb      	ldrb	r3, [r7, #3]
 8022482:	f003 020f 	and.w	r2, r3, #15
 8022486:	6879      	ldr	r1, [r7, #4]
 8022488:	4613      	mov	r3, r2
 802248a:	009b      	lsls	r3, r3, #2
 802248c:	4413      	add	r3, r2
 802248e:	009b      	lsls	r3, r3, #2
 8022490:	440b      	add	r3, r1
 8022492:	3318      	adds	r3, #24
 8022494:	681a      	ldr	r2, [r3, #0]
 8022496:	78fb      	ldrb	r3, [r7, #3]
 8022498:	f003 010f 	and.w	r1, r3, #15
 802249c:	68f8      	ldr	r0, [r7, #12]
 802249e:	460b      	mov	r3, r1
 80224a0:	00db      	lsls	r3, r3, #3
 80224a2:	440b      	add	r3, r1
 80224a4:	009b      	lsls	r3, r3, #2
 80224a6:	4403      	add	r3, r0
 80224a8:	3348      	adds	r3, #72	; 0x48
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80224b0:	fb01 f303 	mul.w	r3, r1, r3
 80224b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d112      	bne.n	80224e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80224ba:	78fb      	ldrb	r3, [r7, #3]
 80224bc:	f003 020f 	and.w	r2, r3, #15
 80224c0:	6879      	ldr	r1, [r7, #4]
 80224c2:	4613      	mov	r3, r2
 80224c4:	009b      	lsls	r3, r3, #2
 80224c6:	4413      	add	r3, r2
 80224c8:	009b      	lsls	r3, r3, #2
 80224ca:	440b      	add	r3, r1
 80224cc:	3318      	adds	r3, #24
 80224ce:	2200      	movs	r2, #0
 80224d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80224d2:	78f9      	ldrb	r1, [r7, #3]
 80224d4:	2300      	movs	r3, #0
 80224d6:	2200      	movs	r2, #0
 80224d8:	6878      	ldr	r0, [r7, #4]
 80224da:	f005 fcd4 	bl	8027e86 <USBD_LL_Transmit>
 80224de:	e01f      	b.n	8022520 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80224e0:	68bb      	ldr	r3, [r7, #8]
 80224e2:	2200      	movs	r2, #0
 80224e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80224ee:	687a      	ldr	r2, [r7, #4]
 80224f0:	33b0      	adds	r3, #176	; 0xb0
 80224f2:	009b      	lsls	r3, r3, #2
 80224f4:	4413      	add	r3, r2
 80224f6:	685b      	ldr	r3, [r3, #4]
 80224f8:	691b      	ldr	r3, [r3, #16]
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d010      	beq.n	8022520 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8022504:	687a      	ldr	r2, [r7, #4]
 8022506:	33b0      	adds	r3, #176	; 0xb0
 8022508:	009b      	lsls	r3, r3, #2
 802250a:	4413      	add	r3, r2
 802250c:	685b      	ldr	r3, [r3, #4]
 802250e:	691b      	ldr	r3, [r3, #16]
 8022510:	68ba      	ldr	r2, [r7, #8]
 8022512:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8022516:	68ba      	ldr	r2, [r7, #8]
 8022518:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802251c:	78fa      	ldrb	r2, [r7, #3]
 802251e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8022520:	2300      	movs	r3, #0
}
 8022522:	4618      	mov	r0, r3
 8022524:	3710      	adds	r7, #16
 8022526:	46bd      	mov	sp, r7
 8022528:	bd80      	pop	{r7, pc}

0802252a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802252a:	b580      	push	{r7, lr}
 802252c:	b084      	sub	sp, #16
 802252e:	af00      	add	r7, sp, #0
 8022530:	6078      	str	r0, [r7, #4]
 8022532:	460b      	mov	r3, r1
 8022534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	32b0      	adds	r2, #176	; 0xb0
 8022540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022544:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	32b0      	adds	r2, #176	; 0xb0
 8022550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022554:	2b00      	cmp	r3, #0
 8022556:	d101      	bne.n	802255c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8022558:	2303      	movs	r3, #3
 802255a:	e01a      	b.n	8022592 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802255c:	78fb      	ldrb	r3, [r7, #3]
 802255e:	4619      	mov	r1, r3
 8022560:	6878      	ldr	r0, [r7, #4]
 8022562:	f005 fcd2 	bl	8027f0a <USBD_LL_GetRxDataSize>
 8022566:	4602      	mov	r2, r0
 8022568:	68fb      	ldr	r3, [r7, #12]
 802256a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802256e:	687b      	ldr	r3, [r7, #4]
 8022570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8022574:	687a      	ldr	r2, [r7, #4]
 8022576:	33b0      	adds	r3, #176	; 0xb0
 8022578:	009b      	lsls	r3, r3, #2
 802257a:	4413      	add	r3, r2
 802257c:	685b      	ldr	r3, [r3, #4]
 802257e:	68db      	ldr	r3, [r3, #12]
 8022580:	68fa      	ldr	r2, [r7, #12]
 8022582:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8022586:	68fa      	ldr	r2, [r7, #12]
 8022588:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802258c:	4611      	mov	r1, r2
 802258e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8022590:	2300      	movs	r3, #0
}
 8022592:	4618      	mov	r0, r3
 8022594:	3710      	adds	r7, #16
 8022596:	46bd      	mov	sp, r7
 8022598:	bd80      	pop	{r7, pc}

0802259a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802259a:	b580      	push	{r7, lr}
 802259c:	b084      	sub	sp, #16
 802259e:	af00      	add	r7, sp, #0
 80225a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	32b0      	adds	r2, #176	; 0xb0
 80225ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80225b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80225b2:	68fb      	ldr	r3, [r7, #12]
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d101      	bne.n	80225bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80225b8:	2303      	movs	r3, #3
 80225ba:	e025      	b.n	8022608 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80225c2:	687a      	ldr	r2, [r7, #4]
 80225c4:	33b0      	adds	r3, #176	; 0xb0
 80225c6:	009b      	lsls	r3, r3, #2
 80225c8:	4413      	add	r3, r2
 80225ca:	685b      	ldr	r3, [r3, #4]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d01a      	beq.n	8022606 <USBD_CDC_EP0_RxReady+0x6c>
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80225d6:	2bff      	cmp	r3, #255	; 0xff
 80225d8:	d015      	beq.n	8022606 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80225e0:	687a      	ldr	r2, [r7, #4]
 80225e2:	33b0      	adds	r3, #176	; 0xb0
 80225e4:	009b      	lsls	r3, r3, #2
 80225e6:	4413      	add	r3, r2
 80225e8:	685b      	ldr	r3, [r3, #4]
 80225ea:	689b      	ldr	r3, [r3, #8]
 80225ec:	68fa      	ldr	r2, [r7, #12]
 80225ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80225f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80225f4:	68fa      	ldr	r2, [r7, #12]
 80225f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80225fa:	b292      	uxth	r2, r2
 80225fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80225fe:	68fb      	ldr	r3, [r7, #12]
 8022600:	22ff      	movs	r2, #255	; 0xff
 8022602:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8022606:	2300      	movs	r3, #0
}
 8022608:	4618      	mov	r0, r3
 802260a:	3710      	adds	r7, #16
 802260c:	46bd      	mov	sp, r7
 802260e:	bd80      	pop	{r7, pc}

08022610 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8022610:	b580      	push	{r7, lr}
 8022612:	b086      	sub	sp, #24
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8022618:	2182      	movs	r1, #130	; 0x82
 802261a:	4818      	ldr	r0, [pc, #96]	; (802267c <USBD_CDC_GetFSCfgDesc+0x6c>)
 802261c:	f000 fd53 	bl	80230c6 <USBD_GetEpDesc>
 8022620:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8022622:	2101      	movs	r1, #1
 8022624:	4815      	ldr	r0, [pc, #84]	; (802267c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8022626:	f000 fd4e 	bl	80230c6 <USBD_GetEpDesc>
 802262a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802262c:	2181      	movs	r1, #129	; 0x81
 802262e:	4813      	ldr	r0, [pc, #76]	; (802267c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8022630:	f000 fd49 	bl	80230c6 <USBD_GetEpDesc>
 8022634:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8022636:	697b      	ldr	r3, [r7, #20]
 8022638:	2b00      	cmp	r3, #0
 802263a:	d002      	beq.n	8022642 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802263c:	697b      	ldr	r3, [r7, #20]
 802263e:	2210      	movs	r2, #16
 8022640:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8022642:	693b      	ldr	r3, [r7, #16]
 8022644:	2b00      	cmp	r3, #0
 8022646:	d006      	beq.n	8022656 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8022648:	693b      	ldr	r3, [r7, #16]
 802264a:	2200      	movs	r2, #0
 802264c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022650:	711a      	strb	r2, [r3, #4]
 8022652:	2200      	movs	r2, #0
 8022654:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8022656:	68fb      	ldr	r3, [r7, #12]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d006      	beq.n	802266a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	2200      	movs	r2, #0
 8022660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022664:	711a      	strb	r2, [r3, #4]
 8022666:	2200      	movs	r2, #0
 8022668:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	2243      	movs	r2, #67	; 0x43
 802266e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8022670:	4b02      	ldr	r3, [pc, #8]	; (802267c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8022672:	4618      	mov	r0, r3
 8022674:	3718      	adds	r7, #24
 8022676:	46bd      	mov	sp, r7
 8022678:	bd80      	pop	{r7, pc}
 802267a:	bf00      	nop
 802267c:	20000418 	.word	0x20000418

08022680 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8022680:	b580      	push	{r7, lr}
 8022682:	b086      	sub	sp, #24
 8022684:	af00      	add	r7, sp, #0
 8022686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8022688:	2182      	movs	r1, #130	; 0x82
 802268a:	4818      	ldr	r0, [pc, #96]	; (80226ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 802268c:	f000 fd1b 	bl	80230c6 <USBD_GetEpDesc>
 8022690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8022692:	2101      	movs	r1, #1
 8022694:	4815      	ldr	r0, [pc, #84]	; (80226ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8022696:	f000 fd16 	bl	80230c6 <USBD_GetEpDesc>
 802269a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802269c:	2181      	movs	r1, #129	; 0x81
 802269e:	4813      	ldr	r0, [pc, #76]	; (80226ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80226a0:	f000 fd11 	bl	80230c6 <USBD_GetEpDesc>
 80226a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80226a6:	697b      	ldr	r3, [r7, #20]
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d002      	beq.n	80226b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80226ac:	697b      	ldr	r3, [r7, #20]
 80226ae:	2210      	movs	r2, #16
 80226b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80226b2:	693b      	ldr	r3, [r7, #16]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d006      	beq.n	80226c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80226b8:	693b      	ldr	r3, [r7, #16]
 80226ba:	2200      	movs	r2, #0
 80226bc:	711a      	strb	r2, [r3, #4]
 80226be:	2200      	movs	r2, #0
 80226c0:	f042 0202 	orr.w	r2, r2, #2
 80226c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80226c6:	68fb      	ldr	r3, [r7, #12]
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	d006      	beq.n	80226da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	2200      	movs	r2, #0
 80226d0:	711a      	strb	r2, [r3, #4]
 80226d2:	2200      	movs	r2, #0
 80226d4:	f042 0202 	orr.w	r2, r2, #2
 80226d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80226da:	687b      	ldr	r3, [r7, #4]
 80226dc:	2243      	movs	r2, #67	; 0x43
 80226de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80226e0:	4b02      	ldr	r3, [pc, #8]	; (80226ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80226e2:	4618      	mov	r0, r3
 80226e4:	3718      	adds	r7, #24
 80226e6:	46bd      	mov	sp, r7
 80226e8:	bd80      	pop	{r7, pc}
 80226ea:	bf00      	nop
 80226ec:	20000418 	.word	0x20000418

080226f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80226f0:	b580      	push	{r7, lr}
 80226f2:	b086      	sub	sp, #24
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80226f8:	2182      	movs	r1, #130	; 0x82
 80226fa:	4818      	ldr	r0, [pc, #96]	; (802275c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80226fc:	f000 fce3 	bl	80230c6 <USBD_GetEpDesc>
 8022700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8022702:	2101      	movs	r1, #1
 8022704:	4815      	ldr	r0, [pc, #84]	; (802275c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8022706:	f000 fcde 	bl	80230c6 <USBD_GetEpDesc>
 802270a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802270c:	2181      	movs	r1, #129	; 0x81
 802270e:	4813      	ldr	r0, [pc, #76]	; (802275c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8022710:	f000 fcd9 	bl	80230c6 <USBD_GetEpDesc>
 8022714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8022716:	697b      	ldr	r3, [r7, #20]
 8022718:	2b00      	cmp	r3, #0
 802271a:	d002      	beq.n	8022722 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802271c:	697b      	ldr	r3, [r7, #20]
 802271e:	2210      	movs	r2, #16
 8022720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8022722:	693b      	ldr	r3, [r7, #16]
 8022724:	2b00      	cmp	r3, #0
 8022726:	d006      	beq.n	8022736 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8022728:	693b      	ldr	r3, [r7, #16]
 802272a:	2200      	movs	r2, #0
 802272c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022730:	711a      	strb	r2, [r3, #4]
 8022732:	2200      	movs	r2, #0
 8022734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8022736:	68fb      	ldr	r3, [r7, #12]
 8022738:	2b00      	cmp	r3, #0
 802273a:	d006      	beq.n	802274a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802273c:	68fb      	ldr	r3, [r7, #12]
 802273e:	2200      	movs	r2, #0
 8022740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022744:	711a      	strb	r2, [r3, #4]
 8022746:	2200      	movs	r2, #0
 8022748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	2243      	movs	r2, #67	; 0x43
 802274e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8022750:	4b02      	ldr	r3, [pc, #8]	; (802275c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8022752:	4618      	mov	r0, r3
 8022754:	3718      	adds	r7, #24
 8022756:	46bd      	mov	sp, r7
 8022758:	bd80      	pop	{r7, pc}
 802275a:	bf00      	nop
 802275c:	20000418 	.word	0x20000418

08022760 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8022760:	b480      	push	{r7}
 8022762:	b083      	sub	sp, #12
 8022764:	af00      	add	r7, sp, #0
 8022766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	220a      	movs	r2, #10
 802276c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802276e:	4b03      	ldr	r3, [pc, #12]	; (802277c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8022770:	4618      	mov	r0, r3
 8022772:	370c      	adds	r7, #12
 8022774:	46bd      	mov	sp, r7
 8022776:	f85d 7b04 	ldr.w	r7, [sp], #4
 802277a:	4770      	bx	lr
 802277c:	200003d4 	.word	0x200003d4

08022780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8022780:	b480      	push	{r7}
 8022782:	b083      	sub	sp, #12
 8022784:	af00      	add	r7, sp, #0
 8022786:	6078      	str	r0, [r7, #4]
 8022788:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802278a:	683b      	ldr	r3, [r7, #0]
 802278c:	2b00      	cmp	r3, #0
 802278e:	d101      	bne.n	8022794 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8022790:	2303      	movs	r3, #3
 8022792:	e009      	b.n	80227a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802279a:	687a      	ldr	r2, [r7, #4]
 802279c:	33b0      	adds	r3, #176	; 0xb0
 802279e:	009b      	lsls	r3, r3, #2
 80227a0:	4413      	add	r3, r2
 80227a2:	683a      	ldr	r2, [r7, #0]
 80227a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80227a6:	2300      	movs	r3, #0
}
 80227a8:	4618      	mov	r0, r3
 80227aa:	370c      	adds	r7, #12
 80227ac:	46bd      	mov	sp, r7
 80227ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b2:	4770      	bx	lr

080227b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80227b4:	b480      	push	{r7}
 80227b6:	b087      	sub	sp, #28
 80227b8:	af00      	add	r7, sp, #0
 80227ba:	60f8      	str	r0, [r7, #12]
 80227bc:	60b9      	str	r1, [r7, #8]
 80227be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80227c0:	68fb      	ldr	r3, [r7, #12]
 80227c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80227c6:	68fb      	ldr	r3, [r7, #12]
 80227c8:	32b0      	adds	r2, #176	; 0xb0
 80227ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80227ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80227d0:	697b      	ldr	r3, [r7, #20]
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	d101      	bne.n	80227da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80227d6:	2303      	movs	r3, #3
 80227d8:	e008      	b.n	80227ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80227da:	697b      	ldr	r3, [r7, #20]
 80227dc:	68ba      	ldr	r2, [r7, #8]
 80227de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80227e2:	697b      	ldr	r3, [r7, #20]
 80227e4:	687a      	ldr	r2, [r7, #4]
 80227e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80227ea:	2300      	movs	r3, #0
}
 80227ec:	4618      	mov	r0, r3
 80227ee:	371c      	adds	r7, #28
 80227f0:	46bd      	mov	sp, r7
 80227f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227f6:	4770      	bx	lr

080227f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80227f8:	b480      	push	{r7}
 80227fa:	b085      	sub	sp, #20
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	6078      	str	r0, [r7, #4]
 8022800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	32b0      	adds	r2, #176	; 0xb0
 802280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8022812:	68fb      	ldr	r3, [r7, #12]
 8022814:	2b00      	cmp	r3, #0
 8022816:	d101      	bne.n	802281c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8022818:	2303      	movs	r3, #3
 802281a:	e004      	b.n	8022826 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802281c:	68fb      	ldr	r3, [r7, #12]
 802281e:	683a      	ldr	r2, [r7, #0]
 8022820:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8022824:	2300      	movs	r3, #0
}
 8022826:	4618      	mov	r0, r3
 8022828:	3714      	adds	r7, #20
 802282a:	46bd      	mov	sp, r7
 802282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022830:	4770      	bx	lr
	...

08022834 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8022834:	b580      	push	{r7, lr}
 8022836:	b084      	sub	sp, #16
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	32b0      	adds	r2, #176	; 0xb0
 8022846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802284a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802284c:	2301      	movs	r3, #1
 802284e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	32b0      	adds	r2, #176	; 0xb0
 802285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802285e:	2b00      	cmp	r3, #0
 8022860:	d101      	bne.n	8022866 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8022862:	2303      	movs	r3, #3
 8022864:	e025      	b.n	80228b2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802286c:	2b00      	cmp	r3, #0
 802286e:	d11f      	bne.n	80228b0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8022870:	68bb      	ldr	r3, [r7, #8]
 8022872:	2201      	movs	r2, #1
 8022874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8022878:	4b10      	ldr	r3, [pc, #64]	; (80228bc <USBD_CDC_TransmitPacket+0x88>)
 802287a:	781b      	ldrb	r3, [r3, #0]
 802287c:	f003 020f 	and.w	r2, r3, #15
 8022880:	68bb      	ldr	r3, [r7, #8]
 8022882:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8022886:	6878      	ldr	r0, [r7, #4]
 8022888:	4613      	mov	r3, r2
 802288a:	009b      	lsls	r3, r3, #2
 802288c:	4413      	add	r3, r2
 802288e:	009b      	lsls	r3, r3, #2
 8022890:	4403      	add	r3, r0
 8022892:	3318      	adds	r3, #24
 8022894:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8022896:	4b09      	ldr	r3, [pc, #36]	; (80228bc <USBD_CDC_TransmitPacket+0x88>)
 8022898:	7819      	ldrb	r1, [r3, #0]
 802289a:	68bb      	ldr	r3, [r7, #8]
 802289c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80228a0:	68bb      	ldr	r3, [r7, #8]
 80228a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80228a6:	6878      	ldr	r0, [r7, #4]
 80228a8:	f005 faed 	bl	8027e86 <USBD_LL_Transmit>

    ret = USBD_OK;
 80228ac:	2300      	movs	r3, #0
 80228ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80228b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80228b2:	4618      	mov	r0, r3
 80228b4:	3710      	adds	r7, #16
 80228b6:	46bd      	mov	sp, r7
 80228b8:	bd80      	pop	{r7, pc}
 80228ba:	bf00      	nop
 80228bc:	2000045b 	.word	0x2000045b

080228c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80228c0:	b580      	push	{r7, lr}
 80228c2:	b084      	sub	sp, #16
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	32b0      	adds	r2, #176	; 0xb0
 80228d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80228d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	32b0      	adds	r2, #176	; 0xb0
 80228e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d101      	bne.n	80228ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80228ea:	2303      	movs	r3, #3
 80228ec:	e018      	b.n	8022920 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	7c1b      	ldrb	r3, [r3, #16]
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d10a      	bne.n	802290c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80228f6:	4b0c      	ldr	r3, [pc, #48]	; (8022928 <USBD_CDC_ReceivePacket+0x68>)
 80228f8:	7819      	ldrb	r1, [r3, #0]
 80228fa:	68fb      	ldr	r3, [r7, #12]
 80228fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8022900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022904:	6878      	ldr	r0, [r7, #4]
 8022906:	f005 fadf 	bl	8027ec8 <USBD_LL_PrepareReceive>
 802290a:	e008      	b.n	802291e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802290c:	4b06      	ldr	r3, [pc, #24]	; (8022928 <USBD_CDC_ReceivePacket+0x68>)
 802290e:	7819      	ldrb	r1, [r3, #0]
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8022916:	2340      	movs	r3, #64	; 0x40
 8022918:	6878      	ldr	r0, [r7, #4]
 802291a:	f005 fad5 	bl	8027ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802291e:	2300      	movs	r3, #0
}
 8022920:	4618      	mov	r0, r3
 8022922:	3710      	adds	r7, #16
 8022924:	46bd      	mov	sp, r7
 8022926:	bd80      	pop	{r7, pc}
 8022928:	2000045c 	.word	0x2000045c

0802292c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802292c:	b580      	push	{r7, lr}
 802292e:	b086      	sub	sp, #24
 8022930:	af00      	add	r7, sp, #0
 8022932:	60f8      	str	r0, [r7, #12]
 8022934:	60b9      	str	r1, [r7, #8]
 8022936:	4613      	mov	r3, r2
 8022938:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	2b00      	cmp	r3, #0
 802293e:	d101      	bne.n	8022944 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8022940:	2303      	movs	r3, #3
 8022942:	e01f      	b.n	8022984 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8022944:	68fb      	ldr	r3, [r7, #12]
 8022946:	2200      	movs	r2, #0
 8022948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802294c:	68fb      	ldr	r3, [r7, #12]
 802294e:	2200      	movs	r2, #0
 8022950:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8022954:	68fb      	ldr	r3, [r7, #12]
 8022956:	2200      	movs	r2, #0
 8022958:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802295c:	68bb      	ldr	r3, [r7, #8]
 802295e:	2b00      	cmp	r3, #0
 8022960:	d003      	beq.n	802296a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8022962:	68fb      	ldr	r3, [r7, #12]
 8022964:	68ba      	ldr	r2, [r7, #8]
 8022966:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	2201      	movs	r2, #1
 802296e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8022972:	68fb      	ldr	r3, [r7, #12]
 8022974:	79fa      	ldrb	r2, [r7, #7]
 8022976:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8022978:	68f8      	ldr	r0, [r7, #12]
 802297a:	f005 f94f 	bl	8027c1c <USBD_LL_Init>
 802297e:	4603      	mov	r3, r0
 8022980:	75fb      	strb	r3, [r7, #23]

  return ret;
 8022982:	7dfb      	ldrb	r3, [r7, #23]
}
 8022984:	4618      	mov	r0, r3
 8022986:	3718      	adds	r7, #24
 8022988:	46bd      	mov	sp, r7
 802298a:	bd80      	pop	{r7, pc}

0802298c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802298c:	b580      	push	{r7, lr}
 802298e:	b084      	sub	sp, #16
 8022990:	af00      	add	r7, sp, #0
 8022992:	6078      	str	r0, [r7, #4]
 8022994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022996:	2300      	movs	r3, #0
 8022998:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802299a:	683b      	ldr	r3, [r7, #0]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d101      	bne.n	80229a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80229a0:	2303      	movs	r3, #3
 80229a2:	e025      	b.n	80229f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	683a      	ldr	r2, [r7, #0]
 80229a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	32ae      	adds	r2, #174	; 0xae
 80229b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80229ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d00f      	beq.n	80229e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	32ae      	adds	r2, #174	; 0xae
 80229ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80229ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229d0:	f107 020e 	add.w	r2, r7, #14
 80229d4:	4610      	mov	r0, r2
 80229d6:	4798      	blx	r3
 80229d8:	4602      	mov	r2, r0
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80229e6:	1c5a      	adds	r2, r3, #1
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80229ee:	2300      	movs	r3, #0
}
 80229f0:	4618      	mov	r0, r3
 80229f2:	3710      	adds	r7, #16
 80229f4:	46bd      	mov	sp, r7
 80229f6:	bd80      	pop	{r7, pc}

080229f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80229f8:	b580      	push	{r7, lr}
 80229fa:	b082      	sub	sp, #8
 80229fc:	af00      	add	r7, sp, #0
 80229fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8022a00:	6878      	ldr	r0, [r7, #4]
 8022a02:	f005 f957 	bl	8027cb4 <USBD_LL_Start>
 8022a06:	4603      	mov	r3, r0
}
 8022a08:	4618      	mov	r0, r3
 8022a0a:	3708      	adds	r7, #8
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	bd80      	pop	{r7, pc}

08022a10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8022a10:	b480      	push	{r7}
 8022a12:	b083      	sub	sp, #12
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8022a18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8022a1a:	4618      	mov	r0, r3
 8022a1c:	370c      	adds	r7, #12
 8022a1e:	46bd      	mov	sp, r7
 8022a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a24:	4770      	bx	lr

08022a26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8022a26:	b580      	push	{r7, lr}
 8022a28:	b084      	sub	sp, #16
 8022a2a:	af00      	add	r7, sp, #0
 8022a2c:	6078      	str	r0, [r7, #4]
 8022a2e:	460b      	mov	r3, r1
 8022a30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8022a32:	2300      	movs	r3, #0
 8022a34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	d009      	beq.n	8022a54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	78fa      	ldrb	r2, [r7, #3]
 8022a4a:	4611      	mov	r1, r2
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	4798      	blx	r3
 8022a50:	4603      	mov	r3, r0
 8022a52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8022a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a56:	4618      	mov	r0, r3
 8022a58:	3710      	adds	r7, #16
 8022a5a:	46bd      	mov	sp, r7
 8022a5c:	bd80      	pop	{r7, pc}

08022a5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8022a5e:	b580      	push	{r7, lr}
 8022a60:	b084      	sub	sp, #16
 8022a62:	af00      	add	r7, sp, #0
 8022a64:	6078      	str	r0, [r7, #4]
 8022a66:	460b      	mov	r3, r1
 8022a68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022a74:	685b      	ldr	r3, [r3, #4]
 8022a76:	78fa      	ldrb	r2, [r7, #3]
 8022a78:	4611      	mov	r1, r2
 8022a7a:	6878      	ldr	r0, [r7, #4]
 8022a7c:	4798      	blx	r3
 8022a7e:	4603      	mov	r3, r0
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d001      	beq.n	8022a88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8022a84:	2303      	movs	r3, #3
 8022a86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8022a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a8a:	4618      	mov	r0, r3
 8022a8c:	3710      	adds	r7, #16
 8022a8e:	46bd      	mov	sp, r7
 8022a90:	bd80      	pop	{r7, pc}

08022a92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8022a92:	b580      	push	{r7, lr}
 8022a94:	b084      	sub	sp, #16
 8022a96:	af00      	add	r7, sp, #0
 8022a98:	6078      	str	r0, [r7, #4]
 8022a9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8022aa2:	6839      	ldr	r1, [r7, #0]
 8022aa4:	4618      	mov	r0, r3
 8022aa6:	f001 f910 	bl	8023cca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	2201      	movs	r2, #1
 8022aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8022ab8:	461a      	mov	r2, r3
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8022ac6:	f003 031f 	and.w	r3, r3, #31
 8022aca:	2b02      	cmp	r3, #2
 8022acc:	d01a      	beq.n	8022b04 <USBD_LL_SetupStage+0x72>
 8022ace:	2b02      	cmp	r3, #2
 8022ad0:	d822      	bhi.n	8022b18 <USBD_LL_SetupStage+0x86>
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d002      	beq.n	8022adc <USBD_LL_SetupStage+0x4a>
 8022ad6:	2b01      	cmp	r3, #1
 8022ad8:	d00a      	beq.n	8022af0 <USBD_LL_SetupStage+0x5e>
 8022ada:	e01d      	b.n	8022b18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8022ae2:	4619      	mov	r1, r3
 8022ae4:	6878      	ldr	r0, [r7, #4]
 8022ae6:	f000 fb63 	bl	80231b0 <USBD_StdDevReq>
 8022aea:	4603      	mov	r3, r0
 8022aec:	73fb      	strb	r3, [r7, #15]
      break;
 8022aee:	e020      	b.n	8022b32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8022af6:	4619      	mov	r1, r3
 8022af8:	6878      	ldr	r0, [r7, #4]
 8022afa:	f000 fbcb 	bl	8023294 <USBD_StdItfReq>
 8022afe:	4603      	mov	r3, r0
 8022b00:	73fb      	strb	r3, [r7, #15]
      break;
 8022b02:	e016      	b.n	8022b32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8022b0a:	4619      	mov	r1, r3
 8022b0c:	6878      	ldr	r0, [r7, #4]
 8022b0e:	f000 fc2d 	bl	802336c <USBD_StdEPReq>
 8022b12:	4603      	mov	r3, r0
 8022b14:	73fb      	strb	r3, [r7, #15]
      break;
 8022b16:	e00c      	b.n	8022b32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8022b1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8022b22:	b2db      	uxtb	r3, r3
 8022b24:	4619      	mov	r1, r3
 8022b26:	6878      	ldr	r0, [r7, #4]
 8022b28:	f005 f924 	bl	8027d74 <USBD_LL_StallEP>
 8022b2c:	4603      	mov	r3, r0
 8022b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8022b30:	bf00      	nop
  }

  return ret;
 8022b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b34:	4618      	mov	r0, r3
 8022b36:	3710      	adds	r7, #16
 8022b38:	46bd      	mov	sp, r7
 8022b3a:	bd80      	pop	{r7, pc}

08022b3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8022b3c:	b580      	push	{r7, lr}
 8022b3e:	b088      	sub	sp, #32
 8022b40:	af00      	add	r7, sp, #0
 8022b42:	60f8      	str	r0, [r7, #12]
 8022b44:	460b      	mov	r3, r1
 8022b46:	607a      	str	r2, [r7, #4]
 8022b48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	77fb      	strb	r3, [r7, #31]
  uint8_t idx;

  if (epnum == 0U)
 8022b4e:	7afb      	ldrb	r3, [r7, #11]
 8022b50:	2b00      	cmp	r3, #0
 8022b52:	d172      	bne.n	8022c3a <USBD_LL_DataOutStage+0xfe>
  {
    pep = &pdev->ep_out[0];
 8022b54:	68fb      	ldr	r3, [r7, #12]
 8022b56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8022b5a:	61bb      	str	r3, [r7, #24]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8022b62:	2b03      	cmp	r3, #3
 8022b64:	f040 809c 	bne.w	8022ca0 <USBD_LL_DataOutStage+0x164>
    {
      if (pep->rem_length > pep->maxpacket)
 8022b68:	69bb      	ldr	r3, [r7, #24]
 8022b6a:	689a      	ldr	r2, [r3, #8]
 8022b6c:	69bb      	ldr	r3, [r7, #24]
 8022b6e:	68db      	ldr	r3, [r3, #12]
 8022b70:	429a      	cmp	r2, r3
 8022b72:	d917      	bls.n	8022ba4 <USBD_LL_DataOutStage+0x68>
      {
        pep->rem_length -= pep->maxpacket;
 8022b74:	69bb      	ldr	r3, [r7, #24]
 8022b76:	689a      	ldr	r2, [r3, #8]
 8022b78:	69bb      	ldr	r3, [r7, #24]
 8022b7a:	68db      	ldr	r3, [r3, #12]
 8022b7c:	1ad2      	subs	r2, r2, r3
 8022b7e:	69bb      	ldr	r3, [r7, #24]
 8022b80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8022b82:	69bb      	ldr	r3, [r7, #24]
 8022b84:	689b      	ldr	r3, [r3, #8]
 8022b86:	617b      	str	r3, [r7, #20]
 8022b88:	69bb      	ldr	r3, [r7, #24]
 8022b8a:	68db      	ldr	r3, [r3, #12]
 8022b8c:	613b      	str	r3, [r7, #16]
 8022b8e:	693a      	ldr	r2, [r7, #16]
 8022b90:	697b      	ldr	r3, [r7, #20]
 8022b92:	4293      	cmp	r3, r2
 8022b94:	bf28      	it	cs
 8022b96:	4613      	movcs	r3, r2
 8022b98:	461a      	mov	r2, r3
 8022b9a:	6879      	ldr	r1, [r7, #4]
 8022b9c:	68f8      	ldr	r0, [r7, #12]
 8022b9e:	f001 f988 	bl	8023eb2 <USBD_CtlContinueRx>
 8022ba2:	e07d      	b.n	8022ca0 <USBD_LL_DataOutStage+0x164>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8022ba4:	68fb      	ldr	r3, [r7, #12]
 8022ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8022baa:	f003 031f 	and.w	r3, r3, #31
 8022bae:	2b02      	cmp	r3, #2
 8022bb0:	d014      	beq.n	8022bdc <USBD_LL_DataOutStage+0xa0>
 8022bb2:	2b02      	cmp	r3, #2
 8022bb4:	d81d      	bhi.n	8022bf2 <USBD_LL_DataOutStage+0xb6>
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d002      	beq.n	8022bc0 <USBD_LL_DataOutStage+0x84>
 8022bba:	2b01      	cmp	r3, #1
 8022bbc:	d003      	beq.n	8022bc6 <USBD_LL_DataOutStage+0x8a>
 8022bbe:	e018      	b.n	8022bf2 <USBD_LL_DataOutStage+0xb6>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8022bc0:	2300      	movs	r3, #0
 8022bc2:	77bb      	strb	r3, [r7, #30]
            break;
 8022bc4:	e018      	b.n	8022bf8 <USBD_LL_DataOutStage+0xbc>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8022bc6:	68fb      	ldr	r3, [r7, #12]
 8022bc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8022bcc:	b2db      	uxtb	r3, r3
 8022bce:	4619      	mov	r1, r3
 8022bd0:	68f8      	ldr	r0, [r7, #12]
 8022bd2:	f000 fa5e 	bl	8023092 <USBD_CoreFindIF>
 8022bd6:	4603      	mov	r3, r0
 8022bd8:	77bb      	strb	r3, [r7, #30]
            break;
 8022bda:	e00d      	b.n	8022bf8 <USBD_LL_DataOutStage+0xbc>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8022bdc:	68fb      	ldr	r3, [r7, #12]
 8022bde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8022be2:	b2db      	uxtb	r3, r3
 8022be4:	4619      	mov	r1, r3
 8022be6:	68f8      	ldr	r0, [r7, #12]
 8022be8:	f000 fa60 	bl	80230ac <USBD_CoreFindEP>
 8022bec:	4603      	mov	r3, r0
 8022bee:	77bb      	strb	r3, [r7, #30]
            break;
 8022bf0:	e002      	b.n	8022bf8 <USBD_LL_DataOutStage+0xbc>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	77bb      	strb	r3, [r7, #30]
            break;
 8022bf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8022bf8:	7fbb      	ldrb	r3, [r7, #30]
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	d119      	bne.n	8022c32 <USBD_LL_DataOutStage+0xf6>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022bfe:	68fb      	ldr	r3, [r7, #12]
 8022c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022c04:	b2db      	uxtb	r3, r3
 8022c06:	2b03      	cmp	r3, #3
 8022c08:	d113      	bne.n	8022c32 <USBD_LL_DataOutStage+0xf6>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8022c0a:	7fba      	ldrb	r2, [r7, #30]
 8022c0c:	68fb      	ldr	r3, [r7, #12]
 8022c0e:	32ae      	adds	r2, #174	; 0xae
 8022c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c14:	691b      	ldr	r3, [r3, #16]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d00b      	beq.n	8022c32 <USBD_LL_DataOutStage+0xf6>
            {
              pdev->classId = idx;
 8022c1a:	7fba      	ldrb	r2, [r7, #30]
 8022c1c:	68fb      	ldr	r3, [r7, #12]
 8022c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8022c22:	7fba      	ldrb	r2, [r7, #30]
 8022c24:	68fb      	ldr	r3, [r7, #12]
 8022c26:	32ae      	adds	r2, #174	; 0xae
 8022c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c2c:	691b      	ldr	r3, [r3, #16]
 8022c2e:	68f8      	ldr	r0, [r7, #12]
 8022c30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8022c32:	68f8      	ldr	r0, [r7, #12]
 8022c34:	f001 f94e 	bl	8023ed4 <USBD_CtlSendStatus>
 8022c38:	e032      	b.n	8022ca0 <USBD_LL_DataOutStage+0x164>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8022c3a:	7afb      	ldrb	r3, [r7, #11]
 8022c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022c40:	b2db      	uxtb	r3, r3
 8022c42:	4619      	mov	r1, r3
 8022c44:	68f8      	ldr	r0, [r7, #12]
 8022c46:	f000 fa31 	bl	80230ac <USBD_CoreFindEP>
 8022c4a:	4603      	mov	r3, r0
 8022c4c:	77bb      	strb	r3, [r7, #30]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8022c4e:	7fbb      	ldrb	r3, [r7, #30]
 8022c50:	2bff      	cmp	r3, #255	; 0xff
 8022c52:	d025      	beq.n	8022ca0 <USBD_LL_DataOutStage+0x164>
 8022c54:	7fbb      	ldrb	r3, [r7, #30]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d122      	bne.n	8022ca0 <USBD_LL_DataOutStage+0x164>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022c60:	b2db      	uxtb	r3, r3
 8022c62:	2b03      	cmp	r3, #3
 8022c64:	d117      	bne.n	8022c96 <USBD_LL_DataOutStage+0x15a>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8022c66:	7fba      	ldrb	r2, [r7, #30]
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	32ae      	adds	r2, #174	; 0xae
 8022c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c70:	699b      	ldr	r3, [r3, #24]
 8022c72:	2b00      	cmp	r3, #0
 8022c74:	d00f      	beq.n	8022c96 <USBD_LL_DataOutStage+0x15a>
        {
          pdev->classId = idx;
 8022c76:	7fba      	ldrb	r2, [r7, #30]
 8022c78:	68fb      	ldr	r3, [r7, #12]
 8022c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8022c7e:	7fba      	ldrb	r2, [r7, #30]
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	32ae      	adds	r2, #174	; 0xae
 8022c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c88:	699b      	ldr	r3, [r3, #24]
 8022c8a:	7afa      	ldrb	r2, [r7, #11]
 8022c8c:	4611      	mov	r1, r2
 8022c8e:	68f8      	ldr	r0, [r7, #12]
 8022c90:	4798      	blx	r3
 8022c92:	4603      	mov	r3, r0
 8022c94:	77fb      	strb	r3, [r7, #31]
        }
      }
      if (ret != USBD_OK)
 8022c96:	7ffb      	ldrb	r3, [r7, #31]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d001      	beq.n	8022ca0 <USBD_LL_DataOutStage+0x164>
      {
        return ret;
 8022c9c:	7ffb      	ldrb	r3, [r7, #31]
 8022c9e:	e000      	b.n	8022ca2 <USBD_LL_DataOutStage+0x166>
      }
    }
  }

  return USBD_OK;
 8022ca0:	2300      	movs	r3, #0
}
 8022ca2:	4618      	mov	r0, r3
 8022ca4:	3720      	adds	r7, #32
 8022ca6:	46bd      	mov	sp, r7
 8022ca8:	bd80      	pop	{r7, pc}

08022caa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8022caa:	b580      	push	{r7, lr}
 8022cac:	b086      	sub	sp, #24
 8022cae:	af00      	add	r7, sp, #0
 8022cb0:	60f8      	str	r0, [r7, #12]
 8022cb2:	460b      	mov	r3, r1
 8022cb4:	607a      	str	r2, [r7, #4]
 8022cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8022cb8:	7afb      	ldrb	r3, [r7, #11]
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d16f      	bne.n	8022d9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	3314      	adds	r3, #20
 8022cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8022cc4:	68fb      	ldr	r3, [r7, #12]
 8022cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8022cca:	2b02      	cmp	r3, #2
 8022ccc:	d15a      	bne.n	8022d84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8022cce:	693b      	ldr	r3, [r7, #16]
 8022cd0:	689a      	ldr	r2, [r3, #8]
 8022cd2:	693b      	ldr	r3, [r7, #16]
 8022cd4:	68db      	ldr	r3, [r3, #12]
 8022cd6:	429a      	cmp	r2, r3
 8022cd8:	d914      	bls.n	8022d04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8022cda:	693b      	ldr	r3, [r7, #16]
 8022cdc:	689a      	ldr	r2, [r3, #8]
 8022cde:	693b      	ldr	r3, [r7, #16]
 8022ce0:	68db      	ldr	r3, [r3, #12]
 8022ce2:	1ad2      	subs	r2, r2, r3
 8022ce4:	693b      	ldr	r3, [r7, #16]
 8022ce6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8022ce8:	693b      	ldr	r3, [r7, #16]
 8022cea:	689b      	ldr	r3, [r3, #8]
 8022cec:	461a      	mov	r2, r3
 8022cee:	6879      	ldr	r1, [r7, #4]
 8022cf0:	68f8      	ldr	r0, [r7, #12]
 8022cf2:	f001 f8b0 	bl	8023e56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	2200      	movs	r2, #0
 8022cfa:	2100      	movs	r1, #0
 8022cfc:	68f8      	ldr	r0, [r7, #12]
 8022cfe:	f005 f8e3 	bl	8027ec8 <USBD_LL_PrepareReceive>
 8022d02:	e03f      	b.n	8022d84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8022d04:	693b      	ldr	r3, [r7, #16]
 8022d06:	68da      	ldr	r2, [r3, #12]
 8022d08:	693b      	ldr	r3, [r7, #16]
 8022d0a:	689b      	ldr	r3, [r3, #8]
 8022d0c:	429a      	cmp	r2, r3
 8022d0e:	d11c      	bne.n	8022d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8022d10:	693b      	ldr	r3, [r7, #16]
 8022d12:	685a      	ldr	r2, [r3, #4]
 8022d14:	693b      	ldr	r3, [r7, #16]
 8022d16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8022d18:	429a      	cmp	r2, r3
 8022d1a:	d316      	bcc.n	8022d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8022d1c:	693b      	ldr	r3, [r7, #16]
 8022d1e:	685a      	ldr	r2, [r3, #4]
 8022d20:	68fb      	ldr	r3, [r7, #12]
 8022d22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8022d26:	429a      	cmp	r2, r3
 8022d28:	d20f      	bcs.n	8022d4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8022d2a:	2200      	movs	r2, #0
 8022d2c:	2100      	movs	r1, #0
 8022d2e:	68f8      	ldr	r0, [r7, #12]
 8022d30:	f001 f891 	bl	8023e56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	2200      	movs	r2, #0
 8022d38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022d3c:	2300      	movs	r3, #0
 8022d3e:	2200      	movs	r2, #0
 8022d40:	2100      	movs	r1, #0
 8022d42:	68f8      	ldr	r0, [r7, #12]
 8022d44:	f005 f8c0 	bl	8027ec8 <USBD_LL_PrepareReceive>
 8022d48:	e01c      	b.n	8022d84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022d50:	b2db      	uxtb	r3, r3
 8022d52:	2b03      	cmp	r3, #3
 8022d54:	d10f      	bne.n	8022d76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8022d56:	68fb      	ldr	r3, [r7, #12]
 8022d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022d5c:	68db      	ldr	r3, [r3, #12]
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	d009      	beq.n	8022d76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8022d62:	68fb      	ldr	r3, [r7, #12]
 8022d64:	2200      	movs	r2, #0
 8022d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8022d6a:	68fb      	ldr	r3, [r7, #12]
 8022d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022d70:	68db      	ldr	r3, [r3, #12]
 8022d72:	68f8      	ldr	r0, [r7, #12]
 8022d74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8022d76:	2180      	movs	r1, #128	; 0x80
 8022d78:	68f8      	ldr	r0, [r7, #12]
 8022d7a:	f004 fffb 	bl	8027d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8022d7e:	68f8      	ldr	r0, [r7, #12]
 8022d80:	f001 f8bb 	bl	8023efa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8022d84:	68fb      	ldr	r3, [r7, #12]
 8022d86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d03a      	beq.n	8022e04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8022d8e:	68f8      	ldr	r0, [r7, #12]
 8022d90:	f7ff fe3e 	bl	8022a10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8022d94:	68fb      	ldr	r3, [r7, #12]
 8022d96:	2200      	movs	r2, #0
 8022d98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8022d9c:	e032      	b.n	8022e04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8022d9e:	7afb      	ldrb	r3, [r7, #11]
 8022da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8022da4:	b2db      	uxtb	r3, r3
 8022da6:	4619      	mov	r1, r3
 8022da8:	68f8      	ldr	r0, [r7, #12]
 8022daa:	f000 f97f 	bl	80230ac <USBD_CoreFindEP>
 8022dae:	4603      	mov	r3, r0
 8022db0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8022db2:	7dfb      	ldrb	r3, [r7, #23]
 8022db4:	2bff      	cmp	r3, #255	; 0xff
 8022db6:	d025      	beq.n	8022e04 <USBD_LL_DataInStage+0x15a>
 8022db8:	7dfb      	ldrb	r3, [r7, #23]
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	d122      	bne.n	8022e04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022dbe:	68fb      	ldr	r3, [r7, #12]
 8022dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022dc4:	b2db      	uxtb	r3, r3
 8022dc6:	2b03      	cmp	r3, #3
 8022dc8:	d11c      	bne.n	8022e04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8022dca:	7dfa      	ldrb	r2, [r7, #23]
 8022dcc:	68fb      	ldr	r3, [r7, #12]
 8022dce:	32ae      	adds	r2, #174	; 0xae
 8022dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022dd4:	695b      	ldr	r3, [r3, #20]
 8022dd6:	2b00      	cmp	r3, #0
 8022dd8:	d014      	beq.n	8022e04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8022dda:	7dfa      	ldrb	r2, [r7, #23]
 8022ddc:	68fb      	ldr	r3, [r7, #12]
 8022dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8022de2:	7dfa      	ldrb	r2, [r7, #23]
 8022de4:	68fb      	ldr	r3, [r7, #12]
 8022de6:	32ae      	adds	r2, #174	; 0xae
 8022de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022dec:	695b      	ldr	r3, [r3, #20]
 8022dee:	7afa      	ldrb	r2, [r7, #11]
 8022df0:	4611      	mov	r1, r2
 8022df2:	68f8      	ldr	r0, [r7, #12]
 8022df4:	4798      	blx	r3
 8022df6:	4603      	mov	r3, r0
 8022df8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8022dfa:	7dbb      	ldrb	r3, [r7, #22]
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d001      	beq.n	8022e04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8022e00:	7dbb      	ldrb	r3, [r7, #22]
 8022e02:	e000      	b.n	8022e06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8022e04:	2300      	movs	r3, #0
}
 8022e06:	4618      	mov	r0, r3
 8022e08:	3718      	adds	r7, #24
 8022e0a:	46bd      	mov	sp, r7
 8022e0c:	bd80      	pop	{r7, pc}

08022e0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8022e0e:	b580      	push	{r7, lr}
 8022e10:	b084      	sub	sp, #16
 8022e12:	af00      	add	r7, sp, #0
 8022e14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8022e16:	2300      	movs	r3, #0
 8022e18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8022e1a:	687b      	ldr	r3, [r7, #4]
 8022e1c:	2201      	movs	r2, #1
 8022e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	2200      	movs	r2, #0
 8022e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	2200      	movs	r2, #0
 8022e2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	2200      	movs	r2, #0
 8022e34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d014      	beq.n	8022e74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8022e4a:	687b      	ldr	r3, [r7, #4]
 8022e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022e50:	685b      	ldr	r3, [r3, #4]
 8022e52:	2b00      	cmp	r3, #0
 8022e54:	d00e      	beq.n	8022e74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022e5c:	685b      	ldr	r3, [r3, #4]
 8022e5e:	687a      	ldr	r2, [r7, #4]
 8022e60:	6852      	ldr	r2, [r2, #4]
 8022e62:	b2d2      	uxtb	r2, r2
 8022e64:	4611      	mov	r1, r2
 8022e66:	6878      	ldr	r0, [r7, #4]
 8022e68:	4798      	blx	r3
 8022e6a:	4603      	mov	r3, r0
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	d001      	beq.n	8022e74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8022e70:	2303      	movs	r3, #3
 8022e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8022e74:	2340      	movs	r3, #64	; 0x40
 8022e76:	2200      	movs	r2, #0
 8022e78:	2100      	movs	r1, #0
 8022e7a:	6878      	ldr	r0, [r7, #4]
 8022e7c:	f004 ff35 	bl	8027cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8022e80:	687b      	ldr	r3, [r7, #4]
 8022e82:	2201      	movs	r2, #1
 8022e84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	2240      	movs	r2, #64	; 0x40
 8022e8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8022e90:	2340      	movs	r3, #64	; 0x40
 8022e92:	2200      	movs	r2, #0
 8022e94:	2180      	movs	r1, #128	; 0x80
 8022e96:	6878      	ldr	r0, [r7, #4]
 8022e98:	f004 ff27 	bl	8027cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	2201      	movs	r2, #1
 8022ea0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	2240      	movs	r2, #64	; 0x40
 8022ea6:	621a      	str	r2, [r3, #32]

  return ret;
 8022ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8022eaa:	4618      	mov	r0, r3
 8022eac:	3710      	adds	r7, #16
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	bd80      	pop	{r7, pc}

08022eb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8022eb2:	b480      	push	{r7}
 8022eb4:	b083      	sub	sp, #12
 8022eb6:	af00      	add	r7, sp, #0
 8022eb8:	6078      	str	r0, [r7, #4]
 8022eba:	460b      	mov	r3, r1
 8022ebc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	78fa      	ldrb	r2, [r7, #3]
 8022ec2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022ec4:	2300      	movs	r3, #0
}
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	370c      	adds	r7, #12
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed0:	4770      	bx	lr

08022ed2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022ed2:	b480      	push	{r7}
 8022ed4:	b083      	sub	sp, #12
 8022ed6:	af00      	add	r7, sp, #0
 8022ed8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022ee0:	b2da      	uxtb	r2, r3
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	2204      	movs	r2, #4
 8022eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8022ef0:	2300      	movs	r3, #0
}
 8022ef2:	4618      	mov	r0, r3
 8022ef4:	370c      	adds	r7, #12
 8022ef6:	46bd      	mov	sp, r7
 8022ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022efc:	4770      	bx	lr

08022efe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8022efe:	b480      	push	{r7}
 8022f00:	b083      	sub	sp, #12
 8022f02:	af00      	add	r7, sp, #0
 8022f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022f0c:	b2db      	uxtb	r3, r3
 8022f0e:	2b04      	cmp	r3, #4
 8022f10:	d106      	bne.n	8022f20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8022f18:	b2da      	uxtb	r2, r3
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8022f20:	2300      	movs	r3, #0
}
 8022f22:	4618      	mov	r0, r3
 8022f24:	370c      	adds	r7, #12
 8022f26:	46bd      	mov	sp, r7
 8022f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f2c:	4770      	bx	lr

08022f2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8022f2e:	b580      	push	{r7, lr}
 8022f30:	b082      	sub	sp, #8
 8022f32:	af00      	add	r7, sp, #0
 8022f34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022f3c:	b2db      	uxtb	r3, r3
 8022f3e:	2b03      	cmp	r3, #3
 8022f40:	d110      	bne.n	8022f64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	d00b      	beq.n	8022f64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022f52:	69db      	ldr	r3, [r3, #28]
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	d005      	beq.n	8022f64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022f5e:	69db      	ldr	r3, [r3, #28]
 8022f60:	6878      	ldr	r0, [r7, #4]
 8022f62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8022f64:	2300      	movs	r3, #0
}
 8022f66:	4618      	mov	r0, r3
 8022f68:	3708      	adds	r7, #8
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	bd80      	pop	{r7, pc}

08022f6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8022f6e:	b580      	push	{r7, lr}
 8022f70:	b082      	sub	sp, #8
 8022f72:	af00      	add	r7, sp, #0
 8022f74:	6078      	str	r0, [r7, #4]
 8022f76:	460b      	mov	r3, r1
 8022f78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	32ae      	adds	r2, #174	; 0xae
 8022f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	d101      	bne.n	8022f90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8022f8c:	2303      	movs	r3, #3
 8022f8e:	e01c      	b.n	8022fca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022f90:	687b      	ldr	r3, [r7, #4]
 8022f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022f96:	b2db      	uxtb	r3, r3
 8022f98:	2b03      	cmp	r3, #3
 8022f9a:	d115      	bne.n	8022fc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	32ae      	adds	r2, #174	; 0xae
 8022fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022faa:	6a1b      	ldr	r3, [r3, #32]
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d00b      	beq.n	8022fc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	32ae      	adds	r2, #174	; 0xae
 8022fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022fbe:	6a1b      	ldr	r3, [r3, #32]
 8022fc0:	78fa      	ldrb	r2, [r7, #3]
 8022fc2:	4611      	mov	r1, r2
 8022fc4:	6878      	ldr	r0, [r7, #4]
 8022fc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8022fc8:	2300      	movs	r3, #0
}
 8022fca:	4618      	mov	r0, r3
 8022fcc:	3708      	adds	r7, #8
 8022fce:	46bd      	mov	sp, r7
 8022fd0:	bd80      	pop	{r7, pc}

08022fd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8022fd2:	b580      	push	{r7, lr}
 8022fd4:	b082      	sub	sp, #8
 8022fd6:	af00      	add	r7, sp, #0
 8022fd8:	6078      	str	r0, [r7, #4]
 8022fda:	460b      	mov	r3, r1
 8022fdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	32ae      	adds	r2, #174	; 0xae
 8022fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022fec:	2b00      	cmp	r3, #0
 8022fee:	d101      	bne.n	8022ff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8022ff0:	2303      	movs	r3, #3
 8022ff2:	e01c      	b.n	802302e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022ffa:	b2db      	uxtb	r3, r3
 8022ffc:	2b03      	cmp	r3, #3
 8022ffe:	d115      	bne.n	802302c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	32ae      	adds	r2, #174	; 0xae
 802300a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023010:	2b00      	cmp	r3, #0
 8023012:	d00b      	beq.n	802302c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	32ae      	adds	r2, #174	; 0xae
 802301e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023024:	78fa      	ldrb	r2, [r7, #3]
 8023026:	4611      	mov	r1, r2
 8023028:	6878      	ldr	r0, [r7, #4]
 802302a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802302c:	2300      	movs	r3, #0
}
 802302e:	4618      	mov	r0, r3
 8023030:	3708      	adds	r7, #8
 8023032:	46bd      	mov	sp, r7
 8023034:	bd80      	pop	{r7, pc}

08023036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8023036:	b480      	push	{r7}
 8023038:	b083      	sub	sp, #12
 802303a:	af00      	add	r7, sp, #0
 802303c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802303e:	2300      	movs	r3, #0
}
 8023040:	4618      	mov	r0, r3
 8023042:	370c      	adds	r7, #12
 8023044:	46bd      	mov	sp, r7
 8023046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802304a:	4770      	bx	lr

0802304c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802304c:	b580      	push	{r7, lr}
 802304e:	b084      	sub	sp, #16
 8023050:	af00      	add	r7, sp, #0
 8023052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8023054:	2300      	movs	r3, #0
 8023056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	2201      	movs	r2, #1
 802305c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8023066:	2b00      	cmp	r3, #0
 8023068:	d00e      	beq.n	8023088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8023070:	685b      	ldr	r3, [r3, #4]
 8023072:	687a      	ldr	r2, [r7, #4]
 8023074:	6852      	ldr	r2, [r2, #4]
 8023076:	b2d2      	uxtb	r2, r2
 8023078:	4611      	mov	r1, r2
 802307a:	6878      	ldr	r0, [r7, #4]
 802307c:	4798      	blx	r3
 802307e:	4603      	mov	r3, r0
 8023080:	2b00      	cmp	r3, #0
 8023082:	d001      	beq.n	8023088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8023084:	2303      	movs	r3, #3
 8023086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8023088:	7bfb      	ldrb	r3, [r7, #15]
}
 802308a:	4618      	mov	r0, r3
 802308c:	3710      	adds	r7, #16
 802308e:	46bd      	mov	sp, r7
 8023090:	bd80      	pop	{r7, pc}

08023092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8023092:	b480      	push	{r7}
 8023094:	b083      	sub	sp, #12
 8023096:	af00      	add	r7, sp, #0
 8023098:	6078      	str	r0, [r7, #4]
 802309a:	460b      	mov	r3, r1
 802309c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802309e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80230a0:	4618      	mov	r0, r3
 80230a2:	370c      	adds	r7, #12
 80230a4:	46bd      	mov	sp, r7
 80230a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230aa:	4770      	bx	lr

080230ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80230ac:	b480      	push	{r7}
 80230ae:	b083      	sub	sp, #12
 80230b0:	af00      	add	r7, sp, #0
 80230b2:	6078      	str	r0, [r7, #4]
 80230b4:	460b      	mov	r3, r1
 80230b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80230b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80230ba:	4618      	mov	r0, r3
 80230bc:	370c      	adds	r7, #12
 80230be:	46bd      	mov	sp, r7
 80230c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230c4:	4770      	bx	lr

080230c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80230c6:	b580      	push	{r7, lr}
 80230c8:	b086      	sub	sp, #24
 80230ca:	af00      	add	r7, sp, #0
 80230cc:	6078      	str	r0, [r7, #4]
 80230ce:	460b      	mov	r3, r1
 80230d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80230da:	2300      	movs	r3, #0
 80230dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80230de:	68fb      	ldr	r3, [r7, #12]
 80230e0:	885b      	ldrh	r3, [r3, #2]
 80230e2:	b29a      	uxth	r2, r3
 80230e4:	68fb      	ldr	r3, [r7, #12]
 80230e6:	781b      	ldrb	r3, [r3, #0]
 80230e8:	b29b      	uxth	r3, r3
 80230ea:	429a      	cmp	r2, r3
 80230ec:	d920      	bls.n	8023130 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80230ee:	68fb      	ldr	r3, [r7, #12]
 80230f0:	781b      	ldrb	r3, [r3, #0]
 80230f2:	b29b      	uxth	r3, r3
 80230f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80230f6:	e013      	b.n	8023120 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80230f8:	f107 030a 	add.w	r3, r7, #10
 80230fc:	4619      	mov	r1, r3
 80230fe:	6978      	ldr	r0, [r7, #20]
 8023100:	f000 f81b 	bl	802313a <USBD_GetNextDesc>
 8023104:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8023106:	697b      	ldr	r3, [r7, #20]
 8023108:	785b      	ldrb	r3, [r3, #1]
 802310a:	2b05      	cmp	r3, #5
 802310c:	d108      	bne.n	8023120 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 802310e:	697b      	ldr	r3, [r7, #20]
 8023110:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8023112:	693b      	ldr	r3, [r7, #16]
 8023114:	789b      	ldrb	r3, [r3, #2]
 8023116:	78fa      	ldrb	r2, [r7, #3]
 8023118:	429a      	cmp	r2, r3
 802311a:	d008      	beq.n	802312e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 802311c:	2300      	movs	r3, #0
 802311e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8023120:	68fb      	ldr	r3, [r7, #12]
 8023122:	885b      	ldrh	r3, [r3, #2]
 8023124:	b29a      	uxth	r2, r3
 8023126:	897b      	ldrh	r3, [r7, #10]
 8023128:	429a      	cmp	r2, r3
 802312a:	d8e5      	bhi.n	80230f8 <USBD_GetEpDesc+0x32>
 802312c:	e000      	b.n	8023130 <USBD_GetEpDesc+0x6a>
          break;
 802312e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8023130:	693b      	ldr	r3, [r7, #16]
}
 8023132:	4618      	mov	r0, r3
 8023134:	3718      	adds	r7, #24
 8023136:	46bd      	mov	sp, r7
 8023138:	bd80      	pop	{r7, pc}

0802313a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 802313a:	b480      	push	{r7}
 802313c:	b085      	sub	sp, #20
 802313e:	af00      	add	r7, sp, #0
 8023140:	6078      	str	r0, [r7, #4]
 8023142:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8023148:	683b      	ldr	r3, [r7, #0]
 802314a:	881a      	ldrh	r2, [r3, #0]
 802314c:	68fb      	ldr	r3, [r7, #12]
 802314e:	781b      	ldrb	r3, [r3, #0]
 8023150:	b29b      	uxth	r3, r3
 8023152:	4413      	add	r3, r2
 8023154:	b29a      	uxth	r2, r3
 8023156:	683b      	ldr	r3, [r7, #0]
 8023158:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 802315a:	68fb      	ldr	r3, [r7, #12]
 802315c:	781b      	ldrb	r3, [r3, #0]
 802315e:	461a      	mov	r2, r3
 8023160:	687b      	ldr	r3, [r7, #4]
 8023162:	4413      	add	r3, r2
 8023164:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8023166:	68fb      	ldr	r3, [r7, #12]
}
 8023168:	4618      	mov	r0, r3
 802316a:	3714      	adds	r7, #20
 802316c:	46bd      	mov	sp, r7
 802316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023172:	4770      	bx	lr

08023174 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8023174:	b480      	push	{r7}
 8023176:	b087      	sub	sp, #28
 8023178:	af00      	add	r7, sp, #0
 802317a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8023180:	697b      	ldr	r3, [r7, #20]
 8023182:	781b      	ldrb	r3, [r3, #0]
 8023184:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8023186:	697b      	ldr	r3, [r7, #20]
 8023188:	3301      	adds	r3, #1
 802318a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802318c:	697b      	ldr	r3, [r7, #20]
 802318e:	781b      	ldrb	r3, [r3, #0]
 8023190:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8023192:	8a3b      	ldrh	r3, [r7, #16]
 8023194:	021b      	lsls	r3, r3, #8
 8023196:	b21a      	sxth	r2, r3
 8023198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802319c:	4313      	orrs	r3, r2
 802319e:	b21b      	sxth	r3, r3
 80231a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80231a2:	89fb      	ldrh	r3, [r7, #14]
}
 80231a4:	4618      	mov	r0, r3
 80231a6:	371c      	adds	r7, #28
 80231a8:	46bd      	mov	sp, r7
 80231aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231ae:	4770      	bx	lr

080231b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80231b0:	b580      	push	{r7, lr}
 80231b2:	b084      	sub	sp, #16
 80231b4:	af00      	add	r7, sp, #0
 80231b6:	6078      	str	r0, [r7, #4]
 80231b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80231ba:	2300      	movs	r3, #0
 80231bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80231be:	683b      	ldr	r3, [r7, #0]
 80231c0:	781b      	ldrb	r3, [r3, #0]
 80231c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80231c6:	2b40      	cmp	r3, #64	; 0x40
 80231c8:	d005      	beq.n	80231d6 <USBD_StdDevReq+0x26>
 80231ca:	2b40      	cmp	r3, #64	; 0x40
 80231cc:	d857      	bhi.n	802327e <USBD_StdDevReq+0xce>
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	d00f      	beq.n	80231f2 <USBD_StdDevReq+0x42>
 80231d2:	2b20      	cmp	r3, #32
 80231d4:	d153      	bne.n	802327e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	32ae      	adds	r2, #174	; 0xae
 80231e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80231e4:	689b      	ldr	r3, [r3, #8]
 80231e6:	6839      	ldr	r1, [r7, #0]
 80231e8:	6878      	ldr	r0, [r7, #4]
 80231ea:	4798      	blx	r3
 80231ec:	4603      	mov	r3, r0
 80231ee:	73fb      	strb	r3, [r7, #15]
      break;
 80231f0:	e04a      	b.n	8023288 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80231f2:	683b      	ldr	r3, [r7, #0]
 80231f4:	785b      	ldrb	r3, [r3, #1]
 80231f6:	2b09      	cmp	r3, #9
 80231f8:	d83b      	bhi.n	8023272 <USBD_StdDevReq+0xc2>
 80231fa:	a201      	add	r2, pc, #4	; (adr r2, 8023200 <USBD_StdDevReq+0x50>)
 80231fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023200:	08023255 	.word	0x08023255
 8023204:	08023269 	.word	0x08023269
 8023208:	08023273 	.word	0x08023273
 802320c:	0802325f 	.word	0x0802325f
 8023210:	08023273 	.word	0x08023273
 8023214:	08023233 	.word	0x08023233
 8023218:	08023229 	.word	0x08023229
 802321c:	08023273 	.word	0x08023273
 8023220:	0802324b 	.word	0x0802324b
 8023224:	0802323d 	.word	0x0802323d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8023228:	6839      	ldr	r1, [r7, #0]
 802322a:	6878      	ldr	r0, [r7, #4]
 802322c:	f000 fa3c 	bl	80236a8 <USBD_GetDescriptor>
          break;
 8023230:	e024      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8023232:	6839      	ldr	r1, [r7, #0]
 8023234:	6878      	ldr	r0, [r7, #4]
 8023236:	f000 fba5 	bl	8023984 <USBD_SetAddress>
          break;
 802323a:	e01f      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 802323c:	6839      	ldr	r1, [r7, #0]
 802323e:	6878      	ldr	r0, [r7, #4]
 8023240:	f000 fbe4 	bl	8023a0c <USBD_SetConfig>
 8023244:	4603      	mov	r3, r0
 8023246:	73fb      	strb	r3, [r7, #15]
          break;
 8023248:	e018      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802324a:	6839      	ldr	r1, [r7, #0]
 802324c:	6878      	ldr	r0, [r7, #4]
 802324e:	f000 fc87 	bl	8023b60 <USBD_GetConfig>
          break;
 8023252:	e013      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8023254:	6839      	ldr	r1, [r7, #0]
 8023256:	6878      	ldr	r0, [r7, #4]
 8023258:	f000 fcb8 	bl	8023bcc <USBD_GetStatus>
          break;
 802325c:	e00e      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802325e:	6839      	ldr	r1, [r7, #0]
 8023260:	6878      	ldr	r0, [r7, #4]
 8023262:	f000 fce7 	bl	8023c34 <USBD_SetFeature>
          break;
 8023266:	e009      	b.n	802327c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8023268:	6839      	ldr	r1, [r7, #0]
 802326a:	6878      	ldr	r0, [r7, #4]
 802326c:	f000 fd0b 	bl	8023c86 <USBD_ClrFeature>
          break;
 8023270:	e004      	b.n	802327c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8023272:	6839      	ldr	r1, [r7, #0]
 8023274:	6878      	ldr	r0, [r7, #4]
 8023276:	f000 fd62 	bl	8023d3e <USBD_CtlError>
          break;
 802327a:	bf00      	nop
      }
      break;
 802327c:	e004      	b.n	8023288 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802327e:	6839      	ldr	r1, [r7, #0]
 8023280:	6878      	ldr	r0, [r7, #4]
 8023282:	f000 fd5c 	bl	8023d3e <USBD_CtlError>
      break;
 8023286:	bf00      	nop
  }

  return ret;
 8023288:	7bfb      	ldrb	r3, [r7, #15]
}
 802328a:	4618      	mov	r0, r3
 802328c:	3710      	adds	r7, #16
 802328e:	46bd      	mov	sp, r7
 8023290:	bd80      	pop	{r7, pc}
 8023292:	bf00      	nop

08023294 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023294:	b580      	push	{r7, lr}
 8023296:	b084      	sub	sp, #16
 8023298:	af00      	add	r7, sp, #0
 802329a:	6078      	str	r0, [r7, #4]
 802329c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802329e:	2300      	movs	r3, #0
 80232a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80232a2:	683b      	ldr	r3, [r7, #0]
 80232a4:	781b      	ldrb	r3, [r3, #0]
 80232a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80232aa:	2b40      	cmp	r3, #64	; 0x40
 80232ac:	d005      	beq.n	80232ba <USBD_StdItfReq+0x26>
 80232ae:	2b40      	cmp	r3, #64	; 0x40
 80232b0:	d852      	bhi.n	8023358 <USBD_StdItfReq+0xc4>
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d001      	beq.n	80232ba <USBD_StdItfReq+0x26>
 80232b6:	2b20      	cmp	r3, #32
 80232b8:	d14e      	bne.n	8023358 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80232c0:	b2db      	uxtb	r3, r3
 80232c2:	3b01      	subs	r3, #1
 80232c4:	2b02      	cmp	r3, #2
 80232c6:	d840      	bhi.n	802334a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80232c8:	683b      	ldr	r3, [r7, #0]
 80232ca:	889b      	ldrh	r3, [r3, #4]
 80232cc:	b2db      	uxtb	r3, r3
 80232ce:	2b01      	cmp	r3, #1
 80232d0:	d836      	bhi.n	8023340 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80232d2:	683b      	ldr	r3, [r7, #0]
 80232d4:	889b      	ldrh	r3, [r3, #4]
 80232d6:	b2db      	uxtb	r3, r3
 80232d8:	4619      	mov	r1, r3
 80232da:	6878      	ldr	r0, [r7, #4]
 80232dc:	f7ff fed9 	bl	8023092 <USBD_CoreFindIF>
 80232e0:	4603      	mov	r3, r0
 80232e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80232e4:	7bbb      	ldrb	r3, [r7, #14]
 80232e6:	2bff      	cmp	r3, #255	; 0xff
 80232e8:	d01d      	beq.n	8023326 <USBD_StdItfReq+0x92>
 80232ea:	7bbb      	ldrb	r3, [r7, #14]
 80232ec:	2b00      	cmp	r3, #0
 80232ee:	d11a      	bne.n	8023326 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80232f0:	7bba      	ldrb	r2, [r7, #14]
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	32ae      	adds	r2, #174	; 0xae
 80232f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80232fa:	689b      	ldr	r3, [r3, #8]
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d00f      	beq.n	8023320 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8023300:	7bba      	ldrb	r2, [r7, #14]
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8023308:	7bba      	ldrb	r2, [r7, #14]
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	32ae      	adds	r2, #174	; 0xae
 802330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023312:	689b      	ldr	r3, [r3, #8]
 8023314:	6839      	ldr	r1, [r7, #0]
 8023316:	6878      	ldr	r0, [r7, #4]
 8023318:	4798      	blx	r3
 802331a:	4603      	mov	r3, r0
 802331c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802331e:	e004      	b.n	802332a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8023320:	2303      	movs	r3, #3
 8023322:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8023324:	e001      	b.n	802332a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8023326:	2303      	movs	r3, #3
 8023328:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802332a:	683b      	ldr	r3, [r7, #0]
 802332c:	88db      	ldrh	r3, [r3, #6]
 802332e:	2b00      	cmp	r3, #0
 8023330:	d110      	bne.n	8023354 <USBD_StdItfReq+0xc0>
 8023332:	7bfb      	ldrb	r3, [r7, #15]
 8023334:	2b00      	cmp	r3, #0
 8023336:	d10d      	bne.n	8023354 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8023338:	6878      	ldr	r0, [r7, #4]
 802333a:	f000 fdcb 	bl	8023ed4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802333e:	e009      	b.n	8023354 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8023340:	6839      	ldr	r1, [r7, #0]
 8023342:	6878      	ldr	r0, [r7, #4]
 8023344:	f000 fcfb 	bl	8023d3e <USBD_CtlError>
          break;
 8023348:	e004      	b.n	8023354 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802334a:	6839      	ldr	r1, [r7, #0]
 802334c:	6878      	ldr	r0, [r7, #4]
 802334e:	f000 fcf6 	bl	8023d3e <USBD_CtlError>
          break;
 8023352:	e000      	b.n	8023356 <USBD_StdItfReq+0xc2>
          break;
 8023354:	bf00      	nop
      }
      break;
 8023356:	e004      	b.n	8023362 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8023358:	6839      	ldr	r1, [r7, #0]
 802335a:	6878      	ldr	r0, [r7, #4]
 802335c:	f000 fcef 	bl	8023d3e <USBD_CtlError>
      break;
 8023360:	bf00      	nop
  }

  return ret;
 8023362:	7bfb      	ldrb	r3, [r7, #15]
}
 8023364:	4618      	mov	r0, r3
 8023366:	3710      	adds	r7, #16
 8023368:	46bd      	mov	sp, r7
 802336a:	bd80      	pop	{r7, pc}

0802336c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802336c:	b580      	push	{r7, lr}
 802336e:	b084      	sub	sp, #16
 8023370:	af00      	add	r7, sp, #0
 8023372:	6078      	str	r0, [r7, #4]
 8023374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8023376:	2300      	movs	r3, #0
 8023378:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 802337a:	683b      	ldr	r3, [r7, #0]
 802337c:	889b      	ldrh	r3, [r3, #4]
 802337e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8023380:	683b      	ldr	r3, [r7, #0]
 8023382:	781b      	ldrb	r3, [r3, #0]
 8023384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8023388:	2b40      	cmp	r3, #64	; 0x40
 802338a:	d007      	beq.n	802339c <USBD_StdEPReq+0x30>
 802338c:	2b40      	cmp	r3, #64	; 0x40
 802338e:	f200 817f 	bhi.w	8023690 <USBD_StdEPReq+0x324>
 8023392:	2b00      	cmp	r3, #0
 8023394:	d02a      	beq.n	80233ec <USBD_StdEPReq+0x80>
 8023396:	2b20      	cmp	r3, #32
 8023398:	f040 817a 	bne.w	8023690 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 802339c:	7bbb      	ldrb	r3, [r7, #14]
 802339e:	4619      	mov	r1, r3
 80233a0:	6878      	ldr	r0, [r7, #4]
 80233a2:	f7ff fe83 	bl	80230ac <USBD_CoreFindEP>
 80233a6:	4603      	mov	r3, r0
 80233a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80233aa:	7b7b      	ldrb	r3, [r7, #13]
 80233ac:	2bff      	cmp	r3, #255	; 0xff
 80233ae:	f000 8174 	beq.w	802369a <USBD_StdEPReq+0x32e>
 80233b2:	7b7b      	ldrb	r3, [r7, #13]
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	f040 8170 	bne.w	802369a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80233ba:	7b7a      	ldrb	r2, [r7, #13]
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80233c2:	7b7a      	ldrb	r2, [r7, #13]
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	32ae      	adds	r2, #174	; 0xae
 80233c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80233cc:	689b      	ldr	r3, [r3, #8]
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	f000 8163 	beq.w	802369a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80233d4:	7b7a      	ldrb	r2, [r7, #13]
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	32ae      	adds	r2, #174	; 0xae
 80233da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80233de:	689b      	ldr	r3, [r3, #8]
 80233e0:	6839      	ldr	r1, [r7, #0]
 80233e2:	6878      	ldr	r0, [r7, #4]
 80233e4:	4798      	blx	r3
 80233e6:	4603      	mov	r3, r0
 80233e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80233ea:	e156      	b.n	802369a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80233ec:	683b      	ldr	r3, [r7, #0]
 80233ee:	785b      	ldrb	r3, [r3, #1]
 80233f0:	2b03      	cmp	r3, #3
 80233f2:	d008      	beq.n	8023406 <USBD_StdEPReq+0x9a>
 80233f4:	2b03      	cmp	r3, #3
 80233f6:	f300 8145 	bgt.w	8023684 <USBD_StdEPReq+0x318>
 80233fa:	2b00      	cmp	r3, #0
 80233fc:	f000 809b 	beq.w	8023536 <USBD_StdEPReq+0x1ca>
 8023400:	2b01      	cmp	r3, #1
 8023402:	d03c      	beq.n	802347e <USBD_StdEPReq+0x112>
 8023404:	e13e      	b.n	8023684 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802340c:	b2db      	uxtb	r3, r3
 802340e:	2b02      	cmp	r3, #2
 8023410:	d002      	beq.n	8023418 <USBD_StdEPReq+0xac>
 8023412:	2b03      	cmp	r3, #3
 8023414:	d016      	beq.n	8023444 <USBD_StdEPReq+0xd8>
 8023416:	e02c      	b.n	8023472 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8023418:	7bbb      	ldrb	r3, [r7, #14]
 802341a:	2b00      	cmp	r3, #0
 802341c:	d00d      	beq.n	802343a <USBD_StdEPReq+0xce>
 802341e:	7bbb      	ldrb	r3, [r7, #14]
 8023420:	2b80      	cmp	r3, #128	; 0x80
 8023422:	d00a      	beq.n	802343a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8023424:	7bbb      	ldrb	r3, [r7, #14]
 8023426:	4619      	mov	r1, r3
 8023428:	6878      	ldr	r0, [r7, #4]
 802342a:	f004 fca3 	bl	8027d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802342e:	2180      	movs	r1, #128	; 0x80
 8023430:	6878      	ldr	r0, [r7, #4]
 8023432:	f004 fc9f 	bl	8027d74 <USBD_LL_StallEP>
 8023436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8023438:	e020      	b.n	802347c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802343a:	6839      	ldr	r1, [r7, #0]
 802343c:	6878      	ldr	r0, [r7, #4]
 802343e:	f000 fc7e 	bl	8023d3e <USBD_CtlError>
              break;
 8023442:	e01b      	b.n	802347c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8023444:	683b      	ldr	r3, [r7, #0]
 8023446:	885b      	ldrh	r3, [r3, #2]
 8023448:	2b00      	cmp	r3, #0
 802344a:	d10e      	bne.n	802346a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802344c:	7bbb      	ldrb	r3, [r7, #14]
 802344e:	2b00      	cmp	r3, #0
 8023450:	d00b      	beq.n	802346a <USBD_StdEPReq+0xfe>
 8023452:	7bbb      	ldrb	r3, [r7, #14]
 8023454:	2b80      	cmp	r3, #128	; 0x80
 8023456:	d008      	beq.n	802346a <USBD_StdEPReq+0xfe>
 8023458:	683b      	ldr	r3, [r7, #0]
 802345a:	88db      	ldrh	r3, [r3, #6]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d104      	bne.n	802346a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8023460:	7bbb      	ldrb	r3, [r7, #14]
 8023462:	4619      	mov	r1, r3
 8023464:	6878      	ldr	r0, [r7, #4]
 8023466:	f004 fc85 	bl	8027d74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802346a:	6878      	ldr	r0, [r7, #4]
 802346c:	f000 fd32 	bl	8023ed4 <USBD_CtlSendStatus>

              break;
 8023470:	e004      	b.n	802347c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8023472:	6839      	ldr	r1, [r7, #0]
 8023474:	6878      	ldr	r0, [r7, #4]
 8023476:	f000 fc62 	bl	8023d3e <USBD_CtlError>
              break;
 802347a:	bf00      	nop
          }
          break;
 802347c:	e107      	b.n	802368e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802347e:	687b      	ldr	r3, [r7, #4]
 8023480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8023484:	b2db      	uxtb	r3, r3
 8023486:	2b02      	cmp	r3, #2
 8023488:	d002      	beq.n	8023490 <USBD_StdEPReq+0x124>
 802348a:	2b03      	cmp	r3, #3
 802348c:	d016      	beq.n	80234bc <USBD_StdEPReq+0x150>
 802348e:	e04b      	b.n	8023528 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8023490:	7bbb      	ldrb	r3, [r7, #14]
 8023492:	2b00      	cmp	r3, #0
 8023494:	d00d      	beq.n	80234b2 <USBD_StdEPReq+0x146>
 8023496:	7bbb      	ldrb	r3, [r7, #14]
 8023498:	2b80      	cmp	r3, #128	; 0x80
 802349a:	d00a      	beq.n	80234b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802349c:	7bbb      	ldrb	r3, [r7, #14]
 802349e:	4619      	mov	r1, r3
 80234a0:	6878      	ldr	r0, [r7, #4]
 80234a2:	f004 fc67 	bl	8027d74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80234a6:	2180      	movs	r1, #128	; 0x80
 80234a8:	6878      	ldr	r0, [r7, #4]
 80234aa:	f004 fc63 	bl	8027d74 <USBD_LL_StallEP>
 80234ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80234b0:	e040      	b.n	8023534 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80234b2:	6839      	ldr	r1, [r7, #0]
 80234b4:	6878      	ldr	r0, [r7, #4]
 80234b6:	f000 fc42 	bl	8023d3e <USBD_CtlError>
              break;
 80234ba:	e03b      	b.n	8023534 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80234bc:	683b      	ldr	r3, [r7, #0]
 80234be:	885b      	ldrh	r3, [r3, #2]
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d136      	bne.n	8023532 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80234c4:	7bbb      	ldrb	r3, [r7, #14]
 80234c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d004      	beq.n	80234d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80234ce:	7bbb      	ldrb	r3, [r7, #14]
 80234d0:	4619      	mov	r1, r3
 80234d2:	6878      	ldr	r0, [r7, #4]
 80234d4:	f004 fc6d 	bl	8027db2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80234d8:	6878      	ldr	r0, [r7, #4]
 80234da:	f000 fcfb 	bl	8023ed4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80234de:	7bbb      	ldrb	r3, [r7, #14]
 80234e0:	4619      	mov	r1, r3
 80234e2:	6878      	ldr	r0, [r7, #4]
 80234e4:	f7ff fde2 	bl	80230ac <USBD_CoreFindEP>
 80234e8:	4603      	mov	r3, r0
 80234ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80234ec:	7b7b      	ldrb	r3, [r7, #13]
 80234ee:	2bff      	cmp	r3, #255	; 0xff
 80234f0:	d01f      	beq.n	8023532 <USBD_StdEPReq+0x1c6>
 80234f2:	7b7b      	ldrb	r3, [r7, #13]
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d11c      	bne.n	8023532 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80234f8:	7b7a      	ldrb	r2, [r7, #13]
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8023500:	7b7a      	ldrb	r2, [r7, #13]
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	32ae      	adds	r2, #174	; 0xae
 8023506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802350a:	689b      	ldr	r3, [r3, #8]
 802350c:	2b00      	cmp	r3, #0
 802350e:	d010      	beq.n	8023532 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8023510:	7b7a      	ldrb	r2, [r7, #13]
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	32ae      	adds	r2, #174	; 0xae
 8023516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802351a:	689b      	ldr	r3, [r3, #8]
 802351c:	6839      	ldr	r1, [r7, #0]
 802351e:	6878      	ldr	r0, [r7, #4]
 8023520:	4798      	blx	r3
 8023522:	4603      	mov	r3, r0
 8023524:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8023526:	e004      	b.n	8023532 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8023528:	6839      	ldr	r1, [r7, #0]
 802352a:	6878      	ldr	r0, [r7, #4]
 802352c:	f000 fc07 	bl	8023d3e <USBD_CtlError>
              break;
 8023530:	e000      	b.n	8023534 <USBD_StdEPReq+0x1c8>
              break;
 8023532:	bf00      	nop
          }
          break;
 8023534:	e0ab      	b.n	802368e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802353c:	b2db      	uxtb	r3, r3
 802353e:	2b02      	cmp	r3, #2
 8023540:	d002      	beq.n	8023548 <USBD_StdEPReq+0x1dc>
 8023542:	2b03      	cmp	r3, #3
 8023544:	d032      	beq.n	80235ac <USBD_StdEPReq+0x240>
 8023546:	e097      	b.n	8023678 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8023548:	7bbb      	ldrb	r3, [r7, #14]
 802354a:	2b00      	cmp	r3, #0
 802354c:	d007      	beq.n	802355e <USBD_StdEPReq+0x1f2>
 802354e:	7bbb      	ldrb	r3, [r7, #14]
 8023550:	2b80      	cmp	r3, #128	; 0x80
 8023552:	d004      	beq.n	802355e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8023554:	6839      	ldr	r1, [r7, #0]
 8023556:	6878      	ldr	r0, [r7, #4]
 8023558:	f000 fbf1 	bl	8023d3e <USBD_CtlError>
                break;
 802355c:	e091      	b.n	8023682 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802355e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8023562:	2b00      	cmp	r3, #0
 8023564:	da0b      	bge.n	802357e <USBD_StdEPReq+0x212>
 8023566:	7bbb      	ldrb	r3, [r7, #14]
 8023568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802356c:	4613      	mov	r3, r2
 802356e:	009b      	lsls	r3, r3, #2
 8023570:	4413      	add	r3, r2
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	3310      	adds	r3, #16
 8023576:	687a      	ldr	r2, [r7, #4]
 8023578:	4413      	add	r3, r2
 802357a:	3304      	adds	r3, #4
 802357c:	e00b      	b.n	8023596 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802357e:	7bbb      	ldrb	r3, [r7, #14]
 8023580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8023584:	4613      	mov	r3, r2
 8023586:	009b      	lsls	r3, r3, #2
 8023588:	4413      	add	r3, r2
 802358a:	009b      	lsls	r3, r3, #2
 802358c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8023590:	687a      	ldr	r2, [r7, #4]
 8023592:	4413      	add	r3, r2
 8023594:	3304      	adds	r3, #4
 8023596:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8023598:	68bb      	ldr	r3, [r7, #8]
 802359a:	2200      	movs	r2, #0
 802359c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802359e:	68bb      	ldr	r3, [r7, #8]
 80235a0:	2202      	movs	r2, #2
 80235a2:	4619      	mov	r1, r3
 80235a4:	6878      	ldr	r0, [r7, #4]
 80235a6:	f000 fc3b 	bl	8023e20 <USBD_CtlSendData>
              break;
 80235aa:	e06a      	b.n	8023682 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80235ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	da11      	bge.n	80235d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80235b4:	7bbb      	ldrb	r3, [r7, #14]
 80235b6:	f003 020f 	and.w	r2, r3, #15
 80235ba:	6879      	ldr	r1, [r7, #4]
 80235bc:	4613      	mov	r3, r2
 80235be:	009b      	lsls	r3, r3, #2
 80235c0:	4413      	add	r3, r2
 80235c2:	009b      	lsls	r3, r3, #2
 80235c4:	440b      	add	r3, r1
 80235c6:	3324      	adds	r3, #36	; 0x24
 80235c8:	881b      	ldrh	r3, [r3, #0]
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d117      	bne.n	80235fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80235ce:	6839      	ldr	r1, [r7, #0]
 80235d0:	6878      	ldr	r0, [r7, #4]
 80235d2:	f000 fbb4 	bl	8023d3e <USBD_CtlError>
                  break;
 80235d6:	e054      	b.n	8023682 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80235d8:	7bbb      	ldrb	r3, [r7, #14]
 80235da:	f003 020f 	and.w	r2, r3, #15
 80235de:	6879      	ldr	r1, [r7, #4]
 80235e0:	4613      	mov	r3, r2
 80235e2:	009b      	lsls	r3, r3, #2
 80235e4:	4413      	add	r3, r2
 80235e6:	009b      	lsls	r3, r3, #2
 80235e8:	440b      	add	r3, r1
 80235ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80235ee:	881b      	ldrh	r3, [r3, #0]
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d104      	bne.n	80235fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80235f4:	6839      	ldr	r1, [r7, #0]
 80235f6:	6878      	ldr	r0, [r7, #4]
 80235f8:	f000 fba1 	bl	8023d3e <USBD_CtlError>
                  break;
 80235fc:	e041      	b.n	8023682 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80235fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8023602:	2b00      	cmp	r3, #0
 8023604:	da0b      	bge.n	802361e <USBD_StdEPReq+0x2b2>
 8023606:	7bbb      	ldrb	r3, [r7, #14]
 8023608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802360c:	4613      	mov	r3, r2
 802360e:	009b      	lsls	r3, r3, #2
 8023610:	4413      	add	r3, r2
 8023612:	009b      	lsls	r3, r3, #2
 8023614:	3310      	adds	r3, #16
 8023616:	687a      	ldr	r2, [r7, #4]
 8023618:	4413      	add	r3, r2
 802361a:	3304      	adds	r3, #4
 802361c:	e00b      	b.n	8023636 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802361e:	7bbb      	ldrb	r3, [r7, #14]
 8023620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8023624:	4613      	mov	r3, r2
 8023626:	009b      	lsls	r3, r3, #2
 8023628:	4413      	add	r3, r2
 802362a:	009b      	lsls	r3, r3, #2
 802362c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8023630:	687a      	ldr	r2, [r7, #4]
 8023632:	4413      	add	r3, r2
 8023634:	3304      	adds	r3, #4
 8023636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8023638:	7bbb      	ldrb	r3, [r7, #14]
 802363a:	2b00      	cmp	r3, #0
 802363c:	d002      	beq.n	8023644 <USBD_StdEPReq+0x2d8>
 802363e:	7bbb      	ldrb	r3, [r7, #14]
 8023640:	2b80      	cmp	r3, #128	; 0x80
 8023642:	d103      	bne.n	802364c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8023644:	68bb      	ldr	r3, [r7, #8]
 8023646:	2200      	movs	r2, #0
 8023648:	601a      	str	r2, [r3, #0]
 802364a:	e00e      	b.n	802366a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802364c:	7bbb      	ldrb	r3, [r7, #14]
 802364e:	4619      	mov	r1, r3
 8023650:	6878      	ldr	r0, [r7, #4]
 8023652:	f004 fbcd 	bl	8027df0 <USBD_LL_IsStallEP>
 8023656:	4603      	mov	r3, r0
 8023658:	2b00      	cmp	r3, #0
 802365a:	d003      	beq.n	8023664 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802365c:	68bb      	ldr	r3, [r7, #8]
 802365e:	2201      	movs	r2, #1
 8023660:	601a      	str	r2, [r3, #0]
 8023662:	e002      	b.n	802366a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8023664:	68bb      	ldr	r3, [r7, #8]
 8023666:	2200      	movs	r2, #0
 8023668:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802366a:	68bb      	ldr	r3, [r7, #8]
 802366c:	2202      	movs	r2, #2
 802366e:	4619      	mov	r1, r3
 8023670:	6878      	ldr	r0, [r7, #4]
 8023672:	f000 fbd5 	bl	8023e20 <USBD_CtlSendData>
              break;
 8023676:	e004      	b.n	8023682 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8023678:	6839      	ldr	r1, [r7, #0]
 802367a:	6878      	ldr	r0, [r7, #4]
 802367c:	f000 fb5f 	bl	8023d3e <USBD_CtlError>
              break;
 8023680:	bf00      	nop
          }
          break;
 8023682:	e004      	b.n	802368e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8023684:	6839      	ldr	r1, [r7, #0]
 8023686:	6878      	ldr	r0, [r7, #4]
 8023688:	f000 fb59 	bl	8023d3e <USBD_CtlError>
          break;
 802368c:	bf00      	nop
      }
      break;
 802368e:	e005      	b.n	802369c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8023690:	6839      	ldr	r1, [r7, #0]
 8023692:	6878      	ldr	r0, [r7, #4]
 8023694:	f000 fb53 	bl	8023d3e <USBD_CtlError>
      break;
 8023698:	e000      	b.n	802369c <USBD_StdEPReq+0x330>
      break;
 802369a:	bf00      	nop
  }

  return ret;
 802369c:	7bfb      	ldrb	r3, [r7, #15]
}
 802369e:	4618      	mov	r0, r3
 80236a0:	3710      	adds	r7, #16
 80236a2:	46bd      	mov	sp, r7
 80236a4:	bd80      	pop	{r7, pc}
	...

080236a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b086      	sub	sp, #24
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	6078      	str	r0, [r7, #4]
 80236b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80236b2:	2300      	movs	r3, #0
 80236b4:	81bb      	strh	r3, [r7, #12]
  uint8_t *pbuf = NULL;
 80236b6:	2300      	movs	r3, #0
 80236b8:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 80236ba:	2300      	movs	r3, #0
 80236bc:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 80236be:	683b      	ldr	r3, [r7, #0]
 80236c0:	885b      	ldrh	r3, [r3, #2]
 80236c2:	0a1b      	lsrs	r3, r3, #8
 80236c4:	b29b      	uxth	r3, r3
 80236c6:	3b01      	subs	r3, #1
 80236c8:	2b06      	cmp	r3, #6
 80236ca:	f200 8128 	bhi.w	802391e <USBD_GetDescriptor+0x276>
 80236ce:	a201      	add	r2, pc, #4	; (adr r2, 80236d4 <USBD_GetDescriptor+0x2c>)
 80236d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80236d4:	080236f1 	.word	0x080236f1
 80236d8:	08023709 	.word	0x08023709
 80236dc:	08023749 	.word	0x08023749
 80236e0:	0802391f 	.word	0x0802391f
 80236e4:	0802391f 	.word	0x0802391f
 80236e8:	080238bf 	.word	0x080238bf
 80236ec:	080238eb 	.word	0x080238eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80236f6:	681b      	ldr	r3, [r3, #0]
 80236f8:	687a      	ldr	r2, [r7, #4]
 80236fa:	7c12      	ldrb	r2, [r2, #16]
 80236fc:	f107 010c 	add.w	r1, r7, #12
 8023700:	4610      	mov	r0, r2
 8023702:	4798      	blx	r3
 8023704:	6178      	str	r0, [r7, #20]
      break;
 8023706:	e112      	b.n	802392e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	7c1b      	ldrb	r3, [r3, #16]
 802370c:	2b00      	cmp	r3, #0
 802370e:	d10d      	bne.n	802372c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8023716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023718:	f107 020c 	add.w	r2, r7, #12
 802371c:	4610      	mov	r0, r2
 802371e:	4798      	blx	r3
 8023720:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8023722:	697b      	ldr	r3, [r7, #20]
 8023724:	3301      	adds	r3, #1
 8023726:	2202      	movs	r2, #2
 8023728:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802372a:	e100      	b.n	802392e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8023732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023734:	f107 020c 	add.w	r2, r7, #12
 8023738:	4610      	mov	r0, r2
 802373a:	4798      	blx	r3
 802373c:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802373e:	697b      	ldr	r3, [r7, #20]
 8023740:	3301      	adds	r3, #1
 8023742:	2202      	movs	r2, #2
 8023744:	701a      	strb	r2, [r3, #0]
      break;
 8023746:	e0f2      	b.n	802392e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8023748:	683b      	ldr	r3, [r7, #0]
 802374a:	885b      	ldrh	r3, [r3, #2]
 802374c:	b2db      	uxtb	r3, r3
 802374e:	2b05      	cmp	r3, #5
 8023750:	f200 80ac 	bhi.w	80238ac <USBD_GetDescriptor+0x204>
 8023754:	a201      	add	r2, pc, #4	; (adr r2, 802375c <USBD_GetDescriptor+0xb4>)
 8023756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802375a:	bf00      	nop
 802375c:	08023775 	.word	0x08023775
 8023760:	080237a9 	.word	0x080237a9
 8023764:	080237dd 	.word	0x080237dd
 8023768:	08023811 	.word	0x08023811
 802376c:	08023845 	.word	0x08023845
 8023770:	08023879 	.word	0x08023879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802377a:	685b      	ldr	r3, [r3, #4]
 802377c:	2b00      	cmp	r3, #0
 802377e:	d00b      	beq.n	8023798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8023786:	685b      	ldr	r3, [r3, #4]
 8023788:	687a      	ldr	r2, [r7, #4]
 802378a:	7c12      	ldrb	r2, [r2, #16]
 802378c:	f107 010c 	add.w	r1, r7, #12
 8023790:	4610      	mov	r0, r2
 8023792:	4798      	blx	r3
 8023794:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8023796:	e091      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8023798:	6839      	ldr	r1, [r7, #0]
 802379a:	6878      	ldr	r0, [r7, #4]
 802379c:	f000 facf 	bl	8023d3e <USBD_CtlError>
            err++;
 80237a0:	7cfb      	ldrb	r3, [r7, #19]
 80237a2:	3301      	adds	r3, #1
 80237a4:	74fb      	strb	r3, [r7, #19]
          break;
 80237a6:	e089      	b.n	80238bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80237ae:	689b      	ldr	r3, [r3, #8]
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d00b      	beq.n	80237cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80237ba:	689b      	ldr	r3, [r3, #8]
 80237bc:	687a      	ldr	r2, [r7, #4]
 80237be:	7c12      	ldrb	r2, [r2, #16]
 80237c0:	f107 010c 	add.w	r1, r7, #12
 80237c4:	4610      	mov	r0, r2
 80237c6:	4798      	blx	r3
 80237c8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80237ca:	e077      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80237cc:	6839      	ldr	r1, [r7, #0]
 80237ce:	6878      	ldr	r0, [r7, #4]
 80237d0:	f000 fab5 	bl	8023d3e <USBD_CtlError>
            err++;
 80237d4:	7cfb      	ldrb	r3, [r7, #19]
 80237d6:	3301      	adds	r3, #1
 80237d8:	74fb      	strb	r3, [r7, #19]
          break;
 80237da:	e06f      	b.n	80238bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80237e2:	68db      	ldr	r3, [r3, #12]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d00b      	beq.n	8023800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80237ee:	68db      	ldr	r3, [r3, #12]
 80237f0:	687a      	ldr	r2, [r7, #4]
 80237f2:	7c12      	ldrb	r2, [r2, #16]
 80237f4:	f107 010c 	add.w	r1, r7, #12
 80237f8:	4610      	mov	r0, r2
 80237fa:	4798      	blx	r3
 80237fc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80237fe:	e05d      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8023800:	6839      	ldr	r1, [r7, #0]
 8023802:	6878      	ldr	r0, [r7, #4]
 8023804:	f000 fa9b 	bl	8023d3e <USBD_CtlError>
            err++;
 8023808:	7cfb      	ldrb	r3, [r7, #19]
 802380a:	3301      	adds	r3, #1
 802380c:	74fb      	strb	r3, [r7, #19]
          break;
 802380e:	e055      	b.n	80238bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8023816:	691b      	ldr	r3, [r3, #16]
 8023818:	2b00      	cmp	r3, #0
 802381a:	d00b      	beq.n	8023834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8023822:	691b      	ldr	r3, [r3, #16]
 8023824:	687a      	ldr	r2, [r7, #4]
 8023826:	7c12      	ldrb	r2, [r2, #16]
 8023828:	f107 010c 	add.w	r1, r7, #12
 802382c:	4610      	mov	r0, r2
 802382e:	4798      	blx	r3
 8023830:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8023832:	e043      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8023834:	6839      	ldr	r1, [r7, #0]
 8023836:	6878      	ldr	r0, [r7, #4]
 8023838:	f000 fa81 	bl	8023d3e <USBD_CtlError>
            err++;
 802383c:	7cfb      	ldrb	r3, [r7, #19]
 802383e:	3301      	adds	r3, #1
 8023840:	74fb      	strb	r3, [r7, #19]
          break;
 8023842:	e03b      	b.n	80238bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802384a:	695b      	ldr	r3, [r3, #20]
 802384c:	2b00      	cmp	r3, #0
 802384e:	d00b      	beq.n	8023868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8023856:	695b      	ldr	r3, [r3, #20]
 8023858:	687a      	ldr	r2, [r7, #4]
 802385a:	7c12      	ldrb	r2, [r2, #16]
 802385c:	f107 010c 	add.w	r1, r7, #12
 8023860:	4610      	mov	r0, r2
 8023862:	4798      	blx	r3
 8023864:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8023866:	e029      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8023868:	6839      	ldr	r1, [r7, #0]
 802386a:	6878      	ldr	r0, [r7, #4]
 802386c:	f000 fa67 	bl	8023d3e <USBD_CtlError>
            err++;
 8023870:	7cfb      	ldrb	r3, [r7, #19]
 8023872:	3301      	adds	r3, #1
 8023874:	74fb      	strb	r3, [r7, #19]
          break;
 8023876:	e021      	b.n	80238bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802387e:	699b      	ldr	r3, [r3, #24]
 8023880:	2b00      	cmp	r3, #0
 8023882:	d00b      	beq.n	802389c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802388a:	699b      	ldr	r3, [r3, #24]
 802388c:	687a      	ldr	r2, [r7, #4]
 802388e:	7c12      	ldrb	r2, [r2, #16]
 8023890:	f107 010c 	add.w	r1, r7, #12
 8023894:	4610      	mov	r0, r2
 8023896:	4798      	blx	r3
 8023898:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802389a:	e00f      	b.n	80238bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802389c:	6839      	ldr	r1, [r7, #0]
 802389e:	6878      	ldr	r0, [r7, #4]
 80238a0:	f000 fa4d 	bl	8023d3e <USBD_CtlError>
            err++;
 80238a4:	7cfb      	ldrb	r3, [r7, #19]
 80238a6:	3301      	adds	r3, #1
 80238a8:	74fb      	strb	r3, [r7, #19]
          break;
 80238aa:	e007      	b.n	80238bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80238ac:	6839      	ldr	r1, [r7, #0]
 80238ae:	6878      	ldr	r0, [r7, #4]
 80238b0:	f000 fa45 	bl	8023d3e <USBD_CtlError>
          err++;
 80238b4:	7cfb      	ldrb	r3, [r7, #19]
 80238b6:	3301      	adds	r3, #1
 80238b8:	74fb      	strb	r3, [r7, #19]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80238ba:	bf00      	nop
      }
      break;
 80238bc:	e037      	b.n	802392e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	7c1b      	ldrb	r3, [r3, #16]
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	d109      	bne.n	80238da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80238cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80238ce:	f107 020c 	add.w	r2, r7, #12
 80238d2:	4610      	mov	r0, r2
 80238d4:	4798      	blx	r3
 80238d6:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80238d8:	e029      	b.n	802392e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80238da:	6839      	ldr	r1, [r7, #0]
 80238dc:	6878      	ldr	r0, [r7, #4]
 80238de:	f000 fa2e 	bl	8023d3e <USBD_CtlError>
        err++;
 80238e2:	7cfb      	ldrb	r3, [r7, #19]
 80238e4:	3301      	adds	r3, #1
 80238e6:	74fb      	strb	r3, [r7, #19]
      break;
 80238e8:	e021      	b.n	802392e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80238ea:	687b      	ldr	r3, [r7, #4]
 80238ec:	7c1b      	ldrb	r3, [r3, #16]
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d10d      	bne.n	802390e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80238f2:	687b      	ldr	r3, [r7, #4]
 80238f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80238f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238fa:	f107 020c 	add.w	r2, r7, #12
 80238fe:	4610      	mov	r0, r2
 8023900:	4798      	blx	r3
 8023902:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8023904:	697b      	ldr	r3, [r7, #20]
 8023906:	3301      	adds	r3, #1
 8023908:	2207      	movs	r2, #7
 802390a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802390c:	e00f      	b.n	802392e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 802390e:	6839      	ldr	r1, [r7, #0]
 8023910:	6878      	ldr	r0, [r7, #4]
 8023912:	f000 fa14 	bl	8023d3e <USBD_CtlError>
        err++;
 8023916:	7cfb      	ldrb	r3, [r7, #19]
 8023918:	3301      	adds	r3, #1
 802391a:	74fb      	strb	r3, [r7, #19]
      break;
 802391c:	e007      	b.n	802392e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 802391e:	6839      	ldr	r1, [r7, #0]
 8023920:	6878      	ldr	r0, [r7, #4]
 8023922:	f000 fa0c 	bl	8023d3e <USBD_CtlError>
      err++;
 8023926:	7cfb      	ldrb	r3, [r7, #19]
 8023928:	3301      	adds	r3, #1
 802392a:	74fb      	strb	r3, [r7, #19]
      break;
 802392c:	bf00      	nop
  }

  if (err != 0U)
 802392e:	7cfb      	ldrb	r3, [r7, #19]
 8023930:	2b00      	cmp	r3, #0
 8023932:	d123      	bne.n	802397c <USBD_GetDescriptor+0x2d4>
  {
    return;
  }

  if (req->wLength != 0U)
 8023934:	683b      	ldr	r3, [r7, #0]
 8023936:	88db      	ldrh	r3, [r3, #6]
 8023938:	2b00      	cmp	r3, #0
 802393a:	d01b      	beq.n	8023974 <USBD_GetDescriptor+0x2cc>
  {
    if (len != 0U)
 802393c:	89bb      	ldrh	r3, [r7, #12]
 802393e:	2b00      	cmp	r3, #0
 8023940:	d013      	beq.n	802396a <USBD_GetDescriptor+0x2c2>
    {
      len = MIN(len, req->wLength);
 8023942:	89bb      	ldrh	r3, [r7, #12]
 8023944:	823b      	strh	r3, [r7, #16]
 8023946:	683b      	ldr	r3, [r7, #0]
 8023948:	88db      	ldrh	r3, [r3, #6]
 802394a:	81fb      	strh	r3, [r7, #14]
 802394c:	89fa      	ldrh	r2, [r7, #14]
 802394e:	8a3b      	ldrh	r3, [r7, #16]
 8023950:	4293      	cmp	r3, r2
 8023952:	bf28      	it	cs
 8023954:	4613      	movcs	r3, r2
 8023956:	b29b      	uxth	r3, r3
 8023958:	b29b      	uxth	r3, r3
 802395a:	81bb      	strh	r3, [r7, #12]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802395c:	89bb      	ldrh	r3, [r7, #12]
 802395e:	461a      	mov	r2, r3
 8023960:	6979      	ldr	r1, [r7, #20]
 8023962:	6878      	ldr	r0, [r7, #4]
 8023964:	f000 fa5c 	bl	8023e20 <USBD_CtlSendData>
 8023968:	e009      	b.n	802397e <USBD_GetDescriptor+0x2d6>
    }
    else
    {
      USBD_CtlError(pdev, req);
 802396a:	6839      	ldr	r1, [r7, #0]
 802396c:	6878      	ldr	r0, [r7, #4]
 802396e:	f000 f9e6 	bl	8023d3e <USBD_CtlError>
 8023972:	e004      	b.n	802397e <USBD_GetDescriptor+0x2d6>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8023974:	6878      	ldr	r0, [r7, #4]
 8023976:	f000 faad 	bl	8023ed4 <USBD_CtlSendStatus>
 802397a:	e000      	b.n	802397e <USBD_GetDescriptor+0x2d6>
    return;
 802397c:	bf00      	nop
  }
}
 802397e:	3718      	adds	r7, #24
 8023980:	46bd      	mov	sp, r7
 8023982:	bd80      	pop	{r7, pc}

08023984 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023984:	b580      	push	{r7, lr}
 8023986:	b084      	sub	sp, #16
 8023988:	af00      	add	r7, sp, #0
 802398a:	6078      	str	r0, [r7, #4]
 802398c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802398e:	683b      	ldr	r3, [r7, #0]
 8023990:	889b      	ldrh	r3, [r3, #4]
 8023992:	2b00      	cmp	r3, #0
 8023994:	d131      	bne.n	80239fa <USBD_SetAddress+0x76>
 8023996:	683b      	ldr	r3, [r7, #0]
 8023998:	88db      	ldrh	r3, [r3, #6]
 802399a:	2b00      	cmp	r3, #0
 802399c:	d12d      	bne.n	80239fa <USBD_SetAddress+0x76>
 802399e:	683b      	ldr	r3, [r7, #0]
 80239a0:	885b      	ldrh	r3, [r3, #2]
 80239a2:	2b7f      	cmp	r3, #127	; 0x7f
 80239a4:	d829      	bhi.n	80239fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80239a6:	683b      	ldr	r3, [r7, #0]
 80239a8:	885b      	ldrh	r3, [r3, #2]
 80239aa:	b2db      	uxtb	r3, r3
 80239ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80239b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80239b8:	b2db      	uxtb	r3, r3
 80239ba:	2b03      	cmp	r3, #3
 80239bc:	d104      	bne.n	80239c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80239be:	6839      	ldr	r1, [r7, #0]
 80239c0:	6878      	ldr	r0, [r7, #4]
 80239c2:	f000 f9bc 	bl	8023d3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80239c6:	e01d      	b.n	8023a04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	7bfa      	ldrb	r2, [r7, #15]
 80239cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80239d0:	7bfb      	ldrb	r3, [r7, #15]
 80239d2:	4619      	mov	r1, r3
 80239d4:	6878      	ldr	r0, [r7, #4]
 80239d6:	f004 fa37 	bl	8027e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80239da:	6878      	ldr	r0, [r7, #4]
 80239dc:	f000 fa7a 	bl	8023ed4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80239e0:	7bfb      	ldrb	r3, [r7, #15]
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d004      	beq.n	80239f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	2202      	movs	r2, #2
 80239ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80239ee:	e009      	b.n	8023a04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	2201      	movs	r2, #1
 80239f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80239f8:	e004      	b.n	8023a04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80239fa:	6839      	ldr	r1, [r7, #0]
 80239fc:	6878      	ldr	r0, [r7, #4]
 80239fe:	f000 f99e 	bl	8023d3e <USBD_CtlError>
  }
}
 8023a02:	bf00      	nop
 8023a04:	bf00      	nop
 8023a06:	3710      	adds	r7, #16
 8023a08:	46bd      	mov	sp, r7
 8023a0a:	bd80      	pop	{r7, pc}

08023a0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023a0c:	b580      	push	{r7, lr}
 8023a0e:	b084      	sub	sp, #16
 8023a10:	af00      	add	r7, sp, #0
 8023a12:	6078      	str	r0, [r7, #4]
 8023a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8023a16:	2300      	movs	r3, #0
 8023a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8023a1a:	683b      	ldr	r3, [r7, #0]
 8023a1c:	885b      	ldrh	r3, [r3, #2]
 8023a1e:	b2da      	uxtb	r2, r3
 8023a20:	4b4e      	ldr	r3, [pc, #312]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8023a24:	4b4d      	ldr	r3, [pc, #308]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a26:	781b      	ldrb	r3, [r3, #0]
 8023a28:	2b01      	cmp	r3, #1
 8023a2a:	d905      	bls.n	8023a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8023a2c:	6839      	ldr	r1, [r7, #0]
 8023a2e:	6878      	ldr	r0, [r7, #4]
 8023a30:	f000 f985 	bl	8023d3e <USBD_CtlError>
    return USBD_FAIL;
 8023a34:	2303      	movs	r3, #3
 8023a36:	e08c      	b.n	8023b52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8023a3e:	b2db      	uxtb	r3, r3
 8023a40:	2b02      	cmp	r3, #2
 8023a42:	d002      	beq.n	8023a4a <USBD_SetConfig+0x3e>
 8023a44:	2b03      	cmp	r3, #3
 8023a46:	d029      	beq.n	8023a9c <USBD_SetConfig+0x90>
 8023a48:	e075      	b.n	8023b36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8023a4a:	4b44      	ldr	r3, [pc, #272]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a4c:	781b      	ldrb	r3, [r3, #0]
 8023a4e:	2b00      	cmp	r3, #0
 8023a50:	d020      	beq.n	8023a94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8023a52:	4b42      	ldr	r3, [pc, #264]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a54:	781b      	ldrb	r3, [r3, #0]
 8023a56:	461a      	mov	r2, r3
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8023a5c:	4b3f      	ldr	r3, [pc, #252]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a5e:	781b      	ldrb	r3, [r3, #0]
 8023a60:	4619      	mov	r1, r3
 8023a62:	6878      	ldr	r0, [r7, #4]
 8023a64:	f7fe ffdf 	bl	8022a26 <USBD_SetClassConfig>
 8023a68:	4603      	mov	r3, r0
 8023a6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8023a6c:	7bfb      	ldrb	r3, [r7, #15]
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d008      	beq.n	8023a84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8023a72:	6839      	ldr	r1, [r7, #0]
 8023a74:	6878      	ldr	r0, [r7, #4]
 8023a76:	f000 f962 	bl	8023d3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8023a7a:	687b      	ldr	r3, [r7, #4]
 8023a7c:	2202      	movs	r2, #2
 8023a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8023a82:	e065      	b.n	8023b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8023a84:	6878      	ldr	r0, [r7, #4]
 8023a86:	f000 fa25 	bl	8023ed4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	2203      	movs	r2, #3
 8023a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8023a92:	e05d      	b.n	8023b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8023a94:	6878      	ldr	r0, [r7, #4]
 8023a96:	f000 fa1d 	bl	8023ed4 <USBD_CtlSendStatus>
      break;
 8023a9a:	e059      	b.n	8023b50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8023a9c:	4b2f      	ldr	r3, [pc, #188]	; (8023b5c <USBD_SetConfig+0x150>)
 8023a9e:	781b      	ldrb	r3, [r3, #0]
 8023aa0:	2b00      	cmp	r3, #0
 8023aa2:	d112      	bne.n	8023aca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	2202      	movs	r2, #2
 8023aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8023aac:	4b2b      	ldr	r3, [pc, #172]	; (8023b5c <USBD_SetConfig+0x150>)
 8023aae:	781b      	ldrb	r3, [r3, #0]
 8023ab0:	461a      	mov	r2, r3
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8023ab6:	4b29      	ldr	r3, [pc, #164]	; (8023b5c <USBD_SetConfig+0x150>)
 8023ab8:	781b      	ldrb	r3, [r3, #0]
 8023aba:	4619      	mov	r1, r3
 8023abc:	6878      	ldr	r0, [r7, #4]
 8023abe:	f7fe ffce 	bl	8022a5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8023ac2:	6878      	ldr	r0, [r7, #4]
 8023ac4:	f000 fa06 	bl	8023ed4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8023ac8:	e042      	b.n	8023b50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8023aca:	4b24      	ldr	r3, [pc, #144]	; (8023b5c <USBD_SetConfig+0x150>)
 8023acc:	781b      	ldrb	r3, [r3, #0]
 8023ace:	461a      	mov	r2, r3
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	685b      	ldr	r3, [r3, #4]
 8023ad4:	429a      	cmp	r2, r3
 8023ad6:	d02a      	beq.n	8023b2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	685b      	ldr	r3, [r3, #4]
 8023adc:	b2db      	uxtb	r3, r3
 8023ade:	4619      	mov	r1, r3
 8023ae0:	6878      	ldr	r0, [r7, #4]
 8023ae2:	f7fe ffbc 	bl	8022a5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8023ae6:	4b1d      	ldr	r3, [pc, #116]	; (8023b5c <USBD_SetConfig+0x150>)
 8023ae8:	781b      	ldrb	r3, [r3, #0]
 8023aea:	461a      	mov	r2, r3
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8023af0:	4b1a      	ldr	r3, [pc, #104]	; (8023b5c <USBD_SetConfig+0x150>)
 8023af2:	781b      	ldrb	r3, [r3, #0]
 8023af4:	4619      	mov	r1, r3
 8023af6:	6878      	ldr	r0, [r7, #4]
 8023af8:	f7fe ff95 	bl	8022a26 <USBD_SetClassConfig>
 8023afc:	4603      	mov	r3, r0
 8023afe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8023b00:	7bfb      	ldrb	r3, [r7, #15]
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d00f      	beq.n	8023b26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8023b06:	6839      	ldr	r1, [r7, #0]
 8023b08:	6878      	ldr	r0, [r7, #4]
 8023b0a:	f000 f918 	bl	8023d3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	685b      	ldr	r3, [r3, #4]
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	4619      	mov	r1, r3
 8023b16:	6878      	ldr	r0, [r7, #4]
 8023b18:	f7fe ffa1 	bl	8022a5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2202      	movs	r2, #2
 8023b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8023b24:	e014      	b.n	8023b50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8023b26:	6878      	ldr	r0, [r7, #4]
 8023b28:	f000 f9d4 	bl	8023ed4 <USBD_CtlSendStatus>
      break;
 8023b2c:	e010      	b.n	8023b50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8023b2e:	6878      	ldr	r0, [r7, #4]
 8023b30:	f000 f9d0 	bl	8023ed4 <USBD_CtlSendStatus>
      break;
 8023b34:	e00c      	b.n	8023b50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8023b36:	6839      	ldr	r1, [r7, #0]
 8023b38:	6878      	ldr	r0, [r7, #4]
 8023b3a:	f000 f900 	bl	8023d3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8023b3e:	4b07      	ldr	r3, [pc, #28]	; (8023b5c <USBD_SetConfig+0x150>)
 8023b40:	781b      	ldrb	r3, [r3, #0]
 8023b42:	4619      	mov	r1, r3
 8023b44:	6878      	ldr	r0, [r7, #4]
 8023b46:	f7fe ff8a 	bl	8022a5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8023b4a:	2303      	movs	r3, #3
 8023b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8023b4e:	bf00      	nop
  }

  return ret;
 8023b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b52:	4618      	mov	r0, r3
 8023b54:	3710      	adds	r7, #16
 8023b56:	46bd      	mov	sp, r7
 8023b58:	bd80      	pop	{r7, pc}
 8023b5a:	bf00      	nop
 8023b5c:	20003ece 	.word	0x20003ece

08023b60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023b60:	b580      	push	{r7, lr}
 8023b62:	b082      	sub	sp, #8
 8023b64:	af00      	add	r7, sp, #0
 8023b66:	6078      	str	r0, [r7, #4]
 8023b68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8023b6a:	683b      	ldr	r3, [r7, #0]
 8023b6c:	88db      	ldrh	r3, [r3, #6]
 8023b6e:	2b01      	cmp	r3, #1
 8023b70:	d004      	beq.n	8023b7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8023b72:	6839      	ldr	r1, [r7, #0]
 8023b74:	6878      	ldr	r0, [r7, #4]
 8023b76:	f000 f8e2 	bl	8023d3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8023b7a:	e023      	b.n	8023bc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8023b82:	b2db      	uxtb	r3, r3
 8023b84:	2b02      	cmp	r3, #2
 8023b86:	dc02      	bgt.n	8023b8e <USBD_GetConfig+0x2e>
 8023b88:	2b00      	cmp	r3, #0
 8023b8a:	dc03      	bgt.n	8023b94 <USBD_GetConfig+0x34>
 8023b8c:	e015      	b.n	8023bba <USBD_GetConfig+0x5a>
 8023b8e:	2b03      	cmp	r3, #3
 8023b90:	d00b      	beq.n	8023baa <USBD_GetConfig+0x4a>
 8023b92:	e012      	b.n	8023bba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	2200      	movs	r2, #0
 8023b98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	3308      	adds	r3, #8
 8023b9e:	2201      	movs	r2, #1
 8023ba0:	4619      	mov	r1, r3
 8023ba2:	6878      	ldr	r0, [r7, #4]
 8023ba4:	f000 f93c 	bl	8023e20 <USBD_CtlSendData>
        break;
 8023ba8:	e00c      	b.n	8023bc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	3304      	adds	r3, #4
 8023bae:	2201      	movs	r2, #1
 8023bb0:	4619      	mov	r1, r3
 8023bb2:	6878      	ldr	r0, [r7, #4]
 8023bb4:	f000 f934 	bl	8023e20 <USBD_CtlSendData>
        break;
 8023bb8:	e004      	b.n	8023bc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8023bba:	6839      	ldr	r1, [r7, #0]
 8023bbc:	6878      	ldr	r0, [r7, #4]
 8023bbe:	f000 f8be 	bl	8023d3e <USBD_CtlError>
        break;
 8023bc2:	bf00      	nop
}
 8023bc4:	bf00      	nop
 8023bc6:	3708      	adds	r7, #8
 8023bc8:	46bd      	mov	sp, r7
 8023bca:	bd80      	pop	{r7, pc}

08023bcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023bcc:	b580      	push	{r7, lr}
 8023bce:	b082      	sub	sp, #8
 8023bd0:	af00      	add	r7, sp, #0
 8023bd2:	6078      	str	r0, [r7, #4]
 8023bd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8023bdc:	b2db      	uxtb	r3, r3
 8023bde:	3b01      	subs	r3, #1
 8023be0:	2b02      	cmp	r3, #2
 8023be2:	d81e      	bhi.n	8023c22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8023be4:	683b      	ldr	r3, [r7, #0]
 8023be6:	88db      	ldrh	r3, [r3, #6]
 8023be8:	2b02      	cmp	r3, #2
 8023bea:	d004      	beq.n	8023bf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8023bec:	6839      	ldr	r1, [r7, #0]
 8023bee:	6878      	ldr	r0, [r7, #4]
 8023bf0:	f000 f8a5 	bl	8023d3e <USBD_CtlError>
        break;
 8023bf4:	e01a      	b.n	8023c2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	2201      	movs	r2, #1
 8023bfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8023c02:	2b00      	cmp	r3, #0
 8023c04:	d005      	beq.n	8023c12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8023c06:	687b      	ldr	r3, [r7, #4]
 8023c08:	68db      	ldr	r3, [r3, #12]
 8023c0a:	f043 0202 	orr.w	r2, r3, #2
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	330c      	adds	r3, #12
 8023c16:	2202      	movs	r2, #2
 8023c18:	4619      	mov	r1, r3
 8023c1a:	6878      	ldr	r0, [r7, #4]
 8023c1c:	f000 f900 	bl	8023e20 <USBD_CtlSendData>
      break;
 8023c20:	e004      	b.n	8023c2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8023c22:	6839      	ldr	r1, [r7, #0]
 8023c24:	6878      	ldr	r0, [r7, #4]
 8023c26:	f000 f88a 	bl	8023d3e <USBD_CtlError>
      break;
 8023c2a:	bf00      	nop
  }
}
 8023c2c:	bf00      	nop
 8023c2e:	3708      	adds	r7, #8
 8023c30:	46bd      	mov	sp, r7
 8023c32:	bd80      	pop	{r7, pc}

08023c34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023c34:	b580      	push	{r7, lr}
 8023c36:	b082      	sub	sp, #8
 8023c38:	af00      	add	r7, sp, #0
 8023c3a:	6078      	str	r0, [r7, #4]
 8023c3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8023c3e:	683b      	ldr	r3, [r7, #0]
 8023c40:	885b      	ldrh	r3, [r3, #2]
 8023c42:	2b01      	cmp	r3, #1
 8023c44:	d107      	bne.n	8023c56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	2201      	movs	r2, #1
 8023c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8023c4e:	6878      	ldr	r0, [r7, #4]
 8023c50:	f000 f940 	bl	8023ed4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8023c54:	e013      	b.n	8023c7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8023c56:	683b      	ldr	r3, [r7, #0]
 8023c58:	885b      	ldrh	r3, [r3, #2]
 8023c5a:	2b02      	cmp	r3, #2
 8023c5c:	d10b      	bne.n	8023c76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8023c5e:	683b      	ldr	r3, [r7, #0]
 8023c60:	889b      	ldrh	r3, [r3, #4]
 8023c62:	0a1b      	lsrs	r3, r3, #8
 8023c64:	b29b      	uxth	r3, r3
 8023c66:	b2da      	uxtb	r2, r3
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8023c6e:	6878      	ldr	r0, [r7, #4]
 8023c70:	f000 f930 	bl	8023ed4 <USBD_CtlSendStatus>
}
 8023c74:	e003      	b.n	8023c7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8023c76:	6839      	ldr	r1, [r7, #0]
 8023c78:	6878      	ldr	r0, [r7, #4]
 8023c7a:	f000 f860 	bl	8023d3e <USBD_CtlError>
}
 8023c7e:	bf00      	nop
 8023c80:	3708      	adds	r7, #8
 8023c82:	46bd      	mov	sp, r7
 8023c84:	bd80      	pop	{r7, pc}

08023c86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023c86:	b580      	push	{r7, lr}
 8023c88:	b082      	sub	sp, #8
 8023c8a:	af00      	add	r7, sp, #0
 8023c8c:	6078      	str	r0, [r7, #4]
 8023c8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8023c90:	687b      	ldr	r3, [r7, #4]
 8023c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8023c96:	b2db      	uxtb	r3, r3
 8023c98:	3b01      	subs	r3, #1
 8023c9a:	2b02      	cmp	r3, #2
 8023c9c:	d80b      	bhi.n	8023cb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8023c9e:	683b      	ldr	r3, [r7, #0]
 8023ca0:	885b      	ldrh	r3, [r3, #2]
 8023ca2:	2b01      	cmp	r3, #1
 8023ca4:	d10c      	bne.n	8023cc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	2200      	movs	r2, #0
 8023caa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8023cae:	6878      	ldr	r0, [r7, #4]
 8023cb0:	f000 f910 	bl	8023ed4 <USBD_CtlSendStatus>
      }
      break;
 8023cb4:	e004      	b.n	8023cc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8023cb6:	6839      	ldr	r1, [r7, #0]
 8023cb8:	6878      	ldr	r0, [r7, #4]
 8023cba:	f000 f840 	bl	8023d3e <USBD_CtlError>
      break;
 8023cbe:	e000      	b.n	8023cc2 <USBD_ClrFeature+0x3c>
      break;
 8023cc0:	bf00      	nop
  }
}
 8023cc2:	bf00      	nop
 8023cc4:	3708      	adds	r7, #8
 8023cc6:	46bd      	mov	sp, r7
 8023cc8:	bd80      	pop	{r7, pc}

08023cca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8023cca:	b580      	push	{r7, lr}
 8023ccc:	b084      	sub	sp, #16
 8023cce:	af00      	add	r7, sp, #0
 8023cd0:	6078      	str	r0, [r7, #4]
 8023cd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8023cd4:	683b      	ldr	r3, [r7, #0]
 8023cd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8023cd8:	68fb      	ldr	r3, [r7, #12]
 8023cda:	781a      	ldrb	r2, [r3, #0]
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	3301      	adds	r3, #1
 8023ce4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8023ce6:	68fb      	ldr	r3, [r7, #12]
 8023ce8:	781a      	ldrb	r2, [r3, #0]
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8023cee:	68fb      	ldr	r3, [r7, #12]
 8023cf0:	3301      	adds	r3, #1
 8023cf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8023cf4:	68f8      	ldr	r0, [r7, #12]
 8023cf6:	f7ff fa3d 	bl	8023174 <SWAPBYTE>
 8023cfa:	4603      	mov	r3, r0
 8023cfc:	461a      	mov	r2, r3
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8023d02:	68fb      	ldr	r3, [r7, #12]
 8023d04:	3301      	adds	r3, #1
 8023d06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8023d08:	68fb      	ldr	r3, [r7, #12]
 8023d0a:	3301      	adds	r3, #1
 8023d0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8023d0e:	68f8      	ldr	r0, [r7, #12]
 8023d10:	f7ff fa30 	bl	8023174 <SWAPBYTE>
 8023d14:	4603      	mov	r3, r0
 8023d16:	461a      	mov	r2, r3
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8023d1c:	68fb      	ldr	r3, [r7, #12]
 8023d1e:	3301      	adds	r3, #1
 8023d20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	3301      	adds	r3, #1
 8023d26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8023d28:	68f8      	ldr	r0, [r7, #12]
 8023d2a:	f7ff fa23 	bl	8023174 <SWAPBYTE>
 8023d2e:	4603      	mov	r3, r0
 8023d30:	461a      	mov	r2, r3
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	80da      	strh	r2, [r3, #6]
}
 8023d36:	bf00      	nop
 8023d38:	3710      	adds	r7, #16
 8023d3a:	46bd      	mov	sp, r7
 8023d3c:	bd80      	pop	{r7, pc}

08023d3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8023d3e:	b580      	push	{r7, lr}
 8023d40:	b082      	sub	sp, #8
 8023d42:	af00      	add	r7, sp, #0
 8023d44:	6078      	str	r0, [r7, #4]
 8023d46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8023d48:	2180      	movs	r1, #128	; 0x80
 8023d4a:	6878      	ldr	r0, [r7, #4]
 8023d4c:	f004 f812 	bl	8027d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8023d50:	2100      	movs	r1, #0
 8023d52:	6878      	ldr	r0, [r7, #4]
 8023d54:	f004 f80e 	bl	8027d74 <USBD_LL_StallEP>
}
 8023d58:	bf00      	nop
 8023d5a:	3708      	adds	r7, #8
 8023d5c:	46bd      	mov	sp, r7
 8023d5e:	bd80      	pop	{r7, pc}

08023d60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8023d60:	b580      	push	{r7, lr}
 8023d62:	b086      	sub	sp, #24
 8023d64:	af00      	add	r7, sp, #0
 8023d66:	60f8      	str	r0, [r7, #12]
 8023d68:	60b9      	str	r1, [r7, #8]
 8023d6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8023d6c:	2300      	movs	r3, #0
 8023d6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8023d70:	68fb      	ldr	r3, [r7, #12]
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d036      	beq.n	8023de4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8023d76:	68fb      	ldr	r3, [r7, #12]
 8023d78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8023d7a:	6938      	ldr	r0, [r7, #16]
 8023d7c:	f000 f836 	bl	8023dec <USBD_GetLen>
 8023d80:	4603      	mov	r3, r0
 8023d82:	3301      	adds	r3, #1
 8023d84:	b29b      	uxth	r3, r3
 8023d86:	005b      	lsls	r3, r3, #1
 8023d88:	b29a      	uxth	r2, r3
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8023d8e:	7dfb      	ldrb	r3, [r7, #23]
 8023d90:	68ba      	ldr	r2, [r7, #8]
 8023d92:	4413      	add	r3, r2
 8023d94:	687a      	ldr	r2, [r7, #4]
 8023d96:	7812      	ldrb	r2, [r2, #0]
 8023d98:	701a      	strb	r2, [r3, #0]
  idx++;
 8023d9a:	7dfb      	ldrb	r3, [r7, #23]
 8023d9c:	3301      	adds	r3, #1
 8023d9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8023da0:	7dfb      	ldrb	r3, [r7, #23]
 8023da2:	68ba      	ldr	r2, [r7, #8]
 8023da4:	4413      	add	r3, r2
 8023da6:	2203      	movs	r2, #3
 8023da8:	701a      	strb	r2, [r3, #0]
  idx++;
 8023daa:	7dfb      	ldrb	r3, [r7, #23]
 8023dac:	3301      	adds	r3, #1
 8023dae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8023db0:	e013      	b.n	8023dda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8023db2:	7dfb      	ldrb	r3, [r7, #23]
 8023db4:	68ba      	ldr	r2, [r7, #8]
 8023db6:	4413      	add	r3, r2
 8023db8:	693a      	ldr	r2, [r7, #16]
 8023dba:	7812      	ldrb	r2, [r2, #0]
 8023dbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8023dbe:	693b      	ldr	r3, [r7, #16]
 8023dc0:	3301      	adds	r3, #1
 8023dc2:	613b      	str	r3, [r7, #16]
    idx++;
 8023dc4:	7dfb      	ldrb	r3, [r7, #23]
 8023dc6:	3301      	adds	r3, #1
 8023dc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8023dca:	7dfb      	ldrb	r3, [r7, #23]
 8023dcc:	68ba      	ldr	r2, [r7, #8]
 8023dce:	4413      	add	r3, r2
 8023dd0:	2200      	movs	r2, #0
 8023dd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8023dd4:	7dfb      	ldrb	r3, [r7, #23]
 8023dd6:	3301      	adds	r3, #1
 8023dd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8023dda:	693b      	ldr	r3, [r7, #16]
 8023ddc:	781b      	ldrb	r3, [r3, #0]
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	d1e7      	bne.n	8023db2 <USBD_GetString+0x52>
 8023de2:	e000      	b.n	8023de6 <USBD_GetString+0x86>
    return;
 8023de4:	bf00      	nop
  }
}
 8023de6:	3718      	adds	r7, #24
 8023de8:	46bd      	mov	sp, r7
 8023dea:	bd80      	pop	{r7, pc}

08023dec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8023dec:	b480      	push	{r7}
 8023dee:	b085      	sub	sp, #20
 8023df0:	af00      	add	r7, sp, #0
 8023df2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8023df4:	2300      	movs	r3, #0
 8023df6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8023dfc:	e005      	b.n	8023e0a <USBD_GetLen+0x1e>
  {
    len++;
 8023dfe:	7bfb      	ldrb	r3, [r7, #15]
 8023e00:	3301      	adds	r3, #1
 8023e02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8023e04:	68bb      	ldr	r3, [r7, #8]
 8023e06:	3301      	adds	r3, #1
 8023e08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8023e0a:	68bb      	ldr	r3, [r7, #8]
 8023e0c:	781b      	ldrb	r3, [r3, #0]
 8023e0e:	2b00      	cmp	r3, #0
 8023e10:	d1f5      	bne.n	8023dfe <USBD_GetLen+0x12>
  }

  return len;
 8023e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e14:	4618      	mov	r0, r3
 8023e16:	3714      	adds	r7, #20
 8023e18:	46bd      	mov	sp, r7
 8023e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e1e:	4770      	bx	lr

08023e20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8023e20:	b580      	push	{r7, lr}
 8023e22:	b084      	sub	sp, #16
 8023e24:	af00      	add	r7, sp, #0
 8023e26:	60f8      	str	r0, [r7, #12]
 8023e28:	60b9      	str	r1, [r7, #8]
 8023e2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8023e2c:	68fb      	ldr	r3, [r7, #12]
 8023e2e:	2202      	movs	r2, #2
 8023e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8023e34:	68fb      	ldr	r3, [r7, #12]
 8023e36:	687a      	ldr	r2, [r7, #4]
 8023e38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8023e3a:	68fb      	ldr	r3, [r7, #12]
 8023e3c:	687a      	ldr	r2, [r7, #4]
 8023e3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	68ba      	ldr	r2, [r7, #8]
 8023e44:	2100      	movs	r1, #0
 8023e46:	68f8      	ldr	r0, [r7, #12]
 8023e48:	f004 f81d 	bl	8027e86 <USBD_LL_Transmit>

  return USBD_OK;
 8023e4c:	2300      	movs	r3, #0
}
 8023e4e:	4618      	mov	r0, r3
 8023e50:	3710      	adds	r7, #16
 8023e52:	46bd      	mov	sp, r7
 8023e54:	bd80      	pop	{r7, pc}

08023e56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8023e56:	b580      	push	{r7, lr}
 8023e58:	b084      	sub	sp, #16
 8023e5a:	af00      	add	r7, sp, #0
 8023e5c:	60f8      	str	r0, [r7, #12]
 8023e5e:	60b9      	str	r1, [r7, #8]
 8023e60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	68ba      	ldr	r2, [r7, #8]
 8023e66:	2100      	movs	r1, #0
 8023e68:	68f8      	ldr	r0, [r7, #12]
 8023e6a:	f004 f80c 	bl	8027e86 <USBD_LL_Transmit>

  return USBD_OK;
 8023e6e:	2300      	movs	r3, #0
}
 8023e70:	4618      	mov	r0, r3
 8023e72:	3710      	adds	r7, #16
 8023e74:	46bd      	mov	sp, r7
 8023e76:	bd80      	pop	{r7, pc}

08023e78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8023e78:	b580      	push	{r7, lr}
 8023e7a:	b084      	sub	sp, #16
 8023e7c:	af00      	add	r7, sp, #0
 8023e7e:	60f8      	str	r0, [r7, #12]
 8023e80:	60b9      	str	r1, [r7, #8]
 8023e82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	2203      	movs	r2, #3
 8023e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8023e8c:	68fb      	ldr	r3, [r7, #12]
 8023e8e:	687a      	ldr	r2, [r7, #4]
 8023e90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	687a      	ldr	r2, [r7, #4]
 8023e98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	68ba      	ldr	r2, [r7, #8]
 8023ea0:	2100      	movs	r1, #0
 8023ea2:	68f8      	ldr	r0, [r7, #12]
 8023ea4:	f004 f810 	bl	8027ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023ea8:	2300      	movs	r3, #0
}
 8023eaa:	4618      	mov	r0, r3
 8023eac:	3710      	adds	r7, #16
 8023eae:	46bd      	mov	sp, r7
 8023eb0:	bd80      	pop	{r7, pc}

08023eb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8023eb2:	b580      	push	{r7, lr}
 8023eb4:	b084      	sub	sp, #16
 8023eb6:	af00      	add	r7, sp, #0
 8023eb8:	60f8      	str	r0, [r7, #12]
 8023eba:	60b9      	str	r1, [r7, #8]
 8023ebc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	68ba      	ldr	r2, [r7, #8]
 8023ec2:	2100      	movs	r1, #0
 8023ec4:	68f8      	ldr	r0, [r7, #12]
 8023ec6:	f003 ffff 	bl	8027ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023eca:	2300      	movs	r3, #0
}
 8023ecc:	4618      	mov	r0, r3
 8023ece:	3710      	adds	r7, #16
 8023ed0:	46bd      	mov	sp, r7
 8023ed2:	bd80      	pop	{r7, pc}

08023ed4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8023ed4:	b580      	push	{r7, lr}
 8023ed6:	b082      	sub	sp, #8
 8023ed8:	af00      	add	r7, sp, #0
 8023eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	2204      	movs	r2, #4
 8023ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8023ee4:	2300      	movs	r3, #0
 8023ee6:	2200      	movs	r2, #0
 8023ee8:	2100      	movs	r1, #0
 8023eea:	6878      	ldr	r0, [r7, #4]
 8023eec:	f003 ffcb 	bl	8027e86 <USBD_LL_Transmit>

  return USBD_OK;
 8023ef0:	2300      	movs	r3, #0
}
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	3708      	adds	r7, #8
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	bd80      	pop	{r7, pc}

08023efa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8023efa:	b580      	push	{r7, lr}
 8023efc:	b082      	sub	sp, #8
 8023efe:	af00      	add	r7, sp, #0
 8023f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	2205      	movs	r2, #5
 8023f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8023f0a:	2300      	movs	r3, #0
 8023f0c:	2200      	movs	r2, #0
 8023f0e:	2100      	movs	r1, #0
 8023f10:	6878      	ldr	r0, [r7, #4]
 8023f12:	f003 ffd9 	bl	8027ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8023f16:	2300      	movs	r3, #0
}
 8023f18:	4618      	mov	r0, r3
 8023f1a:	3708      	adds	r7, #8
 8023f1c:	46bd      	mov	sp, r7
 8023f1e:	bd80      	pop	{r7, pc}

08023f20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8023f20:	b580      	push	{r7, lr}
 8023f22:	b084      	sub	sp, #16
 8023f24:	af00      	add	r7, sp, #0
 8023f26:	4603      	mov	r3, r0
 8023f28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8023f2a:	79fb      	ldrb	r3, [r7, #7]
 8023f2c:	4a08      	ldr	r2, [pc, #32]	; (8023f50 <disk_status+0x30>)
 8023f2e:	009b      	lsls	r3, r3, #2
 8023f30:	4413      	add	r3, r2
 8023f32:	685b      	ldr	r3, [r3, #4]
 8023f34:	685b      	ldr	r3, [r3, #4]
 8023f36:	79fa      	ldrb	r2, [r7, #7]
 8023f38:	4905      	ldr	r1, [pc, #20]	; (8023f50 <disk_status+0x30>)
 8023f3a:	440a      	add	r2, r1
 8023f3c:	7a12      	ldrb	r2, [r2, #8]
 8023f3e:	4610      	mov	r0, r2
 8023f40:	4798      	blx	r3
 8023f42:	4603      	mov	r3, r0
 8023f44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8023f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8023f48:	4618      	mov	r0, r3
 8023f4a:	3710      	adds	r7, #16
 8023f4c:	46bd      	mov	sp, r7
 8023f4e:	bd80      	pop	{r7, pc}
 8023f50:	20002660 	.word	0x20002660

08023f54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8023f54:	b580      	push	{r7, lr}
 8023f56:	b084      	sub	sp, #16
 8023f58:	af00      	add	r7, sp, #0
 8023f5a:	4603      	mov	r3, r0
 8023f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8023f5e:	2300      	movs	r3, #0
 8023f60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8023f62:	79fb      	ldrb	r3, [r7, #7]
 8023f64:	4a0d      	ldr	r2, [pc, #52]	; (8023f9c <disk_initialize+0x48>)
 8023f66:	5cd3      	ldrb	r3, [r2, r3]
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	d111      	bne.n	8023f90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8023f6c:	79fb      	ldrb	r3, [r7, #7]
 8023f6e:	4a0b      	ldr	r2, [pc, #44]	; (8023f9c <disk_initialize+0x48>)
 8023f70:	2101      	movs	r1, #1
 8023f72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8023f74:	79fb      	ldrb	r3, [r7, #7]
 8023f76:	4a09      	ldr	r2, [pc, #36]	; (8023f9c <disk_initialize+0x48>)
 8023f78:	009b      	lsls	r3, r3, #2
 8023f7a:	4413      	add	r3, r2
 8023f7c:	685b      	ldr	r3, [r3, #4]
 8023f7e:	681b      	ldr	r3, [r3, #0]
 8023f80:	79fa      	ldrb	r2, [r7, #7]
 8023f82:	4906      	ldr	r1, [pc, #24]	; (8023f9c <disk_initialize+0x48>)
 8023f84:	440a      	add	r2, r1
 8023f86:	7a12      	ldrb	r2, [r2, #8]
 8023f88:	4610      	mov	r0, r2
 8023f8a:	4798      	blx	r3
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8023f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8023f92:	4618      	mov	r0, r3
 8023f94:	3710      	adds	r7, #16
 8023f96:	46bd      	mov	sp, r7
 8023f98:	bd80      	pop	{r7, pc}
 8023f9a:	bf00      	nop
 8023f9c:	20002660 	.word	0x20002660

08023fa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8023fa0:	b590      	push	{r4, r7, lr}
 8023fa2:	b087      	sub	sp, #28
 8023fa4:	af00      	add	r7, sp, #0
 8023fa6:	60b9      	str	r1, [r7, #8]
 8023fa8:	607a      	str	r2, [r7, #4]
 8023faa:	603b      	str	r3, [r7, #0]
 8023fac:	4603      	mov	r3, r0
 8023fae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8023fb0:	7bfb      	ldrb	r3, [r7, #15]
 8023fb2:	4a0a      	ldr	r2, [pc, #40]	; (8023fdc <disk_read+0x3c>)
 8023fb4:	009b      	lsls	r3, r3, #2
 8023fb6:	4413      	add	r3, r2
 8023fb8:	685b      	ldr	r3, [r3, #4]
 8023fba:	689c      	ldr	r4, [r3, #8]
 8023fbc:	7bfb      	ldrb	r3, [r7, #15]
 8023fbe:	4a07      	ldr	r2, [pc, #28]	; (8023fdc <disk_read+0x3c>)
 8023fc0:	4413      	add	r3, r2
 8023fc2:	7a18      	ldrb	r0, [r3, #8]
 8023fc4:	683b      	ldr	r3, [r7, #0]
 8023fc6:	687a      	ldr	r2, [r7, #4]
 8023fc8:	68b9      	ldr	r1, [r7, #8]
 8023fca:	47a0      	blx	r4
 8023fcc:	4603      	mov	r3, r0
 8023fce:	75fb      	strb	r3, [r7, #23]
  return res;
 8023fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8023fd2:	4618      	mov	r0, r3
 8023fd4:	371c      	adds	r7, #28
 8023fd6:	46bd      	mov	sp, r7
 8023fd8:	bd90      	pop	{r4, r7, pc}
 8023fda:	bf00      	nop
 8023fdc:	20002660 	.word	0x20002660

08023fe0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8023fe0:	b590      	push	{r4, r7, lr}
 8023fe2:	b087      	sub	sp, #28
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	60b9      	str	r1, [r7, #8]
 8023fe8:	607a      	str	r2, [r7, #4]
 8023fea:	603b      	str	r3, [r7, #0]
 8023fec:	4603      	mov	r3, r0
 8023fee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8023ff0:	7bfb      	ldrb	r3, [r7, #15]
 8023ff2:	4a0a      	ldr	r2, [pc, #40]	; (802401c <disk_write+0x3c>)
 8023ff4:	009b      	lsls	r3, r3, #2
 8023ff6:	4413      	add	r3, r2
 8023ff8:	685b      	ldr	r3, [r3, #4]
 8023ffa:	68dc      	ldr	r4, [r3, #12]
 8023ffc:	7bfb      	ldrb	r3, [r7, #15]
 8023ffe:	4a07      	ldr	r2, [pc, #28]	; (802401c <disk_write+0x3c>)
 8024000:	4413      	add	r3, r2
 8024002:	7a18      	ldrb	r0, [r3, #8]
 8024004:	683b      	ldr	r3, [r7, #0]
 8024006:	687a      	ldr	r2, [r7, #4]
 8024008:	68b9      	ldr	r1, [r7, #8]
 802400a:	47a0      	blx	r4
 802400c:	4603      	mov	r3, r0
 802400e:	75fb      	strb	r3, [r7, #23]
  return res;
 8024010:	7dfb      	ldrb	r3, [r7, #23]
}
 8024012:	4618      	mov	r0, r3
 8024014:	371c      	adds	r7, #28
 8024016:	46bd      	mov	sp, r7
 8024018:	bd90      	pop	{r4, r7, pc}
 802401a:	bf00      	nop
 802401c:	20002660 	.word	0x20002660

08024020 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8024020:	b580      	push	{r7, lr}
 8024022:	b084      	sub	sp, #16
 8024024:	af00      	add	r7, sp, #0
 8024026:	4603      	mov	r3, r0
 8024028:	603a      	str	r2, [r7, #0]
 802402a:	71fb      	strb	r3, [r7, #7]
 802402c:	460b      	mov	r3, r1
 802402e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8024030:	79fb      	ldrb	r3, [r7, #7]
 8024032:	4a09      	ldr	r2, [pc, #36]	; (8024058 <disk_ioctl+0x38>)
 8024034:	009b      	lsls	r3, r3, #2
 8024036:	4413      	add	r3, r2
 8024038:	685b      	ldr	r3, [r3, #4]
 802403a:	691b      	ldr	r3, [r3, #16]
 802403c:	79fa      	ldrb	r2, [r7, #7]
 802403e:	4906      	ldr	r1, [pc, #24]	; (8024058 <disk_ioctl+0x38>)
 8024040:	440a      	add	r2, r1
 8024042:	7a10      	ldrb	r0, [r2, #8]
 8024044:	79b9      	ldrb	r1, [r7, #6]
 8024046:	683a      	ldr	r2, [r7, #0]
 8024048:	4798      	blx	r3
 802404a:	4603      	mov	r3, r0
 802404c:	73fb      	strb	r3, [r7, #15]
  return res;
 802404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024050:	4618      	mov	r0, r3
 8024052:	3710      	adds	r7, #16
 8024054:	46bd      	mov	sp, r7
 8024056:	bd80      	pop	{r7, pc}
 8024058:	20002660 	.word	0x20002660

0802405c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 802405c:	b480      	push	{r7}
 802405e:	af00      	add	r7, sp, #0
  return 0;
 8024060:	2300      	movs	r3, #0
}
 8024062:	4618      	mov	r0, r3
 8024064:	46bd      	mov	sp, r7
 8024066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802406a:	4770      	bx	lr

0802406c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 802406c:	b480      	push	{r7}
 802406e:	b085      	sub	sp, #20
 8024070:	af00      	add	r7, sp, #0
 8024072:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	3301      	adds	r3, #1
 8024078:	781b      	ldrb	r3, [r3, #0]
 802407a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 802407c:	89fb      	ldrh	r3, [r7, #14]
 802407e:	021b      	lsls	r3, r3, #8
 8024080:	b21a      	sxth	r2, r3
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	781b      	ldrb	r3, [r3, #0]
 8024086:	b21b      	sxth	r3, r3
 8024088:	4313      	orrs	r3, r2
 802408a:	b21b      	sxth	r3, r3
 802408c:	81fb      	strh	r3, [r7, #14]
	return rv;
 802408e:	89fb      	ldrh	r3, [r7, #14]
}
 8024090:	4618      	mov	r0, r3
 8024092:	3714      	adds	r7, #20
 8024094:	46bd      	mov	sp, r7
 8024096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802409a:	4770      	bx	lr

0802409c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 802409c:	b480      	push	{r7}
 802409e:	b085      	sub	sp, #20
 80240a0:	af00      	add	r7, sp, #0
 80240a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	3303      	adds	r3, #3
 80240a8:	781b      	ldrb	r3, [r3, #0]
 80240aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80240ac:	68fb      	ldr	r3, [r7, #12]
 80240ae:	021b      	lsls	r3, r3, #8
 80240b0:	687a      	ldr	r2, [r7, #4]
 80240b2:	3202      	adds	r2, #2
 80240b4:	7812      	ldrb	r2, [r2, #0]
 80240b6:	4313      	orrs	r3, r2
 80240b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	021b      	lsls	r3, r3, #8
 80240be:	687a      	ldr	r2, [r7, #4]
 80240c0:	3201      	adds	r2, #1
 80240c2:	7812      	ldrb	r2, [r2, #0]
 80240c4:	4313      	orrs	r3, r2
 80240c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80240c8:	68fb      	ldr	r3, [r7, #12]
 80240ca:	021b      	lsls	r3, r3, #8
 80240cc:	687a      	ldr	r2, [r7, #4]
 80240ce:	7812      	ldrb	r2, [r2, #0]
 80240d0:	4313      	orrs	r3, r2
 80240d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80240d4:	68fb      	ldr	r3, [r7, #12]
}
 80240d6:	4618      	mov	r0, r3
 80240d8:	3714      	adds	r7, #20
 80240da:	46bd      	mov	sp, r7
 80240dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240e0:	4770      	bx	lr

080240e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80240e2:	b480      	push	{r7}
 80240e4:	b083      	sub	sp, #12
 80240e6:	af00      	add	r7, sp, #0
 80240e8:	6078      	str	r0, [r7, #4]
 80240ea:	460b      	mov	r3, r1
 80240ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	1c5a      	adds	r2, r3, #1
 80240f2:	607a      	str	r2, [r7, #4]
 80240f4:	887a      	ldrh	r2, [r7, #2]
 80240f6:	b2d2      	uxtb	r2, r2
 80240f8:	701a      	strb	r2, [r3, #0]
 80240fa:	887b      	ldrh	r3, [r7, #2]
 80240fc:	0a1b      	lsrs	r3, r3, #8
 80240fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	1c5a      	adds	r2, r3, #1
 8024104:	607a      	str	r2, [r7, #4]
 8024106:	887a      	ldrh	r2, [r7, #2]
 8024108:	b2d2      	uxtb	r2, r2
 802410a:	701a      	strb	r2, [r3, #0]
}
 802410c:	bf00      	nop
 802410e:	370c      	adds	r7, #12
 8024110:	46bd      	mov	sp, r7
 8024112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024116:	4770      	bx	lr

08024118 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8024118:	b480      	push	{r7}
 802411a:	b083      	sub	sp, #12
 802411c:	af00      	add	r7, sp, #0
 802411e:	6078      	str	r0, [r7, #4]
 8024120:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	1c5a      	adds	r2, r3, #1
 8024126:	607a      	str	r2, [r7, #4]
 8024128:	683a      	ldr	r2, [r7, #0]
 802412a:	b2d2      	uxtb	r2, r2
 802412c:	701a      	strb	r2, [r3, #0]
 802412e:	683b      	ldr	r3, [r7, #0]
 8024130:	0a1b      	lsrs	r3, r3, #8
 8024132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	1c5a      	adds	r2, r3, #1
 8024138:	607a      	str	r2, [r7, #4]
 802413a:	683a      	ldr	r2, [r7, #0]
 802413c:	b2d2      	uxtb	r2, r2
 802413e:	701a      	strb	r2, [r3, #0]
 8024140:	683b      	ldr	r3, [r7, #0]
 8024142:	0a1b      	lsrs	r3, r3, #8
 8024144:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8024146:	687b      	ldr	r3, [r7, #4]
 8024148:	1c5a      	adds	r2, r3, #1
 802414a:	607a      	str	r2, [r7, #4]
 802414c:	683a      	ldr	r2, [r7, #0]
 802414e:	b2d2      	uxtb	r2, r2
 8024150:	701a      	strb	r2, [r3, #0]
 8024152:	683b      	ldr	r3, [r7, #0]
 8024154:	0a1b      	lsrs	r3, r3, #8
 8024156:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	1c5a      	adds	r2, r3, #1
 802415c:	607a      	str	r2, [r7, #4]
 802415e:	683a      	ldr	r2, [r7, #0]
 8024160:	b2d2      	uxtb	r2, r2
 8024162:	701a      	strb	r2, [r3, #0]
}
 8024164:	bf00      	nop
 8024166:	370c      	adds	r7, #12
 8024168:	46bd      	mov	sp, r7
 802416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802416e:	4770      	bx	lr

08024170 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8024170:	b480      	push	{r7}
 8024172:	b087      	sub	sp, #28
 8024174:	af00      	add	r7, sp, #0
 8024176:	60f8      	str	r0, [r7, #12]
 8024178:	60b9      	str	r1, [r7, #8]
 802417a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802417c:	68fb      	ldr	r3, [r7, #12]
 802417e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8024180:	68bb      	ldr	r3, [r7, #8]
 8024182:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	2b00      	cmp	r3, #0
 8024188:	d00d      	beq.n	80241a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 802418a:	693a      	ldr	r2, [r7, #16]
 802418c:	1c53      	adds	r3, r2, #1
 802418e:	613b      	str	r3, [r7, #16]
 8024190:	697b      	ldr	r3, [r7, #20]
 8024192:	1c59      	adds	r1, r3, #1
 8024194:	6179      	str	r1, [r7, #20]
 8024196:	7812      	ldrb	r2, [r2, #0]
 8024198:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	3b01      	subs	r3, #1
 802419e:	607b      	str	r3, [r7, #4]
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	d1f1      	bne.n	802418a <mem_cpy+0x1a>
	}
}
 80241a6:	bf00      	nop
 80241a8:	371c      	adds	r7, #28
 80241aa:	46bd      	mov	sp, r7
 80241ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241b0:	4770      	bx	lr

080241b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80241b2:	b480      	push	{r7}
 80241b4:	b087      	sub	sp, #28
 80241b6:	af00      	add	r7, sp, #0
 80241b8:	60f8      	str	r0, [r7, #12]
 80241ba:	60b9      	str	r1, [r7, #8]
 80241bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80241be:	68fb      	ldr	r3, [r7, #12]
 80241c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80241c2:	697b      	ldr	r3, [r7, #20]
 80241c4:	1c5a      	adds	r2, r3, #1
 80241c6:	617a      	str	r2, [r7, #20]
 80241c8:	68ba      	ldr	r2, [r7, #8]
 80241ca:	b2d2      	uxtb	r2, r2
 80241cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	3b01      	subs	r3, #1
 80241d2:	607b      	str	r3, [r7, #4]
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d1f3      	bne.n	80241c2 <mem_set+0x10>
}
 80241da:	bf00      	nop
 80241dc:	bf00      	nop
 80241de:	371c      	adds	r7, #28
 80241e0:	46bd      	mov	sp, r7
 80241e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241e6:	4770      	bx	lr

080241e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80241e8:	b480      	push	{r7}
 80241ea:	b089      	sub	sp, #36	; 0x24
 80241ec:	af00      	add	r7, sp, #0
 80241ee:	60f8      	str	r0, [r7, #12]
 80241f0:	60b9      	str	r1, [r7, #8]
 80241f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80241f4:	68fb      	ldr	r3, [r7, #12]
 80241f6:	61fb      	str	r3, [r7, #28]
 80241f8:	68bb      	ldr	r3, [r7, #8]
 80241fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80241fc:	2300      	movs	r3, #0
 80241fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8024200:	69fb      	ldr	r3, [r7, #28]
 8024202:	1c5a      	adds	r2, r3, #1
 8024204:	61fa      	str	r2, [r7, #28]
 8024206:	781b      	ldrb	r3, [r3, #0]
 8024208:	4619      	mov	r1, r3
 802420a:	69bb      	ldr	r3, [r7, #24]
 802420c:	1c5a      	adds	r2, r3, #1
 802420e:	61ba      	str	r2, [r7, #24]
 8024210:	781b      	ldrb	r3, [r3, #0]
 8024212:	1acb      	subs	r3, r1, r3
 8024214:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	3b01      	subs	r3, #1
 802421a:	607b      	str	r3, [r7, #4]
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	2b00      	cmp	r3, #0
 8024220:	d002      	beq.n	8024228 <mem_cmp+0x40>
 8024222:	697b      	ldr	r3, [r7, #20]
 8024224:	2b00      	cmp	r3, #0
 8024226:	d0eb      	beq.n	8024200 <mem_cmp+0x18>

	return r;
 8024228:	697b      	ldr	r3, [r7, #20]
}
 802422a:	4618      	mov	r0, r3
 802422c:	3724      	adds	r7, #36	; 0x24
 802422e:	46bd      	mov	sp, r7
 8024230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024234:	4770      	bx	lr

08024236 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8024236:	b480      	push	{r7}
 8024238:	b083      	sub	sp, #12
 802423a:	af00      	add	r7, sp, #0
 802423c:	6078      	str	r0, [r7, #4]
 802423e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8024240:	e002      	b.n	8024248 <chk_chr+0x12>
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	3301      	adds	r3, #1
 8024246:	607b      	str	r3, [r7, #4]
 8024248:	687b      	ldr	r3, [r7, #4]
 802424a:	781b      	ldrb	r3, [r3, #0]
 802424c:	2b00      	cmp	r3, #0
 802424e:	d005      	beq.n	802425c <chk_chr+0x26>
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	781b      	ldrb	r3, [r3, #0]
 8024254:	461a      	mov	r2, r3
 8024256:	683b      	ldr	r3, [r7, #0]
 8024258:	4293      	cmp	r3, r2
 802425a:	d1f2      	bne.n	8024242 <chk_chr+0xc>
	return *str;
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	781b      	ldrb	r3, [r3, #0]
}
 8024260:	4618      	mov	r0, r3
 8024262:	370c      	adds	r7, #12
 8024264:	46bd      	mov	sp, r7
 8024266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802426a:	4770      	bx	lr

0802426c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 802426c:	b480      	push	{r7}
 802426e:	b085      	sub	sp, #20
 8024270:	af00      	add	r7, sp, #0
 8024272:	6078      	str	r0, [r7, #4]
 8024274:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8024276:	2300      	movs	r3, #0
 8024278:	60bb      	str	r3, [r7, #8]
 802427a:	68bb      	ldr	r3, [r7, #8]
 802427c:	60fb      	str	r3, [r7, #12]
 802427e:	e029      	b.n	80242d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8024280:	4a27      	ldr	r2, [pc, #156]	; (8024320 <chk_lock+0xb4>)
 8024282:	68fb      	ldr	r3, [r7, #12]
 8024284:	011b      	lsls	r3, r3, #4
 8024286:	4413      	add	r3, r2
 8024288:	681b      	ldr	r3, [r3, #0]
 802428a:	2b00      	cmp	r3, #0
 802428c:	d01d      	beq.n	80242ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 802428e:	4a24      	ldr	r2, [pc, #144]	; (8024320 <chk_lock+0xb4>)
 8024290:	68fb      	ldr	r3, [r7, #12]
 8024292:	011b      	lsls	r3, r3, #4
 8024294:	4413      	add	r3, r2
 8024296:	681a      	ldr	r2, [r3, #0]
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	681b      	ldr	r3, [r3, #0]
 802429c:	429a      	cmp	r2, r3
 802429e:	d116      	bne.n	80242ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80242a0:	4a1f      	ldr	r2, [pc, #124]	; (8024320 <chk_lock+0xb4>)
 80242a2:	68fb      	ldr	r3, [r7, #12]
 80242a4:	011b      	lsls	r3, r3, #4
 80242a6:	4413      	add	r3, r2
 80242a8:	3304      	adds	r3, #4
 80242aa:	681a      	ldr	r2, [r3, #0]
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80242b0:	429a      	cmp	r2, r3
 80242b2:	d10c      	bne.n	80242ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80242b4:	4a1a      	ldr	r2, [pc, #104]	; (8024320 <chk_lock+0xb4>)
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	011b      	lsls	r3, r3, #4
 80242ba:	4413      	add	r3, r2
 80242bc:	3308      	adds	r3, #8
 80242be:	681a      	ldr	r2, [r3, #0]
 80242c0:	687b      	ldr	r3, [r7, #4]
 80242c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80242c4:	429a      	cmp	r2, r3
 80242c6:	d102      	bne.n	80242ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80242c8:	e007      	b.n	80242da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80242ca:	2301      	movs	r3, #1
 80242cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	3301      	adds	r3, #1
 80242d2:	60fb      	str	r3, [r7, #12]
 80242d4:	68fb      	ldr	r3, [r7, #12]
 80242d6:	2b01      	cmp	r3, #1
 80242d8:	d9d2      	bls.n	8024280 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80242da:	68fb      	ldr	r3, [r7, #12]
 80242dc:	2b02      	cmp	r3, #2
 80242de:	d109      	bne.n	80242f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80242e0:	68bb      	ldr	r3, [r7, #8]
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	d102      	bne.n	80242ec <chk_lock+0x80>
 80242e6:	683b      	ldr	r3, [r7, #0]
 80242e8:	2b02      	cmp	r3, #2
 80242ea:	d101      	bne.n	80242f0 <chk_lock+0x84>
 80242ec:	2300      	movs	r3, #0
 80242ee:	e010      	b.n	8024312 <chk_lock+0xa6>
 80242f0:	2312      	movs	r3, #18
 80242f2:	e00e      	b.n	8024312 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80242f4:	683b      	ldr	r3, [r7, #0]
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d108      	bne.n	802430c <chk_lock+0xa0>
 80242fa:	4a09      	ldr	r2, [pc, #36]	; (8024320 <chk_lock+0xb4>)
 80242fc:	68fb      	ldr	r3, [r7, #12]
 80242fe:	011b      	lsls	r3, r3, #4
 8024300:	4413      	add	r3, r2
 8024302:	330c      	adds	r3, #12
 8024304:	881b      	ldrh	r3, [r3, #0]
 8024306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802430a:	d101      	bne.n	8024310 <chk_lock+0xa4>
 802430c:	2310      	movs	r3, #16
 802430e:	e000      	b.n	8024312 <chk_lock+0xa6>
 8024310:	2300      	movs	r3, #0
}
 8024312:	4618      	mov	r0, r3
 8024314:	3714      	adds	r7, #20
 8024316:	46bd      	mov	sp, r7
 8024318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431c:	4770      	bx	lr
 802431e:	bf00      	nop
 8024320:	20002640 	.word	0x20002640

08024324 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8024324:	b480      	push	{r7}
 8024326:	b083      	sub	sp, #12
 8024328:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802432a:	2300      	movs	r3, #0
 802432c:	607b      	str	r3, [r7, #4]
 802432e:	e002      	b.n	8024336 <enq_lock+0x12>
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	3301      	adds	r3, #1
 8024334:	607b      	str	r3, [r7, #4]
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	2b01      	cmp	r3, #1
 802433a:	d806      	bhi.n	802434a <enq_lock+0x26>
 802433c:	4a09      	ldr	r2, [pc, #36]	; (8024364 <enq_lock+0x40>)
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	011b      	lsls	r3, r3, #4
 8024342:	4413      	add	r3, r2
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	2b00      	cmp	r3, #0
 8024348:	d1f2      	bne.n	8024330 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 802434a:	687b      	ldr	r3, [r7, #4]
 802434c:	2b02      	cmp	r3, #2
 802434e:	bf14      	ite	ne
 8024350:	2301      	movne	r3, #1
 8024352:	2300      	moveq	r3, #0
 8024354:	b2db      	uxtb	r3, r3
}
 8024356:	4618      	mov	r0, r3
 8024358:	370c      	adds	r7, #12
 802435a:	46bd      	mov	sp, r7
 802435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024360:	4770      	bx	lr
 8024362:	bf00      	nop
 8024364:	20002640 	.word	0x20002640

08024368 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8024368:	b480      	push	{r7}
 802436a:	b085      	sub	sp, #20
 802436c:	af00      	add	r7, sp, #0
 802436e:	6078      	str	r0, [r7, #4]
 8024370:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8024372:	2300      	movs	r3, #0
 8024374:	60fb      	str	r3, [r7, #12]
 8024376:	e01f      	b.n	80243b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8024378:	4a41      	ldr	r2, [pc, #260]	; (8024480 <inc_lock+0x118>)
 802437a:	68fb      	ldr	r3, [r7, #12]
 802437c:	011b      	lsls	r3, r3, #4
 802437e:	4413      	add	r3, r2
 8024380:	681a      	ldr	r2, [r3, #0]
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	681b      	ldr	r3, [r3, #0]
 8024386:	429a      	cmp	r2, r3
 8024388:	d113      	bne.n	80243b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 802438a:	4a3d      	ldr	r2, [pc, #244]	; (8024480 <inc_lock+0x118>)
 802438c:	68fb      	ldr	r3, [r7, #12]
 802438e:	011b      	lsls	r3, r3, #4
 8024390:	4413      	add	r3, r2
 8024392:	3304      	adds	r3, #4
 8024394:	681a      	ldr	r2, [r3, #0]
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 802439a:	429a      	cmp	r2, r3
 802439c:	d109      	bne.n	80243b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 802439e:	4a38      	ldr	r2, [pc, #224]	; (8024480 <inc_lock+0x118>)
 80243a0:	68fb      	ldr	r3, [r7, #12]
 80243a2:	011b      	lsls	r3, r3, #4
 80243a4:	4413      	add	r3, r2
 80243a6:	3308      	adds	r3, #8
 80243a8:	681a      	ldr	r2, [r3, #0]
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80243ae:	429a      	cmp	r2, r3
 80243b0:	d006      	beq.n	80243c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80243b2:	68fb      	ldr	r3, [r7, #12]
 80243b4:	3301      	adds	r3, #1
 80243b6:	60fb      	str	r3, [r7, #12]
 80243b8:	68fb      	ldr	r3, [r7, #12]
 80243ba:	2b01      	cmp	r3, #1
 80243bc:	d9dc      	bls.n	8024378 <inc_lock+0x10>
 80243be:	e000      	b.n	80243c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80243c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80243c2:	68fb      	ldr	r3, [r7, #12]
 80243c4:	2b02      	cmp	r3, #2
 80243c6:	d132      	bne.n	802442e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80243c8:	2300      	movs	r3, #0
 80243ca:	60fb      	str	r3, [r7, #12]
 80243cc:	e002      	b.n	80243d4 <inc_lock+0x6c>
 80243ce:	68fb      	ldr	r3, [r7, #12]
 80243d0:	3301      	adds	r3, #1
 80243d2:	60fb      	str	r3, [r7, #12]
 80243d4:	68fb      	ldr	r3, [r7, #12]
 80243d6:	2b01      	cmp	r3, #1
 80243d8:	d806      	bhi.n	80243e8 <inc_lock+0x80>
 80243da:	4a29      	ldr	r2, [pc, #164]	; (8024480 <inc_lock+0x118>)
 80243dc:	68fb      	ldr	r3, [r7, #12]
 80243de:	011b      	lsls	r3, r3, #4
 80243e0:	4413      	add	r3, r2
 80243e2:	681b      	ldr	r3, [r3, #0]
 80243e4:	2b00      	cmp	r3, #0
 80243e6:	d1f2      	bne.n	80243ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80243e8:	68fb      	ldr	r3, [r7, #12]
 80243ea:	2b02      	cmp	r3, #2
 80243ec:	d101      	bne.n	80243f2 <inc_lock+0x8a>
 80243ee:	2300      	movs	r3, #0
 80243f0:	e040      	b.n	8024474 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	681a      	ldr	r2, [r3, #0]
 80243f6:	4922      	ldr	r1, [pc, #136]	; (8024480 <inc_lock+0x118>)
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	011b      	lsls	r3, r3, #4
 80243fc:	440b      	add	r3, r1
 80243fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	689a      	ldr	r2, [r3, #8]
 8024404:	491e      	ldr	r1, [pc, #120]	; (8024480 <inc_lock+0x118>)
 8024406:	68fb      	ldr	r3, [r7, #12]
 8024408:	011b      	lsls	r3, r3, #4
 802440a:	440b      	add	r3, r1
 802440c:	3304      	adds	r3, #4
 802440e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	695a      	ldr	r2, [r3, #20]
 8024414:	491a      	ldr	r1, [pc, #104]	; (8024480 <inc_lock+0x118>)
 8024416:	68fb      	ldr	r3, [r7, #12]
 8024418:	011b      	lsls	r3, r3, #4
 802441a:	440b      	add	r3, r1
 802441c:	3308      	adds	r3, #8
 802441e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8024420:	4a17      	ldr	r2, [pc, #92]	; (8024480 <inc_lock+0x118>)
 8024422:	68fb      	ldr	r3, [r7, #12]
 8024424:	011b      	lsls	r3, r3, #4
 8024426:	4413      	add	r3, r2
 8024428:	330c      	adds	r3, #12
 802442a:	2200      	movs	r2, #0
 802442c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802442e:	683b      	ldr	r3, [r7, #0]
 8024430:	2b00      	cmp	r3, #0
 8024432:	d009      	beq.n	8024448 <inc_lock+0xe0>
 8024434:	4a12      	ldr	r2, [pc, #72]	; (8024480 <inc_lock+0x118>)
 8024436:	68fb      	ldr	r3, [r7, #12]
 8024438:	011b      	lsls	r3, r3, #4
 802443a:	4413      	add	r3, r2
 802443c:	330c      	adds	r3, #12
 802443e:	881b      	ldrh	r3, [r3, #0]
 8024440:	2b00      	cmp	r3, #0
 8024442:	d001      	beq.n	8024448 <inc_lock+0xe0>
 8024444:	2300      	movs	r3, #0
 8024446:	e015      	b.n	8024474 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8024448:	683b      	ldr	r3, [r7, #0]
 802444a:	2b00      	cmp	r3, #0
 802444c:	d108      	bne.n	8024460 <inc_lock+0xf8>
 802444e:	4a0c      	ldr	r2, [pc, #48]	; (8024480 <inc_lock+0x118>)
 8024450:	68fb      	ldr	r3, [r7, #12]
 8024452:	011b      	lsls	r3, r3, #4
 8024454:	4413      	add	r3, r2
 8024456:	330c      	adds	r3, #12
 8024458:	881b      	ldrh	r3, [r3, #0]
 802445a:	3301      	adds	r3, #1
 802445c:	b29a      	uxth	r2, r3
 802445e:	e001      	b.n	8024464 <inc_lock+0xfc>
 8024460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024464:	4906      	ldr	r1, [pc, #24]	; (8024480 <inc_lock+0x118>)
 8024466:	68fb      	ldr	r3, [r7, #12]
 8024468:	011b      	lsls	r3, r3, #4
 802446a:	440b      	add	r3, r1
 802446c:	330c      	adds	r3, #12
 802446e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8024470:	68fb      	ldr	r3, [r7, #12]
 8024472:	3301      	adds	r3, #1
}
 8024474:	4618      	mov	r0, r3
 8024476:	3714      	adds	r7, #20
 8024478:	46bd      	mov	sp, r7
 802447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802447e:	4770      	bx	lr
 8024480:	20002640 	.word	0x20002640

08024484 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8024484:	b480      	push	{r7}
 8024486:	b085      	sub	sp, #20
 8024488:	af00      	add	r7, sp, #0
 802448a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 802448c:	687b      	ldr	r3, [r7, #4]
 802448e:	3b01      	subs	r3, #1
 8024490:	607b      	str	r3, [r7, #4]
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	2b01      	cmp	r3, #1
 8024496:	d825      	bhi.n	80244e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8024498:	4a17      	ldr	r2, [pc, #92]	; (80244f8 <dec_lock+0x74>)
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	011b      	lsls	r3, r3, #4
 802449e:	4413      	add	r3, r2
 80244a0:	330c      	adds	r3, #12
 80244a2:	881b      	ldrh	r3, [r3, #0]
 80244a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80244a6:	89fb      	ldrh	r3, [r7, #14]
 80244a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80244ac:	d101      	bne.n	80244b2 <dec_lock+0x2e>
 80244ae:	2300      	movs	r3, #0
 80244b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80244b2:	89fb      	ldrh	r3, [r7, #14]
 80244b4:	2b00      	cmp	r3, #0
 80244b6:	d002      	beq.n	80244be <dec_lock+0x3a>
 80244b8:	89fb      	ldrh	r3, [r7, #14]
 80244ba:	3b01      	subs	r3, #1
 80244bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80244be:	4a0e      	ldr	r2, [pc, #56]	; (80244f8 <dec_lock+0x74>)
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	011b      	lsls	r3, r3, #4
 80244c4:	4413      	add	r3, r2
 80244c6:	330c      	adds	r3, #12
 80244c8:	89fa      	ldrh	r2, [r7, #14]
 80244ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80244cc:	89fb      	ldrh	r3, [r7, #14]
 80244ce:	2b00      	cmp	r3, #0
 80244d0:	d105      	bne.n	80244de <dec_lock+0x5a>
 80244d2:	4a09      	ldr	r2, [pc, #36]	; (80244f8 <dec_lock+0x74>)
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	011b      	lsls	r3, r3, #4
 80244d8:	4413      	add	r3, r2
 80244da:	2200      	movs	r2, #0
 80244dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80244de:	2300      	movs	r3, #0
 80244e0:	737b      	strb	r3, [r7, #13]
 80244e2:	e001      	b.n	80244e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80244e4:	2302      	movs	r3, #2
 80244e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80244e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80244ea:	4618      	mov	r0, r3
 80244ec:	3714      	adds	r7, #20
 80244ee:	46bd      	mov	sp, r7
 80244f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244f4:	4770      	bx	lr
 80244f6:	bf00      	nop
 80244f8:	20002640 	.word	0x20002640

080244fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80244fc:	b480      	push	{r7}
 80244fe:	b085      	sub	sp, #20
 8024500:	af00      	add	r7, sp, #0
 8024502:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8024504:	2300      	movs	r3, #0
 8024506:	60fb      	str	r3, [r7, #12]
 8024508:	e010      	b.n	802452c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802450a:	4a0d      	ldr	r2, [pc, #52]	; (8024540 <clear_lock+0x44>)
 802450c:	68fb      	ldr	r3, [r7, #12]
 802450e:	011b      	lsls	r3, r3, #4
 8024510:	4413      	add	r3, r2
 8024512:	681b      	ldr	r3, [r3, #0]
 8024514:	687a      	ldr	r2, [r7, #4]
 8024516:	429a      	cmp	r2, r3
 8024518:	d105      	bne.n	8024526 <clear_lock+0x2a>
 802451a:	4a09      	ldr	r2, [pc, #36]	; (8024540 <clear_lock+0x44>)
 802451c:	68fb      	ldr	r3, [r7, #12]
 802451e:	011b      	lsls	r3, r3, #4
 8024520:	4413      	add	r3, r2
 8024522:	2200      	movs	r2, #0
 8024524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8024526:	68fb      	ldr	r3, [r7, #12]
 8024528:	3301      	adds	r3, #1
 802452a:	60fb      	str	r3, [r7, #12]
 802452c:	68fb      	ldr	r3, [r7, #12]
 802452e:	2b01      	cmp	r3, #1
 8024530:	d9eb      	bls.n	802450a <clear_lock+0xe>
	}
}
 8024532:	bf00      	nop
 8024534:	bf00      	nop
 8024536:	3714      	adds	r7, #20
 8024538:	46bd      	mov	sp, r7
 802453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802453e:	4770      	bx	lr
 8024540:	20002640 	.word	0x20002640

08024544 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8024544:	b580      	push	{r7, lr}
 8024546:	b086      	sub	sp, #24
 8024548:	af00      	add	r7, sp, #0
 802454a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 802454c:	2300      	movs	r3, #0
 802454e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8024550:	687b      	ldr	r3, [r7, #4]
 8024552:	78db      	ldrb	r3, [r3, #3]
 8024554:	2b00      	cmp	r3, #0
 8024556:	d034      	beq.n	80245c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8024558:	687b      	ldr	r3, [r7, #4]
 802455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802455c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	7858      	ldrb	r0, [r3, #1]
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8024568:	2301      	movs	r3, #1
 802456a:	697a      	ldr	r2, [r7, #20]
 802456c:	f7ff fd38 	bl	8023fe0 <disk_write>
 8024570:	4603      	mov	r3, r0
 8024572:	2b00      	cmp	r3, #0
 8024574:	d002      	beq.n	802457c <sync_window+0x38>
			res = FR_DISK_ERR;
 8024576:	2301      	movs	r3, #1
 8024578:	73fb      	strb	r3, [r7, #15]
 802457a:	e022      	b.n	80245c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	2200      	movs	r2, #0
 8024580:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	6a1b      	ldr	r3, [r3, #32]
 8024586:	697a      	ldr	r2, [r7, #20]
 8024588:	1ad2      	subs	r2, r2, r3
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	699b      	ldr	r3, [r3, #24]
 802458e:	429a      	cmp	r2, r3
 8024590:	d217      	bcs.n	80245c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	789b      	ldrb	r3, [r3, #2]
 8024596:	613b      	str	r3, [r7, #16]
 8024598:	e010      	b.n	80245bc <sync_window+0x78>
					wsect += fs->fsize;
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	699b      	ldr	r3, [r3, #24]
 802459e:	697a      	ldr	r2, [r7, #20]
 80245a0:	4413      	add	r3, r2
 80245a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	7858      	ldrb	r0, [r3, #1]
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80245ae:	2301      	movs	r3, #1
 80245b0:	697a      	ldr	r2, [r7, #20]
 80245b2:	f7ff fd15 	bl	8023fe0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80245b6:	693b      	ldr	r3, [r7, #16]
 80245b8:	3b01      	subs	r3, #1
 80245ba:	613b      	str	r3, [r7, #16]
 80245bc:	693b      	ldr	r3, [r7, #16]
 80245be:	2b01      	cmp	r3, #1
 80245c0:	d8eb      	bhi.n	802459a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80245c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80245c4:	4618      	mov	r0, r3
 80245c6:	3718      	adds	r7, #24
 80245c8:	46bd      	mov	sp, r7
 80245ca:	bd80      	pop	{r7, pc}

080245cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80245cc:	b580      	push	{r7, lr}
 80245ce:	b084      	sub	sp, #16
 80245d0:	af00      	add	r7, sp, #0
 80245d2:	6078      	str	r0, [r7, #4]
 80245d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80245d6:	2300      	movs	r3, #0
 80245d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80245de:	683a      	ldr	r2, [r7, #0]
 80245e0:	429a      	cmp	r2, r3
 80245e2:	d01b      	beq.n	802461c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80245e4:	6878      	ldr	r0, [r7, #4]
 80245e6:	f7ff ffad 	bl	8024544 <sync_window>
 80245ea:	4603      	mov	r3, r0
 80245ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80245ee:	7bfb      	ldrb	r3, [r7, #15]
 80245f0:	2b00      	cmp	r3, #0
 80245f2:	d113      	bne.n	802461c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	7858      	ldrb	r0, [r3, #1]
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80245fe:	2301      	movs	r3, #1
 8024600:	683a      	ldr	r2, [r7, #0]
 8024602:	f7ff fccd 	bl	8023fa0 <disk_read>
 8024606:	4603      	mov	r3, r0
 8024608:	2b00      	cmp	r3, #0
 802460a:	d004      	beq.n	8024616 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802460c:	f04f 33ff 	mov.w	r3, #4294967295
 8024610:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8024612:	2301      	movs	r3, #1
 8024614:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	683a      	ldr	r2, [r7, #0]
 802461a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 802461c:	7bfb      	ldrb	r3, [r7, #15]
}
 802461e:	4618      	mov	r0, r3
 8024620:	3710      	adds	r7, #16
 8024622:	46bd      	mov	sp, r7
 8024624:	bd80      	pop	{r7, pc}
	...

08024628 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8024628:	b580      	push	{r7, lr}
 802462a:	b084      	sub	sp, #16
 802462c:	af00      	add	r7, sp, #0
 802462e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8024630:	6878      	ldr	r0, [r7, #4]
 8024632:	f7ff ff87 	bl	8024544 <sync_window>
 8024636:	4603      	mov	r3, r0
 8024638:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802463a:	7bfb      	ldrb	r3, [r7, #15]
 802463c:	2b00      	cmp	r3, #0
 802463e:	d158      	bne.n	80246f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	781b      	ldrb	r3, [r3, #0]
 8024644:	2b03      	cmp	r3, #3
 8024646:	d148      	bne.n	80246da <sync_fs+0xb2>
 8024648:	687b      	ldr	r3, [r7, #4]
 802464a:	791b      	ldrb	r3, [r3, #4]
 802464c:	2b01      	cmp	r3, #1
 802464e:	d144      	bne.n	80246da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	3330      	adds	r3, #48	; 0x30
 8024654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024658:	2100      	movs	r1, #0
 802465a:	4618      	mov	r0, r3
 802465c:	f7ff fda9 	bl	80241b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	3330      	adds	r3, #48	; 0x30
 8024664:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024668:	f64a 2155 	movw	r1, #43605	; 0xaa55
 802466c:	4618      	mov	r0, r3
 802466e:	f7ff fd38 	bl	80240e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	3330      	adds	r3, #48	; 0x30
 8024676:	4921      	ldr	r1, [pc, #132]	; (80246fc <sync_fs+0xd4>)
 8024678:	4618      	mov	r0, r3
 802467a:	f7ff fd4d 	bl	8024118 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802467e:	687b      	ldr	r3, [r7, #4]
 8024680:	3330      	adds	r3, #48	; 0x30
 8024682:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8024686:	491e      	ldr	r1, [pc, #120]	; (8024700 <sync_fs+0xd8>)
 8024688:	4618      	mov	r0, r3
 802468a:	f7ff fd45 	bl	8024118 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 802468e:	687b      	ldr	r3, [r7, #4]
 8024690:	3330      	adds	r3, #48	; 0x30
 8024692:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	691b      	ldr	r3, [r3, #16]
 802469a:	4619      	mov	r1, r3
 802469c:	4610      	mov	r0, r2
 802469e:	f7ff fd3b 	bl	8024118 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80246a2:	687b      	ldr	r3, [r7, #4]
 80246a4:	3330      	adds	r3, #48	; 0x30
 80246a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80246aa:	687b      	ldr	r3, [r7, #4]
 80246ac:	68db      	ldr	r3, [r3, #12]
 80246ae:	4619      	mov	r1, r3
 80246b0:	4610      	mov	r0, r2
 80246b2:	f7ff fd31 	bl	8024118 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80246b6:	687b      	ldr	r3, [r7, #4]
 80246b8:	69db      	ldr	r3, [r3, #28]
 80246ba:	1c5a      	adds	r2, r3, #1
 80246bc:	687b      	ldr	r3, [r7, #4]
 80246be:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	7858      	ldrb	r0, [r3, #1]
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80246ce:	2301      	movs	r3, #1
 80246d0:	f7ff fc86 	bl	8023fe0 <disk_write>
			fs->fsi_flag = 0;
 80246d4:	687b      	ldr	r3, [r7, #4]
 80246d6:	2200      	movs	r2, #0
 80246d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80246da:	687b      	ldr	r3, [r7, #4]
 80246dc:	785b      	ldrb	r3, [r3, #1]
 80246de:	2200      	movs	r2, #0
 80246e0:	2100      	movs	r1, #0
 80246e2:	4618      	mov	r0, r3
 80246e4:	f7ff fc9c 	bl	8024020 <disk_ioctl>
 80246e8:	4603      	mov	r3, r0
 80246ea:	2b00      	cmp	r3, #0
 80246ec:	d001      	beq.n	80246f2 <sync_fs+0xca>
 80246ee:	2301      	movs	r3, #1
 80246f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80246f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80246f4:	4618      	mov	r0, r3
 80246f6:	3710      	adds	r7, #16
 80246f8:	46bd      	mov	sp, r7
 80246fa:	bd80      	pop	{r7, pc}
 80246fc:	41615252 	.word	0x41615252
 8024700:	61417272 	.word	0x61417272

08024704 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8024704:	b480      	push	{r7}
 8024706:	b083      	sub	sp, #12
 8024708:	af00      	add	r7, sp, #0
 802470a:	6078      	str	r0, [r7, #4]
 802470c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 802470e:	683b      	ldr	r3, [r7, #0]
 8024710:	3b02      	subs	r3, #2
 8024712:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	695b      	ldr	r3, [r3, #20]
 8024718:	3b02      	subs	r3, #2
 802471a:	683a      	ldr	r2, [r7, #0]
 802471c:	429a      	cmp	r2, r3
 802471e:	d301      	bcc.n	8024724 <clust2sect+0x20>
 8024720:	2300      	movs	r3, #0
 8024722:	e008      	b.n	8024736 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	895b      	ldrh	r3, [r3, #10]
 8024728:	461a      	mov	r2, r3
 802472a:	683b      	ldr	r3, [r7, #0]
 802472c:	fb03 f202 	mul.w	r2, r3, r2
 8024730:	687b      	ldr	r3, [r7, #4]
 8024732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024734:	4413      	add	r3, r2
}
 8024736:	4618      	mov	r0, r3
 8024738:	370c      	adds	r7, #12
 802473a:	46bd      	mov	sp, r7
 802473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024740:	4770      	bx	lr

08024742 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8024742:	b580      	push	{r7, lr}
 8024744:	b086      	sub	sp, #24
 8024746:	af00      	add	r7, sp, #0
 8024748:	6078      	str	r0, [r7, #4]
 802474a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	681b      	ldr	r3, [r3, #0]
 8024750:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8024752:	683b      	ldr	r3, [r7, #0]
 8024754:	2b01      	cmp	r3, #1
 8024756:	d904      	bls.n	8024762 <get_fat+0x20>
 8024758:	693b      	ldr	r3, [r7, #16]
 802475a:	695b      	ldr	r3, [r3, #20]
 802475c:	683a      	ldr	r2, [r7, #0]
 802475e:	429a      	cmp	r2, r3
 8024760:	d302      	bcc.n	8024768 <get_fat+0x26>
		val = 1;	/* Internal error */
 8024762:	2301      	movs	r3, #1
 8024764:	617b      	str	r3, [r7, #20]
 8024766:	e08f      	b.n	8024888 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8024768:	f04f 33ff 	mov.w	r3, #4294967295
 802476c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 802476e:	693b      	ldr	r3, [r7, #16]
 8024770:	781b      	ldrb	r3, [r3, #0]
 8024772:	2b03      	cmp	r3, #3
 8024774:	d062      	beq.n	802483c <get_fat+0xfa>
 8024776:	2b03      	cmp	r3, #3
 8024778:	dc7c      	bgt.n	8024874 <get_fat+0x132>
 802477a:	2b01      	cmp	r3, #1
 802477c:	d002      	beq.n	8024784 <get_fat+0x42>
 802477e:	2b02      	cmp	r3, #2
 8024780:	d042      	beq.n	8024808 <get_fat+0xc6>
 8024782:	e077      	b.n	8024874 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8024784:	683b      	ldr	r3, [r7, #0]
 8024786:	60fb      	str	r3, [r7, #12]
 8024788:	68fb      	ldr	r3, [r7, #12]
 802478a:	085b      	lsrs	r3, r3, #1
 802478c:	68fa      	ldr	r2, [r7, #12]
 802478e:	4413      	add	r3, r2
 8024790:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024792:	693b      	ldr	r3, [r7, #16]
 8024794:	6a1a      	ldr	r2, [r3, #32]
 8024796:	68fb      	ldr	r3, [r7, #12]
 8024798:	0a5b      	lsrs	r3, r3, #9
 802479a:	4413      	add	r3, r2
 802479c:	4619      	mov	r1, r3
 802479e:	6938      	ldr	r0, [r7, #16]
 80247a0:	f7ff ff14 	bl	80245cc <move_window>
 80247a4:	4603      	mov	r3, r0
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d167      	bne.n	802487a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80247aa:	68fb      	ldr	r3, [r7, #12]
 80247ac:	1c5a      	adds	r2, r3, #1
 80247ae:	60fa      	str	r2, [r7, #12]
 80247b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80247b4:	693a      	ldr	r2, [r7, #16]
 80247b6:	4413      	add	r3, r2
 80247b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80247bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80247be:	693b      	ldr	r3, [r7, #16]
 80247c0:	6a1a      	ldr	r2, [r3, #32]
 80247c2:	68fb      	ldr	r3, [r7, #12]
 80247c4:	0a5b      	lsrs	r3, r3, #9
 80247c6:	4413      	add	r3, r2
 80247c8:	4619      	mov	r1, r3
 80247ca:	6938      	ldr	r0, [r7, #16]
 80247cc:	f7ff fefe 	bl	80245cc <move_window>
 80247d0:	4603      	mov	r3, r0
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	d153      	bne.n	802487e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80247dc:	693a      	ldr	r2, [r7, #16]
 80247de:	4413      	add	r3, r2
 80247e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80247e4:	021b      	lsls	r3, r3, #8
 80247e6:	461a      	mov	r2, r3
 80247e8:	68bb      	ldr	r3, [r7, #8]
 80247ea:	4313      	orrs	r3, r2
 80247ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80247ee:	683b      	ldr	r3, [r7, #0]
 80247f0:	f003 0301 	and.w	r3, r3, #1
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	d002      	beq.n	80247fe <get_fat+0xbc>
 80247f8:	68bb      	ldr	r3, [r7, #8]
 80247fa:	091b      	lsrs	r3, r3, #4
 80247fc:	e002      	b.n	8024804 <get_fat+0xc2>
 80247fe:	68bb      	ldr	r3, [r7, #8]
 8024800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024804:	617b      	str	r3, [r7, #20]
			break;
 8024806:	e03f      	b.n	8024888 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024808:	693b      	ldr	r3, [r7, #16]
 802480a:	6a1a      	ldr	r2, [r3, #32]
 802480c:	683b      	ldr	r3, [r7, #0]
 802480e:	0a1b      	lsrs	r3, r3, #8
 8024810:	4413      	add	r3, r2
 8024812:	4619      	mov	r1, r3
 8024814:	6938      	ldr	r0, [r7, #16]
 8024816:	f7ff fed9 	bl	80245cc <move_window>
 802481a:	4603      	mov	r3, r0
 802481c:	2b00      	cmp	r3, #0
 802481e:	d130      	bne.n	8024882 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8024820:	693b      	ldr	r3, [r7, #16]
 8024822:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024826:	683b      	ldr	r3, [r7, #0]
 8024828:	005b      	lsls	r3, r3, #1
 802482a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 802482e:	4413      	add	r3, r2
 8024830:	4618      	mov	r0, r3
 8024832:	f7ff fc1b 	bl	802406c <ld_word>
 8024836:	4603      	mov	r3, r0
 8024838:	617b      	str	r3, [r7, #20]
			break;
 802483a:	e025      	b.n	8024888 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802483c:	693b      	ldr	r3, [r7, #16]
 802483e:	6a1a      	ldr	r2, [r3, #32]
 8024840:	683b      	ldr	r3, [r7, #0]
 8024842:	09db      	lsrs	r3, r3, #7
 8024844:	4413      	add	r3, r2
 8024846:	4619      	mov	r1, r3
 8024848:	6938      	ldr	r0, [r7, #16]
 802484a:	f7ff febf 	bl	80245cc <move_window>
 802484e:	4603      	mov	r3, r0
 8024850:	2b00      	cmp	r3, #0
 8024852:	d118      	bne.n	8024886 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8024854:	693b      	ldr	r3, [r7, #16]
 8024856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802485a:	683b      	ldr	r3, [r7, #0]
 802485c:	009b      	lsls	r3, r3, #2
 802485e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024862:	4413      	add	r3, r2
 8024864:	4618      	mov	r0, r3
 8024866:	f7ff fc19 	bl	802409c <ld_dword>
 802486a:	4603      	mov	r3, r0
 802486c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8024870:	617b      	str	r3, [r7, #20]
			break;
 8024872:	e009      	b.n	8024888 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8024874:	2301      	movs	r3, #1
 8024876:	617b      	str	r3, [r7, #20]
 8024878:	e006      	b.n	8024888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802487a:	bf00      	nop
 802487c:	e004      	b.n	8024888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802487e:	bf00      	nop
 8024880:	e002      	b.n	8024888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024882:	bf00      	nop
 8024884:	e000      	b.n	8024888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8024886:	bf00      	nop
		}
	}

	return val;
 8024888:	697b      	ldr	r3, [r7, #20]
}
 802488a:	4618      	mov	r0, r3
 802488c:	3718      	adds	r7, #24
 802488e:	46bd      	mov	sp, r7
 8024890:	bd80      	pop	{r7, pc}

08024892 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8024892:	b590      	push	{r4, r7, lr}
 8024894:	b089      	sub	sp, #36	; 0x24
 8024896:	af00      	add	r7, sp, #0
 8024898:	60f8      	str	r0, [r7, #12]
 802489a:	60b9      	str	r1, [r7, #8]
 802489c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802489e:	2302      	movs	r3, #2
 80248a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80248a2:	68bb      	ldr	r3, [r7, #8]
 80248a4:	2b01      	cmp	r3, #1
 80248a6:	f240 80d2 	bls.w	8024a4e <put_fat+0x1bc>
 80248aa:	68fb      	ldr	r3, [r7, #12]
 80248ac:	695b      	ldr	r3, [r3, #20]
 80248ae:	68ba      	ldr	r2, [r7, #8]
 80248b0:	429a      	cmp	r2, r3
 80248b2:	f080 80cc 	bcs.w	8024a4e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80248b6:	68fb      	ldr	r3, [r7, #12]
 80248b8:	781b      	ldrb	r3, [r3, #0]
 80248ba:	2b03      	cmp	r3, #3
 80248bc:	f000 8096 	beq.w	80249ec <put_fat+0x15a>
 80248c0:	2b03      	cmp	r3, #3
 80248c2:	f300 80cd 	bgt.w	8024a60 <put_fat+0x1ce>
 80248c6:	2b01      	cmp	r3, #1
 80248c8:	d002      	beq.n	80248d0 <put_fat+0x3e>
 80248ca:	2b02      	cmp	r3, #2
 80248cc:	d06e      	beq.n	80249ac <put_fat+0x11a>
 80248ce:	e0c7      	b.n	8024a60 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80248d0:	68bb      	ldr	r3, [r7, #8]
 80248d2:	61bb      	str	r3, [r7, #24]
 80248d4:	69bb      	ldr	r3, [r7, #24]
 80248d6:	085b      	lsrs	r3, r3, #1
 80248d8:	69ba      	ldr	r2, [r7, #24]
 80248da:	4413      	add	r3, r2
 80248dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	6a1a      	ldr	r2, [r3, #32]
 80248e2:	69bb      	ldr	r3, [r7, #24]
 80248e4:	0a5b      	lsrs	r3, r3, #9
 80248e6:	4413      	add	r3, r2
 80248e8:	4619      	mov	r1, r3
 80248ea:	68f8      	ldr	r0, [r7, #12]
 80248ec:	f7ff fe6e 	bl	80245cc <move_window>
 80248f0:	4603      	mov	r3, r0
 80248f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80248f4:	7ffb      	ldrb	r3, [r7, #31]
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	f040 80ab 	bne.w	8024a52 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024902:	69bb      	ldr	r3, [r7, #24]
 8024904:	1c59      	adds	r1, r3, #1
 8024906:	61b9      	str	r1, [r7, #24]
 8024908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802490c:	4413      	add	r3, r2
 802490e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8024910:	68bb      	ldr	r3, [r7, #8]
 8024912:	f003 0301 	and.w	r3, r3, #1
 8024916:	2b00      	cmp	r3, #0
 8024918:	d00d      	beq.n	8024936 <put_fat+0xa4>
 802491a:	697b      	ldr	r3, [r7, #20]
 802491c:	781b      	ldrb	r3, [r3, #0]
 802491e:	b25b      	sxtb	r3, r3
 8024920:	f003 030f 	and.w	r3, r3, #15
 8024924:	b25a      	sxtb	r2, r3
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	b2db      	uxtb	r3, r3
 802492a:	011b      	lsls	r3, r3, #4
 802492c:	b25b      	sxtb	r3, r3
 802492e:	4313      	orrs	r3, r2
 8024930:	b25b      	sxtb	r3, r3
 8024932:	b2db      	uxtb	r3, r3
 8024934:	e001      	b.n	802493a <put_fat+0xa8>
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	b2db      	uxtb	r3, r3
 802493a:	697a      	ldr	r2, [r7, #20]
 802493c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	2201      	movs	r2, #1
 8024942:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8024944:	68fb      	ldr	r3, [r7, #12]
 8024946:	6a1a      	ldr	r2, [r3, #32]
 8024948:	69bb      	ldr	r3, [r7, #24]
 802494a:	0a5b      	lsrs	r3, r3, #9
 802494c:	4413      	add	r3, r2
 802494e:	4619      	mov	r1, r3
 8024950:	68f8      	ldr	r0, [r7, #12]
 8024952:	f7ff fe3b 	bl	80245cc <move_window>
 8024956:	4603      	mov	r3, r0
 8024958:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802495a:	7ffb      	ldrb	r3, [r7, #31]
 802495c:	2b00      	cmp	r3, #0
 802495e:	d17a      	bne.n	8024a56 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024966:	69bb      	ldr	r3, [r7, #24]
 8024968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802496c:	4413      	add	r3, r2
 802496e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8024970:	68bb      	ldr	r3, [r7, #8]
 8024972:	f003 0301 	and.w	r3, r3, #1
 8024976:	2b00      	cmp	r3, #0
 8024978:	d003      	beq.n	8024982 <put_fat+0xf0>
 802497a:	687b      	ldr	r3, [r7, #4]
 802497c:	091b      	lsrs	r3, r3, #4
 802497e:	b2db      	uxtb	r3, r3
 8024980:	e00e      	b.n	80249a0 <put_fat+0x10e>
 8024982:	697b      	ldr	r3, [r7, #20]
 8024984:	781b      	ldrb	r3, [r3, #0]
 8024986:	b25b      	sxtb	r3, r3
 8024988:	f023 030f 	bic.w	r3, r3, #15
 802498c:	b25a      	sxtb	r2, r3
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	0a1b      	lsrs	r3, r3, #8
 8024992:	b25b      	sxtb	r3, r3
 8024994:	f003 030f 	and.w	r3, r3, #15
 8024998:	b25b      	sxtb	r3, r3
 802499a:	4313      	orrs	r3, r2
 802499c:	b25b      	sxtb	r3, r3
 802499e:	b2db      	uxtb	r3, r3
 80249a0:	697a      	ldr	r2, [r7, #20]
 80249a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80249a4:	68fb      	ldr	r3, [r7, #12]
 80249a6:	2201      	movs	r2, #1
 80249a8:	70da      	strb	r2, [r3, #3]
			break;
 80249aa:	e059      	b.n	8024a60 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80249ac:	68fb      	ldr	r3, [r7, #12]
 80249ae:	6a1a      	ldr	r2, [r3, #32]
 80249b0:	68bb      	ldr	r3, [r7, #8]
 80249b2:	0a1b      	lsrs	r3, r3, #8
 80249b4:	4413      	add	r3, r2
 80249b6:	4619      	mov	r1, r3
 80249b8:	68f8      	ldr	r0, [r7, #12]
 80249ba:	f7ff fe07 	bl	80245cc <move_window>
 80249be:	4603      	mov	r3, r0
 80249c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80249c2:	7ffb      	ldrb	r3, [r7, #31]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d148      	bne.n	8024a5a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80249c8:	68fb      	ldr	r3, [r7, #12]
 80249ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80249ce:	68bb      	ldr	r3, [r7, #8]
 80249d0:	005b      	lsls	r3, r3, #1
 80249d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80249d6:	4413      	add	r3, r2
 80249d8:	687a      	ldr	r2, [r7, #4]
 80249da:	b292      	uxth	r2, r2
 80249dc:	4611      	mov	r1, r2
 80249de:	4618      	mov	r0, r3
 80249e0:	f7ff fb7f 	bl	80240e2 <st_word>
			fs->wflag = 1;
 80249e4:	68fb      	ldr	r3, [r7, #12]
 80249e6:	2201      	movs	r2, #1
 80249e8:	70da      	strb	r2, [r3, #3]
			break;
 80249ea:	e039      	b.n	8024a60 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80249ec:	68fb      	ldr	r3, [r7, #12]
 80249ee:	6a1a      	ldr	r2, [r3, #32]
 80249f0:	68bb      	ldr	r3, [r7, #8]
 80249f2:	09db      	lsrs	r3, r3, #7
 80249f4:	4413      	add	r3, r2
 80249f6:	4619      	mov	r1, r3
 80249f8:	68f8      	ldr	r0, [r7, #12]
 80249fa:	f7ff fde7 	bl	80245cc <move_window>
 80249fe:	4603      	mov	r3, r0
 8024a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024a02:	7ffb      	ldrb	r3, [r7, #31]
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	d12a      	bne.n	8024a5e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8024a0e:	68fb      	ldr	r3, [r7, #12]
 8024a10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024a14:	68bb      	ldr	r3, [r7, #8]
 8024a16:	009b      	lsls	r3, r3, #2
 8024a18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024a1c:	4413      	add	r3, r2
 8024a1e:	4618      	mov	r0, r3
 8024a20:	f7ff fb3c 	bl	802409c <ld_dword>
 8024a24:	4603      	mov	r3, r0
 8024a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8024a2a:	4323      	orrs	r3, r4
 8024a2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024a34:	68bb      	ldr	r3, [r7, #8]
 8024a36:	009b      	lsls	r3, r3, #2
 8024a38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024a3c:	4413      	add	r3, r2
 8024a3e:	6879      	ldr	r1, [r7, #4]
 8024a40:	4618      	mov	r0, r3
 8024a42:	f7ff fb69 	bl	8024118 <st_dword>
			fs->wflag = 1;
 8024a46:	68fb      	ldr	r3, [r7, #12]
 8024a48:	2201      	movs	r2, #1
 8024a4a:	70da      	strb	r2, [r3, #3]
			break;
 8024a4c:	e008      	b.n	8024a60 <put_fat+0x1ce>
		}
	}
 8024a4e:	bf00      	nop
 8024a50:	e006      	b.n	8024a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8024a52:	bf00      	nop
 8024a54:	e004      	b.n	8024a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8024a56:	bf00      	nop
 8024a58:	e002      	b.n	8024a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8024a5a:	bf00      	nop
 8024a5c:	e000      	b.n	8024a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8024a5e:	bf00      	nop
	return res;
 8024a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8024a62:	4618      	mov	r0, r3
 8024a64:	3724      	adds	r7, #36	; 0x24
 8024a66:	46bd      	mov	sp, r7
 8024a68:	bd90      	pop	{r4, r7, pc}

08024a6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8024a6a:	b580      	push	{r7, lr}
 8024a6c:	b088      	sub	sp, #32
 8024a6e:	af00      	add	r7, sp, #0
 8024a70:	60f8      	str	r0, [r7, #12]
 8024a72:	60b9      	str	r1, [r7, #8]
 8024a74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8024a76:	2300      	movs	r3, #0
 8024a78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8024a7a:	68fb      	ldr	r3, [r7, #12]
 8024a7c:	681b      	ldr	r3, [r3, #0]
 8024a7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8024a80:	68bb      	ldr	r3, [r7, #8]
 8024a82:	2b01      	cmp	r3, #1
 8024a84:	d904      	bls.n	8024a90 <remove_chain+0x26>
 8024a86:	69bb      	ldr	r3, [r7, #24]
 8024a88:	695b      	ldr	r3, [r3, #20]
 8024a8a:	68ba      	ldr	r2, [r7, #8]
 8024a8c:	429a      	cmp	r2, r3
 8024a8e:	d301      	bcc.n	8024a94 <remove_chain+0x2a>
 8024a90:	2302      	movs	r3, #2
 8024a92:	e04b      	b.n	8024b2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8024a94:	687b      	ldr	r3, [r7, #4]
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	d00c      	beq.n	8024ab4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8024a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8024a9e:	6879      	ldr	r1, [r7, #4]
 8024aa0:	69b8      	ldr	r0, [r7, #24]
 8024aa2:	f7ff fef6 	bl	8024892 <put_fat>
 8024aa6:	4603      	mov	r3, r0
 8024aa8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8024aaa:	7ffb      	ldrb	r3, [r7, #31]
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	d001      	beq.n	8024ab4 <remove_chain+0x4a>
 8024ab0:	7ffb      	ldrb	r3, [r7, #31]
 8024ab2:	e03b      	b.n	8024b2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8024ab4:	68b9      	ldr	r1, [r7, #8]
 8024ab6:	68f8      	ldr	r0, [r7, #12]
 8024ab8:	f7ff fe43 	bl	8024742 <get_fat>
 8024abc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8024abe:	697b      	ldr	r3, [r7, #20]
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	d031      	beq.n	8024b28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8024ac4:	697b      	ldr	r3, [r7, #20]
 8024ac6:	2b01      	cmp	r3, #1
 8024ac8:	d101      	bne.n	8024ace <remove_chain+0x64>
 8024aca:	2302      	movs	r3, #2
 8024acc:	e02e      	b.n	8024b2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8024ace:	697b      	ldr	r3, [r7, #20]
 8024ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ad4:	d101      	bne.n	8024ada <remove_chain+0x70>
 8024ad6:	2301      	movs	r3, #1
 8024ad8:	e028      	b.n	8024b2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8024ada:	2200      	movs	r2, #0
 8024adc:	68b9      	ldr	r1, [r7, #8]
 8024ade:	69b8      	ldr	r0, [r7, #24]
 8024ae0:	f7ff fed7 	bl	8024892 <put_fat>
 8024ae4:	4603      	mov	r3, r0
 8024ae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8024ae8:	7ffb      	ldrb	r3, [r7, #31]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d001      	beq.n	8024af2 <remove_chain+0x88>
 8024aee:	7ffb      	ldrb	r3, [r7, #31]
 8024af0:	e01c      	b.n	8024b2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8024af2:	69bb      	ldr	r3, [r7, #24]
 8024af4:	691a      	ldr	r2, [r3, #16]
 8024af6:	69bb      	ldr	r3, [r7, #24]
 8024af8:	695b      	ldr	r3, [r3, #20]
 8024afa:	3b02      	subs	r3, #2
 8024afc:	429a      	cmp	r2, r3
 8024afe:	d20b      	bcs.n	8024b18 <remove_chain+0xae>
			fs->free_clst++;
 8024b00:	69bb      	ldr	r3, [r7, #24]
 8024b02:	691b      	ldr	r3, [r3, #16]
 8024b04:	1c5a      	adds	r2, r3, #1
 8024b06:	69bb      	ldr	r3, [r7, #24]
 8024b08:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8024b0a:	69bb      	ldr	r3, [r7, #24]
 8024b0c:	791b      	ldrb	r3, [r3, #4]
 8024b0e:	f043 0301 	orr.w	r3, r3, #1
 8024b12:	b2da      	uxtb	r2, r3
 8024b14:	69bb      	ldr	r3, [r7, #24]
 8024b16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8024b18:	697b      	ldr	r3, [r7, #20]
 8024b1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8024b1c:	69bb      	ldr	r3, [r7, #24]
 8024b1e:	695b      	ldr	r3, [r3, #20]
 8024b20:	68ba      	ldr	r2, [r7, #8]
 8024b22:	429a      	cmp	r2, r3
 8024b24:	d3c6      	bcc.n	8024ab4 <remove_chain+0x4a>
 8024b26:	e000      	b.n	8024b2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8024b28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8024b2a:	2300      	movs	r3, #0
}
 8024b2c:	4618      	mov	r0, r3
 8024b2e:	3720      	adds	r7, #32
 8024b30:	46bd      	mov	sp, r7
 8024b32:	bd80      	pop	{r7, pc}

08024b34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8024b34:	b580      	push	{r7, lr}
 8024b36:	b088      	sub	sp, #32
 8024b38:	af00      	add	r7, sp, #0
 8024b3a:	6078      	str	r0, [r7, #4]
 8024b3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	681b      	ldr	r3, [r3, #0]
 8024b42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8024b44:	683b      	ldr	r3, [r7, #0]
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d10d      	bne.n	8024b66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8024b4a:	693b      	ldr	r3, [r7, #16]
 8024b4c:	68db      	ldr	r3, [r3, #12]
 8024b4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8024b50:	69bb      	ldr	r3, [r7, #24]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	d004      	beq.n	8024b60 <create_chain+0x2c>
 8024b56:	693b      	ldr	r3, [r7, #16]
 8024b58:	695b      	ldr	r3, [r3, #20]
 8024b5a:	69ba      	ldr	r2, [r7, #24]
 8024b5c:	429a      	cmp	r2, r3
 8024b5e:	d31b      	bcc.n	8024b98 <create_chain+0x64>
 8024b60:	2301      	movs	r3, #1
 8024b62:	61bb      	str	r3, [r7, #24]
 8024b64:	e018      	b.n	8024b98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8024b66:	6839      	ldr	r1, [r7, #0]
 8024b68:	6878      	ldr	r0, [r7, #4]
 8024b6a:	f7ff fdea 	bl	8024742 <get_fat>
 8024b6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8024b70:	68fb      	ldr	r3, [r7, #12]
 8024b72:	2b01      	cmp	r3, #1
 8024b74:	d801      	bhi.n	8024b7a <create_chain+0x46>
 8024b76:	2301      	movs	r3, #1
 8024b78:	e070      	b.n	8024c5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024b80:	d101      	bne.n	8024b86 <create_chain+0x52>
 8024b82:	68fb      	ldr	r3, [r7, #12]
 8024b84:	e06a      	b.n	8024c5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8024b86:	693b      	ldr	r3, [r7, #16]
 8024b88:	695b      	ldr	r3, [r3, #20]
 8024b8a:	68fa      	ldr	r2, [r7, #12]
 8024b8c:	429a      	cmp	r2, r3
 8024b8e:	d201      	bcs.n	8024b94 <create_chain+0x60>
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	e063      	b.n	8024c5c <create_chain+0x128>
		scl = clst;
 8024b94:	683b      	ldr	r3, [r7, #0]
 8024b96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8024b98:	69bb      	ldr	r3, [r7, #24]
 8024b9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8024b9c:	69fb      	ldr	r3, [r7, #28]
 8024b9e:	3301      	adds	r3, #1
 8024ba0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8024ba2:	693b      	ldr	r3, [r7, #16]
 8024ba4:	695b      	ldr	r3, [r3, #20]
 8024ba6:	69fa      	ldr	r2, [r7, #28]
 8024ba8:	429a      	cmp	r2, r3
 8024baa:	d307      	bcc.n	8024bbc <create_chain+0x88>
				ncl = 2;
 8024bac:	2302      	movs	r3, #2
 8024bae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8024bb0:	69fa      	ldr	r2, [r7, #28]
 8024bb2:	69bb      	ldr	r3, [r7, #24]
 8024bb4:	429a      	cmp	r2, r3
 8024bb6:	d901      	bls.n	8024bbc <create_chain+0x88>
 8024bb8:	2300      	movs	r3, #0
 8024bba:	e04f      	b.n	8024c5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8024bbc:	69f9      	ldr	r1, [r7, #28]
 8024bbe:	6878      	ldr	r0, [r7, #4]
 8024bc0:	f7ff fdbf 	bl	8024742 <get_fat>
 8024bc4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8024bc6:	68fb      	ldr	r3, [r7, #12]
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d00e      	beq.n	8024bea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	2b01      	cmp	r3, #1
 8024bd0:	d003      	beq.n	8024bda <create_chain+0xa6>
 8024bd2:	68fb      	ldr	r3, [r7, #12]
 8024bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024bd8:	d101      	bne.n	8024bde <create_chain+0xaa>
 8024bda:	68fb      	ldr	r3, [r7, #12]
 8024bdc:	e03e      	b.n	8024c5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8024bde:	69fa      	ldr	r2, [r7, #28]
 8024be0:	69bb      	ldr	r3, [r7, #24]
 8024be2:	429a      	cmp	r2, r3
 8024be4:	d1da      	bne.n	8024b9c <create_chain+0x68>
 8024be6:	2300      	movs	r3, #0
 8024be8:	e038      	b.n	8024c5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8024bea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8024bec:	f04f 32ff 	mov.w	r2, #4294967295
 8024bf0:	69f9      	ldr	r1, [r7, #28]
 8024bf2:	6938      	ldr	r0, [r7, #16]
 8024bf4:	f7ff fe4d 	bl	8024892 <put_fat>
 8024bf8:	4603      	mov	r3, r0
 8024bfa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8024bfc:	7dfb      	ldrb	r3, [r7, #23]
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d109      	bne.n	8024c16 <create_chain+0xe2>
 8024c02:	683b      	ldr	r3, [r7, #0]
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	d006      	beq.n	8024c16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8024c08:	69fa      	ldr	r2, [r7, #28]
 8024c0a:	6839      	ldr	r1, [r7, #0]
 8024c0c:	6938      	ldr	r0, [r7, #16]
 8024c0e:	f7ff fe40 	bl	8024892 <put_fat>
 8024c12:	4603      	mov	r3, r0
 8024c14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8024c16:	7dfb      	ldrb	r3, [r7, #23]
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d116      	bne.n	8024c4a <create_chain+0x116>
		fs->last_clst = ncl;
 8024c1c:	693b      	ldr	r3, [r7, #16]
 8024c1e:	69fa      	ldr	r2, [r7, #28]
 8024c20:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8024c22:	693b      	ldr	r3, [r7, #16]
 8024c24:	691a      	ldr	r2, [r3, #16]
 8024c26:	693b      	ldr	r3, [r7, #16]
 8024c28:	695b      	ldr	r3, [r3, #20]
 8024c2a:	3b02      	subs	r3, #2
 8024c2c:	429a      	cmp	r2, r3
 8024c2e:	d804      	bhi.n	8024c3a <create_chain+0x106>
 8024c30:	693b      	ldr	r3, [r7, #16]
 8024c32:	691b      	ldr	r3, [r3, #16]
 8024c34:	1e5a      	subs	r2, r3, #1
 8024c36:	693b      	ldr	r3, [r7, #16]
 8024c38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8024c3a:	693b      	ldr	r3, [r7, #16]
 8024c3c:	791b      	ldrb	r3, [r3, #4]
 8024c3e:	f043 0301 	orr.w	r3, r3, #1
 8024c42:	b2da      	uxtb	r2, r3
 8024c44:	693b      	ldr	r3, [r7, #16]
 8024c46:	711a      	strb	r2, [r3, #4]
 8024c48:	e007      	b.n	8024c5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8024c4a:	7dfb      	ldrb	r3, [r7, #23]
 8024c4c:	2b01      	cmp	r3, #1
 8024c4e:	d102      	bne.n	8024c56 <create_chain+0x122>
 8024c50:	f04f 33ff 	mov.w	r3, #4294967295
 8024c54:	e000      	b.n	8024c58 <create_chain+0x124>
 8024c56:	2301      	movs	r3, #1
 8024c58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8024c5a:	69fb      	ldr	r3, [r7, #28]
}
 8024c5c:	4618      	mov	r0, r3
 8024c5e:	3720      	adds	r7, #32
 8024c60:	46bd      	mov	sp, r7
 8024c62:	bd80      	pop	{r7, pc}

08024c64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8024c64:	b480      	push	{r7}
 8024c66:	b087      	sub	sp, #28
 8024c68:	af00      	add	r7, sp, #0
 8024c6a:	6078      	str	r0, [r7, #4]
 8024c6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	681b      	ldr	r3, [r3, #0]
 8024c72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c78:	3304      	adds	r3, #4
 8024c7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8024c7c:	683b      	ldr	r3, [r7, #0]
 8024c7e:	0a5b      	lsrs	r3, r3, #9
 8024c80:	68fa      	ldr	r2, [r7, #12]
 8024c82:	8952      	ldrh	r2, [r2, #10]
 8024c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8024c88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8024c8a:	693b      	ldr	r3, [r7, #16]
 8024c8c:	1d1a      	adds	r2, r3, #4
 8024c8e:	613a      	str	r2, [r7, #16]
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8024c94:	68bb      	ldr	r3, [r7, #8]
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	d101      	bne.n	8024c9e <clmt_clust+0x3a>
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	e010      	b.n	8024cc0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8024c9e:	697a      	ldr	r2, [r7, #20]
 8024ca0:	68bb      	ldr	r3, [r7, #8]
 8024ca2:	429a      	cmp	r2, r3
 8024ca4:	d307      	bcc.n	8024cb6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8024ca6:	697a      	ldr	r2, [r7, #20]
 8024ca8:	68bb      	ldr	r3, [r7, #8]
 8024caa:	1ad3      	subs	r3, r2, r3
 8024cac:	617b      	str	r3, [r7, #20]
 8024cae:	693b      	ldr	r3, [r7, #16]
 8024cb0:	3304      	adds	r3, #4
 8024cb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8024cb4:	e7e9      	b.n	8024c8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8024cb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8024cb8:	693b      	ldr	r3, [r7, #16]
 8024cba:	681a      	ldr	r2, [r3, #0]
 8024cbc:	697b      	ldr	r3, [r7, #20]
 8024cbe:	4413      	add	r3, r2
}
 8024cc0:	4618      	mov	r0, r3
 8024cc2:	371c      	adds	r7, #28
 8024cc4:	46bd      	mov	sp, r7
 8024cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cca:	4770      	bx	lr

08024ccc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8024ccc:	b580      	push	{r7, lr}
 8024cce:	b086      	sub	sp, #24
 8024cd0:	af00      	add	r7, sp, #0
 8024cd2:	6078      	str	r0, [r7, #4]
 8024cd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8024cdc:	683b      	ldr	r3, [r7, #0]
 8024cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024ce2:	d204      	bcs.n	8024cee <dir_sdi+0x22>
 8024ce4:	683b      	ldr	r3, [r7, #0]
 8024ce6:	f003 031f 	and.w	r3, r3, #31
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d001      	beq.n	8024cf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8024cee:	2302      	movs	r3, #2
 8024cf0:	e063      	b.n	8024dba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	683a      	ldr	r2, [r7, #0]
 8024cf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	689b      	ldr	r3, [r3, #8]
 8024cfc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8024cfe:	697b      	ldr	r3, [r7, #20]
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	d106      	bne.n	8024d12 <dir_sdi+0x46>
 8024d04:	693b      	ldr	r3, [r7, #16]
 8024d06:	781b      	ldrb	r3, [r3, #0]
 8024d08:	2b02      	cmp	r3, #2
 8024d0a:	d902      	bls.n	8024d12 <dir_sdi+0x46>
		clst = fs->dirbase;
 8024d0c:	693b      	ldr	r3, [r7, #16]
 8024d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8024d12:	697b      	ldr	r3, [r7, #20]
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d10c      	bne.n	8024d32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8024d18:	683b      	ldr	r3, [r7, #0]
 8024d1a:	095b      	lsrs	r3, r3, #5
 8024d1c:	693a      	ldr	r2, [r7, #16]
 8024d1e:	8912      	ldrh	r2, [r2, #8]
 8024d20:	4293      	cmp	r3, r2
 8024d22:	d301      	bcc.n	8024d28 <dir_sdi+0x5c>
 8024d24:	2302      	movs	r3, #2
 8024d26:	e048      	b.n	8024dba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8024d28:	693b      	ldr	r3, [r7, #16]
 8024d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	61da      	str	r2, [r3, #28]
 8024d30:	e029      	b.n	8024d86 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8024d32:	693b      	ldr	r3, [r7, #16]
 8024d34:	895b      	ldrh	r3, [r3, #10]
 8024d36:	025b      	lsls	r3, r3, #9
 8024d38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8024d3a:	e019      	b.n	8024d70 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8024d3c:	687b      	ldr	r3, [r7, #4]
 8024d3e:	6979      	ldr	r1, [r7, #20]
 8024d40:	4618      	mov	r0, r3
 8024d42:	f7ff fcfe 	bl	8024742 <get_fat>
 8024d46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8024d48:	697b      	ldr	r3, [r7, #20]
 8024d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024d4e:	d101      	bne.n	8024d54 <dir_sdi+0x88>
 8024d50:	2301      	movs	r3, #1
 8024d52:	e032      	b.n	8024dba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8024d54:	697b      	ldr	r3, [r7, #20]
 8024d56:	2b01      	cmp	r3, #1
 8024d58:	d904      	bls.n	8024d64 <dir_sdi+0x98>
 8024d5a:	693b      	ldr	r3, [r7, #16]
 8024d5c:	695b      	ldr	r3, [r3, #20]
 8024d5e:	697a      	ldr	r2, [r7, #20]
 8024d60:	429a      	cmp	r2, r3
 8024d62:	d301      	bcc.n	8024d68 <dir_sdi+0x9c>
 8024d64:	2302      	movs	r3, #2
 8024d66:	e028      	b.n	8024dba <dir_sdi+0xee>
			ofs -= csz;
 8024d68:	683a      	ldr	r2, [r7, #0]
 8024d6a:	68fb      	ldr	r3, [r7, #12]
 8024d6c:	1ad3      	subs	r3, r2, r3
 8024d6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8024d70:	683a      	ldr	r2, [r7, #0]
 8024d72:	68fb      	ldr	r3, [r7, #12]
 8024d74:	429a      	cmp	r2, r3
 8024d76:	d2e1      	bcs.n	8024d3c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8024d78:	6979      	ldr	r1, [r7, #20]
 8024d7a:	6938      	ldr	r0, [r7, #16]
 8024d7c:	f7ff fcc2 	bl	8024704 <clust2sect>
 8024d80:	4602      	mov	r2, r0
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	697a      	ldr	r2, [r7, #20]
 8024d8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	69db      	ldr	r3, [r3, #28]
 8024d90:	2b00      	cmp	r3, #0
 8024d92:	d101      	bne.n	8024d98 <dir_sdi+0xcc>
 8024d94:	2302      	movs	r3, #2
 8024d96:	e010      	b.n	8024dba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8024d98:	687b      	ldr	r3, [r7, #4]
 8024d9a:	69da      	ldr	r2, [r3, #28]
 8024d9c:	683b      	ldr	r3, [r7, #0]
 8024d9e:	0a5b      	lsrs	r3, r3, #9
 8024da0:	441a      	add	r2, r3
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8024da6:	693b      	ldr	r3, [r7, #16]
 8024da8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024dac:	683b      	ldr	r3, [r7, #0]
 8024dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024db2:	441a      	add	r2, r3
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8024db8:	2300      	movs	r3, #0
}
 8024dba:	4618      	mov	r0, r3
 8024dbc:	3718      	adds	r7, #24
 8024dbe:	46bd      	mov	sp, r7
 8024dc0:	bd80      	pop	{r7, pc}

08024dc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8024dc2:	b580      	push	{r7, lr}
 8024dc4:	b086      	sub	sp, #24
 8024dc6:	af00      	add	r7, sp, #0
 8024dc8:	6078      	str	r0, [r7, #4]
 8024dca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8024dcc:	687b      	ldr	r3, [r7, #4]
 8024dce:	681b      	ldr	r3, [r3, #0]
 8024dd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	695b      	ldr	r3, [r3, #20]
 8024dd6:	3320      	adds	r3, #32
 8024dd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	69db      	ldr	r3, [r3, #28]
 8024dde:	2b00      	cmp	r3, #0
 8024de0:	d003      	beq.n	8024dea <dir_next+0x28>
 8024de2:	68bb      	ldr	r3, [r7, #8]
 8024de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024de8:	d301      	bcc.n	8024dee <dir_next+0x2c>
 8024dea:	2304      	movs	r3, #4
 8024dec:	e0aa      	b.n	8024f44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8024dee:	68bb      	ldr	r3, [r7, #8]
 8024df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	f040 8098 	bne.w	8024f2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	69db      	ldr	r3, [r3, #28]
 8024dfe:	1c5a      	adds	r2, r3, #1
 8024e00:	687b      	ldr	r3, [r7, #4]
 8024e02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	699b      	ldr	r3, [r3, #24]
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	d10b      	bne.n	8024e24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8024e0c:	68bb      	ldr	r3, [r7, #8]
 8024e0e:	095b      	lsrs	r3, r3, #5
 8024e10:	68fa      	ldr	r2, [r7, #12]
 8024e12:	8912      	ldrh	r2, [r2, #8]
 8024e14:	4293      	cmp	r3, r2
 8024e16:	f0c0 8088 	bcc.w	8024f2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	2200      	movs	r2, #0
 8024e1e:	61da      	str	r2, [r3, #28]
 8024e20:	2304      	movs	r3, #4
 8024e22:	e08f      	b.n	8024f44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8024e24:	68bb      	ldr	r3, [r7, #8]
 8024e26:	0a5b      	lsrs	r3, r3, #9
 8024e28:	68fa      	ldr	r2, [r7, #12]
 8024e2a:	8952      	ldrh	r2, [r2, #10]
 8024e2c:	3a01      	subs	r2, #1
 8024e2e:	4013      	ands	r3, r2
 8024e30:	2b00      	cmp	r3, #0
 8024e32:	d17a      	bne.n	8024f2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8024e34:	687a      	ldr	r2, [r7, #4]
 8024e36:	687b      	ldr	r3, [r7, #4]
 8024e38:	699b      	ldr	r3, [r3, #24]
 8024e3a:	4619      	mov	r1, r3
 8024e3c:	4610      	mov	r0, r2
 8024e3e:	f7ff fc80 	bl	8024742 <get_fat>
 8024e42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8024e44:	697b      	ldr	r3, [r7, #20]
 8024e46:	2b01      	cmp	r3, #1
 8024e48:	d801      	bhi.n	8024e4e <dir_next+0x8c>
 8024e4a:	2302      	movs	r3, #2
 8024e4c:	e07a      	b.n	8024f44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8024e4e:	697b      	ldr	r3, [r7, #20]
 8024e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e54:	d101      	bne.n	8024e5a <dir_next+0x98>
 8024e56:	2301      	movs	r3, #1
 8024e58:	e074      	b.n	8024f44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	695b      	ldr	r3, [r3, #20]
 8024e5e:	697a      	ldr	r2, [r7, #20]
 8024e60:	429a      	cmp	r2, r3
 8024e62:	d358      	bcc.n	8024f16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8024e64:	683b      	ldr	r3, [r7, #0]
 8024e66:	2b00      	cmp	r3, #0
 8024e68:	d104      	bne.n	8024e74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	2200      	movs	r2, #0
 8024e6e:	61da      	str	r2, [r3, #28]
 8024e70:	2304      	movs	r3, #4
 8024e72:	e067      	b.n	8024f44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8024e74:	687a      	ldr	r2, [r7, #4]
 8024e76:	687b      	ldr	r3, [r7, #4]
 8024e78:	699b      	ldr	r3, [r3, #24]
 8024e7a:	4619      	mov	r1, r3
 8024e7c:	4610      	mov	r0, r2
 8024e7e:	f7ff fe59 	bl	8024b34 <create_chain>
 8024e82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8024e84:	697b      	ldr	r3, [r7, #20]
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	d101      	bne.n	8024e8e <dir_next+0xcc>
 8024e8a:	2307      	movs	r3, #7
 8024e8c:	e05a      	b.n	8024f44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8024e8e:	697b      	ldr	r3, [r7, #20]
 8024e90:	2b01      	cmp	r3, #1
 8024e92:	d101      	bne.n	8024e98 <dir_next+0xd6>
 8024e94:	2302      	movs	r3, #2
 8024e96:	e055      	b.n	8024f44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8024e98:	697b      	ldr	r3, [r7, #20]
 8024e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e9e:	d101      	bne.n	8024ea4 <dir_next+0xe2>
 8024ea0:	2301      	movs	r3, #1
 8024ea2:	e04f      	b.n	8024f44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8024ea4:	68f8      	ldr	r0, [r7, #12]
 8024ea6:	f7ff fb4d 	bl	8024544 <sync_window>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	d001      	beq.n	8024eb4 <dir_next+0xf2>
 8024eb0:	2301      	movs	r3, #1
 8024eb2:	e047      	b.n	8024f44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8024eb4:	68fb      	ldr	r3, [r7, #12]
 8024eb6:	3330      	adds	r3, #48	; 0x30
 8024eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024ebc:	2100      	movs	r1, #0
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	f7ff f977 	bl	80241b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024ec4:	2300      	movs	r3, #0
 8024ec6:	613b      	str	r3, [r7, #16]
 8024ec8:	6979      	ldr	r1, [r7, #20]
 8024eca:	68f8      	ldr	r0, [r7, #12]
 8024ecc:	f7ff fc1a 	bl	8024704 <clust2sect>
 8024ed0:	4602      	mov	r2, r0
 8024ed2:	68fb      	ldr	r3, [r7, #12]
 8024ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8024ed6:	e012      	b.n	8024efe <dir_next+0x13c>
						fs->wflag = 1;
 8024ed8:	68fb      	ldr	r3, [r7, #12]
 8024eda:	2201      	movs	r2, #1
 8024edc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8024ede:	68f8      	ldr	r0, [r7, #12]
 8024ee0:	f7ff fb30 	bl	8024544 <sync_window>
 8024ee4:	4603      	mov	r3, r0
 8024ee6:	2b00      	cmp	r3, #0
 8024ee8:	d001      	beq.n	8024eee <dir_next+0x12c>
 8024eea:	2301      	movs	r3, #1
 8024eec:	e02a      	b.n	8024f44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8024eee:	693b      	ldr	r3, [r7, #16]
 8024ef0:	3301      	adds	r3, #1
 8024ef2:	613b      	str	r3, [r7, #16]
 8024ef4:	68fb      	ldr	r3, [r7, #12]
 8024ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ef8:	1c5a      	adds	r2, r3, #1
 8024efa:	68fb      	ldr	r3, [r7, #12]
 8024efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8024efe:	68fb      	ldr	r3, [r7, #12]
 8024f00:	895b      	ldrh	r3, [r3, #10]
 8024f02:	461a      	mov	r2, r3
 8024f04:	693b      	ldr	r3, [r7, #16]
 8024f06:	4293      	cmp	r3, r2
 8024f08:	d3e6      	bcc.n	8024ed8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8024f0a:	68fb      	ldr	r3, [r7, #12]
 8024f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024f0e:	693b      	ldr	r3, [r7, #16]
 8024f10:	1ad2      	subs	r2, r2, r3
 8024f12:	68fb      	ldr	r3, [r7, #12]
 8024f14:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	697a      	ldr	r2, [r7, #20]
 8024f1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8024f1c:	6979      	ldr	r1, [r7, #20]
 8024f1e:	68f8      	ldr	r0, [r7, #12]
 8024f20:	f7ff fbf0 	bl	8024704 <clust2sect>
 8024f24:	4602      	mov	r2, r0
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8024f2a:	687b      	ldr	r3, [r7, #4]
 8024f2c:	68ba      	ldr	r2, [r7, #8]
 8024f2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8024f30:	68fb      	ldr	r3, [r7, #12]
 8024f32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024f36:	68bb      	ldr	r3, [r7, #8]
 8024f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024f3c:	441a      	add	r2, r3
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8024f42:	2300      	movs	r3, #0
}
 8024f44:	4618      	mov	r0, r3
 8024f46:	3718      	adds	r7, #24
 8024f48:	46bd      	mov	sp, r7
 8024f4a:	bd80      	pop	{r7, pc}

08024f4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8024f4c:	b580      	push	{r7, lr}
 8024f4e:	b086      	sub	sp, #24
 8024f50:	af00      	add	r7, sp, #0
 8024f52:	6078      	str	r0, [r7, #4]
 8024f54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8024f56:	687b      	ldr	r3, [r7, #4]
 8024f58:	681b      	ldr	r3, [r3, #0]
 8024f5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8024f5c:	2100      	movs	r1, #0
 8024f5e:	6878      	ldr	r0, [r7, #4]
 8024f60:	f7ff feb4 	bl	8024ccc <dir_sdi>
 8024f64:	4603      	mov	r3, r0
 8024f66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8024f68:	7dfb      	ldrb	r3, [r7, #23]
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d12b      	bne.n	8024fc6 <dir_alloc+0x7a>
		n = 0;
 8024f6e:	2300      	movs	r3, #0
 8024f70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8024f72:	687b      	ldr	r3, [r7, #4]
 8024f74:	69db      	ldr	r3, [r3, #28]
 8024f76:	4619      	mov	r1, r3
 8024f78:	68f8      	ldr	r0, [r7, #12]
 8024f7a:	f7ff fb27 	bl	80245cc <move_window>
 8024f7e:	4603      	mov	r3, r0
 8024f80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8024f82:	7dfb      	ldrb	r3, [r7, #23]
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	d11d      	bne.n	8024fc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8024f88:	687b      	ldr	r3, [r7, #4]
 8024f8a:	6a1b      	ldr	r3, [r3, #32]
 8024f8c:	781b      	ldrb	r3, [r3, #0]
 8024f8e:	2be5      	cmp	r3, #229	; 0xe5
 8024f90:	d004      	beq.n	8024f9c <dir_alloc+0x50>
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	6a1b      	ldr	r3, [r3, #32]
 8024f96:	781b      	ldrb	r3, [r3, #0]
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	d107      	bne.n	8024fac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8024f9c:	693b      	ldr	r3, [r7, #16]
 8024f9e:	3301      	adds	r3, #1
 8024fa0:	613b      	str	r3, [r7, #16]
 8024fa2:	693a      	ldr	r2, [r7, #16]
 8024fa4:	683b      	ldr	r3, [r7, #0]
 8024fa6:	429a      	cmp	r2, r3
 8024fa8:	d102      	bne.n	8024fb0 <dir_alloc+0x64>
 8024faa:	e00c      	b.n	8024fc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8024fac:	2300      	movs	r3, #0
 8024fae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8024fb0:	2101      	movs	r1, #1
 8024fb2:	6878      	ldr	r0, [r7, #4]
 8024fb4:	f7ff ff05 	bl	8024dc2 <dir_next>
 8024fb8:	4603      	mov	r3, r0
 8024fba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8024fbc:	7dfb      	ldrb	r3, [r7, #23]
 8024fbe:	2b00      	cmp	r3, #0
 8024fc0:	d0d7      	beq.n	8024f72 <dir_alloc+0x26>
 8024fc2:	e000      	b.n	8024fc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8024fc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8024fc6:	7dfb      	ldrb	r3, [r7, #23]
 8024fc8:	2b04      	cmp	r3, #4
 8024fca:	d101      	bne.n	8024fd0 <dir_alloc+0x84>
 8024fcc:	2307      	movs	r3, #7
 8024fce:	75fb      	strb	r3, [r7, #23]
	return res;
 8024fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8024fd2:	4618      	mov	r0, r3
 8024fd4:	3718      	adds	r7, #24
 8024fd6:	46bd      	mov	sp, r7
 8024fd8:	bd80      	pop	{r7, pc}

08024fda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8024fda:	b580      	push	{r7, lr}
 8024fdc:	b084      	sub	sp, #16
 8024fde:	af00      	add	r7, sp, #0
 8024fe0:	6078      	str	r0, [r7, #4]
 8024fe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8024fe4:	683b      	ldr	r3, [r7, #0]
 8024fe6:	331a      	adds	r3, #26
 8024fe8:	4618      	mov	r0, r3
 8024fea:	f7ff f83f 	bl	802406c <ld_word>
 8024fee:	4603      	mov	r3, r0
 8024ff0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	781b      	ldrb	r3, [r3, #0]
 8024ff6:	2b03      	cmp	r3, #3
 8024ff8:	d109      	bne.n	802500e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8024ffa:	683b      	ldr	r3, [r7, #0]
 8024ffc:	3314      	adds	r3, #20
 8024ffe:	4618      	mov	r0, r3
 8025000:	f7ff f834 	bl	802406c <ld_word>
 8025004:	4603      	mov	r3, r0
 8025006:	041b      	lsls	r3, r3, #16
 8025008:	68fa      	ldr	r2, [r7, #12]
 802500a:	4313      	orrs	r3, r2
 802500c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 802500e:	68fb      	ldr	r3, [r7, #12]
}
 8025010:	4618      	mov	r0, r3
 8025012:	3710      	adds	r7, #16
 8025014:	46bd      	mov	sp, r7
 8025016:	bd80      	pop	{r7, pc}

08025018 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8025018:	b580      	push	{r7, lr}
 802501a:	b084      	sub	sp, #16
 802501c:	af00      	add	r7, sp, #0
 802501e:	60f8      	str	r0, [r7, #12]
 8025020:	60b9      	str	r1, [r7, #8]
 8025022:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8025024:	68bb      	ldr	r3, [r7, #8]
 8025026:	331a      	adds	r3, #26
 8025028:	687a      	ldr	r2, [r7, #4]
 802502a:	b292      	uxth	r2, r2
 802502c:	4611      	mov	r1, r2
 802502e:	4618      	mov	r0, r3
 8025030:	f7ff f857 	bl	80240e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8025034:	68fb      	ldr	r3, [r7, #12]
 8025036:	781b      	ldrb	r3, [r3, #0]
 8025038:	2b03      	cmp	r3, #3
 802503a:	d109      	bne.n	8025050 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 802503c:	68bb      	ldr	r3, [r7, #8]
 802503e:	f103 0214 	add.w	r2, r3, #20
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	0c1b      	lsrs	r3, r3, #16
 8025046:	b29b      	uxth	r3, r3
 8025048:	4619      	mov	r1, r3
 802504a:	4610      	mov	r0, r2
 802504c:	f7ff f849 	bl	80240e2 <st_word>
	}
}
 8025050:	bf00      	nop
 8025052:	3710      	adds	r7, #16
 8025054:	46bd      	mov	sp, r7
 8025056:	bd80      	pop	{r7, pc}

08025058 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8025058:	b580      	push	{r7, lr}
 802505a:	b086      	sub	sp, #24
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
 8025060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8025062:	2304      	movs	r3, #4
 8025064:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	681b      	ldr	r3, [r3, #0]
 802506a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 802506c:	e03c      	b.n	80250e8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 802506e:	687b      	ldr	r3, [r7, #4]
 8025070:	69db      	ldr	r3, [r3, #28]
 8025072:	4619      	mov	r1, r3
 8025074:	6938      	ldr	r0, [r7, #16]
 8025076:	f7ff faa9 	bl	80245cc <move_window>
 802507a:	4603      	mov	r3, r0
 802507c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802507e:	7dfb      	ldrb	r3, [r7, #23]
 8025080:	2b00      	cmp	r3, #0
 8025082:	d136      	bne.n	80250f2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8025084:	687b      	ldr	r3, [r7, #4]
 8025086:	6a1b      	ldr	r3, [r3, #32]
 8025088:	781b      	ldrb	r3, [r3, #0]
 802508a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 802508c:	7bfb      	ldrb	r3, [r7, #15]
 802508e:	2b00      	cmp	r3, #0
 8025090:	d102      	bne.n	8025098 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8025092:	2304      	movs	r3, #4
 8025094:	75fb      	strb	r3, [r7, #23]
 8025096:	e031      	b.n	80250fc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8025098:	687b      	ldr	r3, [r7, #4]
 802509a:	6a1b      	ldr	r3, [r3, #32]
 802509c:	330b      	adds	r3, #11
 802509e:	781b      	ldrb	r3, [r3, #0]
 80250a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80250a4:	73bb      	strb	r3, [r7, #14]
 80250a6:	687b      	ldr	r3, [r7, #4]
 80250a8:	7bba      	ldrb	r2, [r7, #14]
 80250aa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80250ac:	7bfb      	ldrb	r3, [r7, #15]
 80250ae:	2be5      	cmp	r3, #229	; 0xe5
 80250b0:	d011      	beq.n	80250d6 <dir_read+0x7e>
 80250b2:	7bfb      	ldrb	r3, [r7, #15]
 80250b4:	2b2e      	cmp	r3, #46	; 0x2e
 80250b6:	d00e      	beq.n	80250d6 <dir_read+0x7e>
 80250b8:	7bbb      	ldrb	r3, [r7, #14]
 80250ba:	2b0f      	cmp	r3, #15
 80250bc:	d00b      	beq.n	80250d6 <dir_read+0x7e>
 80250be:	7bbb      	ldrb	r3, [r7, #14]
 80250c0:	f023 0320 	bic.w	r3, r3, #32
 80250c4:	2b08      	cmp	r3, #8
 80250c6:	bf0c      	ite	eq
 80250c8:	2301      	moveq	r3, #1
 80250ca:	2300      	movne	r3, #0
 80250cc:	b2db      	uxtb	r3, r3
 80250ce:	461a      	mov	r2, r3
 80250d0:	683b      	ldr	r3, [r7, #0]
 80250d2:	4293      	cmp	r3, r2
 80250d4:	d00f      	beq.n	80250f6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80250d6:	2100      	movs	r1, #0
 80250d8:	6878      	ldr	r0, [r7, #4]
 80250da:	f7ff fe72 	bl	8024dc2 <dir_next>
 80250de:	4603      	mov	r3, r0
 80250e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80250e2:	7dfb      	ldrb	r3, [r7, #23]
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	d108      	bne.n	80250fa <dir_read+0xa2>
	while (dp->sect) {
 80250e8:	687b      	ldr	r3, [r7, #4]
 80250ea:	69db      	ldr	r3, [r3, #28]
 80250ec:	2b00      	cmp	r3, #0
 80250ee:	d1be      	bne.n	802506e <dir_read+0x16>
 80250f0:	e004      	b.n	80250fc <dir_read+0xa4>
		if (res != FR_OK) break;
 80250f2:	bf00      	nop
 80250f4:	e002      	b.n	80250fc <dir_read+0xa4>
				break;
 80250f6:	bf00      	nop
 80250f8:	e000      	b.n	80250fc <dir_read+0xa4>
		if (res != FR_OK) break;
 80250fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80250fc:	7dfb      	ldrb	r3, [r7, #23]
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d002      	beq.n	8025108 <dir_read+0xb0>
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	2200      	movs	r2, #0
 8025106:	61da      	str	r2, [r3, #28]
	return res;
 8025108:	7dfb      	ldrb	r3, [r7, #23]
}
 802510a:	4618      	mov	r0, r3
 802510c:	3718      	adds	r7, #24
 802510e:	46bd      	mov	sp, r7
 8025110:	bd80      	pop	{r7, pc}

08025112 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8025112:	b580      	push	{r7, lr}
 8025114:	b086      	sub	sp, #24
 8025116:	af00      	add	r7, sp, #0
 8025118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8025120:	2100      	movs	r1, #0
 8025122:	6878      	ldr	r0, [r7, #4]
 8025124:	f7ff fdd2 	bl	8024ccc <dir_sdi>
 8025128:	4603      	mov	r3, r0
 802512a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 802512c:	7dfb      	ldrb	r3, [r7, #23]
 802512e:	2b00      	cmp	r3, #0
 8025130:	d001      	beq.n	8025136 <dir_find+0x24>
 8025132:	7dfb      	ldrb	r3, [r7, #23]
 8025134:	e03e      	b.n	80251b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8025136:	687b      	ldr	r3, [r7, #4]
 8025138:	69db      	ldr	r3, [r3, #28]
 802513a:	4619      	mov	r1, r3
 802513c:	6938      	ldr	r0, [r7, #16]
 802513e:	f7ff fa45 	bl	80245cc <move_window>
 8025142:	4603      	mov	r3, r0
 8025144:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8025146:	7dfb      	ldrb	r3, [r7, #23]
 8025148:	2b00      	cmp	r3, #0
 802514a:	d12f      	bne.n	80251ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	6a1b      	ldr	r3, [r3, #32]
 8025150:	781b      	ldrb	r3, [r3, #0]
 8025152:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8025154:	7bfb      	ldrb	r3, [r7, #15]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d102      	bne.n	8025160 <dir_find+0x4e>
 802515a:	2304      	movs	r3, #4
 802515c:	75fb      	strb	r3, [r7, #23]
 802515e:	e028      	b.n	80251b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	6a1b      	ldr	r3, [r3, #32]
 8025164:	330b      	adds	r3, #11
 8025166:	781b      	ldrb	r3, [r3, #0]
 8025168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802516c:	b2da      	uxtb	r2, r3
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8025172:	687b      	ldr	r3, [r7, #4]
 8025174:	6a1b      	ldr	r3, [r3, #32]
 8025176:	330b      	adds	r3, #11
 8025178:	781b      	ldrb	r3, [r3, #0]
 802517a:	f003 0308 	and.w	r3, r3, #8
 802517e:	2b00      	cmp	r3, #0
 8025180:	d10a      	bne.n	8025198 <dir_find+0x86>
 8025182:	687b      	ldr	r3, [r7, #4]
 8025184:	6a18      	ldr	r0, [r3, #32]
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	3324      	adds	r3, #36	; 0x24
 802518a:	220b      	movs	r2, #11
 802518c:	4619      	mov	r1, r3
 802518e:	f7ff f82b 	bl	80241e8 <mem_cmp>
 8025192:	4603      	mov	r3, r0
 8025194:	2b00      	cmp	r3, #0
 8025196:	d00b      	beq.n	80251b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8025198:	2100      	movs	r1, #0
 802519a:	6878      	ldr	r0, [r7, #4]
 802519c:	f7ff fe11 	bl	8024dc2 <dir_next>
 80251a0:	4603      	mov	r3, r0
 80251a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80251a4:	7dfb      	ldrb	r3, [r7, #23]
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d0c5      	beq.n	8025136 <dir_find+0x24>
 80251aa:	e002      	b.n	80251b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80251ac:	bf00      	nop
 80251ae:	e000      	b.n	80251b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80251b0:	bf00      	nop

	return res;
 80251b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80251b4:	4618      	mov	r0, r3
 80251b6:	3718      	adds	r7, #24
 80251b8:	46bd      	mov	sp, r7
 80251ba:	bd80      	pop	{r7, pc}

080251bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80251bc:	b580      	push	{r7, lr}
 80251be:	b084      	sub	sp, #16
 80251c0:	af00      	add	r7, sp, #0
 80251c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80251ca:	2101      	movs	r1, #1
 80251cc:	6878      	ldr	r0, [r7, #4]
 80251ce:	f7ff febd 	bl	8024f4c <dir_alloc>
 80251d2:	4603      	mov	r3, r0
 80251d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80251d6:	7bfb      	ldrb	r3, [r7, #15]
 80251d8:	2b00      	cmp	r3, #0
 80251da:	d11c      	bne.n	8025216 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	69db      	ldr	r3, [r3, #28]
 80251e0:	4619      	mov	r1, r3
 80251e2:	68b8      	ldr	r0, [r7, #8]
 80251e4:	f7ff f9f2 	bl	80245cc <move_window>
 80251e8:	4603      	mov	r3, r0
 80251ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80251ec:	7bfb      	ldrb	r3, [r7, #15]
 80251ee:	2b00      	cmp	r3, #0
 80251f0:	d111      	bne.n	8025216 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80251f2:	687b      	ldr	r3, [r7, #4]
 80251f4:	6a1b      	ldr	r3, [r3, #32]
 80251f6:	2220      	movs	r2, #32
 80251f8:	2100      	movs	r1, #0
 80251fa:	4618      	mov	r0, r3
 80251fc:	f7fe ffd9 	bl	80241b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8025200:	687b      	ldr	r3, [r7, #4]
 8025202:	6a18      	ldr	r0, [r3, #32]
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	3324      	adds	r3, #36	; 0x24
 8025208:	220b      	movs	r2, #11
 802520a:	4619      	mov	r1, r3
 802520c:	f7fe ffb0 	bl	8024170 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8025210:	68bb      	ldr	r3, [r7, #8]
 8025212:	2201      	movs	r2, #1
 8025214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8025216:	7bfb      	ldrb	r3, [r7, #15]
}
 8025218:	4618      	mov	r0, r3
 802521a:	3710      	adds	r7, #16
 802521c:	46bd      	mov	sp, r7
 802521e:	bd80      	pop	{r7, pc}

08025220 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8025220:	b580      	push	{r7, lr}
 8025222:	b086      	sub	sp, #24
 8025224:	af00      	add	r7, sp, #0
 8025226:	6078      	str	r0, [r7, #4]
 8025228:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 802522a:	683b      	ldr	r3, [r7, #0]
 802522c:	2200      	movs	r2, #0
 802522e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8025230:	687b      	ldr	r3, [r7, #4]
 8025232:	69db      	ldr	r3, [r3, #28]
 8025234:	2b00      	cmp	r3, #0
 8025236:	d04e      	beq.n	80252d6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8025238:	2300      	movs	r3, #0
 802523a:	613b      	str	r3, [r7, #16]
 802523c:	693b      	ldr	r3, [r7, #16]
 802523e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8025240:	e021      	b.n	8025286 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	6a1a      	ldr	r2, [r3, #32]
 8025246:	697b      	ldr	r3, [r7, #20]
 8025248:	1c59      	adds	r1, r3, #1
 802524a:	6179      	str	r1, [r7, #20]
 802524c:	4413      	add	r3, r2
 802524e:	781b      	ldrb	r3, [r3, #0]
 8025250:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8025252:	7bfb      	ldrb	r3, [r7, #15]
 8025254:	2b20      	cmp	r3, #32
 8025256:	d100      	bne.n	802525a <get_fileinfo+0x3a>
 8025258:	e015      	b.n	8025286 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 802525a:	7bfb      	ldrb	r3, [r7, #15]
 802525c:	2b05      	cmp	r3, #5
 802525e:	d101      	bne.n	8025264 <get_fileinfo+0x44>
 8025260:	23e5      	movs	r3, #229	; 0xe5
 8025262:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8025264:	697b      	ldr	r3, [r7, #20]
 8025266:	2b09      	cmp	r3, #9
 8025268:	d106      	bne.n	8025278 <get_fileinfo+0x58>
 802526a:	693b      	ldr	r3, [r7, #16]
 802526c:	1c5a      	adds	r2, r3, #1
 802526e:	613a      	str	r2, [r7, #16]
 8025270:	683a      	ldr	r2, [r7, #0]
 8025272:	4413      	add	r3, r2
 8025274:	222e      	movs	r2, #46	; 0x2e
 8025276:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8025278:	693b      	ldr	r3, [r7, #16]
 802527a:	1c5a      	adds	r2, r3, #1
 802527c:	613a      	str	r2, [r7, #16]
 802527e:	683a      	ldr	r2, [r7, #0]
 8025280:	4413      	add	r3, r2
 8025282:	7bfa      	ldrb	r2, [r7, #15]
 8025284:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8025286:	697b      	ldr	r3, [r7, #20]
 8025288:	2b0a      	cmp	r3, #10
 802528a:	d9da      	bls.n	8025242 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 802528c:	683a      	ldr	r2, [r7, #0]
 802528e:	693b      	ldr	r3, [r7, #16]
 8025290:	4413      	add	r3, r2
 8025292:	3309      	adds	r3, #9
 8025294:	2200      	movs	r2, #0
 8025296:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	6a1b      	ldr	r3, [r3, #32]
 802529c:	7ada      	ldrb	r2, [r3, #11]
 802529e:	683b      	ldr	r3, [r7, #0]
 80252a0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	6a1b      	ldr	r3, [r3, #32]
 80252a6:	331c      	adds	r3, #28
 80252a8:	4618      	mov	r0, r3
 80252aa:	f7fe fef7 	bl	802409c <ld_dword>
 80252ae:	4602      	mov	r2, r0
 80252b0:	683b      	ldr	r3, [r7, #0]
 80252b2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80252b4:	687b      	ldr	r3, [r7, #4]
 80252b6:	6a1b      	ldr	r3, [r3, #32]
 80252b8:	3316      	adds	r3, #22
 80252ba:	4618      	mov	r0, r3
 80252bc:	f7fe feee 	bl	802409c <ld_dword>
 80252c0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80252c2:	68bb      	ldr	r3, [r7, #8]
 80252c4:	b29a      	uxth	r2, r3
 80252c6:	683b      	ldr	r3, [r7, #0]
 80252c8:	80da      	strh	r2, [r3, #6]
 80252ca:	68bb      	ldr	r3, [r7, #8]
 80252cc:	0c1b      	lsrs	r3, r3, #16
 80252ce:	b29a      	uxth	r2, r3
 80252d0:	683b      	ldr	r3, [r7, #0]
 80252d2:	809a      	strh	r2, [r3, #4]
 80252d4:	e000      	b.n	80252d8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80252d6:	bf00      	nop
}
 80252d8:	3718      	adds	r7, #24
 80252da:	46bd      	mov	sp, r7
 80252dc:	bd80      	pop	{r7, pc}
	...

080252e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80252e0:	b580      	push	{r7, lr}
 80252e2:	b088      	sub	sp, #32
 80252e4:	af00      	add	r7, sp, #0
 80252e6:	6078      	str	r0, [r7, #4]
 80252e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80252ea:	683b      	ldr	r3, [r7, #0]
 80252ec:	681b      	ldr	r3, [r3, #0]
 80252ee:	60fb      	str	r3, [r7, #12]
 80252f0:	687b      	ldr	r3, [r7, #4]
 80252f2:	3324      	adds	r3, #36	; 0x24
 80252f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80252f6:	220b      	movs	r2, #11
 80252f8:	2120      	movs	r1, #32
 80252fa:	68b8      	ldr	r0, [r7, #8]
 80252fc:	f7fe ff59 	bl	80241b2 <mem_set>
	si = i = 0; ni = 8;
 8025300:	2300      	movs	r3, #0
 8025302:	613b      	str	r3, [r7, #16]
 8025304:	693b      	ldr	r3, [r7, #16]
 8025306:	61fb      	str	r3, [r7, #28]
 8025308:	2308      	movs	r3, #8
 802530a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 802530c:	69fb      	ldr	r3, [r7, #28]
 802530e:	1c5a      	adds	r2, r3, #1
 8025310:	61fa      	str	r2, [r7, #28]
 8025312:	68fa      	ldr	r2, [r7, #12]
 8025314:	4413      	add	r3, r2
 8025316:	781b      	ldrb	r3, [r3, #0]
 8025318:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 802531a:	7efb      	ldrb	r3, [r7, #27]
 802531c:	2b20      	cmp	r3, #32
 802531e:	d94e      	bls.n	80253be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8025320:	7efb      	ldrb	r3, [r7, #27]
 8025322:	2b2f      	cmp	r3, #47	; 0x2f
 8025324:	d006      	beq.n	8025334 <create_name+0x54>
 8025326:	7efb      	ldrb	r3, [r7, #27]
 8025328:	2b5c      	cmp	r3, #92	; 0x5c
 802532a:	d110      	bne.n	802534e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 802532c:	e002      	b.n	8025334 <create_name+0x54>
 802532e:	69fb      	ldr	r3, [r7, #28]
 8025330:	3301      	adds	r3, #1
 8025332:	61fb      	str	r3, [r7, #28]
 8025334:	68fa      	ldr	r2, [r7, #12]
 8025336:	69fb      	ldr	r3, [r7, #28]
 8025338:	4413      	add	r3, r2
 802533a:	781b      	ldrb	r3, [r3, #0]
 802533c:	2b2f      	cmp	r3, #47	; 0x2f
 802533e:	d0f6      	beq.n	802532e <create_name+0x4e>
 8025340:	68fa      	ldr	r2, [r7, #12]
 8025342:	69fb      	ldr	r3, [r7, #28]
 8025344:	4413      	add	r3, r2
 8025346:	781b      	ldrb	r3, [r3, #0]
 8025348:	2b5c      	cmp	r3, #92	; 0x5c
 802534a:	d0f0      	beq.n	802532e <create_name+0x4e>
			break;
 802534c:	e038      	b.n	80253c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 802534e:	7efb      	ldrb	r3, [r7, #27]
 8025350:	2b2e      	cmp	r3, #46	; 0x2e
 8025352:	d003      	beq.n	802535c <create_name+0x7c>
 8025354:	693a      	ldr	r2, [r7, #16]
 8025356:	697b      	ldr	r3, [r7, #20]
 8025358:	429a      	cmp	r2, r3
 802535a:	d30c      	bcc.n	8025376 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 802535c:	697b      	ldr	r3, [r7, #20]
 802535e:	2b0b      	cmp	r3, #11
 8025360:	d002      	beq.n	8025368 <create_name+0x88>
 8025362:	7efb      	ldrb	r3, [r7, #27]
 8025364:	2b2e      	cmp	r3, #46	; 0x2e
 8025366:	d001      	beq.n	802536c <create_name+0x8c>
 8025368:	2306      	movs	r3, #6
 802536a:	e044      	b.n	80253f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 802536c:	2308      	movs	r3, #8
 802536e:	613b      	str	r3, [r7, #16]
 8025370:	230b      	movs	r3, #11
 8025372:	617b      	str	r3, [r7, #20]
			continue;
 8025374:	e022      	b.n	80253bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8025376:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802537a:	2b00      	cmp	r3, #0
 802537c:	da04      	bge.n	8025388 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 802537e:	7efb      	ldrb	r3, [r7, #27]
 8025380:	3b80      	subs	r3, #128	; 0x80
 8025382:	4a1f      	ldr	r2, [pc, #124]	; (8025400 <create_name+0x120>)
 8025384:	5cd3      	ldrb	r3, [r2, r3]
 8025386:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8025388:	7efb      	ldrb	r3, [r7, #27]
 802538a:	4619      	mov	r1, r3
 802538c:	481d      	ldr	r0, [pc, #116]	; (8025404 <create_name+0x124>)
 802538e:	f7fe ff52 	bl	8024236 <chk_chr>
 8025392:	4603      	mov	r3, r0
 8025394:	2b00      	cmp	r3, #0
 8025396:	d001      	beq.n	802539c <create_name+0xbc>
 8025398:	2306      	movs	r3, #6
 802539a:	e02c      	b.n	80253f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 802539c:	7efb      	ldrb	r3, [r7, #27]
 802539e:	2b60      	cmp	r3, #96	; 0x60
 80253a0:	d905      	bls.n	80253ae <create_name+0xce>
 80253a2:	7efb      	ldrb	r3, [r7, #27]
 80253a4:	2b7a      	cmp	r3, #122	; 0x7a
 80253a6:	d802      	bhi.n	80253ae <create_name+0xce>
 80253a8:	7efb      	ldrb	r3, [r7, #27]
 80253aa:	3b20      	subs	r3, #32
 80253ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80253ae:	693b      	ldr	r3, [r7, #16]
 80253b0:	1c5a      	adds	r2, r3, #1
 80253b2:	613a      	str	r2, [r7, #16]
 80253b4:	68ba      	ldr	r2, [r7, #8]
 80253b6:	4413      	add	r3, r2
 80253b8:	7efa      	ldrb	r2, [r7, #27]
 80253ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80253bc:	e7a6      	b.n	802530c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80253be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80253c0:	68fa      	ldr	r2, [r7, #12]
 80253c2:	69fb      	ldr	r3, [r7, #28]
 80253c4:	441a      	add	r2, r3
 80253c6:	683b      	ldr	r3, [r7, #0]
 80253c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80253ca:	693b      	ldr	r3, [r7, #16]
 80253cc:	2b00      	cmp	r3, #0
 80253ce:	d101      	bne.n	80253d4 <create_name+0xf4>
 80253d0:	2306      	movs	r3, #6
 80253d2:	e010      	b.n	80253f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80253d4:	68bb      	ldr	r3, [r7, #8]
 80253d6:	781b      	ldrb	r3, [r3, #0]
 80253d8:	2be5      	cmp	r3, #229	; 0xe5
 80253da:	d102      	bne.n	80253e2 <create_name+0x102>
 80253dc:	68bb      	ldr	r3, [r7, #8]
 80253de:	2205      	movs	r2, #5
 80253e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80253e2:	7efb      	ldrb	r3, [r7, #27]
 80253e4:	2b20      	cmp	r3, #32
 80253e6:	d801      	bhi.n	80253ec <create_name+0x10c>
 80253e8:	2204      	movs	r2, #4
 80253ea:	e000      	b.n	80253ee <create_name+0x10e>
 80253ec:	2200      	movs	r2, #0
 80253ee:	68bb      	ldr	r3, [r7, #8]
 80253f0:	330b      	adds	r3, #11
 80253f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80253f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80253f6:	4618      	mov	r0, r3
 80253f8:	3720      	adds	r7, #32
 80253fa:	46bd      	mov	sp, r7
 80253fc:	bd80      	pop	{r7, pc}
 80253fe:	bf00      	nop
 8025400:	0802cba4 	.word	0x0802cba4
 8025404:	0802c8ec 	.word	0x0802c8ec

08025408 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8025408:	b580      	push	{r7, lr}
 802540a:	b086      	sub	sp, #24
 802540c:	af00      	add	r7, sp, #0
 802540e:	6078      	str	r0, [r7, #4]
 8025410:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8025416:	693b      	ldr	r3, [r7, #16]
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 802541c:	e002      	b.n	8025424 <follow_path+0x1c>
 802541e:	683b      	ldr	r3, [r7, #0]
 8025420:	3301      	adds	r3, #1
 8025422:	603b      	str	r3, [r7, #0]
 8025424:	683b      	ldr	r3, [r7, #0]
 8025426:	781b      	ldrb	r3, [r3, #0]
 8025428:	2b2f      	cmp	r3, #47	; 0x2f
 802542a:	d0f8      	beq.n	802541e <follow_path+0x16>
 802542c:	683b      	ldr	r3, [r7, #0]
 802542e:	781b      	ldrb	r3, [r3, #0]
 8025430:	2b5c      	cmp	r3, #92	; 0x5c
 8025432:	d0f4      	beq.n	802541e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8025434:	693b      	ldr	r3, [r7, #16]
 8025436:	2200      	movs	r2, #0
 8025438:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 802543a:	683b      	ldr	r3, [r7, #0]
 802543c:	781b      	ldrb	r3, [r3, #0]
 802543e:	2b1f      	cmp	r3, #31
 8025440:	d80a      	bhi.n	8025458 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	2280      	movs	r2, #128	; 0x80
 8025446:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 802544a:	2100      	movs	r1, #0
 802544c:	6878      	ldr	r0, [r7, #4]
 802544e:	f7ff fc3d 	bl	8024ccc <dir_sdi>
 8025452:	4603      	mov	r3, r0
 8025454:	75fb      	strb	r3, [r7, #23]
 8025456:	e043      	b.n	80254e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8025458:	463b      	mov	r3, r7
 802545a:	4619      	mov	r1, r3
 802545c:	6878      	ldr	r0, [r7, #4]
 802545e:	f7ff ff3f 	bl	80252e0 <create_name>
 8025462:	4603      	mov	r3, r0
 8025464:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8025466:	7dfb      	ldrb	r3, [r7, #23]
 8025468:	2b00      	cmp	r3, #0
 802546a:	d134      	bne.n	80254d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 802546c:	6878      	ldr	r0, [r7, #4]
 802546e:	f7ff fe50 	bl	8025112 <dir_find>
 8025472:	4603      	mov	r3, r0
 8025474:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802547c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 802547e:	7dfb      	ldrb	r3, [r7, #23]
 8025480:	2b00      	cmp	r3, #0
 8025482:	d00a      	beq.n	802549a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8025484:	7dfb      	ldrb	r3, [r7, #23]
 8025486:	2b04      	cmp	r3, #4
 8025488:	d127      	bne.n	80254da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802548a:	7afb      	ldrb	r3, [r7, #11]
 802548c:	f003 0304 	and.w	r3, r3, #4
 8025490:	2b00      	cmp	r3, #0
 8025492:	d122      	bne.n	80254da <follow_path+0xd2>
 8025494:	2305      	movs	r3, #5
 8025496:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8025498:	e01f      	b.n	80254da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802549a:	7afb      	ldrb	r3, [r7, #11]
 802549c:	f003 0304 	and.w	r3, r3, #4
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d11c      	bne.n	80254de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80254a4:	693b      	ldr	r3, [r7, #16]
 80254a6:	799b      	ldrb	r3, [r3, #6]
 80254a8:	f003 0310 	and.w	r3, r3, #16
 80254ac:	2b00      	cmp	r3, #0
 80254ae:	d102      	bne.n	80254b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80254b0:	2305      	movs	r3, #5
 80254b2:	75fb      	strb	r3, [r7, #23]
 80254b4:	e014      	b.n	80254e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80254b6:	68fb      	ldr	r3, [r7, #12]
 80254b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	695b      	ldr	r3, [r3, #20]
 80254c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80254c4:	4413      	add	r3, r2
 80254c6:	4619      	mov	r1, r3
 80254c8:	68f8      	ldr	r0, [r7, #12]
 80254ca:	f7ff fd86 	bl	8024fda <ld_clust>
 80254ce:	4602      	mov	r2, r0
 80254d0:	693b      	ldr	r3, [r7, #16]
 80254d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80254d4:	e7c0      	b.n	8025458 <follow_path+0x50>
			if (res != FR_OK) break;
 80254d6:	bf00      	nop
 80254d8:	e002      	b.n	80254e0 <follow_path+0xd8>
				break;
 80254da:	bf00      	nop
 80254dc:	e000      	b.n	80254e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80254de:	bf00      	nop
			}
		}
	}

	return res;
 80254e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80254e2:	4618      	mov	r0, r3
 80254e4:	3718      	adds	r7, #24
 80254e6:	46bd      	mov	sp, r7
 80254e8:	bd80      	pop	{r7, pc}

080254ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80254ea:	b480      	push	{r7}
 80254ec:	b087      	sub	sp, #28
 80254ee:	af00      	add	r7, sp, #0
 80254f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80254f2:	f04f 33ff 	mov.w	r3, #4294967295
 80254f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	681b      	ldr	r3, [r3, #0]
 80254fc:	2b00      	cmp	r3, #0
 80254fe:	d031      	beq.n	8025564 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	681b      	ldr	r3, [r3, #0]
 8025504:	617b      	str	r3, [r7, #20]
 8025506:	e002      	b.n	802550e <get_ldnumber+0x24>
 8025508:	697b      	ldr	r3, [r7, #20]
 802550a:	3301      	adds	r3, #1
 802550c:	617b      	str	r3, [r7, #20]
 802550e:	697b      	ldr	r3, [r7, #20]
 8025510:	781b      	ldrb	r3, [r3, #0]
 8025512:	2b20      	cmp	r3, #32
 8025514:	d903      	bls.n	802551e <get_ldnumber+0x34>
 8025516:	697b      	ldr	r3, [r7, #20]
 8025518:	781b      	ldrb	r3, [r3, #0]
 802551a:	2b3a      	cmp	r3, #58	; 0x3a
 802551c:	d1f4      	bne.n	8025508 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 802551e:	697b      	ldr	r3, [r7, #20]
 8025520:	781b      	ldrb	r3, [r3, #0]
 8025522:	2b3a      	cmp	r3, #58	; 0x3a
 8025524:	d11c      	bne.n	8025560 <get_ldnumber+0x76>
			tp = *path;
 8025526:	687b      	ldr	r3, [r7, #4]
 8025528:	681b      	ldr	r3, [r3, #0]
 802552a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 802552c:	68fb      	ldr	r3, [r7, #12]
 802552e:	1c5a      	adds	r2, r3, #1
 8025530:	60fa      	str	r2, [r7, #12]
 8025532:	781b      	ldrb	r3, [r3, #0]
 8025534:	3b30      	subs	r3, #48	; 0x30
 8025536:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8025538:	68bb      	ldr	r3, [r7, #8]
 802553a:	2b09      	cmp	r3, #9
 802553c:	d80e      	bhi.n	802555c <get_ldnumber+0x72>
 802553e:	68fa      	ldr	r2, [r7, #12]
 8025540:	697b      	ldr	r3, [r7, #20]
 8025542:	429a      	cmp	r2, r3
 8025544:	d10a      	bne.n	802555c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8025546:	68bb      	ldr	r3, [r7, #8]
 8025548:	2b00      	cmp	r3, #0
 802554a:	d107      	bne.n	802555c <get_ldnumber+0x72>
					vol = (int)i;
 802554c:	68bb      	ldr	r3, [r7, #8]
 802554e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8025550:	697b      	ldr	r3, [r7, #20]
 8025552:	3301      	adds	r3, #1
 8025554:	617b      	str	r3, [r7, #20]
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	697a      	ldr	r2, [r7, #20]
 802555a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 802555c:	693b      	ldr	r3, [r7, #16]
 802555e:	e002      	b.n	8025566 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8025560:	2300      	movs	r3, #0
 8025562:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8025564:	693b      	ldr	r3, [r7, #16]
}
 8025566:	4618      	mov	r0, r3
 8025568:	371c      	adds	r7, #28
 802556a:	46bd      	mov	sp, r7
 802556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025570:	4770      	bx	lr
	...

08025574 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8025574:	b580      	push	{r7, lr}
 8025576:	b082      	sub	sp, #8
 8025578:	af00      	add	r7, sp, #0
 802557a:	6078      	str	r0, [r7, #4]
 802557c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	2200      	movs	r2, #0
 8025582:	70da      	strb	r2, [r3, #3]
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	f04f 32ff 	mov.w	r2, #4294967295
 802558a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 802558c:	6839      	ldr	r1, [r7, #0]
 802558e:	6878      	ldr	r0, [r7, #4]
 8025590:	f7ff f81c 	bl	80245cc <move_window>
 8025594:	4603      	mov	r3, r0
 8025596:	2b00      	cmp	r3, #0
 8025598:	d001      	beq.n	802559e <check_fs+0x2a>
 802559a:	2304      	movs	r3, #4
 802559c:	e038      	b.n	8025610 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	3330      	adds	r3, #48	; 0x30
 80255a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80255a6:	4618      	mov	r0, r3
 80255a8:	f7fe fd60 	bl	802406c <ld_word>
 80255ac:	4603      	mov	r3, r0
 80255ae:	461a      	mov	r2, r3
 80255b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80255b4:	429a      	cmp	r2, r3
 80255b6:	d001      	beq.n	80255bc <check_fs+0x48>
 80255b8:	2303      	movs	r3, #3
 80255ba:	e029      	b.n	8025610 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80255c2:	2be9      	cmp	r3, #233	; 0xe9
 80255c4:	d009      	beq.n	80255da <check_fs+0x66>
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80255cc:	2beb      	cmp	r3, #235	; 0xeb
 80255ce:	d11e      	bne.n	802560e <check_fs+0x9a>
 80255d0:	687b      	ldr	r3, [r7, #4]
 80255d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80255d6:	2b90      	cmp	r3, #144	; 0x90
 80255d8:	d119      	bne.n	802560e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80255da:	687b      	ldr	r3, [r7, #4]
 80255dc:	3330      	adds	r3, #48	; 0x30
 80255de:	3336      	adds	r3, #54	; 0x36
 80255e0:	4618      	mov	r0, r3
 80255e2:	f7fe fd5b 	bl	802409c <ld_dword>
 80255e6:	4603      	mov	r3, r0
 80255e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80255ec:	4a0a      	ldr	r2, [pc, #40]	; (8025618 <check_fs+0xa4>)
 80255ee:	4293      	cmp	r3, r2
 80255f0:	d101      	bne.n	80255f6 <check_fs+0x82>
 80255f2:	2300      	movs	r3, #0
 80255f4:	e00c      	b.n	8025610 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80255f6:	687b      	ldr	r3, [r7, #4]
 80255f8:	3330      	adds	r3, #48	; 0x30
 80255fa:	3352      	adds	r3, #82	; 0x52
 80255fc:	4618      	mov	r0, r3
 80255fe:	f7fe fd4d 	bl	802409c <ld_dword>
 8025602:	4603      	mov	r3, r0
 8025604:	4a05      	ldr	r2, [pc, #20]	; (802561c <check_fs+0xa8>)
 8025606:	4293      	cmp	r3, r2
 8025608:	d101      	bne.n	802560e <check_fs+0x9a>
 802560a:	2300      	movs	r3, #0
 802560c:	e000      	b.n	8025610 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802560e:	2302      	movs	r3, #2
}
 8025610:	4618      	mov	r0, r3
 8025612:	3708      	adds	r7, #8
 8025614:	46bd      	mov	sp, r7
 8025616:	bd80      	pop	{r7, pc}
 8025618:	00544146 	.word	0x00544146
 802561c:	33544146 	.word	0x33544146

08025620 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8025620:	b580      	push	{r7, lr}
 8025622:	b096      	sub	sp, #88	; 0x58
 8025624:	af00      	add	r7, sp, #0
 8025626:	60f8      	str	r0, [r7, #12]
 8025628:	60b9      	str	r1, [r7, #8]
 802562a:	4613      	mov	r3, r2
 802562c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802562e:	68bb      	ldr	r3, [r7, #8]
 8025630:	2200      	movs	r2, #0
 8025632:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8025634:	68f8      	ldr	r0, [r7, #12]
 8025636:	f7ff ff58 	bl	80254ea <get_ldnumber>
 802563a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 802563c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802563e:	2b00      	cmp	r3, #0
 8025640:	da01      	bge.n	8025646 <find_volume+0x26>
 8025642:	230b      	movs	r3, #11
 8025644:	e22d      	b.n	8025aa2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8025646:	4aa1      	ldr	r2, [pc, #644]	; (80258cc <find_volume+0x2ac>)
 8025648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802564e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8025650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025652:	2b00      	cmp	r3, #0
 8025654:	d101      	bne.n	802565a <find_volume+0x3a>
 8025656:	230c      	movs	r3, #12
 8025658:	e223      	b.n	8025aa2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802565a:	68bb      	ldr	r3, [r7, #8]
 802565c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802565e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8025660:	79fb      	ldrb	r3, [r7, #7]
 8025662:	f023 0301 	bic.w	r3, r3, #1
 8025666:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8025668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802566a:	781b      	ldrb	r3, [r3, #0]
 802566c:	2b00      	cmp	r3, #0
 802566e:	d01a      	beq.n	80256a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8025670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025672:	785b      	ldrb	r3, [r3, #1]
 8025674:	4618      	mov	r0, r3
 8025676:	f7fe fc53 	bl	8023f20 <disk_status>
 802567a:	4603      	mov	r3, r0
 802567c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8025680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025684:	f003 0301 	and.w	r3, r3, #1
 8025688:	2b00      	cmp	r3, #0
 802568a:	d10c      	bne.n	80256a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802568c:	79fb      	ldrb	r3, [r7, #7]
 802568e:	2b00      	cmp	r3, #0
 8025690:	d007      	beq.n	80256a2 <find_volume+0x82>
 8025692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025696:	f003 0304 	and.w	r3, r3, #4
 802569a:	2b00      	cmp	r3, #0
 802569c:	d001      	beq.n	80256a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 802569e:	230a      	movs	r3, #10
 80256a0:	e1ff      	b.n	8025aa2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80256a2:	2300      	movs	r3, #0
 80256a4:	e1fd      	b.n	8025aa2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80256a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80256a8:	2200      	movs	r2, #0
 80256aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80256ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80256ae:	b2da      	uxtb	r2, r3
 80256b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80256b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80256b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80256b6:	785b      	ldrb	r3, [r3, #1]
 80256b8:	4618      	mov	r0, r3
 80256ba:	f7fe fc4b 	bl	8023f54 <disk_initialize>
 80256be:	4603      	mov	r3, r0
 80256c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80256c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80256c8:	f003 0301 	and.w	r3, r3, #1
 80256cc:	2b00      	cmp	r3, #0
 80256ce:	d001      	beq.n	80256d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80256d0:	2303      	movs	r3, #3
 80256d2:	e1e6      	b.n	8025aa2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80256d4:	79fb      	ldrb	r3, [r7, #7]
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	d007      	beq.n	80256ea <find_volume+0xca>
 80256da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80256de:	f003 0304 	and.w	r3, r3, #4
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d001      	beq.n	80256ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80256e6:	230a      	movs	r3, #10
 80256e8:	e1db      	b.n	8025aa2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80256ea:	2300      	movs	r3, #0
 80256ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80256ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80256f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80256f2:	f7ff ff3f 	bl	8025574 <check_fs>
 80256f6:	4603      	mov	r3, r0
 80256f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80256fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025700:	2b02      	cmp	r3, #2
 8025702:	d149      	bne.n	8025798 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025704:	2300      	movs	r3, #0
 8025706:	643b      	str	r3, [r7, #64]	; 0x40
 8025708:	e01e      	b.n	8025748 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802570c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8025710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025712:	011b      	lsls	r3, r3, #4
 8025714:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8025718:	4413      	add	r3, r2
 802571a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802571e:	3304      	adds	r3, #4
 8025720:	781b      	ldrb	r3, [r3, #0]
 8025722:	2b00      	cmp	r3, #0
 8025724:	d006      	beq.n	8025734 <find_volume+0x114>
 8025726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025728:	3308      	adds	r3, #8
 802572a:	4618      	mov	r0, r3
 802572c:	f7fe fcb6 	bl	802409c <ld_dword>
 8025730:	4602      	mov	r2, r0
 8025732:	e000      	b.n	8025736 <find_volume+0x116>
 8025734:	2200      	movs	r2, #0
 8025736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025738:	009b      	lsls	r3, r3, #2
 802573a:	3358      	adds	r3, #88	; 0x58
 802573c:	443b      	add	r3, r7
 802573e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025744:	3301      	adds	r3, #1
 8025746:	643b      	str	r3, [r7, #64]	; 0x40
 8025748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802574a:	2b03      	cmp	r3, #3
 802574c:	d9dd      	bls.n	802570a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802574e:	2300      	movs	r3, #0
 8025750:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8025752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025754:	2b00      	cmp	r3, #0
 8025756:	d002      	beq.n	802575e <find_volume+0x13e>
 8025758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802575a:	3b01      	subs	r3, #1
 802575c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025760:	009b      	lsls	r3, r3, #2
 8025762:	3358      	adds	r3, #88	; 0x58
 8025764:	443b      	add	r3, r7
 8025766:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802576a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802576c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802576e:	2b00      	cmp	r3, #0
 8025770:	d005      	beq.n	802577e <find_volume+0x15e>
 8025772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025776:	f7ff fefd 	bl	8025574 <check_fs>
 802577a:	4603      	mov	r3, r0
 802577c:	e000      	b.n	8025780 <find_volume+0x160>
 802577e:	2303      	movs	r3, #3
 8025780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8025784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025788:	2b01      	cmp	r3, #1
 802578a:	d905      	bls.n	8025798 <find_volume+0x178>
 802578c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802578e:	3301      	adds	r3, #1
 8025790:	643b      	str	r3, [r7, #64]	; 0x40
 8025792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025794:	2b03      	cmp	r3, #3
 8025796:	d9e2      	bls.n	802575e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8025798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802579c:	2b04      	cmp	r3, #4
 802579e:	d101      	bne.n	80257a4 <find_volume+0x184>
 80257a0:	2301      	movs	r3, #1
 80257a2:	e17e      	b.n	8025aa2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80257a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80257a8:	2b01      	cmp	r3, #1
 80257aa:	d901      	bls.n	80257b0 <find_volume+0x190>
 80257ac:	230d      	movs	r3, #13
 80257ae:	e178      	b.n	8025aa2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80257b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257b2:	3330      	adds	r3, #48	; 0x30
 80257b4:	330b      	adds	r3, #11
 80257b6:	4618      	mov	r0, r3
 80257b8:	f7fe fc58 	bl	802406c <ld_word>
 80257bc:	4603      	mov	r3, r0
 80257be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80257c2:	d001      	beq.n	80257c8 <find_volume+0x1a8>
 80257c4:	230d      	movs	r3, #13
 80257c6:	e16c      	b.n	8025aa2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80257c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257ca:	3330      	adds	r3, #48	; 0x30
 80257cc:	3316      	adds	r3, #22
 80257ce:	4618      	mov	r0, r3
 80257d0:	f7fe fc4c 	bl	802406c <ld_word>
 80257d4:	4603      	mov	r3, r0
 80257d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80257d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80257da:	2b00      	cmp	r3, #0
 80257dc:	d106      	bne.n	80257ec <find_volume+0x1cc>
 80257de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257e0:	3330      	adds	r3, #48	; 0x30
 80257e2:	3324      	adds	r3, #36	; 0x24
 80257e4:	4618      	mov	r0, r3
 80257e6:	f7fe fc59 	bl	802409c <ld_dword>
 80257ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80257ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80257f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80257f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80257f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80257fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80257fe:	789b      	ldrb	r3, [r3, #2]
 8025800:	2b01      	cmp	r3, #1
 8025802:	d005      	beq.n	8025810 <find_volume+0x1f0>
 8025804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025806:	789b      	ldrb	r3, [r3, #2]
 8025808:	2b02      	cmp	r3, #2
 802580a:	d001      	beq.n	8025810 <find_volume+0x1f0>
 802580c:	230d      	movs	r3, #13
 802580e:	e148      	b.n	8025aa2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8025810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025812:	789b      	ldrb	r3, [r3, #2]
 8025814:	461a      	mov	r2, r3
 8025816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025818:	fb02 f303 	mul.w	r3, r2, r3
 802581c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025824:	b29a      	uxth	r2, r3
 8025826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025828:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802582c:	895b      	ldrh	r3, [r3, #10]
 802582e:	2b00      	cmp	r3, #0
 8025830:	d008      	beq.n	8025844 <find_volume+0x224>
 8025832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025834:	895b      	ldrh	r3, [r3, #10]
 8025836:	461a      	mov	r2, r3
 8025838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802583a:	895b      	ldrh	r3, [r3, #10]
 802583c:	3b01      	subs	r3, #1
 802583e:	4013      	ands	r3, r2
 8025840:	2b00      	cmp	r3, #0
 8025842:	d001      	beq.n	8025848 <find_volume+0x228>
 8025844:	230d      	movs	r3, #13
 8025846:	e12c      	b.n	8025aa2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8025848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802584a:	3330      	adds	r3, #48	; 0x30
 802584c:	3311      	adds	r3, #17
 802584e:	4618      	mov	r0, r3
 8025850:	f7fe fc0c 	bl	802406c <ld_word>
 8025854:	4603      	mov	r3, r0
 8025856:	461a      	mov	r2, r3
 8025858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802585a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802585e:	891b      	ldrh	r3, [r3, #8]
 8025860:	f003 030f 	and.w	r3, r3, #15
 8025864:	b29b      	uxth	r3, r3
 8025866:	2b00      	cmp	r3, #0
 8025868:	d001      	beq.n	802586e <find_volume+0x24e>
 802586a:	230d      	movs	r3, #13
 802586c:	e119      	b.n	8025aa2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025870:	3330      	adds	r3, #48	; 0x30
 8025872:	3313      	adds	r3, #19
 8025874:	4618      	mov	r0, r3
 8025876:	f7fe fbf9 	bl	802406c <ld_word>
 802587a:	4603      	mov	r3, r0
 802587c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025880:	2b00      	cmp	r3, #0
 8025882:	d106      	bne.n	8025892 <find_volume+0x272>
 8025884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025886:	3330      	adds	r3, #48	; 0x30
 8025888:	3320      	adds	r3, #32
 802588a:	4618      	mov	r0, r3
 802588c:	f7fe fc06 	bl	802409c <ld_dword>
 8025890:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8025892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025894:	3330      	adds	r3, #48	; 0x30
 8025896:	330e      	adds	r3, #14
 8025898:	4618      	mov	r0, r3
 802589a:	f7fe fbe7 	bl	802406c <ld_word>
 802589e:	4603      	mov	r3, r0
 80258a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80258a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	d101      	bne.n	80258ac <find_volume+0x28c>
 80258a8:	230d      	movs	r3, #13
 80258aa:	e0fa      	b.n	8025aa2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80258ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80258ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80258b0:	4413      	add	r3, r2
 80258b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80258b4:	8912      	ldrh	r2, [r2, #8]
 80258b6:	0912      	lsrs	r2, r2, #4
 80258b8:	b292      	uxth	r2, r2
 80258ba:	4413      	add	r3, r2
 80258bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80258be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80258c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258c2:	429a      	cmp	r2, r3
 80258c4:	d204      	bcs.n	80258d0 <find_volume+0x2b0>
 80258c6:	230d      	movs	r3, #13
 80258c8:	e0eb      	b.n	8025aa2 <find_volume+0x482>
 80258ca:	bf00      	nop
 80258cc:	2000263c 	.word	0x2000263c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80258d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80258d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258d4:	1ad3      	subs	r3, r2, r3
 80258d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80258d8:	8952      	ldrh	r2, [r2, #10]
 80258da:	fbb3 f3f2 	udiv	r3, r3, r2
 80258de:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80258e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258e2:	2b00      	cmp	r3, #0
 80258e4:	d101      	bne.n	80258ea <find_volume+0x2ca>
 80258e6:	230d      	movs	r3, #13
 80258e8:	e0db      	b.n	8025aa2 <find_volume+0x482>
		fmt = FS_FAT32;
 80258ea:	2303      	movs	r3, #3
 80258ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80258f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80258f6:	4293      	cmp	r3, r2
 80258f8:	d802      	bhi.n	8025900 <find_volume+0x2e0>
 80258fa:	2302      	movs	r3, #2
 80258fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8025900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025902:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025906:	4293      	cmp	r3, r2
 8025908:	d802      	bhi.n	8025910 <find_volume+0x2f0>
 802590a:	2301      	movs	r3, #1
 802590c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8025910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025912:	1c9a      	adds	r2, r3, #2
 8025914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025916:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8025918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802591a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802591c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802591e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8025920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025922:	441a      	add	r2, r3
 8025924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025926:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8025928:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802592c:	441a      	add	r2, r3
 802592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025930:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8025932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025936:	2b03      	cmp	r3, #3
 8025938:	d11e      	bne.n	8025978 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 802593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802593c:	3330      	adds	r3, #48	; 0x30
 802593e:	332a      	adds	r3, #42	; 0x2a
 8025940:	4618      	mov	r0, r3
 8025942:	f7fe fb93 	bl	802406c <ld_word>
 8025946:	4603      	mov	r3, r0
 8025948:	2b00      	cmp	r3, #0
 802594a:	d001      	beq.n	8025950 <find_volume+0x330>
 802594c:	230d      	movs	r3, #13
 802594e:	e0a8      	b.n	8025aa2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8025950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025952:	891b      	ldrh	r3, [r3, #8]
 8025954:	2b00      	cmp	r3, #0
 8025956:	d001      	beq.n	802595c <find_volume+0x33c>
 8025958:	230d      	movs	r3, #13
 802595a:	e0a2      	b.n	8025aa2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802595e:	3330      	adds	r3, #48	; 0x30
 8025960:	332c      	adds	r3, #44	; 0x2c
 8025962:	4618      	mov	r0, r3
 8025964:	f7fe fb9a 	bl	802409c <ld_dword>
 8025968:	4602      	mov	r2, r0
 802596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802596c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025970:	695b      	ldr	r3, [r3, #20]
 8025972:	009b      	lsls	r3, r3, #2
 8025974:	647b      	str	r3, [r7, #68]	; 0x44
 8025976:	e01f      	b.n	80259b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8025978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802597a:	891b      	ldrh	r3, [r3, #8]
 802597c:	2b00      	cmp	r3, #0
 802597e:	d101      	bne.n	8025984 <find_volume+0x364>
 8025980:	230d      	movs	r3, #13
 8025982:	e08e      	b.n	8025aa2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8025984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025986:	6a1a      	ldr	r2, [r3, #32]
 8025988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802598a:	441a      	add	r2, r3
 802598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802598e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8025990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025994:	2b02      	cmp	r3, #2
 8025996:	d103      	bne.n	80259a0 <find_volume+0x380>
 8025998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802599a:	695b      	ldr	r3, [r3, #20]
 802599c:	005b      	lsls	r3, r3, #1
 802599e:	e00a      	b.n	80259b6 <find_volume+0x396>
 80259a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259a2:	695a      	ldr	r2, [r3, #20]
 80259a4:	4613      	mov	r3, r2
 80259a6:	005b      	lsls	r3, r3, #1
 80259a8:	4413      	add	r3, r2
 80259aa:	085a      	lsrs	r2, r3, #1
 80259ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ae:	695b      	ldr	r3, [r3, #20]
 80259b0:	f003 0301 	and.w	r3, r3, #1
 80259b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80259b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80259b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ba:	699a      	ldr	r2, [r3, #24]
 80259bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80259be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80259c2:	0a5b      	lsrs	r3, r3, #9
 80259c4:	429a      	cmp	r2, r3
 80259c6:	d201      	bcs.n	80259cc <find_volume+0x3ac>
 80259c8:	230d      	movs	r3, #13
 80259ca:	e06a      	b.n	8025aa2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80259cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ce:	f04f 32ff 	mov.w	r2, #4294967295
 80259d2:	611a      	str	r2, [r3, #16]
 80259d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259d6:	691a      	ldr	r2, [r3, #16]
 80259d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80259dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259de:	2280      	movs	r2, #128	; 0x80
 80259e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80259e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80259e6:	2b03      	cmp	r3, #3
 80259e8:	d149      	bne.n	8025a7e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80259ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ec:	3330      	adds	r3, #48	; 0x30
 80259ee:	3330      	adds	r3, #48	; 0x30
 80259f0:	4618      	mov	r0, r3
 80259f2:	f7fe fb3b 	bl	802406c <ld_word>
 80259f6:	4603      	mov	r3, r0
 80259f8:	2b01      	cmp	r3, #1
 80259fa:	d140      	bne.n	8025a7e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80259fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80259fe:	3301      	adds	r3, #1
 8025a00:	4619      	mov	r1, r3
 8025a02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025a04:	f7fe fde2 	bl	80245cc <move_window>
 8025a08:	4603      	mov	r3, r0
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	d137      	bne.n	8025a7e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8025a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a10:	2200      	movs	r2, #0
 8025a12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8025a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a16:	3330      	adds	r3, #48	; 0x30
 8025a18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8025a1c:	4618      	mov	r0, r3
 8025a1e:	f7fe fb25 	bl	802406c <ld_word>
 8025a22:	4603      	mov	r3, r0
 8025a24:	461a      	mov	r2, r3
 8025a26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8025a2a:	429a      	cmp	r2, r3
 8025a2c:	d127      	bne.n	8025a7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8025a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a30:	3330      	adds	r3, #48	; 0x30
 8025a32:	4618      	mov	r0, r3
 8025a34:	f7fe fb32 	bl	802409c <ld_dword>
 8025a38:	4603      	mov	r3, r0
 8025a3a:	4a1c      	ldr	r2, [pc, #112]	; (8025aac <find_volume+0x48c>)
 8025a3c:	4293      	cmp	r3, r2
 8025a3e:	d11e      	bne.n	8025a7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8025a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a42:	3330      	adds	r3, #48	; 0x30
 8025a44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8025a48:	4618      	mov	r0, r3
 8025a4a:	f7fe fb27 	bl	802409c <ld_dword>
 8025a4e:	4603      	mov	r3, r0
 8025a50:	4a17      	ldr	r2, [pc, #92]	; (8025ab0 <find_volume+0x490>)
 8025a52:	4293      	cmp	r3, r2
 8025a54:	d113      	bne.n	8025a7e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8025a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a58:	3330      	adds	r3, #48	; 0x30
 8025a5a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8025a5e:	4618      	mov	r0, r3
 8025a60:	f7fe fb1c 	bl	802409c <ld_dword>
 8025a64:	4602      	mov	r2, r0
 8025a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a68:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8025a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a6c:	3330      	adds	r3, #48	; 0x30
 8025a6e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8025a72:	4618      	mov	r0, r3
 8025a74:	f7fe fb12 	bl	802409c <ld_dword>
 8025a78:	4602      	mov	r2, r0
 8025a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a7c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8025a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a80:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8025a84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8025a86:	4b0b      	ldr	r3, [pc, #44]	; (8025ab4 <find_volume+0x494>)
 8025a88:	881b      	ldrh	r3, [r3, #0]
 8025a8a:	3301      	adds	r3, #1
 8025a8c:	b29a      	uxth	r2, r3
 8025a8e:	4b09      	ldr	r3, [pc, #36]	; (8025ab4 <find_volume+0x494>)
 8025a90:	801a      	strh	r2, [r3, #0]
 8025a92:	4b08      	ldr	r3, [pc, #32]	; (8025ab4 <find_volume+0x494>)
 8025a94:	881a      	ldrh	r2, [r3, #0]
 8025a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a98:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8025a9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025a9c:	f7fe fd2e 	bl	80244fc <clear_lock>
#endif
	return FR_OK;
 8025aa0:	2300      	movs	r3, #0
}
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	3758      	adds	r7, #88	; 0x58
 8025aa6:	46bd      	mov	sp, r7
 8025aa8:	bd80      	pop	{r7, pc}
 8025aaa:	bf00      	nop
 8025aac:	41615252 	.word	0x41615252
 8025ab0:	61417272 	.word	0x61417272
 8025ab4:	20003e9e 	.word	0x20003e9e

08025ab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8025ab8:	b580      	push	{r7, lr}
 8025aba:	b084      	sub	sp, #16
 8025abc:	af00      	add	r7, sp, #0
 8025abe:	6078      	str	r0, [r7, #4]
 8025ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8025ac2:	2309      	movs	r3, #9
 8025ac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d01c      	beq.n	8025b06 <validate+0x4e>
 8025acc:	687b      	ldr	r3, [r7, #4]
 8025ace:	681b      	ldr	r3, [r3, #0]
 8025ad0:	2b00      	cmp	r3, #0
 8025ad2:	d018      	beq.n	8025b06 <validate+0x4e>
 8025ad4:	687b      	ldr	r3, [r7, #4]
 8025ad6:	681b      	ldr	r3, [r3, #0]
 8025ad8:	781b      	ldrb	r3, [r3, #0]
 8025ada:	2b00      	cmp	r3, #0
 8025adc:	d013      	beq.n	8025b06 <validate+0x4e>
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	889a      	ldrh	r2, [r3, #4]
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	88db      	ldrh	r3, [r3, #6]
 8025ae8:	429a      	cmp	r2, r3
 8025aea:	d10c      	bne.n	8025b06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8025aec:	687b      	ldr	r3, [r7, #4]
 8025aee:	681b      	ldr	r3, [r3, #0]
 8025af0:	785b      	ldrb	r3, [r3, #1]
 8025af2:	4618      	mov	r0, r3
 8025af4:	f7fe fa14 	bl	8023f20 <disk_status>
 8025af8:	4603      	mov	r3, r0
 8025afa:	f003 0301 	and.w	r3, r3, #1
 8025afe:	2b00      	cmp	r3, #0
 8025b00:	d101      	bne.n	8025b06 <validate+0x4e>
			res = FR_OK;
 8025b02:	2300      	movs	r3, #0
 8025b04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8025b06:	7bfb      	ldrb	r3, [r7, #15]
 8025b08:	2b00      	cmp	r3, #0
 8025b0a:	d102      	bne.n	8025b12 <validate+0x5a>
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	681b      	ldr	r3, [r3, #0]
 8025b10:	e000      	b.n	8025b14 <validate+0x5c>
 8025b12:	2300      	movs	r3, #0
 8025b14:	683a      	ldr	r2, [r7, #0]
 8025b16:	6013      	str	r3, [r2, #0]
	return res;
 8025b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8025b1a:	4618      	mov	r0, r3
 8025b1c:	3710      	adds	r7, #16
 8025b1e:	46bd      	mov	sp, r7
 8025b20:	bd80      	pop	{r7, pc}
	...

08025b24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8025b24:	b580      	push	{r7, lr}
 8025b26:	b088      	sub	sp, #32
 8025b28:	af00      	add	r7, sp, #0
 8025b2a:	60f8      	str	r0, [r7, #12]
 8025b2c:	60b9      	str	r1, [r7, #8]
 8025b2e:	4613      	mov	r3, r2
 8025b30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8025b32:	68bb      	ldr	r3, [r7, #8]
 8025b34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8025b36:	f107 0310 	add.w	r3, r7, #16
 8025b3a:	4618      	mov	r0, r3
 8025b3c:	f7ff fcd5 	bl	80254ea <get_ldnumber>
 8025b40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8025b42:	69fb      	ldr	r3, [r7, #28]
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	da01      	bge.n	8025b4c <f_mount+0x28>
 8025b48:	230b      	movs	r3, #11
 8025b4a:	e02b      	b.n	8025ba4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8025b4c:	4a17      	ldr	r2, [pc, #92]	; (8025bac <f_mount+0x88>)
 8025b4e:	69fb      	ldr	r3, [r7, #28]
 8025b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025b54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8025b56:	69bb      	ldr	r3, [r7, #24]
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	d005      	beq.n	8025b68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8025b5c:	69b8      	ldr	r0, [r7, #24]
 8025b5e:	f7fe fccd 	bl	80244fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8025b62:	69bb      	ldr	r3, [r7, #24]
 8025b64:	2200      	movs	r2, #0
 8025b66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8025b68:	68fb      	ldr	r3, [r7, #12]
 8025b6a:	2b00      	cmp	r3, #0
 8025b6c:	d002      	beq.n	8025b74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8025b6e:	68fb      	ldr	r3, [r7, #12]
 8025b70:	2200      	movs	r2, #0
 8025b72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8025b74:	68fa      	ldr	r2, [r7, #12]
 8025b76:	490d      	ldr	r1, [pc, #52]	; (8025bac <f_mount+0x88>)
 8025b78:	69fb      	ldr	r3, [r7, #28]
 8025b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8025b7e:	68fb      	ldr	r3, [r7, #12]
 8025b80:	2b00      	cmp	r3, #0
 8025b82:	d002      	beq.n	8025b8a <f_mount+0x66>
 8025b84:	79fb      	ldrb	r3, [r7, #7]
 8025b86:	2b01      	cmp	r3, #1
 8025b88:	d001      	beq.n	8025b8e <f_mount+0x6a>
 8025b8a:	2300      	movs	r3, #0
 8025b8c:	e00a      	b.n	8025ba4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8025b8e:	f107 010c 	add.w	r1, r7, #12
 8025b92:	f107 0308 	add.w	r3, r7, #8
 8025b96:	2200      	movs	r2, #0
 8025b98:	4618      	mov	r0, r3
 8025b9a:	f7ff fd41 	bl	8025620 <find_volume>
 8025b9e:	4603      	mov	r3, r0
 8025ba0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8025ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	3720      	adds	r7, #32
 8025ba8:	46bd      	mov	sp, r7
 8025baa:	bd80      	pop	{r7, pc}
 8025bac:	2000263c 	.word	0x2000263c

08025bb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8025bb0:	b580      	push	{r7, lr}
 8025bb2:	b098      	sub	sp, #96	; 0x60
 8025bb4:	af00      	add	r7, sp, #0
 8025bb6:	60f8      	str	r0, [r7, #12]
 8025bb8:	60b9      	str	r1, [r7, #8]
 8025bba:	4613      	mov	r3, r2
 8025bbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8025bbe:	68fb      	ldr	r3, [r7, #12]
 8025bc0:	2b00      	cmp	r3, #0
 8025bc2:	d101      	bne.n	8025bc8 <f_open+0x18>
 8025bc4:	2309      	movs	r3, #9
 8025bc6:	e1ad      	b.n	8025f24 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8025bc8:	79fb      	ldrb	r3, [r7, #7]
 8025bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025bce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8025bd0:	79fa      	ldrb	r2, [r7, #7]
 8025bd2:	f107 0110 	add.w	r1, r7, #16
 8025bd6:	f107 0308 	add.w	r3, r7, #8
 8025bda:	4618      	mov	r0, r3
 8025bdc:	f7ff fd20 	bl	8025620 <find_volume>
 8025be0:	4603      	mov	r3, r0
 8025be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8025be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025bea:	2b00      	cmp	r3, #0
 8025bec:	f040 8191 	bne.w	8025f12 <f_open+0x362>
		dj.obj.fs = fs;
 8025bf0:	693b      	ldr	r3, [r7, #16]
 8025bf2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8025bf4:	68ba      	ldr	r2, [r7, #8]
 8025bf6:	f107 0314 	add.w	r3, r7, #20
 8025bfa:	4611      	mov	r1, r2
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	f7ff fc03 	bl	8025408 <follow_path>
 8025c02:	4603      	mov	r3, r0
 8025c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8025c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	d11a      	bne.n	8025c46 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8025c10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025c14:	b25b      	sxtb	r3, r3
 8025c16:	2b00      	cmp	r3, #0
 8025c18:	da03      	bge.n	8025c22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8025c1a:	2306      	movs	r3, #6
 8025c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025c20:	e011      	b.n	8025c46 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025c22:	79fb      	ldrb	r3, [r7, #7]
 8025c24:	f023 0301 	bic.w	r3, r3, #1
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	bf14      	ite	ne
 8025c2c:	2301      	movne	r3, #1
 8025c2e:	2300      	moveq	r3, #0
 8025c30:	b2db      	uxtb	r3, r3
 8025c32:	461a      	mov	r2, r3
 8025c34:	f107 0314 	add.w	r3, r7, #20
 8025c38:	4611      	mov	r1, r2
 8025c3a:	4618      	mov	r0, r3
 8025c3c:	f7fe fb16 	bl	802426c <chk_lock>
 8025c40:	4603      	mov	r3, r0
 8025c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8025c46:	79fb      	ldrb	r3, [r7, #7]
 8025c48:	f003 031c 	and.w	r3, r3, #28
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	d07f      	beq.n	8025d50 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8025c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	d017      	beq.n	8025c88 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8025c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025c5c:	2b04      	cmp	r3, #4
 8025c5e:	d10e      	bne.n	8025c7e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8025c60:	f7fe fb60 	bl	8024324 <enq_lock>
 8025c64:	4603      	mov	r3, r0
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d006      	beq.n	8025c78 <f_open+0xc8>
 8025c6a:	f107 0314 	add.w	r3, r7, #20
 8025c6e:	4618      	mov	r0, r3
 8025c70:	f7ff faa4 	bl	80251bc <dir_register>
 8025c74:	4603      	mov	r3, r0
 8025c76:	e000      	b.n	8025c7a <f_open+0xca>
 8025c78:	2312      	movs	r3, #18
 8025c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8025c7e:	79fb      	ldrb	r3, [r7, #7]
 8025c80:	f043 0308 	orr.w	r3, r3, #8
 8025c84:	71fb      	strb	r3, [r7, #7]
 8025c86:	e010      	b.n	8025caa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8025c88:	7ebb      	ldrb	r3, [r7, #26]
 8025c8a:	f003 0311 	and.w	r3, r3, #17
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	d003      	beq.n	8025c9a <f_open+0xea>
					res = FR_DENIED;
 8025c92:	2307      	movs	r3, #7
 8025c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025c98:	e007      	b.n	8025caa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8025c9a:	79fb      	ldrb	r3, [r7, #7]
 8025c9c:	f003 0304 	and.w	r3, r3, #4
 8025ca0:	2b00      	cmp	r3, #0
 8025ca2:	d002      	beq.n	8025caa <f_open+0xfa>
 8025ca4:	2308      	movs	r3, #8
 8025ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8025caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d168      	bne.n	8025d84 <f_open+0x1d4>
 8025cb2:	79fb      	ldrb	r3, [r7, #7]
 8025cb4:	f003 0308 	and.w	r3, r3, #8
 8025cb8:	2b00      	cmp	r3, #0
 8025cba:	d063      	beq.n	8025d84 <f_open+0x1d4>
				dw = GET_FATTIME();
 8025cbc:	f7fe f9ce 	bl	802405c <get_fattime>
 8025cc0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8025cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cc4:	330e      	adds	r3, #14
 8025cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025cc8:	4618      	mov	r0, r3
 8025cca:	f7fe fa25 	bl	8024118 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8025cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cd0:	3316      	adds	r3, #22
 8025cd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025cd4:	4618      	mov	r0, r3
 8025cd6:	f7fe fa1f 	bl	8024118 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8025cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cdc:	330b      	adds	r3, #11
 8025cde:	2220      	movs	r2, #32
 8025ce0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8025ce2:	693b      	ldr	r3, [r7, #16]
 8025ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025ce6:	4611      	mov	r1, r2
 8025ce8:	4618      	mov	r0, r3
 8025cea:	f7ff f976 	bl	8024fda <ld_clust>
 8025cee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8025cf0:	693b      	ldr	r3, [r7, #16]
 8025cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025cf4:	2200      	movs	r2, #0
 8025cf6:	4618      	mov	r0, r3
 8025cf8:	f7ff f98e 	bl	8025018 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8025cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cfe:	331c      	adds	r3, #28
 8025d00:	2100      	movs	r1, #0
 8025d02:	4618      	mov	r0, r3
 8025d04:	f7fe fa08 	bl	8024118 <st_dword>
					fs->wflag = 1;
 8025d08:	693b      	ldr	r3, [r7, #16]
 8025d0a:	2201      	movs	r2, #1
 8025d0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8025d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	d037      	beq.n	8025d84 <f_open+0x1d4>
						dw = fs->winsect;
 8025d14:	693b      	ldr	r3, [r7, #16]
 8025d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025d18:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8025d1a:	f107 0314 	add.w	r3, r7, #20
 8025d1e:	2200      	movs	r2, #0
 8025d20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8025d22:	4618      	mov	r0, r3
 8025d24:	f7fe fea1 	bl	8024a6a <remove_chain>
 8025d28:	4603      	mov	r3, r0
 8025d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8025d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025d32:	2b00      	cmp	r3, #0
 8025d34:	d126      	bne.n	8025d84 <f_open+0x1d4>
							res = move_window(fs, dw);
 8025d36:	693b      	ldr	r3, [r7, #16]
 8025d38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025d3a:	4618      	mov	r0, r3
 8025d3c:	f7fe fc46 	bl	80245cc <move_window>
 8025d40:	4603      	mov	r3, r0
 8025d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8025d46:	693b      	ldr	r3, [r7, #16]
 8025d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025d4a:	3a01      	subs	r2, #1
 8025d4c:	60da      	str	r2, [r3, #12]
 8025d4e:	e019      	b.n	8025d84 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8025d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025d54:	2b00      	cmp	r3, #0
 8025d56:	d115      	bne.n	8025d84 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8025d58:	7ebb      	ldrb	r3, [r7, #26]
 8025d5a:	f003 0310 	and.w	r3, r3, #16
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	d003      	beq.n	8025d6a <f_open+0x1ba>
					res = FR_NO_FILE;
 8025d62:	2304      	movs	r3, #4
 8025d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025d68:	e00c      	b.n	8025d84 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8025d6a:	79fb      	ldrb	r3, [r7, #7]
 8025d6c:	f003 0302 	and.w	r3, r3, #2
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d007      	beq.n	8025d84 <f_open+0x1d4>
 8025d74:	7ebb      	ldrb	r3, [r7, #26]
 8025d76:	f003 0301 	and.w	r3, r3, #1
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	d002      	beq.n	8025d84 <f_open+0x1d4>
						res = FR_DENIED;
 8025d7e:	2307      	movs	r3, #7
 8025d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8025d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d128      	bne.n	8025dde <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8025d8c:	79fb      	ldrb	r3, [r7, #7]
 8025d8e:	f003 0308 	and.w	r3, r3, #8
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d003      	beq.n	8025d9e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8025d96:	79fb      	ldrb	r3, [r7, #7]
 8025d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8025d9e:	693b      	ldr	r3, [r7, #16]
 8025da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8025da2:	68fb      	ldr	r3, [r7, #12]
 8025da4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8025da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025da8:	68fb      	ldr	r3, [r7, #12]
 8025daa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025dac:	79fb      	ldrb	r3, [r7, #7]
 8025dae:	f023 0301 	bic.w	r3, r3, #1
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	bf14      	ite	ne
 8025db6:	2301      	movne	r3, #1
 8025db8:	2300      	moveq	r3, #0
 8025dba:	b2db      	uxtb	r3, r3
 8025dbc:	461a      	mov	r2, r3
 8025dbe:	f107 0314 	add.w	r3, r7, #20
 8025dc2:	4611      	mov	r1, r2
 8025dc4:	4618      	mov	r0, r3
 8025dc6:	f7fe facf 	bl	8024368 <inc_lock>
 8025dca:	4602      	mov	r2, r0
 8025dcc:	68fb      	ldr	r3, [r7, #12]
 8025dce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8025dd0:	68fb      	ldr	r3, [r7, #12]
 8025dd2:	691b      	ldr	r3, [r3, #16]
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d102      	bne.n	8025dde <f_open+0x22e>
 8025dd8:	2302      	movs	r3, #2
 8025dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8025dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	f040 8095 	bne.w	8025f12 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8025de8:	693b      	ldr	r3, [r7, #16]
 8025dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025dec:	4611      	mov	r1, r2
 8025dee:	4618      	mov	r0, r3
 8025df0:	f7ff f8f3 	bl	8024fda <ld_clust>
 8025df4:	4602      	mov	r2, r0
 8025df6:	68fb      	ldr	r3, [r7, #12]
 8025df8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8025dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025dfc:	331c      	adds	r3, #28
 8025dfe:	4618      	mov	r0, r3
 8025e00:	f7fe f94c 	bl	802409c <ld_dword>
 8025e04:	4602      	mov	r2, r0
 8025e06:	68fb      	ldr	r3, [r7, #12]
 8025e08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8025e0a:	68fb      	ldr	r3, [r7, #12]
 8025e0c:	2200      	movs	r2, #0
 8025e0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8025e10:	693a      	ldr	r2, [r7, #16]
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8025e16:	693b      	ldr	r3, [r7, #16]
 8025e18:	88da      	ldrh	r2, [r3, #6]
 8025e1a:	68fb      	ldr	r3, [r7, #12]
 8025e1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8025e1e:	68fb      	ldr	r3, [r7, #12]
 8025e20:	79fa      	ldrb	r2, [r7, #7]
 8025e22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8025e24:	68fb      	ldr	r3, [r7, #12]
 8025e26:	2200      	movs	r2, #0
 8025e28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8025e2a:	68fb      	ldr	r3, [r7, #12]
 8025e2c:	2200      	movs	r2, #0
 8025e2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8025e30:	68fb      	ldr	r3, [r7, #12]
 8025e32:	2200      	movs	r2, #0
 8025e34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8025e36:	68fb      	ldr	r3, [r7, #12]
 8025e38:	3330      	adds	r3, #48	; 0x30
 8025e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8025e3e:	2100      	movs	r1, #0
 8025e40:	4618      	mov	r0, r3
 8025e42:	f7fe f9b6 	bl	80241b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8025e46:	79fb      	ldrb	r3, [r7, #7]
 8025e48:	f003 0320 	and.w	r3, r3, #32
 8025e4c:	2b00      	cmp	r3, #0
 8025e4e:	d060      	beq.n	8025f12 <f_open+0x362>
 8025e50:	68fb      	ldr	r3, [r7, #12]
 8025e52:	68db      	ldr	r3, [r3, #12]
 8025e54:	2b00      	cmp	r3, #0
 8025e56:	d05c      	beq.n	8025f12 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8025e58:	68fb      	ldr	r3, [r7, #12]
 8025e5a:	68da      	ldr	r2, [r3, #12]
 8025e5c:	68fb      	ldr	r3, [r7, #12]
 8025e5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8025e60:	693b      	ldr	r3, [r7, #16]
 8025e62:	895b      	ldrh	r3, [r3, #10]
 8025e64:	025b      	lsls	r3, r3, #9
 8025e66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8025e68:	68fb      	ldr	r3, [r7, #12]
 8025e6a:	689b      	ldr	r3, [r3, #8]
 8025e6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8025e6e:	68fb      	ldr	r3, [r7, #12]
 8025e70:	68db      	ldr	r3, [r3, #12]
 8025e72:	657b      	str	r3, [r7, #84]	; 0x54
 8025e74:	e016      	b.n	8025ea4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8025e76:	68fb      	ldr	r3, [r7, #12]
 8025e78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	f7fe fc61 	bl	8024742 <get_fat>
 8025e80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8025e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025e84:	2b01      	cmp	r3, #1
 8025e86:	d802      	bhi.n	8025e8e <f_open+0x2de>
 8025e88:	2302      	movs	r3, #2
 8025e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8025e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025e94:	d102      	bne.n	8025e9c <f_open+0x2ec>
 8025e96:	2301      	movs	r3, #1
 8025e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8025e9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025ea0:	1ad3      	subs	r3, r2, r3
 8025ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8025ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d103      	bne.n	8025eb4 <f_open+0x304>
 8025eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025eb0:	429a      	cmp	r2, r3
 8025eb2:	d8e0      	bhi.n	8025e76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8025eb4:	68fb      	ldr	r3, [r7, #12]
 8025eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8025eb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8025eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d127      	bne.n	8025f12 <f_open+0x362>
 8025ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	d022      	beq.n	8025f12 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8025ecc:	693b      	ldr	r3, [r7, #16]
 8025ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8025ed0:	4618      	mov	r0, r3
 8025ed2:	f7fe fc17 	bl	8024704 <clust2sect>
 8025ed6:	6478      	str	r0, [r7, #68]	; 0x44
 8025ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025eda:	2b00      	cmp	r3, #0
 8025edc:	d103      	bne.n	8025ee6 <f_open+0x336>
						res = FR_INT_ERR;
 8025ede:	2302      	movs	r3, #2
 8025ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025ee4:	e015      	b.n	8025f12 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8025ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025ee8:	0a5a      	lsrs	r2, r3, #9
 8025eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025eec:	441a      	add	r2, r3
 8025eee:	68fb      	ldr	r3, [r7, #12]
 8025ef0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8025ef2:	693b      	ldr	r3, [r7, #16]
 8025ef4:	7858      	ldrb	r0, [r3, #1]
 8025ef6:	68fb      	ldr	r3, [r7, #12]
 8025ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8025efc:	68fb      	ldr	r3, [r7, #12]
 8025efe:	6a1a      	ldr	r2, [r3, #32]
 8025f00:	2301      	movs	r3, #1
 8025f02:	f7fe f84d 	bl	8023fa0 <disk_read>
 8025f06:	4603      	mov	r3, r0
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d002      	beq.n	8025f12 <f_open+0x362>
 8025f0c:	2301      	movs	r3, #1
 8025f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8025f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	d002      	beq.n	8025f20 <f_open+0x370>
 8025f1a:	68fb      	ldr	r3, [r7, #12]
 8025f1c:	2200      	movs	r2, #0
 8025f1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8025f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8025f24:	4618      	mov	r0, r3
 8025f26:	3760      	adds	r7, #96	; 0x60
 8025f28:	46bd      	mov	sp, r7
 8025f2a:	bd80      	pop	{r7, pc}

08025f2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8025f2c:	b580      	push	{r7, lr}
 8025f2e:	b08e      	sub	sp, #56	; 0x38
 8025f30:	af00      	add	r7, sp, #0
 8025f32:	60f8      	str	r0, [r7, #12]
 8025f34:	60b9      	str	r1, [r7, #8]
 8025f36:	607a      	str	r2, [r7, #4]
 8025f38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8025f3a:	68bb      	ldr	r3, [r7, #8]
 8025f3c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8025f3e:	683b      	ldr	r3, [r7, #0]
 8025f40:	2200      	movs	r2, #0
 8025f42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8025f44:	68fb      	ldr	r3, [r7, #12]
 8025f46:	f107 0214 	add.w	r2, r7, #20
 8025f4a:	4611      	mov	r1, r2
 8025f4c:	4618      	mov	r0, r3
 8025f4e:	f7ff fdb3 	bl	8025ab8 <validate>
 8025f52:	4603      	mov	r3, r0
 8025f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8025f58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025f5c:	2b00      	cmp	r3, #0
 8025f5e:	d107      	bne.n	8025f70 <f_read+0x44>
 8025f60:	68fb      	ldr	r3, [r7, #12]
 8025f62:	7d5b      	ldrb	r3, [r3, #21]
 8025f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8025f68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025f6c:	2b00      	cmp	r3, #0
 8025f6e:	d002      	beq.n	8025f76 <f_read+0x4a>
 8025f70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025f74:	e115      	b.n	80261a2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8025f76:	68fb      	ldr	r3, [r7, #12]
 8025f78:	7d1b      	ldrb	r3, [r3, #20]
 8025f7a:	f003 0301 	and.w	r3, r3, #1
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d101      	bne.n	8025f86 <f_read+0x5a>
 8025f82:	2307      	movs	r3, #7
 8025f84:	e10d      	b.n	80261a2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8025f86:	68fb      	ldr	r3, [r7, #12]
 8025f88:	68da      	ldr	r2, [r3, #12]
 8025f8a:	68fb      	ldr	r3, [r7, #12]
 8025f8c:	699b      	ldr	r3, [r3, #24]
 8025f8e:	1ad3      	subs	r3, r2, r3
 8025f90:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8025f92:	687a      	ldr	r2, [r7, #4]
 8025f94:	6a3b      	ldr	r3, [r7, #32]
 8025f96:	429a      	cmp	r2, r3
 8025f98:	f240 80fe 	bls.w	8026198 <f_read+0x26c>
 8025f9c:	6a3b      	ldr	r3, [r7, #32]
 8025f9e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8025fa0:	e0fa      	b.n	8026198 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8025fa2:	68fb      	ldr	r3, [r7, #12]
 8025fa4:	699b      	ldr	r3, [r3, #24]
 8025fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	f040 80c6 	bne.w	802613c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8025fb0:	68fb      	ldr	r3, [r7, #12]
 8025fb2:	699b      	ldr	r3, [r3, #24]
 8025fb4:	0a5b      	lsrs	r3, r3, #9
 8025fb6:	697a      	ldr	r2, [r7, #20]
 8025fb8:	8952      	ldrh	r2, [r2, #10]
 8025fba:	3a01      	subs	r2, #1
 8025fbc:	4013      	ands	r3, r2
 8025fbe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8025fc0:	69fb      	ldr	r3, [r7, #28]
 8025fc2:	2b00      	cmp	r3, #0
 8025fc4:	d12f      	bne.n	8026026 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8025fc6:	68fb      	ldr	r3, [r7, #12]
 8025fc8:	699b      	ldr	r3, [r3, #24]
 8025fca:	2b00      	cmp	r3, #0
 8025fcc:	d103      	bne.n	8025fd6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8025fce:	68fb      	ldr	r3, [r7, #12]
 8025fd0:	689b      	ldr	r3, [r3, #8]
 8025fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8025fd4:	e013      	b.n	8025ffe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8025fd6:	68fb      	ldr	r3, [r7, #12]
 8025fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025fda:	2b00      	cmp	r3, #0
 8025fdc:	d007      	beq.n	8025fee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8025fde:	68fb      	ldr	r3, [r7, #12]
 8025fe0:	699b      	ldr	r3, [r3, #24]
 8025fe2:	4619      	mov	r1, r3
 8025fe4:	68f8      	ldr	r0, [r7, #12]
 8025fe6:	f7fe fe3d 	bl	8024c64 <clmt_clust>
 8025fea:	6338      	str	r0, [r7, #48]	; 0x30
 8025fec:	e007      	b.n	8025ffe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8025fee:	68fa      	ldr	r2, [r7, #12]
 8025ff0:	68fb      	ldr	r3, [r7, #12]
 8025ff2:	69db      	ldr	r3, [r3, #28]
 8025ff4:	4619      	mov	r1, r3
 8025ff6:	4610      	mov	r0, r2
 8025ff8:	f7fe fba3 	bl	8024742 <get_fat>
 8025ffc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8025ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026000:	2b01      	cmp	r3, #1
 8026002:	d804      	bhi.n	802600e <f_read+0xe2>
 8026004:	68fb      	ldr	r3, [r7, #12]
 8026006:	2202      	movs	r2, #2
 8026008:	755a      	strb	r2, [r3, #21]
 802600a:	2302      	movs	r3, #2
 802600c:	e0c9      	b.n	80261a2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 802600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026014:	d104      	bne.n	8026020 <f_read+0xf4>
 8026016:	68fb      	ldr	r3, [r7, #12]
 8026018:	2201      	movs	r2, #1
 802601a:	755a      	strb	r2, [r3, #21]
 802601c:	2301      	movs	r3, #1
 802601e:	e0c0      	b.n	80261a2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8026020:	68fb      	ldr	r3, [r7, #12]
 8026022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026024:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8026026:	697a      	ldr	r2, [r7, #20]
 8026028:	68fb      	ldr	r3, [r7, #12]
 802602a:	69db      	ldr	r3, [r3, #28]
 802602c:	4619      	mov	r1, r3
 802602e:	4610      	mov	r0, r2
 8026030:	f7fe fb68 	bl	8024704 <clust2sect>
 8026034:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8026036:	69bb      	ldr	r3, [r7, #24]
 8026038:	2b00      	cmp	r3, #0
 802603a:	d104      	bne.n	8026046 <f_read+0x11a>
 802603c:	68fb      	ldr	r3, [r7, #12]
 802603e:	2202      	movs	r2, #2
 8026040:	755a      	strb	r2, [r3, #21]
 8026042:	2302      	movs	r3, #2
 8026044:	e0ad      	b.n	80261a2 <f_read+0x276>
			sect += csect;
 8026046:	69ba      	ldr	r2, [r7, #24]
 8026048:	69fb      	ldr	r3, [r7, #28]
 802604a:	4413      	add	r3, r2
 802604c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 802604e:	687b      	ldr	r3, [r7, #4]
 8026050:	0a5b      	lsrs	r3, r3, #9
 8026052:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8026054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026056:	2b00      	cmp	r3, #0
 8026058:	d039      	beq.n	80260ce <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802605a:	69fa      	ldr	r2, [r7, #28]
 802605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802605e:	4413      	add	r3, r2
 8026060:	697a      	ldr	r2, [r7, #20]
 8026062:	8952      	ldrh	r2, [r2, #10]
 8026064:	4293      	cmp	r3, r2
 8026066:	d905      	bls.n	8026074 <f_read+0x148>
					cc = fs->csize - csect;
 8026068:	697b      	ldr	r3, [r7, #20]
 802606a:	895b      	ldrh	r3, [r3, #10]
 802606c:	461a      	mov	r2, r3
 802606e:	69fb      	ldr	r3, [r7, #28]
 8026070:	1ad3      	subs	r3, r2, r3
 8026072:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8026074:	697b      	ldr	r3, [r7, #20]
 8026076:	7858      	ldrb	r0, [r3, #1]
 8026078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802607a:	69ba      	ldr	r2, [r7, #24]
 802607c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802607e:	f7fd ff8f 	bl	8023fa0 <disk_read>
 8026082:	4603      	mov	r3, r0
 8026084:	2b00      	cmp	r3, #0
 8026086:	d004      	beq.n	8026092 <f_read+0x166>
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	2201      	movs	r2, #1
 802608c:	755a      	strb	r2, [r3, #21]
 802608e:	2301      	movs	r3, #1
 8026090:	e087      	b.n	80261a2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8026092:	68fb      	ldr	r3, [r7, #12]
 8026094:	7d1b      	ldrb	r3, [r3, #20]
 8026096:	b25b      	sxtb	r3, r3
 8026098:	2b00      	cmp	r3, #0
 802609a:	da14      	bge.n	80260c6 <f_read+0x19a>
 802609c:	68fb      	ldr	r3, [r7, #12]
 802609e:	6a1a      	ldr	r2, [r3, #32]
 80260a0:	69bb      	ldr	r3, [r7, #24]
 80260a2:	1ad3      	subs	r3, r2, r3
 80260a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80260a6:	429a      	cmp	r2, r3
 80260a8:	d90d      	bls.n	80260c6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80260aa:	68fb      	ldr	r3, [r7, #12]
 80260ac:	6a1a      	ldr	r2, [r3, #32]
 80260ae:	69bb      	ldr	r3, [r7, #24]
 80260b0:	1ad3      	subs	r3, r2, r3
 80260b2:	025b      	lsls	r3, r3, #9
 80260b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80260b6:	18d0      	adds	r0, r2, r3
 80260b8:	68fb      	ldr	r3, [r7, #12]
 80260ba:	3330      	adds	r3, #48	; 0x30
 80260bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80260c0:	4619      	mov	r1, r3
 80260c2:	f7fe f855 	bl	8024170 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80260c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80260c8:	025b      	lsls	r3, r3, #9
 80260ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80260cc:	e050      	b.n	8026170 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80260ce:	68fb      	ldr	r3, [r7, #12]
 80260d0:	6a1b      	ldr	r3, [r3, #32]
 80260d2:	69ba      	ldr	r2, [r7, #24]
 80260d4:	429a      	cmp	r2, r3
 80260d6:	d02e      	beq.n	8026136 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80260d8:	68fb      	ldr	r3, [r7, #12]
 80260da:	7d1b      	ldrb	r3, [r3, #20]
 80260dc:	b25b      	sxtb	r3, r3
 80260de:	2b00      	cmp	r3, #0
 80260e0:	da18      	bge.n	8026114 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80260e2:	697b      	ldr	r3, [r7, #20]
 80260e4:	7858      	ldrb	r0, [r3, #1]
 80260e6:	68fb      	ldr	r3, [r7, #12]
 80260e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80260ec:	68fb      	ldr	r3, [r7, #12]
 80260ee:	6a1a      	ldr	r2, [r3, #32]
 80260f0:	2301      	movs	r3, #1
 80260f2:	f7fd ff75 	bl	8023fe0 <disk_write>
 80260f6:	4603      	mov	r3, r0
 80260f8:	2b00      	cmp	r3, #0
 80260fa:	d004      	beq.n	8026106 <f_read+0x1da>
 80260fc:	68fb      	ldr	r3, [r7, #12]
 80260fe:	2201      	movs	r2, #1
 8026100:	755a      	strb	r2, [r3, #21]
 8026102:	2301      	movs	r3, #1
 8026104:	e04d      	b.n	80261a2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8026106:	68fb      	ldr	r3, [r7, #12]
 8026108:	7d1b      	ldrb	r3, [r3, #20]
 802610a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802610e:	b2da      	uxtb	r2, r3
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8026114:	697b      	ldr	r3, [r7, #20]
 8026116:	7858      	ldrb	r0, [r3, #1]
 8026118:	68fb      	ldr	r3, [r7, #12]
 802611a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802611e:	2301      	movs	r3, #1
 8026120:	69ba      	ldr	r2, [r7, #24]
 8026122:	f7fd ff3d 	bl	8023fa0 <disk_read>
 8026126:	4603      	mov	r3, r0
 8026128:	2b00      	cmp	r3, #0
 802612a:	d004      	beq.n	8026136 <f_read+0x20a>
 802612c:	68fb      	ldr	r3, [r7, #12]
 802612e:	2201      	movs	r2, #1
 8026130:	755a      	strb	r2, [r3, #21]
 8026132:	2301      	movs	r3, #1
 8026134:	e035      	b.n	80261a2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8026136:	68fb      	ldr	r3, [r7, #12]
 8026138:	69ba      	ldr	r2, [r7, #24]
 802613a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 802613c:	68fb      	ldr	r3, [r7, #12]
 802613e:	699b      	ldr	r3, [r3, #24]
 8026140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026144:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8026148:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 802614a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802614c:	687b      	ldr	r3, [r7, #4]
 802614e:	429a      	cmp	r2, r3
 8026150:	d901      	bls.n	8026156 <f_read+0x22a>
 8026152:	687b      	ldr	r3, [r7, #4]
 8026154:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8026156:	68fb      	ldr	r3, [r7, #12]
 8026158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802615c:	68fb      	ldr	r3, [r7, #12]
 802615e:	699b      	ldr	r3, [r3, #24]
 8026160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026164:	4413      	add	r3, r2
 8026166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026168:	4619      	mov	r1, r3
 802616a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802616c:	f7fe f800 	bl	8024170 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8026170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026174:	4413      	add	r3, r2
 8026176:	627b      	str	r3, [r7, #36]	; 0x24
 8026178:	68fb      	ldr	r3, [r7, #12]
 802617a:	699a      	ldr	r2, [r3, #24]
 802617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802617e:	441a      	add	r2, r3
 8026180:	68fb      	ldr	r3, [r7, #12]
 8026182:	619a      	str	r2, [r3, #24]
 8026184:	683b      	ldr	r3, [r7, #0]
 8026186:	681a      	ldr	r2, [r3, #0]
 8026188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802618a:	441a      	add	r2, r3
 802618c:	683b      	ldr	r3, [r7, #0]
 802618e:	601a      	str	r2, [r3, #0]
 8026190:	687a      	ldr	r2, [r7, #4]
 8026192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026194:	1ad3      	subs	r3, r2, r3
 8026196:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	2b00      	cmp	r3, #0
 802619c:	f47f af01 	bne.w	8025fa2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80261a0:	2300      	movs	r3, #0
}
 80261a2:	4618      	mov	r0, r3
 80261a4:	3738      	adds	r7, #56	; 0x38
 80261a6:	46bd      	mov	sp, r7
 80261a8:	bd80      	pop	{r7, pc}

080261aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80261aa:	b580      	push	{r7, lr}
 80261ac:	b08c      	sub	sp, #48	; 0x30
 80261ae:	af00      	add	r7, sp, #0
 80261b0:	60f8      	str	r0, [r7, #12]
 80261b2:	60b9      	str	r1, [r7, #8]
 80261b4:	607a      	str	r2, [r7, #4]
 80261b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80261b8:	68bb      	ldr	r3, [r7, #8]
 80261ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80261bc:	683b      	ldr	r3, [r7, #0]
 80261be:	2200      	movs	r2, #0
 80261c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80261c2:	68fb      	ldr	r3, [r7, #12]
 80261c4:	f107 0210 	add.w	r2, r7, #16
 80261c8:	4611      	mov	r1, r2
 80261ca:	4618      	mov	r0, r3
 80261cc:	f7ff fc74 	bl	8025ab8 <validate>
 80261d0:	4603      	mov	r3, r0
 80261d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80261d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d107      	bne.n	80261ee <f_write+0x44>
 80261de:	68fb      	ldr	r3, [r7, #12]
 80261e0:	7d5b      	ldrb	r3, [r3, #21]
 80261e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80261e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80261ea:	2b00      	cmp	r3, #0
 80261ec:	d002      	beq.n	80261f4 <f_write+0x4a>
 80261ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80261f2:	e14b      	b.n	802648c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80261f4:	68fb      	ldr	r3, [r7, #12]
 80261f6:	7d1b      	ldrb	r3, [r3, #20]
 80261f8:	f003 0302 	and.w	r3, r3, #2
 80261fc:	2b00      	cmp	r3, #0
 80261fe:	d101      	bne.n	8026204 <f_write+0x5a>
 8026200:	2307      	movs	r3, #7
 8026202:	e143      	b.n	802648c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8026204:	68fb      	ldr	r3, [r7, #12]
 8026206:	699a      	ldr	r2, [r3, #24]
 8026208:	687b      	ldr	r3, [r7, #4]
 802620a:	441a      	add	r2, r3
 802620c:	68fb      	ldr	r3, [r7, #12]
 802620e:	699b      	ldr	r3, [r3, #24]
 8026210:	429a      	cmp	r2, r3
 8026212:	f080 812d 	bcs.w	8026470 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8026216:	68fb      	ldr	r3, [r7, #12]
 8026218:	699b      	ldr	r3, [r3, #24]
 802621a:	43db      	mvns	r3, r3
 802621c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 802621e:	e127      	b.n	8026470 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8026220:	68fb      	ldr	r3, [r7, #12]
 8026222:	699b      	ldr	r3, [r3, #24]
 8026224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026228:	2b00      	cmp	r3, #0
 802622a:	f040 80e3 	bne.w	80263f4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 802622e:	68fb      	ldr	r3, [r7, #12]
 8026230:	699b      	ldr	r3, [r3, #24]
 8026232:	0a5b      	lsrs	r3, r3, #9
 8026234:	693a      	ldr	r2, [r7, #16]
 8026236:	8952      	ldrh	r2, [r2, #10]
 8026238:	3a01      	subs	r2, #1
 802623a:	4013      	ands	r3, r2
 802623c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 802623e:	69bb      	ldr	r3, [r7, #24]
 8026240:	2b00      	cmp	r3, #0
 8026242:	d143      	bne.n	80262cc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8026244:	68fb      	ldr	r3, [r7, #12]
 8026246:	699b      	ldr	r3, [r3, #24]
 8026248:	2b00      	cmp	r3, #0
 802624a:	d10c      	bne.n	8026266 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 802624c:	68fb      	ldr	r3, [r7, #12]
 802624e:	689b      	ldr	r3, [r3, #8]
 8026250:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8026252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026254:	2b00      	cmp	r3, #0
 8026256:	d11a      	bne.n	802628e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8026258:	68fb      	ldr	r3, [r7, #12]
 802625a:	2100      	movs	r1, #0
 802625c:	4618      	mov	r0, r3
 802625e:	f7fe fc69 	bl	8024b34 <create_chain>
 8026262:	62b8      	str	r0, [r7, #40]	; 0x28
 8026264:	e013      	b.n	802628e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8026266:	68fb      	ldr	r3, [r7, #12]
 8026268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802626a:	2b00      	cmp	r3, #0
 802626c:	d007      	beq.n	802627e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 802626e:	68fb      	ldr	r3, [r7, #12]
 8026270:	699b      	ldr	r3, [r3, #24]
 8026272:	4619      	mov	r1, r3
 8026274:	68f8      	ldr	r0, [r7, #12]
 8026276:	f7fe fcf5 	bl	8024c64 <clmt_clust>
 802627a:	62b8      	str	r0, [r7, #40]	; 0x28
 802627c:	e007      	b.n	802628e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 802627e:	68fa      	ldr	r2, [r7, #12]
 8026280:	68fb      	ldr	r3, [r7, #12]
 8026282:	69db      	ldr	r3, [r3, #28]
 8026284:	4619      	mov	r1, r3
 8026286:	4610      	mov	r0, r2
 8026288:	f7fe fc54 	bl	8024b34 <create_chain>
 802628c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026290:	2b00      	cmp	r3, #0
 8026292:	f000 80f2 	beq.w	802647a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8026296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026298:	2b01      	cmp	r3, #1
 802629a:	d104      	bne.n	80262a6 <f_write+0xfc>
 802629c:	68fb      	ldr	r3, [r7, #12]
 802629e:	2202      	movs	r2, #2
 80262a0:	755a      	strb	r2, [r3, #21]
 80262a2:	2302      	movs	r3, #2
 80262a4:	e0f2      	b.n	802648c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80262a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80262a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80262ac:	d104      	bne.n	80262b8 <f_write+0x10e>
 80262ae:	68fb      	ldr	r3, [r7, #12]
 80262b0:	2201      	movs	r2, #1
 80262b2:	755a      	strb	r2, [r3, #21]
 80262b4:	2301      	movs	r3, #1
 80262b6:	e0e9      	b.n	802648c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80262b8:	68fb      	ldr	r3, [r7, #12]
 80262ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262bc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80262be:	68fb      	ldr	r3, [r7, #12]
 80262c0:	689b      	ldr	r3, [r3, #8]
 80262c2:	2b00      	cmp	r3, #0
 80262c4:	d102      	bne.n	80262cc <f_write+0x122>
 80262c6:	68fb      	ldr	r3, [r7, #12]
 80262c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262ca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80262cc:	68fb      	ldr	r3, [r7, #12]
 80262ce:	7d1b      	ldrb	r3, [r3, #20]
 80262d0:	b25b      	sxtb	r3, r3
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	da18      	bge.n	8026308 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80262d6:	693b      	ldr	r3, [r7, #16]
 80262d8:	7858      	ldrb	r0, [r3, #1]
 80262da:	68fb      	ldr	r3, [r7, #12]
 80262dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80262e0:	68fb      	ldr	r3, [r7, #12]
 80262e2:	6a1a      	ldr	r2, [r3, #32]
 80262e4:	2301      	movs	r3, #1
 80262e6:	f7fd fe7b 	bl	8023fe0 <disk_write>
 80262ea:	4603      	mov	r3, r0
 80262ec:	2b00      	cmp	r3, #0
 80262ee:	d004      	beq.n	80262fa <f_write+0x150>
 80262f0:	68fb      	ldr	r3, [r7, #12]
 80262f2:	2201      	movs	r2, #1
 80262f4:	755a      	strb	r2, [r3, #21]
 80262f6:	2301      	movs	r3, #1
 80262f8:	e0c8      	b.n	802648c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80262fa:	68fb      	ldr	r3, [r7, #12]
 80262fc:	7d1b      	ldrb	r3, [r3, #20]
 80262fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8026302:	b2da      	uxtb	r2, r3
 8026304:	68fb      	ldr	r3, [r7, #12]
 8026306:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8026308:	693a      	ldr	r2, [r7, #16]
 802630a:	68fb      	ldr	r3, [r7, #12]
 802630c:	69db      	ldr	r3, [r3, #28]
 802630e:	4619      	mov	r1, r3
 8026310:	4610      	mov	r0, r2
 8026312:	f7fe f9f7 	bl	8024704 <clust2sect>
 8026316:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8026318:	697b      	ldr	r3, [r7, #20]
 802631a:	2b00      	cmp	r3, #0
 802631c:	d104      	bne.n	8026328 <f_write+0x17e>
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	2202      	movs	r2, #2
 8026322:	755a      	strb	r2, [r3, #21]
 8026324:	2302      	movs	r3, #2
 8026326:	e0b1      	b.n	802648c <f_write+0x2e2>
			sect += csect;
 8026328:	697a      	ldr	r2, [r7, #20]
 802632a:	69bb      	ldr	r3, [r7, #24]
 802632c:	4413      	add	r3, r2
 802632e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	0a5b      	lsrs	r3, r3, #9
 8026334:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8026336:	6a3b      	ldr	r3, [r7, #32]
 8026338:	2b00      	cmp	r3, #0
 802633a:	d03c      	beq.n	80263b6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802633c:	69ba      	ldr	r2, [r7, #24]
 802633e:	6a3b      	ldr	r3, [r7, #32]
 8026340:	4413      	add	r3, r2
 8026342:	693a      	ldr	r2, [r7, #16]
 8026344:	8952      	ldrh	r2, [r2, #10]
 8026346:	4293      	cmp	r3, r2
 8026348:	d905      	bls.n	8026356 <f_write+0x1ac>
					cc = fs->csize - csect;
 802634a:	693b      	ldr	r3, [r7, #16]
 802634c:	895b      	ldrh	r3, [r3, #10]
 802634e:	461a      	mov	r2, r3
 8026350:	69bb      	ldr	r3, [r7, #24]
 8026352:	1ad3      	subs	r3, r2, r3
 8026354:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8026356:	693b      	ldr	r3, [r7, #16]
 8026358:	7858      	ldrb	r0, [r3, #1]
 802635a:	6a3b      	ldr	r3, [r7, #32]
 802635c:	697a      	ldr	r2, [r7, #20]
 802635e:	69f9      	ldr	r1, [r7, #28]
 8026360:	f7fd fe3e 	bl	8023fe0 <disk_write>
 8026364:	4603      	mov	r3, r0
 8026366:	2b00      	cmp	r3, #0
 8026368:	d004      	beq.n	8026374 <f_write+0x1ca>
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	2201      	movs	r2, #1
 802636e:	755a      	strb	r2, [r3, #21]
 8026370:	2301      	movs	r3, #1
 8026372:	e08b      	b.n	802648c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8026374:	68fb      	ldr	r3, [r7, #12]
 8026376:	6a1a      	ldr	r2, [r3, #32]
 8026378:	697b      	ldr	r3, [r7, #20]
 802637a:	1ad3      	subs	r3, r2, r3
 802637c:	6a3a      	ldr	r2, [r7, #32]
 802637e:	429a      	cmp	r2, r3
 8026380:	d915      	bls.n	80263ae <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8026388:	68fb      	ldr	r3, [r7, #12]
 802638a:	6a1a      	ldr	r2, [r3, #32]
 802638c:	697b      	ldr	r3, [r7, #20]
 802638e:	1ad3      	subs	r3, r2, r3
 8026390:	025b      	lsls	r3, r3, #9
 8026392:	69fa      	ldr	r2, [r7, #28]
 8026394:	4413      	add	r3, r2
 8026396:	f44f 7200 	mov.w	r2, #512	; 0x200
 802639a:	4619      	mov	r1, r3
 802639c:	f7fd fee8 	bl	8024170 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80263a0:	68fb      	ldr	r3, [r7, #12]
 80263a2:	7d1b      	ldrb	r3, [r3, #20]
 80263a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80263a8:	b2da      	uxtb	r2, r3
 80263aa:	68fb      	ldr	r3, [r7, #12]
 80263ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80263ae:	6a3b      	ldr	r3, [r7, #32]
 80263b0:	025b      	lsls	r3, r3, #9
 80263b2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80263b4:	e03f      	b.n	8026436 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80263b6:	68fb      	ldr	r3, [r7, #12]
 80263b8:	6a1b      	ldr	r3, [r3, #32]
 80263ba:	697a      	ldr	r2, [r7, #20]
 80263bc:	429a      	cmp	r2, r3
 80263be:	d016      	beq.n	80263ee <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80263c0:	68fb      	ldr	r3, [r7, #12]
 80263c2:	699a      	ldr	r2, [r3, #24]
 80263c4:	68fb      	ldr	r3, [r7, #12]
 80263c6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80263c8:	429a      	cmp	r2, r3
 80263ca:	d210      	bcs.n	80263ee <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80263cc:	693b      	ldr	r3, [r7, #16]
 80263ce:	7858      	ldrb	r0, [r3, #1]
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80263d6:	2301      	movs	r3, #1
 80263d8:	697a      	ldr	r2, [r7, #20]
 80263da:	f7fd fde1 	bl	8023fa0 <disk_read>
 80263de:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80263e0:	2b00      	cmp	r3, #0
 80263e2:	d004      	beq.n	80263ee <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80263e4:	68fb      	ldr	r3, [r7, #12]
 80263e6:	2201      	movs	r2, #1
 80263e8:	755a      	strb	r2, [r3, #21]
 80263ea:	2301      	movs	r3, #1
 80263ec:	e04e      	b.n	802648c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	697a      	ldr	r2, [r7, #20]
 80263f2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80263f4:	68fb      	ldr	r3, [r7, #12]
 80263f6:	699b      	ldr	r3, [r3, #24]
 80263f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80263fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8026400:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8026402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026404:	687b      	ldr	r3, [r7, #4]
 8026406:	429a      	cmp	r2, r3
 8026408:	d901      	bls.n	802640e <f_write+0x264>
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 802640e:	68fb      	ldr	r3, [r7, #12]
 8026410:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026414:	68fb      	ldr	r3, [r7, #12]
 8026416:	699b      	ldr	r3, [r3, #24]
 8026418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802641c:	4413      	add	r3, r2
 802641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026420:	69f9      	ldr	r1, [r7, #28]
 8026422:	4618      	mov	r0, r3
 8026424:	f7fd fea4 	bl	8024170 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8026428:	68fb      	ldr	r3, [r7, #12]
 802642a:	7d1b      	ldrb	r3, [r3, #20]
 802642c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8026430:	b2da      	uxtb	r2, r3
 8026432:	68fb      	ldr	r3, [r7, #12]
 8026434:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8026436:	69fa      	ldr	r2, [r7, #28]
 8026438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802643a:	4413      	add	r3, r2
 802643c:	61fb      	str	r3, [r7, #28]
 802643e:	68fb      	ldr	r3, [r7, #12]
 8026440:	699a      	ldr	r2, [r3, #24]
 8026442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026444:	441a      	add	r2, r3
 8026446:	68fb      	ldr	r3, [r7, #12]
 8026448:	619a      	str	r2, [r3, #24]
 802644a:	68fb      	ldr	r3, [r7, #12]
 802644c:	68da      	ldr	r2, [r3, #12]
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	699b      	ldr	r3, [r3, #24]
 8026452:	429a      	cmp	r2, r3
 8026454:	bf38      	it	cc
 8026456:	461a      	movcc	r2, r3
 8026458:	68fb      	ldr	r3, [r7, #12]
 802645a:	60da      	str	r2, [r3, #12]
 802645c:	683b      	ldr	r3, [r7, #0]
 802645e:	681a      	ldr	r2, [r3, #0]
 8026460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026462:	441a      	add	r2, r3
 8026464:	683b      	ldr	r3, [r7, #0]
 8026466:	601a      	str	r2, [r3, #0]
 8026468:	687a      	ldr	r2, [r7, #4]
 802646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802646c:	1ad3      	subs	r3, r2, r3
 802646e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8026470:	687b      	ldr	r3, [r7, #4]
 8026472:	2b00      	cmp	r3, #0
 8026474:	f47f aed4 	bne.w	8026220 <f_write+0x76>
 8026478:	e000      	b.n	802647c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802647a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 802647c:	68fb      	ldr	r3, [r7, #12]
 802647e:	7d1b      	ldrb	r3, [r3, #20]
 8026480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026484:	b2da      	uxtb	r2, r3
 8026486:	68fb      	ldr	r3, [r7, #12]
 8026488:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 802648a:	2300      	movs	r3, #0
}
 802648c:	4618      	mov	r0, r3
 802648e:	3730      	adds	r7, #48	; 0x30
 8026490:	46bd      	mov	sp, r7
 8026492:	bd80      	pop	{r7, pc}

08026494 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8026494:	b580      	push	{r7, lr}
 8026496:	b086      	sub	sp, #24
 8026498:	af00      	add	r7, sp, #0
 802649a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	f107 0208 	add.w	r2, r7, #8
 80264a2:	4611      	mov	r1, r2
 80264a4:	4618      	mov	r0, r3
 80264a6:	f7ff fb07 	bl	8025ab8 <validate>
 80264aa:	4603      	mov	r3, r0
 80264ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80264ae:	7dfb      	ldrb	r3, [r7, #23]
 80264b0:	2b00      	cmp	r3, #0
 80264b2:	d168      	bne.n	8026586 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80264b4:	687b      	ldr	r3, [r7, #4]
 80264b6:	7d1b      	ldrb	r3, [r3, #20]
 80264b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80264bc:	2b00      	cmp	r3, #0
 80264be:	d062      	beq.n	8026586 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80264c0:	687b      	ldr	r3, [r7, #4]
 80264c2:	7d1b      	ldrb	r3, [r3, #20]
 80264c4:	b25b      	sxtb	r3, r3
 80264c6:	2b00      	cmp	r3, #0
 80264c8:	da15      	bge.n	80264f6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80264ca:	68bb      	ldr	r3, [r7, #8]
 80264cc:	7858      	ldrb	r0, [r3, #1]
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	6a1a      	ldr	r2, [r3, #32]
 80264d8:	2301      	movs	r3, #1
 80264da:	f7fd fd81 	bl	8023fe0 <disk_write>
 80264de:	4603      	mov	r3, r0
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d001      	beq.n	80264e8 <f_sync+0x54>
 80264e4:	2301      	movs	r3, #1
 80264e6:	e04f      	b.n	8026588 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	7d1b      	ldrb	r3, [r3, #20]
 80264ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80264f0:	b2da      	uxtb	r2, r3
 80264f2:	687b      	ldr	r3, [r7, #4]
 80264f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80264f6:	f7fd fdb1 	bl	802405c <get_fattime>
 80264fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80264fc:	68ba      	ldr	r2, [r7, #8]
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026502:	4619      	mov	r1, r3
 8026504:	4610      	mov	r0, r2
 8026506:	f7fe f861 	bl	80245cc <move_window>
 802650a:	4603      	mov	r3, r0
 802650c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 802650e:	7dfb      	ldrb	r3, [r7, #23]
 8026510:	2b00      	cmp	r3, #0
 8026512:	d138      	bne.n	8026586 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026518:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 802651a:	68fb      	ldr	r3, [r7, #12]
 802651c:	330b      	adds	r3, #11
 802651e:	781a      	ldrb	r2, [r3, #0]
 8026520:	68fb      	ldr	r3, [r7, #12]
 8026522:	330b      	adds	r3, #11
 8026524:	f042 0220 	orr.w	r2, r2, #32
 8026528:	b2d2      	uxtb	r2, r2
 802652a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 802652c:	687b      	ldr	r3, [r7, #4]
 802652e:	6818      	ldr	r0, [r3, #0]
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	689b      	ldr	r3, [r3, #8]
 8026534:	461a      	mov	r2, r3
 8026536:	68f9      	ldr	r1, [r7, #12]
 8026538:	f7fe fd6e 	bl	8025018 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 802653c:	68fb      	ldr	r3, [r7, #12]
 802653e:	f103 021c 	add.w	r2, r3, #28
 8026542:	687b      	ldr	r3, [r7, #4]
 8026544:	68db      	ldr	r3, [r3, #12]
 8026546:	4619      	mov	r1, r3
 8026548:	4610      	mov	r0, r2
 802654a:	f7fd fde5 	bl	8024118 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	3316      	adds	r3, #22
 8026552:	6939      	ldr	r1, [r7, #16]
 8026554:	4618      	mov	r0, r3
 8026556:	f7fd fddf 	bl	8024118 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 802655a:	68fb      	ldr	r3, [r7, #12]
 802655c:	3312      	adds	r3, #18
 802655e:	2100      	movs	r1, #0
 8026560:	4618      	mov	r0, r3
 8026562:	f7fd fdbe 	bl	80240e2 <st_word>
					fs->wflag = 1;
 8026566:	68bb      	ldr	r3, [r7, #8]
 8026568:	2201      	movs	r2, #1
 802656a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 802656c:	68bb      	ldr	r3, [r7, #8]
 802656e:	4618      	mov	r0, r3
 8026570:	f7fe f85a 	bl	8024628 <sync_fs>
 8026574:	4603      	mov	r3, r0
 8026576:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8026578:	687b      	ldr	r3, [r7, #4]
 802657a:	7d1b      	ldrb	r3, [r3, #20]
 802657c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026580:	b2da      	uxtb	r2, r3
 8026582:	687b      	ldr	r3, [r7, #4]
 8026584:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8026586:	7dfb      	ldrb	r3, [r7, #23]
}
 8026588:	4618      	mov	r0, r3
 802658a:	3718      	adds	r7, #24
 802658c:	46bd      	mov	sp, r7
 802658e:	bd80      	pop	{r7, pc}

08026590 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8026590:	b580      	push	{r7, lr}
 8026592:	b084      	sub	sp, #16
 8026594:	af00      	add	r7, sp, #0
 8026596:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8026598:	6878      	ldr	r0, [r7, #4]
 802659a:	f7ff ff7b 	bl	8026494 <f_sync>
 802659e:	4603      	mov	r3, r0
 80265a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80265a2:	7bfb      	ldrb	r3, [r7, #15]
 80265a4:	2b00      	cmp	r3, #0
 80265a6:	d118      	bne.n	80265da <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80265a8:	687b      	ldr	r3, [r7, #4]
 80265aa:	f107 0208 	add.w	r2, r7, #8
 80265ae:	4611      	mov	r1, r2
 80265b0:	4618      	mov	r0, r3
 80265b2:	f7ff fa81 	bl	8025ab8 <validate>
 80265b6:	4603      	mov	r3, r0
 80265b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80265ba:	7bfb      	ldrb	r3, [r7, #15]
 80265bc:	2b00      	cmp	r3, #0
 80265be:	d10c      	bne.n	80265da <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80265c0:	687b      	ldr	r3, [r7, #4]
 80265c2:	691b      	ldr	r3, [r3, #16]
 80265c4:	4618      	mov	r0, r3
 80265c6:	f7fd ff5d 	bl	8024484 <dec_lock>
 80265ca:	4603      	mov	r3, r0
 80265cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80265ce:	7bfb      	ldrb	r3, [r7, #15]
 80265d0:	2b00      	cmp	r3, #0
 80265d2:	d102      	bne.n	80265da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80265d4:	687b      	ldr	r3, [r7, #4]
 80265d6:	2200      	movs	r2, #0
 80265d8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80265da:	7bfb      	ldrb	r3, [r7, #15]
}
 80265dc:	4618      	mov	r0, r3
 80265de:	3710      	adds	r7, #16
 80265e0:	46bd      	mov	sp, r7
 80265e2:	bd80      	pop	{r7, pc}

080265e4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80265e4:	b580      	push	{r7, lr}
 80265e6:	b090      	sub	sp, #64	; 0x40
 80265e8:	af00      	add	r7, sp, #0
 80265ea:	6078      	str	r0, [r7, #4]
 80265ec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	f107 0208 	add.w	r2, r7, #8
 80265f4:	4611      	mov	r1, r2
 80265f6:	4618      	mov	r0, r3
 80265f8:	f7ff fa5e 	bl	8025ab8 <validate>
 80265fc:	4603      	mov	r3, r0
 80265fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8026602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8026606:	2b00      	cmp	r3, #0
 8026608:	d103      	bne.n	8026612 <f_lseek+0x2e>
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	7d5b      	ldrb	r3, [r3, #21]
 802660e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8026612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8026616:	2b00      	cmp	r3, #0
 8026618:	d002      	beq.n	8026620 <f_lseek+0x3c>
 802661a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802661e:	e1e6      	b.n	80269ee <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8026620:	687b      	ldr	r3, [r7, #4]
 8026622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026624:	2b00      	cmp	r3, #0
 8026626:	f000 80d1 	beq.w	80267cc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 802662a:	683b      	ldr	r3, [r7, #0]
 802662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026630:	d15a      	bne.n	80266e8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8026632:	687b      	ldr	r3, [r7, #4]
 8026634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026636:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8026638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802663a:	1d1a      	adds	r2, r3, #4
 802663c:	627a      	str	r2, [r7, #36]	; 0x24
 802663e:	681b      	ldr	r3, [r3, #0]
 8026640:	617b      	str	r3, [r7, #20]
 8026642:	2302      	movs	r3, #2
 8026644:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	689b      	ldr	r3, [r3, #8]
 802664a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 802664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802664e:	2b00      	cmp	r3, #0
 8026650:	d03a      	beq.n	80266c8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8026652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026654:	613b      	str	r3, [r7, #16]
 8026656:	2300      	movs	r3, #0
 8026658:	62fb      	str	r3, [r7, #44]	; 0x2c
 802665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802665c:	3302      	adds	r3, #2
 802665e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8026660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026662:	60fb      	str	r3, [r7, #12]
 8026664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026666:	3301      	adds	r3, #1
 8026668:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802666e:	4618      	mov	r0, r3
 8026670:	f7fe f867 	bl	8024742 <get_fat>
 8026674:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8026676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026678:	2b01      	cmp	r3, #1
 802667a:	d804      	bhi.n	8026686 <f_lseek+0xa2>
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	2202      	movs	r2, #2
 8026680:	755a      	strb	r2, [r3, #21]
 8026682:	2302      	movs	r3, #2
 8026684:	e1b3      	b.n	80269ee <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8026686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026688:	f1b3 3fff 	cmp.w	r3, #4294967295
 802668c:	d104      	bne.n	8026698 <f_lseek+0xb4>
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	2201      	movs	r2, #1
 8026692:	755a      	strb	r2, [r3, #21]
 8026694:	2301      	movs	r3, #1
 8026696:	e1aa      	b.n	80269ee <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8026698:	68fb      	ldr	r3, [r7, #12]
 802669a:	3301      	adds	r3, #1
 802669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802669e:	429a      	cmp	r2, r3
 80266a0:	d0de      	beq.n	8026660 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80266a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80266a4:	697b      	ldr	r3, [r7, #20]
 80266a6:	429a      	cmp	r2, r3
 80266a8:	d809      	bhi.n	80266be <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80266aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266ac:	1d1a      	adds	r2, r3, #4
 80266ae:	627a      	str	r2, [r7, #36]	; 0x24
 80266b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80266b2:	601a      	str	r2, [r3, #0]
 80266b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266b6:	1d1a      	adds	r2, r3, #4
 80266b8:	627a      	str	r2, [r7, #36]	; 0x24
 80266ba:	693a      	ldr	r2, [r7, #16]
 80266bc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80266be:	68bb      	ldr	r3, [r7, #8]
 80266c0:	695b      	ldr	r3, [r3, #20]
 80266c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80266c4:	429a      	cmp	r2, r3
 80266c6:	d3c4      	bcc.n	8026652 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80266cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80266ce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80266d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80266d2:	697b      	ldr	r3, [r7, #20]
 80266d4:	429a      	cmp	r2, r3
 80266d6:	d803      	bhi.n	80266e0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80266d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266da:	2200      	movs	r2, #0
 80266dc:	601a      	str	r2, [r3, #0]
 80266de:	e184      	b.n	80269ea <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80266e0:	2311      	movs	r3, #17
 80266e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80266e6:	e180      	b.n	80269ea <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80266e8:	687b      	ldr	r3, [r7, #4]
 80266ea:	68db      	ldr	r3, [r3, #12]
 80266ec:	683a      	ldr	r2, [r7, #0]
 80266ee:	429a      	cmp	r2, r3
 80266f0:	d902      	bls.n	80266f8 <f_lseek+0x114>
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	68db      	ldr	r3, [r3, #12]
 80266f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80266f8:	687b      	ldr	r3, [r7, #4]
 80266fa:	683a      	ldr	r2, [r7, #0]
 80266fc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80266fe:	683b      	ldr	r3, [r7, #0]
 8026700:	2b00      	cmp	r3, #0
 8026702:	f000 8172 	beq.w	80269ea <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8026706:	683b      	ldr	r3, [r7, #0]
 8026708:	3b01      	subs	r3, #1
 802670a:	4619      	mov	r1, r3
 802670c:	6878      	ldr	r0, [r7, #4]
 802670e:	f7fe faa9 	bl	8024c64 <clmt_clust>
 8026712:	4602      	mov	r2, r0
 8026714:	687b      	ldr	r3, [r7, #4]
 8026716:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8026718:	68ba      	ldr	r2, [r7, #8]
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	69db      	ldr	r3, [r3, #28]
 802671e:	4619      	mov	r1, r3
 8026720:	4610      	mov	r0, r2
 8026722:	f7fd ffef 	bl	8024704 <clust2sect>
 8026726:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8026728:	69bb      	ldr	r3, [r7, #24]
 802672a:	2b00      	cmp	r3, #0
 802672c:	d104      	bne.n	8026738 <f_lseek+0x154>
 802672e:	687b      	ldr	r3, [r7, #4]
 8026730:	2202      	movs	r2, #2
 8026732:	755a      	strb	r2, [r3, #21]
 8026734:	2302      	movs	r3, #2
 8026736:	e15a      	b.n	80269ee <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8026738:	683b      	ldr	r3, [r7, #0]
 802673a:	3b01      	subs	r3, #1
 802673c:	0a5b      	lsrs	r3, r3, #9
 802673e:	68ba      	ldr	r2, [r7, #8]
 8026740:	8952      	ldrh	r2, [r2, #10]
 8026742:	3a01      	subs	r2, #1
 8026744:	4013      	ands	r3, r2
 8026746:	69ba      	ldr	r2, [r7, #24]
 8026748:	4413      	add	r3, r2
 802674a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	699b      	ldr	r3, [r3, #24]
 8026750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026754:	2b00      	cmp	r3, #0
 8026756:	f000 8148 	beq.w	80269ea <f_lseek+0x406>
 802675a:	687b      	ldr	r3, [r7, #4]
 802675c:	6a1b      	ldr	r3, [r3, #32]
 802675e:	69ba      	ldr	r2, [r7, #24]
 8026760:	429a      	cmp	r2, r3
 8026762:	f000 8142 	beq.w	80269ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8026766:	687b      	ldr	r3, [r7, #4]
 8026768:	7d1b      	ldrb	r3, [r3, #20]
 802676a:	b25b      	sxtb	r3, r3
 802676c:	2b00      	cmp	r3, #0
 802676e:	da18      	bge.n	80267a2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8026770:	68bb      	ldr	r3, [r7, #8]
 8026772:	7858      	ldrb	r0, [r3, #1]
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	6a1a      	ldr	r2, [r3, #32]
 802677e:	2301      	movs	r3, #1
 8026780:	f7fd fc2e 	bl	8023fe0 <disk_write>
 8026784:	4603      	mov	r3, r0
 8026786:	2b00      	cmp	r3, #0
 8026788:	d004      	beq.n	8026794 <f_lseek+0x1b0>
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	2201      	movs	r2, #1
 802678e:	755a      	strb	r2, [r3, #21]
 8026790:	2301      	movs	r3, #1
 8026792:	e12c      	b.n	80269ee <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	7d1b      	ldrb	r3, [r3, #20]
 8026798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802679c:	b2da      	uxtb	r2, r3
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80267a2:	68bb      	ldr	r3, [r7, #8]
 80267a4:	7858      	ldrb	r0, [r3, #1]
 80267a6:	687b      	ldr	r3, [r7, #4]
 80267a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80267ac:	2301      	movs	r3, #1
 80267ae:	69ba      	ldr	r2, [r7, #24]
 80267b0:	f7fd fbf6 	bl	8023fa0 <disk_read>
 80267b4:	4603      	mov	r3, r0
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d004      	beq.n	80267c4 <f_lseek+0x1e0>
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	2201      	movs	r2, #1
 80267be:	755a      	strb	r2, [r3, #21]
 80267c0:	2301      	movs	r3, #1
 80267c2:	e114      	b.n	80269ee <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	69ba      	ldr	r2, [r7, #24]
 80267c8:	621a      	str	r2, [r3, #32]
 80267ca:	e10e      	b.n	80269ea <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	68db      	ldr	r3, [r3, #12]
 80267d0:	683a      	ldr	r2, [r7, #0]
 80267d2:	429a      	cmp	r2, r3
 80267d4:	d908      	bls.n	80267e8 <f_lseek+0x204>
 80267d6:	687b      	ldr	r3, [r7, #4]
 80267d8:	7d1b      	ldrb	r3, [r3, #20]
 80267da:	f003 0302 	and.w	r3, r3, #2
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d102      	bne.n	80267e8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	68db      	ldr	r3, [r3, #12]
 80267e6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80267e8:	687b      	ldr	r3, [r7, #4]
 80267ea:	699b      	ldr	r3, [r3, #24]
 80267ec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80267ee:	2300      	movs	r3, #0
 80267f0:	637b      	str	r3, [r7, #52]	; 0x34
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80267f6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80267f8:	683b      	ldr	r3, [r7, #0]
 80267fa:	2b00      	cmp	r3, #0
 80267fc:	f000 80a7 	beq.w	802694e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8026800:	68bb      	ldr	r3, [r7, #8]
 8026802:	895b      	ldrh	r3, [r3, #10]
 8026804:	025b      	lsls	r3, r3, #9
 8026806:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8026808:	6a3b      	ldr	r3, [r7, #32]
 802680a:	2b00      	cmp	r3, #0
 802680c:	d01b      	beq.n	8026846 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 802680e:	683b      	ldr	r3, [r7, #0]
 8026810:	1e5a      	subs	r2, r3, #1
 8026812:	69fb      	ldr	r3, [r7, #28]
 8026814:	fbb2 f2f3 	udiv	r2, r2, r3
 8026818:	6a3b      	ldr	r3, [r7, #32]
 802681a:	1e59      	subs	r1, r3, #1
 802681c:	69fb      	ldr	r3, [r7, #28]
 802681e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8026822:	429a      	cmp	r2, r3
 8026824:	d30f      	bcc.n	8026846 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8026826:	6a3b      	ldr	r3, [r7, #32]
 8026828:	1e5a      	subs	r2, r3, #1
 802682a:	69fb      	ldr	r3, [r7, #28]
 802682c:	425b      	negs	r3, r3
 802682e:	401a      	ands	r2, r3
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8026834:	687b      	ldr	r3, [r7, #4]
 8026836:	699b      	ldr	r3, [r3, #24]
 8026838:	683a      	ldr	r2, [r7, #0]
 802683a:	1ad3      	subs	r3, r2, r3
 802683c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 802683e:	687b      	ldr	r3, [r7, #4]
 8026840:	69db      	ldr	r3, [r3, #28]
 8026842:	63bb      	str	r3, [r7, #56]	; 0x38
 8026844:	e022      	b.n	802688c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8026846:	687b      	ldr	r3, [r7, #4]
 8026848:	689b      	ldr	r3, [r3, #8]
 802684a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 802684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802684e:	2b00      	cmp	r3, #0
 8026850:	d119      	bne.n	8026886 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	2100      	movs	r1, #0
 8026856:	4618      	mov	r0, r3
 8026858:	f7fe f96c 	bl	8024b34 <create_chain>
 802685c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 802685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026860:	2b01      	cmp	r3, #1
 8026862:	d104      	bne.n	802686e <f_lseek+0x28a>
 8026864:	687b      	ldr	r3, [r7, #4]
 8026866:	2202      	movs	r2, #2
 8026868:	755a      	strb	r2, [r3, #21]
 802686a:	2302      	movs	r3, #2
 802686c:	e0bf      	b.n	80269ee <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 802686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026874:	d104      	bne.n	8026880 <f_lseek+0x29c>
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	2201      	movs	r2, #1
 802687a:	755a      	strb	r2, [r3, #21]
 802687c:	2301      	movs	r3, #1
 802687e:	e0b6      	b.n	80269ee <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8026880:	687b      	ldr	r3, [r7, #4]
 8026882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026884:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802688a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 802688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802688e:	2b00      	cmp	r3, #0
 8026890:	d05d      	beq.n	802694e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8026892:	e03a      	b.n	802690a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8026894:	683a      	ldr	r2, [r7, #0]
 8026896:	69fb      	ldr	r3, [r7, #28]
 8026898:	1ad3      	subs	r3, r2, r3
 802689a:	603b      	str	r3, [r7, #0]
 802689c:	687b      	ldr	r3, [r7, #4]
 802689e:	699a      	ldr	r2, [r3, #24]
 80268a0:	69fb      	ldr	r3, [r7, #28]
 80268a2:	441a      	add	r2, r3
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	7d1b      	ldrb	r3, [r3, #20]
 80268ac:	f003 0302 	and.w	r3, r3, #2
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d00b      	beq.n	80268cc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80268b8:	4618      	mov	r0, r3
 80268ba:	f7fe f93b 	bl	8024b34 <create_chain>
 80268be:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80268c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268c2:	2b00      	cmp	r3, #0
 80268c4:	d108      	bne.n	80268d8 <f_lseek+0x2f4>
							ofs = 0; break;
 80268c6:	2300      	movs	r3, #0
 80268c8:	603b      	str	r3, [r7, #0]
 80268ca:	e022      	b.n	8026912 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80268d0:	4618      	mov	r0, r3
 80268d2:	f7fd ff36 	bl	8024742 <get_fat>
 80268d6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80268d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80268de:	d104      	bne.n	80268ea <f_lseek+0x306>
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	2201      	movs	r2, #1
 80268e4:	755a      	strb	r2, [r3, #21]
 80268e6:	2301      	movs	r3, #1
 80268e8:	e081      	b.n	80269ee <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80268ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268ec:	2b01      	cmp	r3, #1
 80268ee:	d904      	bls.n	80268fa <f_lseek+0x316>
 80268f0:	68bb      	ldr	r3, [r7, #8]
 80268f2:	695b      	ldr	r3, [r3, #20]
 80268f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80268f6:	429a      	cmp	r2, r3
 80268f8:	d304      	bcc.n	8026904 <f_lseek+0x320>
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	2202      	movs	r2, #2
 80268fe:	755a      	strb	r2, [r3, #21]
 8026900:	2302      	movs	r3, #2
 8026902:	e074      	b.n	80269ee <f_lseek+0x40a>
					fp->clust = clst;
 8026904:	687b      	ldr	r3, [r7, #4]
 8026906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026908:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 802690a:	683a      	ldr	r2, [r7, #0]
 802690c:	69fb      	ldr	r3, [r7, #28]
 802690e:	429a      	cmp	r2, r3
 8026910:	d8c0      	bhi.n	8026894 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	699a      	ldr	r2, [r3, #24]
 8026916:	683b      	ldr	r3, [r7, #0]
 8026918:	441a      	add	r2, r3
 802691a:	687b      	ldr	r3, [r7, #4]
 802691c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 802691e:	683b      	ldr	r3, [r7, #0]
 8026920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026924:	2b00      	cmp	r3, #0
 8026926:	d012      	beq.n	802694e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8026928:	68bb      	ldr	r3, [r7, #8]
 802692a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802692c:	4618      	mov	r0, r3
 802692e:	f7fd fee9 	bl	8024704 <clust2sect>
 8026932:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8026934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026936:	2b00      	cmp	r3, #0
 8026938:	d104      	bne.n	8026944 <f_lseek+0x360>
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	2202      	movs	r2, #2
 802693e:	755a      	strb	r2, [r3, #21]
 8026940:	2302      	movs	r3, #2
 8026942:	e054      	b.n	80269ee <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8026944:	683b      	ldr	r3, [r7, #0]
 8026946:	0a5b      	lsrs	r3, r3, #9
 8026948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802694a:	4413      	add	r3, r2
 802694c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	699a      	ldr	r2, [r3, #24]
 8026952:	687b      	ldr	r3, [r7, #4]
 8026954:	68db      	ldr	r3, [r3, #12]
 8026956:	429a      	cmp	r2, r3
 8026958:	d90a      	bls.n	8026970 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 802695a:	687b      	ldr	r3, [r7, #4]
 802695c:	699a      	ldr	r2, [r3, #24]
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	7d1b      	ldrb	r3, [r3, #20]
 8026966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802696a:	b2da      	uxtb	r2, r3
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	699b      	ldr	r3, [r3, #24]
 8026974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026978:	2b00      	cmp	r3, #0
 802697a:	d036      	beq.n	80269ea <f_lseek+0x406>
 802697c:	687b      	ldr	r3, [r7, #4]
 802697e:	6a1b      	ldr	r3, [r3, #32]
 8026980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026982:	429a      	cmp	r2, r3
 8026984:	d031      	beq.n	80269ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8026986:	687b      	ldr	r3, [r7, #4]
 8026988:	7d1b      	ldrb	r3, [r3, #20]
 802698a:	b25b      	sxtb	r3, r3
 802698c:	2b00      	cmp	r3, #0
 802698e:	da18      	bge.n	80269c2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8026990:	68bb      	ldr	r3, [r7, #8]
 8026992:	7858      	ldrb	r0, [r3, #1]
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	6a1a      	ldr	r2, [r3, #32]
 802699e:	2301      	movs	r3, #1
 80269a0:	f7fd fb1e 	bl	8023fe0 <disk_write>
 80269a4:	4603      	mov	r3, r0
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	d004      	beq.n	80269b4 <f_lseek+0x3d0>
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	2201      	movs	r2, #1
 80269ae:	755a      	strb	r2, [r3, #21]
 80269b0:	2301      	movs	r3, #1
 80269b2:	e01c      	b.n	80269ee <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	7d1b      	ldrb	r3, [r3, #20]
 80269b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80269bc:	b2da      	uxtb	r2, r3
 80269be:	687b      	ldr	r3, [r7, #4]
 80269c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80269c2:	68bb      	ldr	r3, [r7, #8]
 80269c4:	7858      	ldrb	r0, [r3, #1]
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80269cc:	2301      	movs	r3, #1
 80269ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80269d0:	f7fd fae6 	bl	8023fa0 <disk_read>
 80269d4:	4603      	mov	r3, r0
 80269d6:	2b00      	cmp	r3, #0
 80269d8:	d004      	beq.n	80269e4 <f_lseek+0x400>
 80269da:	687b      	ldr	r3, [r7, #4]
 80269dc:	2201      	movs	r2, #1
 80269de:	755a      	strb	r2, [r3, #21]
 80269e0:	2301      	movs	r3, #1
 80269e2:	e004      	b.n	80269ee <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80269e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80269ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80269ee:	4618      	mov	r0, r3
 80269f0:	3740      	adds	r7, #64	; 0x40
 80269f2:	46bd      	mov	sp, r7
 80269f4:	bd80      	pop	{r7, pc}

080269f6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80269f6:	b580      	push	{r7, lr}
 80269f8:	b086      	sub	sp, #24
 80269fa:	af00      	add	r7, sp, #0
 80269fc:	6078      	str	r0, [r7, #4]
 80269fe:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	2b00      	cmp	r3, #0
 8026a04:	d101      	bne.n	8026a0a <f_opendir+0x14>
 8026a06:	2309      	movs	r3, #9
 8026a08:	e064      	b.n	8026ad4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8026a0e:	f107 010c 	add.w	r1, r7, #12
 8026a12:	463b      	mov	r3, r7
 8026a14:	2200      	movs	r2, #0
 8026a16:	4618      	mov	r0, r3
 8026a18:	f7fe fe02 	bl	8025620 <find_volume>
 8026a1c:	4603      	mov	r3, r0
 8026a1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8026a20:	7dfb      	ldrb	r3, [r7, #23]
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	d14f      	bne.n	8026ac6 <f_opendir+0xd0>
		obj->fs = fs;
 8026a26:	68fa      	ldr	r2, [r7, #12]
 8026a28:	693b      	ldr	r3, [r7, #16]
 8026a2a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8026a2c:	683b      	ldr	r3, [r7, #0]
 8026a2e:	4619      	mov	r1, r3
 8026a30:	6878      	ldr	r0, [r7, #4]
 8026a32:	f7fe fce9 	bl	8025408 <follow_path>
 8026a36:	4603      	mov	r3, r0
 8026a38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8026a3a:	7dfb      	ldrb	r3, [r7, #23]
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	d13d      	bne.n	8026abc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8026a46:	b25b      	sxtb	r3, r3
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	db12      	blt.n	8026a72 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8026a4c:	693b      	ldr	r3, [r7, #16]
 8026a4e:	799b      	ldrb	r3, [r3, #6]
 8026a50:	f003 0310 	and.w	r3, r3, #16
 8026a54:	2b00      	cmp	r3, #0
 8026a56:	d00a      	beq.n	8026a6e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8026a58:	68fa      	ldr	r2, [r7, #12]
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	6a1b      	ldr	r3, [r3, #32]
 8026a5e:	4619      	mov	r1, r3
 8026a60:	4610      	mov	r0, r2
 8026a62:	f7fe faba 	bl	8024fda <ld_clust>
 8026a66:	4602      	mov	r2, r0
 8026a68:	693b      	ldr	r3, [r7, #16]
 8026a6a:	609a      	str	r2, [r3, #8]
 8026a6c:	e001      	b.n	8026a72 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8026a6e:	2305      	movs	r3, #5
 8026a70:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8026a72:	7dfb      	ldrb	r3, [r7, #23]
 8026a74:	2b00      	cmp	r3, #0
 8026a76:	d121      	bne.n	8026abc <f_opendir+0xc6>
				obj->id = fs->id;
 8026a78:	68fb      	ldr	r3, [r7, #12]
 8026a7a:	88da      	ldrh	r2, [r3, #6]
 8026a7c:	693b      	ldr	r3, [r7, #16]
 8026a7e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8026a80:	2100      	movs	r1, #0
 8026a82:	6878      	ldr	r0, [r7, #4]
 8026a84:	f7fe f922 	bl	8024ccc <dir_sdi>
 8026a88:	4603      	mov	r3, r0
 8026a8a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8026a8c:	7dfb      	ldrb	r3, [r7, #23]
 8026a8e:	2b00      	cmp	r3, #0
 8026a90:	d114      	bne.n	8026abc <f_opendir+0xc6>
					if (obj->sclust) {
 8026a92:	693b      	ldr	r3, [r7, #16]
 8026a94:	689b      	ldr	r3, [r3, #8]
 8026a96:	2b00      	cmp	r3, #0
 8026a98:	d00d      	beq.n	8026ab6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8026a9a:	2100      	movs	r1, #0
 8026a9c:	6878      	ldr	r0, [r7, #4]
 8026a9e:	f7fd fc63 	bl	8024368 <inc_lock>
 8026aa2:	4602      	mov	r2, r0
 8026aa4:	693b      	ldr	r3, [r7, #16]
 8026aa6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8026aa8:	693b      	ldr	r3, [r7, #16]
 8026aaa:	691b      	ldr	r3, [r3, #16]
 8026aac:	2b00      	cmp	r3, #0
 8026aae:	d105      	bne.n	8026abc <f_opendir+0xc6>
 8026ab0:	2312      	movs	r3, #18
 8026ab2:	75fb      	strb	r3, [r7, #23]
 8026ab4:	e002      	b.n	8026abc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8026ab6:	693b      	ldr	r3, [r7, #16]
 8026ab8:	2200      	movs	r2, #0
 8026aba:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8026abc:	7dfb      	ldrb	r3, [r7, #23]
 8026abe:	2b04      	cmp	r3, #4
 8026ac0:	d101      	bne.n	8026ac6 <f_opendir+0xd0>
 8026ac2:	2305      	movs	r3, #5
 8026ac4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8026ac6:	7dfb      	ldrb	r3, [r7, #23]
 8026ac8:	2b00      	cmp	r3, #0
 8026aca:	d002      	beq.n	8026ad2 <f_opendir+0xdc>
 8026acc:	693b      	ldr	r3, [r7, #16]
 8026ace:	2200      	movs	r2, #0
 8026ad0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8026ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8026ad4:	4618      	mov	r0, r3
 8026ad6:	3718      	adds	r7, #24
 8026ad8:	46bd      	mov	sp, r7
 8026ada:	bd80      	pop	{r7, pc}

08026adc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8026adc:	b580      	push	{r7, lr}
 8026ade:	b084      	sub	sp, #16
 8026ae0:	af00      	add	r7, sp, #0
 8026ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	f107 0208 	add.w	r2, r7, #8
 8026aea:	4611      	mov	r1, r2
 8026aec:	4618      	mov	r0, r3
 8026aee:	f7fe ffe3 	bl	8025ab8 <validate>
 8026af2:	4603      	mov	r3, r0
 8026af4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8026af6:	7bfb      	ldrb	r3, [r7, #15]
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d110      	bne.n	8026b1e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8026afc:	687b      	ldr	r3, [r7, #4]
 8026afe:	691b      	ldr	r3, [r3, #16]
 8026b00:	2b00      	cmp	r3, #0
 8026b02:	d006      	beq.n	8026b12 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8026b04:	687b      	ldr	r3, [r7, #4]
 8026b06:	691b      	ldr	r3, [r3, #16]
 8026b08:	4618      	mov	r0, r3
 8026b0a:	f7fd fcbb 	bl	8024484 <dec_lock>
 8026b0e:	4603      	mov	r3, r0
 8026b10:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8026b12:	7bfb      	ldrb	r3, [r7, #15]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d102      	bne.n	8026b1e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8026b18:	687b      	ldr	r3, [r7, #4]
 8026b1a:	2200      	movs	r2, #0
 8026b1c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8026b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b20:	4618      	mov	r0, r3
 8026b22:	3710      	adds	r7, #16
 8026b24:	46bd      	mov	sp, r7
 8026b26:	bd80      	pop	{r7, pc}

08026b28 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8026b28:	b580      	push	{r7, lr}
 8026b2a:	b084      	sub	sp, #16
 8026b2c:	af00      	add	r7, sp, #0
 8026b2e:	6078      	str	r0, [r7, #4]
 8026b30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8026b32:	687b      	ldr	r3, [r7, #4]
 8026b34:	f107 0208 	add.w	r2, r7, #8
 8026b38:	4611      	mov	r1, r2
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	f7fe ffbc 	bl	8025ab8 <validate>
 8026b40:	4603      	mov	r3, r0
 8026b42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8026b44:	7bfb      	ldrb	r3, [r7, #15]
 8026b46:	2b00      	cmp	r3, #0
 8026b48:	d126      	bne.n	8026b98 <f_readdir+0x70>
		if (!fno) {
 8026b4a:	683b      	ldr	r3, [r7, #0]
 8026b4c:	2b00      	cmp	r3, #0
 8026b4e:	d106      	bne.n	8026b5e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8026b50:	2100      	movs	r1, #0
 8026b52:	6878      	ldr	r0, [r7, #4]
 8026b54:	f7fe f8ba 	bl	8024ccc <dir_sdi>
 8026b58:	4603      	mov	r3, r0
 8026b5a:	73fb      	strb	r3, [r7, #15]
 8026b5c:	e01c      	b.n	8026b98 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8026b5e:	2100      	movs	r1, #0
 8026b60:	6878      	ldr	r0, [r7, #4]
 8026b62:	f7fe fa79 	bl	8025058 <dir_read>
 8026b66:	4603      	mov	r3, r0
 8026b68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8026b6a:	7bfb      	ldrb	r3, [r7, #15]
 8026b6c:	2b04      	cmp	r3, #4
 8026b6e:	d101      	bne.n	8026b74 <f_readdir+0x4c>
 8026b70:	2300      	movs	r3, #0
 8026b72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8026b74:	7bfb      	ldrb	r3, [r7, #15]
 8026b76:	2b00      	cmp	r3, #0
 8026b78:	d10e      	bne.n	8026b98 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8026b7a:	6839      	ldr	r1, [r7, #0]
 8026b7c:	6878      	ldr	r0, [r7, #4]
 8026b7e:	f7fe fb4f 	bl	8025220 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8026b82:	2100      	movs	r1, #0
 8026b84:	6878      	ldr	r0, [r7, #4]
 8026b86:	f7fe f91c 	bl	8024dc2 <dir_next>
 8026b8a:	4603      	mov	r3, r0
 8026b8c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8026b8e:	7bfb      	ldrb	r3, [r7, #15]
 8026b90:	2b04      	cmp	r3, #4
 8026b92:	d101      	bne.n	8026b98 <f_readdir+0x70>
 8026b94:	2300      	movs	r3, #0
 8026b96:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8026b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b9a:	4618      	mov	r0, r3
 8026b9c:	3710      	adds	r7, #16
 8026b9e:	46bd      	mov	sp, r7
 8026ba0:	bd80      	pop	{r7, pc}

08026ba2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8026ba2:	b580      	push	{r7, lr}
 8026ba4:	b092      	sub	sp, #72	; 0x48
 8026ba6:	af00      	add	r7, sp, #0
 8026ba8:	60f8      	str	r0, [r7, #12]
 8026baa:	60b9      	str	r1, [r7, #8]
 8026bac:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8026bae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8026bb2:	f107 030c 	add.w	r3, r7, #12
 8026bb6:	2200      	movs	r2, #0
 8026bb8:	4618      	mov	r0, r3
 8026bba:	f7fe fd31 	bl	8025620 <find_volume>
 8026bbe:	4603      	mov	r3, r0
 8026bc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8026bc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	f040 8099 	bne.w	8026d00 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8026bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026bd0:	687b      	ldr	r3, [r7, #4]
 8026bd2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8026bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bd6:	691a      	ldr	r2, [r3, #16]
 8026bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bda:	695b      	ldr	r3, [r3, #20]
 8026bdc:	3b02      	subs	r3, #2
 8026bde:	429a      	cmp	r2, r3
 8026be0:	d804      	bhi.n	8026bec <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8026be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026be4:	691a      	ldr	r2, [r3, #16]
 8026be6:	68bb      	ldr	r3, [r7, #8]
 8026be8:	601a      	str	r2, [r3, #0]
 8026bea:	e089      	b.n	8026d00 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8026bec:	2300      	movs	r3, #0
 8026bee:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8026bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bf2:	781b      	ldrb	r3, [r3, #0]
 8026bf4:	2b01      	cmp	r3, #1
 8026bf6:	d128      	bne.n	8026c4a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8026bf8:	2302      	movs	r3, #2
 8026bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026bfe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8026c00:	f107 0314 	add.w	r3, r7, #20
 8026c04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8026c06:	4618      	mov	r0, r3
 8026c08:	f7fd fd9b 	bl	8024742 <get_fat>
 8026c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8026c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026c14:	d103      	bne.n	8026c1e <f_getfree+0x7c>
 8026c16:	2301      	movs	r3, #1
 8026c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8026c1c:	e063      	b.n	8026ce6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8026c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c20:	2b01      	cmp	r3, #1
 8026c22:	d103      	bne.n	8026c2c <f_getfree+0x8a>
 8026c24:	2302      	movs	r3, #2
 8026c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8026c2a:	e05c      	b.n	8026ce6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8026c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026c2e:	2b00      	cmp	r3, #0
 8026c30:	d102      	bne.n	8026c38 <f_getfree+0x96>
 8026c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c34:	3301      	adds	r3, #1
 8026c36:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8026c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026c3a:	3301      	adds	r3, #1
 8026c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c40:	695b      	ldr	r3, [r3, #20]
 8026c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026c44:	429a      	cmp	r2, r3
 8026c46:	d3db      	bcc.n	8026c00 <f_getfree+0x5e>
 8026c48:	e04d      	b.n	8026ce6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8026c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c4c:	695b      	ldr	r3, [r3, #20]
 8026c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c52:	6a1b      	ldr	r3, [r3, #32]
 8026c54:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8026c56:	2300      	movs	r3, #0
 8026c58:	637b      	str	r3, [r7, #52]	; 0x34
 8026c5a:	2300      	movs	r3, #0
 8026c5c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8026c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026c60:	2b00      	cmp	r3, #0
 8026c62:	d113      	bne.n	8026c8c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8026c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026c68:	1c5a      	adds	r2, r3, #1
 8026c6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8026c6c:	4619      	mov	r1, r3
 8026c6e:	f7fd fcad 	bl	80245cc <move_window>
 8026c72:	4603      	mov	r3, r0
 8026c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8026c78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d131      	bne.n	8026ce4 <f_getfree+0x142>
							p = fs->win;
 8026c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c82:	3330      	adds	r3, #48	; 0x30
 8026c84:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8026c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026c8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8026c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c8e:	781b      	ldrb	r3, [r3, #0]
 8026c90:	2b02      	cmp	r3, #2
 8026c92:	d10f      	bne.n	8026cb4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8026c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026c96:	f7fd f9e9 	bl	802406c <ld_word>
 8026c9a:	4603      	mov	r3, r0
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	d102      	bne.n	8026ca6 <f_getfree+0x104>
 8026ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026ca2:	3301      	adds	r3, #1
 8026ca4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8026ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026ca8:	3302      	adds	r3, #2
 8026caa:	633b      	str	r3, [r7, #48]	; 0x30
 8026cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026cae:	3b02      	subs	r3, #2
 8026cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8026cb2:	e010      	b.n	8026cd6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8026cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026cb6:	f7fd f9f1 	bl	802409c <ld_dword>
 8026cba:	4603      	mov	r3, r0
 8026cbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026cc0:	2b00      	cmp	r3, #0
 8026cc2:	d102      	bne.n	8026cca <f_getfree+0x128>
 8026cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026cc6:	3301      	adds	r3, #1
 8026cc8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8026cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026ccc:	3304      	adds	r3, #4
 8026cce:	633b      	str	r3, [r7, #48]	; 0x30
 8026cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026cd2:	3b04      	subs	r3, #4
 8026cd4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8026cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026cd8:	3b01      	subs	r3, #1
 8026cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8026cde:	2b00      	cmp	r3, #0
 8026ce0:	d1bd      	bne.n	8026c5e <f_getfree+0xbc>
 8026ce2:	e000      	b.n	8026ce6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8026ce4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8026ce6:	68bb      	ldr	r3, [r7, #8]
 8026ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026cea:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8026cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026cf0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8026cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026cf4:	791a      	ldrb	r2, [r3, #4]
 8026cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026cf8:	f042 0201 	orr.w	r2, r2, #1
 8026cfc:	b2d2      	uxtb	r2, r2
 8026cfe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8026d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8026d04:	4618      	mov	r0, r3
 8026d06:	3748      	adds	r7, #72	; 0x48
 8026d08:	46bd      	mov	sp, r7
 8026d0a:	bd80      	pop	{r7, pc}

08026d0c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8026d0c:	b580      	push	{r7, lr}
 8026d0e:	b084      	sub	sp, #16
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	6078      	str	r0, [r7, #4]
 8026d14:	460b      	mov	r3, r1
 8026d16:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8026d18:	78fb      	ldrb	r3, [r7, #3]
 8026d1a:	2b0a      	cmp	r3, #10
 8026d1c:	d103      	bne.n	8026d26 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8026d1e:	210d      	movs	r1, #13
 8026d20:	6878      	ldr	r0, [r7, #4]
 8026d22:	f7ff fff3 	bl	8026d0c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	685b      	ldr	r3, [r3, #4]
 8026d2a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8026d2c:	68fb      	ldr	r3, [r7, #12]
 8026d2e:	2b00      	cmp	r3, #0
 8026d30:	db25      	blt.n	8026d7e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8026d32:	68fb      	ldr	r3, [r7, #12]
 8026d34:	1c5a      	adds	r2, r3, #1
 8026d36:	60fa      	str	r2, [r7, #12]
 8026d38:	687a      	ldr	r2, [r7, #4]
 8026d3a:	4413      	add	r3, r2
 8026d3c:	78fa      	ldrb	r2, [r7, #3]
 8026d3e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8026d40:	68fb      	ldr	r3, [r7, #12]
 8026d42:	2b3c      	cmp	r3, #60	; 0x3c
 8026d44:	dd12      	ble.n	8026d6c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8026d46:	687b      	ldr	r3, [r7, #4]
 8026d48:	6818      	ldr	r0, [r3, #0]
 8026d4a:	687b      	ldr	r3, [r7, #4]
 8026d4c:	f103 010c 	add.w	r1, r3, #12
 8026d50:	68fa      	ldr	r2, [r7, #12]
 8026d52:	f107 0308 	add.w	r3, r7, #8
 8026d56:	f7ff fa28 	bl	80261aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8026d5a:	68ba      	ldr	r2, [r7, #8]
 8026d5c:	68fb      	ldr	r3, [r7, #12]
 8026d5e:	429a      	cmp	r2, r3
 8026d60:	d101      	bne.n	8026d66 <putc_bfd+0x5a>
 8026d62:	2300      	movs	r3, #0
 8026d64:	e001      	b.n	8026d6a <putc_bfd+0x5e>
 8026d66:	f04f 33ff 	mov.w	r3, #4294967295
 8026d6a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8026d6c:	687b      	ldr	r3, [r7, #4]
 8026d6e:	68fa      	ldr	r2, [r7, #12]
 8026d70:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	689b      	ldr	r3, [r3, #8]
 8026d76:	1c5a      	adds	r2, r3, #1
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	609a      	str	r2, [r3, #8]
 8026d7c:	e000      	b.n	8026d80 <putc_bfd+0x74>
	if (i < 0) return;
 8026d7e:	bf00      	nop
}
 8026d80:	3710      	adds	r7, #16
 8026d82:	46bd      	mov	sp, r7
 8026d84:	bd80      	pop	{r7, pc}

08026d86 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8026d86:	b580      	push	{r7, lr}
 8026d88:	b084      	sub	sp, #16
 8026d8a:	af00      	add	r7, sp, #0
 8026d8c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	685b      	ldr	r3, [r3, #4]
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	db16      	blt.n	8026dc4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8026d96:	687b      	ldr	r3, [r7, #4]
 8026d98:	6818      	ldr	r0, [r3, #0]
 8026d9a:	687b      	ldr	r3, [r7, #4]
 8026d9c:	f103 010c 	add.w	r1, r3, #12
 8026da0:	687b      	ldr	r3, [r7, #4]
 8026da2:	685b      	ldr	r3, [r3, #4]
 8026da4:	461a      	mov	r2, r3
 8026da6:	f107 030c 	add.w	r3, r7, #12
 8026daa:	f7ff f9fe 	bl	80261aa <f_write>
 8026dae:	4603      	mov	r3, r0
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	d107      	bne.n	8026dc4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8026db4:	687b      	ldr	r3, [r7, #4]
 8026db6:	685b      	ldr	r3, [r3, #4]
 8026db8:	68fa      	ldr	r2, [r7, #12]
 8026dba:	4293      	cmp	r3, r2
 8026dbc:	d102      	bne.n	8026dc4 <putc_flush+0x3e>
 8026dbe:	687b      	ldr	r3, [r7, #4]
 8026dc0:	689b      	ldr	r3, [r3, #8]
 8026dc2:	e001      	b.n	8026dc8 <putc_flush+0x42>
	return EOF;
 8026dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026dc8:	4618      	mov	r0, r3
 8026dca:	3710      	adds	r7, #16
 8026dcc:	46bd      	mov	sp, r7
 8026dce:	bd80      	pop	{r7, pc}

08026dd0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8026dd0:	b480      	push	{r7}
 8026dd2:	b083      	sub	sp, #12
 8026dd4:	af00      	add	r7, sp, #0
 8026dd6:	6078      	str	r0, [r7, #4]
 8026dd8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8026dda:	687b      	ldr	r3, [r7, #4]
 8026ddc:	683a      	ldr	r2, [r7, #0]
 8026dde:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	2200      	movs	r2, #0
 8026de4:	605a      	str	r2, [r3, #4]
 8026de6:	687b      	ldr	r3, [r7, #4]
 8026de8:	685a      	ldr	r2, [r3, #4]
 8026dea:	687b      	ldr	r3, [r7, #4]
 8026dec:	609a      	str	r2, [r3, #8]
}
 8026dee:	bf00      	nop
 8026df0:	370c      	adds	r7, #12
 8026df2:	46bd      	mov	sp, r7
 8026df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026df8:	4770      	bx	lr
	...

08026dfc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8026dfc:	b40e      	push	{r1, r2, r3}
 8026dfe:	b580      	push	{r7, lr}
 8026e00:	b0a7      	sub	sp, #156	; 0x9c
 8026e02:	af00      	add	r7, sp, #0
 8026e04:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8026e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026e0a:	6879      	ldr	r1, [r7, #4]
 8026e0c:	4618      	mov	r0, r3
 8026e0e:	f7ff ffdf 	bl	8026dd0 <putc_init>

	va_start(arp, fmt);
 8026e12:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8026e16:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8026e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026e1c:	1c5a      	adds	r2, r3, #1
 8026e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026e22:	781b      	ldrb	r3, [r3, #0]
 8026e24:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8026e28:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026e2c:	2b00      	cmp	r3, #0
 8026e2e:	f000 81f2 	beq.w	8027216 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8026e32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026e36:	2b25      	cmp	r3, #37	; 0x25
 8026e38:	d008      	beq.n	8026e4c <f_printf+0x50>
			putc_bfd(&pb, c);
 8026e3a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8026e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026e42:	4611      	mov	r1, r2
 8026e44:	4618      	mov	r0, r3
 8026e46:	f7ff ff61 	bl	8026d0c <putc_bfd>
			continue;
 8026e4a:	e1e3      	b.n	8027214 <f_printf+0x418>
		}
		w = f = 0;
 8026e4c:	2300      	movs	r3, #0
 8026e4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8026e52:	2300      	movs	r3, #0
 8026e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8026e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026e5c:	1c5a      	adds	r2, r3, #1
 8026e5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026e62:	781b      	ldrb	r3, [r3, #0]
 8026e64:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8026e68:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026e6c:	2b30      	cmp	r3, #48	; 0x30
 8026e6e:	d10b      	bne.n	8026e88 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8026e70:	2301      	movs	r3, #1
 8026e72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8026e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026e7a:	1c5a      	adds	r2, r3, #1
 8026e7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026e80:	781b      	ldrb	r3, [r3, #0]
 8026e82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8026e86:	e024      	b.n	8026ed2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8026e88:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8026e8e:	d120      	bne.n	8026ed2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8026e90:	2302      	movs	r3, #2
 8026e92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8026e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026e9a:	1c5a      	adds	r2, r3, #1
 8026e9c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026ea0:	781b      	ldrb	r3, [r3, #0]
 8026ea2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8026ea6:	e014      	b.n	8026ed2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8026ea8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026eac:	4613      	mov	r3, r2
 8026eae:	009b      	lsls	r3, r3, #2
 8026eb0:	4413      	add	r3, r2
 8026eb2:	005b      	lsls	r3, r3, #1
 8026eb4:	461a      	mov	r2, r3
 8026eb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026eba:	4413      	add	r3, r2
 8026ebc:	3b30      	subs	r3, #48	; 0x30
 8026ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8026ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026ec6:	1c5a      	adds	r2, r3, #1
 8026ec8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026ecc:	781b      	ldrb	r3, [r3, #0]
 8026ece:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8026ed2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8026ed8:	d903      	bls.n	8026ee2 <f_printf+0xe6>
 8026eda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026ede:	2b39      	cmp	r3, #57	; 0x39
 8026ee0:	d9e2      	bls.n	8026ea8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8026ee2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026ee6:	2b6c      	cmp	r3, #108	; 0x6c
 8026ee8:	d003      	beq.n	8026ef2 <f_printf+0xf6>
 8026eea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026eee:	2b4c      	cmp	r3, #76	; 0x4c
 8026ef0:	d10d      	bne.n	8026f0e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8026ef2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8026ef6:	f043 0304 	orr.w	r3, r3, #4
 8026efa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8026efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8026f02:	1c5a      	adds	r2, r3, #1
 8026f04:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8026f08:	781b      	ldrb	r3, [r3, #0]
 8026f0a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8026f0e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026f12:	2b00      	cmp	r3, #0
 8026f14:	f000 8181 	beq.w	802721a <f_printf+0x41e>
		d = c;
 8026f18:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8026f1c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8026f20:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8026f24:	2b60      	cmp	r3, #96	; 0x60
 8026f26:	d908      	bls.n	8026f3a <f_printf+0x13e>
 8026f28:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8026f2c:	2b7a      	cmp	r3, #122	; 0x7a
 8026f2e:	d804      	bhi.n	8026f3a <f_printf+0x13e>
 8026f30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8026f34:	3b20      	subs	r3, #32
 8026f36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8026f3a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8026f3e:	3b42      	subs	r3, #66	; 0x42
 8026f40:	2b16      	cmp	r3, #22
 8026f42:	f200 8098 	bhi.w	8027076 <f_printf+0x27a>
 8026f46:	a201      	add	r2, pc, #4	; (adr r2, 8026f4c <f_printf+0x150>)
 8026f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026f4c:	08027057 	.word	0x08027057
 8026f50:	0802703f 	.word	0x0802703f
 8026f54:	08027067 	.word	0x08027067
 8026f58:	08027077 	.word	0x08027077
 8026f5c:	08027077 	.word	0x08027077
 8026f60:	08027077 	.word	0x08027077
 8026f64:	08027077 	.word	0x08027077
 8026f68:	08027077 	.word	0x08027077
 8026f6c:	08027077 	.word	0x08027077
 8026f70:	08027077 	.word	0x08027077
 8026f74:	08027077 	.word	0x08027077
 8026f78:	08027077 	.word	0x08027077
 8026f7c:	08027077 	.word	0x08027077
 8026f80:	0802705f 	.word	0x0802705f
 8026f84:	08027077 	.word	0x08027077
 8026f88:	08027077 	.word	0x08027077
 8026f8c:	08027077 	.word	0x08027077
 8026f90:	08026fa9 	.word	0x08026fa9
 8026f94:	08027077 	.word	0x08027077
 8026f98:	08027067 	.word	0x08027067
 8026f9c:	08027077 	.word	0x08027077
 8026fa0:	08027077 	.word	0x08027077
 8026fa4:	0802706f 	.word	0x0802706f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8026fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8026faa:	1d1a      	adds	r2, r3, #4
 8026fac:	67ba      	str	r2, [r7, #120]	; 0x78
 8026fae:	681b      	ldr	r3, [r3, #0]
 8026fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8026fb2:	2300      	movs	r3, #0
 8026fb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8026fb8:	e004      	b.n	8026fc4 <f_printf+0x1c8>
 8026fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026fbe:	3301      	adds	r3, #1
 8026fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8026fc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8026fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026fca:	4413      	add	r3, r2
 8026fcc:	781b      	ldrb	r3, [r3, #0]
 8026fce:	2b00      	cmp	r3, #0
 8026fd0:	d1f3      	bne.n	8026fba <f_printf+0x1be>
			if (!(f & 2)) {
 8026fd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8026fd6:	f003 0302 	and.w	r3, r3, #2
 8026fda:	2b00      	cmp	r3, #0
 8026fdc:	d11a      	bne.n	8027014 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8026fde:	e005      	b.n	8026fec <f_printf+0x1f0>
 8026fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8026fe4:	2120      	movs	r1, #32
 8026fe6:	4618      	mov	r0, r3
 8026fe8:	f7ff fe90 	bl	8026d0c <putc_bfd>
 8026fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026ff0:	1c5a      	adds	r2, r3, #1
 8026ff2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8026ff6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8026ffa:	429a      	cmp	r2, r3
 8026ffc:	d8f0      	bhi.n	8026fe0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8026ffe:	e009      	b.n	8027014 <f_printf+0x218>
 8027000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8027002:	1c5a      	adds	r2, r3, #1
 8027004:	67fa      	str	r2, [r7, #124]	; 0x7c
 8027006:	781a      	ldrb	r2, [r3, #0]
 8027008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802700c:	4611      	mov	r1, r2
 802700e:	4618      	mov	r0, r3
 8027010:	f7ff fe7c 	bl	8026d0c <putc_bfd>
 8027014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8027016:	781b      	ldrb	r3, [r3, #0]
 8027018:	2b00      	cmp	r3, #0
 802701a:	d1f1      	bne.n	8027000 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 802701c:	e005      	b.n	802702a <f_printf+0x22e>
 802701e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8027022:	2120      	movs	r1, #32
 8027024:	4618      	mov	r0, r3
 8027026:	f7ff fe71 	bl	8026d0c <putc_bfd>
 802702a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802702e:	1c5a      	adds	r2, r3, #1
 8027030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8027034:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8027038:	429a      	cmp	r2, r3
 802703a:	d8f0      	bhi.n	802701e <f_printf+0x222>
			continue;
 802703c:	e0ea      	b.n	8027214 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 802703e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027040:	1d1a      	adds	r2, r3, #4
 8027042:	67ba      	str	r2, [r7, #120]	; 0x78
 8027044:	681b      	ldr	r3, [r3, #0]
 8027046:	b2da      	uxtb	r2, r3
 8027048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802704c:	4611      	mov	r1, r2
 802704e:	4618      	mov	r0, r3
 8027050:	f7ff fe5c 	bl	8026d0c <putc_bfd>
 8027054:	e0de      	b.n	8027214 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8027056:	2302      	movs	r3, #2
 8027058:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 802705c:	e014      	b.n	8027088 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 802705e:	2308      	movs	r3, #8
 8027060:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8027064:	e010      	b.n	8027088 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8027066:	230a      	movs	r3, #10
 8027068:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 802706c:	e00c      	b.n	8027088 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 802706e:	2310      	movs	r3, #16
 8027070:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8027074:	e008      	b.n	8027088 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8027076:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 802707a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802707e:	4611      	mov	r1, r2
 8027080:	4618      	mov	r0, r3
 8027082:	f7ff fe43 	bl	8026d0c <putc_bfd>
 8027086:	e0c5      	b.n	8027214 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8027088:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 802708c:	f003 0304 	and.w	r3, r3, #4
 8027090:	2b00      	cmp	r3, #0
 8027092:	d004      	beq.n	802709e <f_printf+0x2a2>
 8027094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8027096:	1d1a      	adds	r2, r3, #4
 8027098:	67ba      	str	r2, [r7, #120]	; 0x78
 802709a:	681b      	ldr	r3, [r3, #0]
 802709c:	e00c      	b.n	80270b8 <f_printf+0x2bc>
 802709e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80270a2:	2b44      	cmp	r3, #68	; 0x44
 80270a4:	d104      	bne.n	80270b0 <f_printf+0x2b4>
 80270a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80270a8:	1d1a      	adds	r2, r3, #4
 80270aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80270ac:	681b      	ldr	r3, [r3, #0]
 80270ae:	e003      	b.n	80270b8 <f_printf+0x2bc>
 80270b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80270b2:	1d1a      	adds	r2, r3, #4
 80270b4:	67ba      	str	r2, [r7, #120]	; 0x78
 80270b6:	681b      	ldr	r3, [r3, #0]
 80270b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80270bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80270c0:	2b44      	cmp	r3, #68	; 0x44
 80270c2:	d10e      	bne.n	80270e2 <f_printf+0x2e6>
 80270c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80270c8:	2b00      	cmp	r3, #0
 80270ca:	da0a      	bge.n	80270e2 <f_printf+0x2e6>
			v = 0 - v;
 80270cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80270d0:	425b      	negs	r3, r3
 80270d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80270d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80270da:	f043 0308 	orr.w	r3, r3, #8
 80270de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80270e2:	2300      	movs	r3, #0
 80270e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80270e8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80270ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80270f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80270f4:	fb01 f202 	mul.w	r2, r1, r2
 80270f8:	1a9b      	subs	r3, r3, r2
 80270fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80270fe:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8027102:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8027106:	fbb2 f3f3 	udiv	r3, r2, r3
 802710a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 802710e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8027112:	2b09      	cmp	r3, #9
 8027114:	d90b      	bls.n	802712e <f_printf+0x332>
 8027116:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802711a:	2b78      	cmp	r3, #120	; 0x78
 802711c:	d101      	bne.n	8027122 <f_printf+0x326>
 802711e:	2227      	movs	r2, #39	; 0x27
 8027120:	e000      	b.n	8027124 <f_printf+0x328>
 8027122:	2207      	movs	r2, #7
 8027124:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8027128:	4413      	add	r3, r2
 802712a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 802712e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8027132:	1c5a      	adds	r2, r3, #1
 8027134:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8027138:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 802713c:	3230      	adds	r2, #48	; 0x30
 802713e:	b2d2      	uxtb	r2, r2
 8027140:	3398      	adds	r3, #152	; 0x98
 8027142:	443b      	add	r3, r7
 8027144:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8027148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802714c:	2b00      	cmp	r3, #0
 802714e:	d003      	beq.n	8027158 <f_printf+0x35c>
 8027150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8027154:	2b1f      	cmp	r3, #31
 8027156:	d9c7      	bls.n	80270e8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8027158:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 802715c:	f003 0308 	and.w	r3, r3, #8
 8027160:	2b00      	cmp	r3, #0
 8027162:	d009      	beq.n	8027178 <f_printf+0x37c>
 8027164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8027168:	1c5a      	adds	r2, r3, #1
 802716a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 802716e:	3398      	adds	r3, #152	; 0x98
 8027170:	443b      	add	r3, r7
 8027172:	222d      	movs	r2, #45	; 0x2d
 8027174:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8027178:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802717c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8027180:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8027184:	f003 0301 	and.w	r3, r3, #1
 8027188:	2b00      	cmp	r3, #0
 802718a:	d001      	beq.n	8027190 <f_printf+0x394>
 802718c:	2330      	movs	r3, #48	; 0x30
 802718e:	e000      	b.n	8027192 <f_printf+0x396>
 8027190:	2320      	movs	r3, #32
 8027192:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8027196:	e007      	b.n	80271a8 <f_printf+0x3ac>
 8027198:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 802719c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80271a0:	4611      	mov	r1, r2
 80271a2:	4618      	mov	r0, r3
 80271a4:	f7ff fdb2 	bl	8026d0c <putc_bfd>
 80271a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80271ac:	f003 0302 	and.w	r3, r3, #2
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	d108      	bne.n	80271c6 <f_printf+0x3ca>
 80271b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80271b8:	1c5a      	adds	r2, r3, #1
 80271ba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80271be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80271c2:	429a      	cmp	r2, r3
 80271c4:	d8e8      	bhi.n	8027198 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80271c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80271ca:	3b01      	subs	r3, #1
 80271cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80271d0:	f107 020c 	add.w	r2, r7, #12
 80271d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80271d8:	4413      	add	r3, r2
 80271da:	781a      	ldrb	r2, [r3, #0]
 80271dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80271e0:	4611      	mov	r1, r2
 80271e2:	4618      	mov	r0, r3
 80271e4:	f7ff fd92 	bl	8026d0c <putc_bfd>
		} while (i);
 80271e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80271ec:	2b00      	cmp	r3, #0
 80271ee:	d1ea      	bne.n	80271c6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80271f0:	e007      	b.n	8027202 <f_printf+0x406>
 80271f2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80271f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80271fa:	4611      	mov	r1, r2
 80271fc:	4618      	mov	r0, r3
 80271fe:	f7ff fd85 	bl	8026d0c <putc_bfd>
 8027202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8027206:	1c5a      	adds	r2, r3, #1
 8027208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802720c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8027210:	429a      	cmp	r2, r3
 8027212:	d8ee      	bhi.n	80271f2 <f_printf+0x3f6>
		c = *fmt++;
 8027214:	e600      	b.n	8026e18 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8027216:	bf00      	nop
 8027218:	e000      	b.n	802721c <f_printf+0x420>
		if (!c) break;
 802721a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 802721c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8027220:	4618      	mov	r0, r3
 8027222:	f7ff fdb0 	bl	8026d86 <putc_flush>
 8027226:	4603      	mov	r3, r0
}
 8027228:	4618      	mov	r0, r3
 802722a:	379c      	adds	r7, #156	; 0x9c
 802722c:	46bd      	mov	sp, r7
 802722e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8027232:	b003      	add	sp, #12
 8027234:	4770      	bx	lr
 8027236:	bf00      	nop

08027238 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8027238:	b480      	push	{r7}
 802723a:	b087      	sub	sp, #28
 802723c:	af00      	add	r7, sp, #0
 802723e:	60f8      	str	r0, [r7, #12]
 8027240:	60b9      	str	r1, [r7, #8]
 8027242:	4613      	mov	r3, r2
 8027244:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8027246:	2301      	movs	r3, #1
 8027248:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 802724a:	2300      	movs	r3, #0
 802724c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 802724e:	4b1f      	ldr	r3, [pc, #124]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027250:	7a5b      	ldrb	r3, [r3, #9]
 8027252:	b2db      	uxtb	r3, r3
 8027254:	2b00      	cmp	r3, #0
 8027256:	d131      	bne.n	80272bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8027258:	4b1c      	ldr	r3, [pc, #112]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 802725a:	7a5b      	ldrb	r3, [r3, #9]
 802725c:	b2db      	uxtb	r3, r3
 802725e:	461a      	mov	r2, r3
 8027260:	4b1a      	ldr	r3, [pc, #104]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027262:	2100      	movs	r1, #0
 8027264:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8027266:	4b19      	ldr	r3, [pc, #100]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027268:	7a5b      	ldrb	r3, [r3, #9]
 802726a:	b2db      	uxtb	r3, r3
 802726c:	4a17      	ldr	r2, [pc, #92]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 802726e:	009b      	lsls	r3, r3, #2
 8027270:	4413      	add	r3, r2
 8027272:	68fa      	ldr	r2, [r7, #12]
 8027274:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8027276:	4b15      	ldr	r3, [pc, #84]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027278:	7a5b      	ldrb	r3, [r3, #9]
 802727a:	b2db      	uxtb	r3, r3
 802727c:	461a      	mov	r2, r3
 802727e:	4b13      	ldr	r3, [pc, #76]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027280:	4413      	add	r3, r2
 8027282:	79fa      	ldrb	r2, [r7, #7]
 8027284:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8027286:	4b11      	ldr	r3, [pc, #68]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027288:	7a5b      	ldrb	r3, [r3, #9]
 802728a:	b2db      	uxtb	r3, r3
 802728c:	1c5a      	adds	r2, r3, #1
 802728e:	b2d1      	uxtb	r1, r2
 8027290:	4a0e      	ldr	r2, [pc, #56]	; (80272cc <FATFS_LinkDriverEx+0x94>)
 8027292:	7251      	strb	r1, [r2, #9]
 8027294:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8027296:	7dbb      	ldrb	r3, [r7, #22]
 8027298:	3330      	adds	r3, #48	; 0x30
 802729a:	b2da      	uxtb	r2, r3
 802729c:	68bb      	ldr	r3, [r7, #8]
 802729e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80272a0:	68bb      	ldr	r3, [r7, #8]
 80272a2:	3301      	adds	r3, #1
 80272a4:	223a      	movs	r2, #58	; 0x3a
 80272a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80272a8:	68bb      	ldr	r3, [r7, #8]
 80272aa:	3302      	adds	r3, #2
 80272ac:	222f      	movs	r2, #47	; 0x2f
 80272ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80272b0:	68bb      	ldr	r3, [r7, #8]
 80272b2:	3303      	adds	r3, #3
 80272b4:	2200      	movs	r2, #0
 80272b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80272b8:	2300      	movs	r3, #0
 80272ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80272bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80272be:	4618      	mov	r0, r3
 80272c0:	371c      	adds	r7, #28
 80272c2:	46bd      	mov	sp, r7
 80272c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272c8:	4770      	bx	lr
 80272ca:	bf00      	nop
 80272cc:	20002660 	.word	0x20002660

080272d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80272d0:	b580      	push	{r7, lr}
 80272d2:	b082      	sub	sp, #8
 80272d4:	af00      	add	r7, sp, #0
 80272d6:	6078      	str	r0, [r7, #4]
 80272d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80272da:	2200      	movs	r2, #0
 80272dc:	6839      	ldr	r1, [r7, #0]
 80272de:	6878      	ldr	r0, [r7, #4]
 80272e0:	f7ff ffaa 	bl	8027238 <FATFS_LinkDriverEx>
 80272e4:	4603      	mov	r3, r0
}
 80272e6:	4618      	mov	r0, r3
 80272e8:	3708      	adds	r7, #8
 80272ea:	46bd      	mov	sp, r7
 80272ec:	bd80      	pop	{r7, pc}
	...

080272f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80272f0:	b580      	push	{r7, lr}
 80272f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80272f4:	2200      	movs	r2, #0
 80272f6:	4912      	ldr	r1, [pc, #72]	; (8027340 <MX_USB_DEVICE_Init+0x50>)
 80272f8:	4812      	ldr	r0, [pc, #72]	; (8027344 <MX_USB_DEVICE_Init+0x54>)
 80272fa:	f7fb fb17 	bl	802292c <USBD_Init>
 80272fe:	4603      	mov	r3, r0
 8027300:	2b00      	cmp	r3, #0
 8027302:	d001      	beq.n	8027308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8027304:	f7e2 f846 	bl	8009394 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8027308:	490f      	ldr	r1, [pc, #60]	; (8027348 <MX_USB_DEVICE_Init+0x58>)
 802730a:	480e      	ldr	r0, [pc, #56]	; (8027344 <MX_USB_DEVICE_Init+0x54>)
 802730c:	f7fb fb3e 	bl	802298c <USBD_RegisterClass>
 8027310:	4603      	mov	r3, r0
 8027312:	2b00      	cmp	r3, #0
 8027314:	d001      	beq.n	802731a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8027316:	f7e2 f83d 	bl	8009394 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802731a:	490c      	ldr	r1, [pc, #48]	; (802734c <MX_USB_DEVICE_Init+0x5c>)
 802731c:	4809      	ldr	r0, [pc, #36]	; (8027344 <MX_USB_DEVICE_Init+0x54>)
 802731e:	f7fb fa2f 	bl	8022780 <USBD_CDC_RegisterInterface>
 8027322:	4603      	mov	r3, r0
 8027324:	2b00      	cmp	r3, #0
 8027326:	d001      	beq.n	802732c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8027328:	f7e2 f834 	bl	8009394 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802732c:	4805      	ldr	r0, [pc, #20]	; (8027344 <MX_USB_DEVICE_Init+0x54>)
 802732e:	f7fb fb63 	bl	80229f8 <USBD_Start>
 8027332:	4603      	mov	r3, r0
 8027334:	2b00      	cmp	r3, #0
 8027336:	d001      	beq.n	802733c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8027338:	f7e2 f82c 	bl	8009394 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802733c:	bf00      	nop
 802733e:	bd80      	pop	{r7, pc}
 8027340:	20000480 	.word	0x20000480
 8027344:	2000266c 	.word	0x2000266c
 8027348:	200003e0 	.word	0x200003e0
 802734c:	2000046c 	.word	0x2000046c

08027350 <cdcAvailable>:
uint8_t  rx_buf[1024];
bool     rx_full = false;


uint32_t cdcAvailable(void)
{
 8027350:	b480      	push	{r7}
 8027352:	b083      	sub	sp, #12
 8027354:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8027356:	4b0a      	ldr	r3, [pc, #40]	; (8027380 <cdcAvailable+0x30>)
 8027358:	681a      	ldr	r2, [r3, #0]
 802735a:	4b0a      	ldr	r3, [pc, #40]	; (8027384 <cdcAvailable+0x34>)
 802735c:	681b      	ldr	r3, [r3, #0]
 802735e:	1ad3      	subs	r3, r2, r3
 8027360:	4a09      	ldr	r2, [pc, #36]	; (8027388 <cdcAvailable+0x38>)
 8027362:	6812      	ldr	r2, [r2, #0]
 8027364:	fbb3 f1f2 	udiv	r1, r3, r2
 8027368:	fb01 f202 	mul.w	r2, r1, r2
 802736c:	1a9b      	subs	r3, r3, r2
 802736e:	607b      	str	r3, [r7, #4]

  return ret;
 8027370:	687b      	ldr	r3, [r7, #4]
}
 8027372:	4618      	mov	r0, r3
 8027374:	370c      	adds	r7, #12
 8027376:	46bd      	mov	sp, r7
 8027378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802737c:	4770      	bx	lr
 802737e:	bf00      	nop
 8027380:	20002948 	.word	0x20002948
 8027384:	2000294c 	.word	0x2000294c
 8027388:	20000468 	.word	0x20000468

0802738c <cdcRead>:

uint8_t cdcRead(void)
{
 802738c:	b480      	push	{r7}
 802738e:	b083      	sub	sp, #12
 8027390:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8027392:	4b0f      	ldr	r3, [pc, #60]	; (80273d0 <cdcRead+0x44>)
 8027394:	681b      	ldr	r3, [r3, #0]
 8027396:	4a0f      	ldr	r2, [pc, #60]	; (80273d4 <cdcRead+0x48>)
 8027398:	5cd3      	ldrb	r3, [r2, r3]
 802739a:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 802739c:	4b0c      	ldr	r3, [pc, #48]	; (80273d0 <cdcRead+0x44>)
 802739e:	681a      	ldr	r2, [r3, #0]
 80273a0:	4b0d      	ldr	r3, [pc, #52]	; (80273d8 <cdcRead+0x4c>)
 80273a2:	681b      	ldr	r3, [r3, #0]
 80273a4:	429a      	cmp	r2, r3
 80273a6:	d00b      	beq.n	80273c0 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 80273a8:	4b09      	ldr	r3, [pc, #36]	; (80273d0 <cdcRead+0x44>)
 80273aa:	681b      	ldr	r3, [r3, #0]
 80273ac:	3301      	adds	r3, #1
 80273ae:	4a0b      	ldr	r2, [pc, #44]	; (80273dc <cdcRead+0x50>)
 80273b0:	6812      	ldr	r2, [r2, #0]
 80273b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80273b6:	fb01 f202 	mul.w	r2, r1, r2
 80273ba:	1a9b      	subs	r3, r3, r2
 80273bc:	4a04      	ldr	r2, [pc, #16]	; (80273d0 <cdcRead+0x44>)
 80273be:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80273c0:	79fb      	ldrb	r3, [r7, #7]
}
 80273c2:	4618      	mov	r0, r3
 80273c4:	370c      	adds	r7, #12
 80273c6:	46bd      	mov	sp, r7
 80273c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273cc:	4770      	bx	lr
 80273ce:	bf00      	nop
 80273d0:	2000294c 	.word	0x2000294c
 80273d4:	20002950 	.word	0x20002950
 80273d8:	20002948 	.word	0x20002948
 80273dc:	20000468 	.word	0x20000468

080273e0 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80273e0:	b480      	push	{r7}
 80273e2:	b085      	sub	sp, #20
 80273e4:	af00      	add	r7, sp, #0
 80273e6:	4603      	mov	r3, r0
 80273e8:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 80273ea:	4b0f      	ldr	r3, [pc, #60]	; (8027428 <cdcDataIn+0x48>)
 80273ec:	681b      	ldr	r3, [r3, #0]
 80273ee:	490f      	ldr	r1, [pc, #60]	; (802742c <cdcDataIn+0x4c>)
 80273f0:	79fa      	ldrb	r2, [r7, #7]
 80273f2:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 80273f4:	4b0c      	ldr	r3, [pc, #48]	; (8027428 <cdcDataIn+0x48>)
 80273f6:	681b      	ldr	r3, [r3, #0]
 80273f8:	3301      	adds	r3, #1
 80273fa:	4a0d      	ldr	r2, [pc, #52]	; (8027430 <cdcDataIn+0x50>)
 80273fc:	6812      	ldr	r2, [r2, #0]
 80273fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8027402:	fb01 f202 	mul.w	r2, r1, r2
 8027406:	1a9b      	subs	r3, r3, r2
 8027408:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 802740a:	4b0a      	ldr	r3, [pc, #40]	; (8027434 <cdcDataIn+0x54>)
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	68fa      	ldr	r2, [r7, #12]
 8027410:	429a      	cmp	r2, r3
 8027412:	d002      	beq.n	802741a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8027414:	4a04      	ldr	r2, [pc, #16]	; (8027428 <cdcDataIn+0x48>)
 8027416:	68fb      	ldr	r3, [r7, #12]
 8027418:	6013      	str	r3, [r2, #0]
  }
}
 802741a:	bf00      	nop
 802741c:	3714      	adds	r7, #20
 802741e:	46bd      	mov	sp, r7
 8027420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027424:	4770      	bx	lr
 8027426:	bf00      	nop
 8027428:	20002948 	.word	0x20002948
 802742c:	20002950 	.word	0x20002950
 8027430:	20000468 	.word	0x20000468
 8027434:	2000294c 	.word	0x2000294c

08027438 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8027438:	b580      	push	{r7, lr}
 802743a:	b084      	sub	sp, #16
 802743c:	af00      	add	r7, sp, #0
 802743e:	6078      	str	r0, [r7, #4]
 8027440:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8027442:	f7e1 fef0 	bl	8009226 <millis>
 8027446:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8027448:	683b      	ldr	r3, [r7, #0]
 802744a:	b29b      	uxth	r3, r3
 802744c:	4619      	mov	r1, r3
 802744e:	6878      	ldr	r0, [r7, #4]
 8027450:	f000 f956 	bl	8027700 <CDC_Transmit_FS>
 8027454:	4603      	mov	r3, r0
 8027456:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 8027458:	7afb      	ldrb	r3, [r7, #11]
 802745a:	2b00      	cmp	r3, #0
 802745c:	d101      	bne.n	8027462 <cdcWrite+0x2a>
    {
      return length;
 802745e:	683b      	ldr	r3, [r7, #0]
 8027460:	e00e      	b.n	8027480 <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 8027462:	7afb      	ldrb	r3, [r7, #11]
 8027464:	2b03      	cmp	r3, #3
 8027466:	d101      	bne.n	802746c <cdcWrite+0x34>
    {
      return 0;
 8027468:	2300      	movs	r3, #0
 802746a:	e009      	b.n	8027480 <cdcWrite+0x48>
    }

    if (millis()-pre_time >= 100)
 802746c:	f7e1 fedb 	bl	8009226 <millis>
 8027470:	4602      	mov	r2, r0
 8027472:	68fb      	ldr	r3, [r7, #12]
 8027474:	1ad3      	subs	r3, r2, r3
 8027476:	2b63      	cmp	r3, #99	; 0x63
 8027478:	d800      	bhi.n	802747c <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 802747a:	e7e5      	b.n	8027448 <cdcWrite+0x10>
    {
      break;
 802747c:	bf00      	nop
    }
  }

  return 0;
 802747e:	2300      	movs	r3, #0
}
 8027480:	4618      	mov	r0, r3
 8027482:	3710      	adds	r7, #16
 8027484:	46bd      	mov	sp, r7
 8027486:	bd80      	pop	{r7, pc}

08027488 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 8027488:	b480      	push	{r7}
 802748a:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 802748c:	4b03      	ldr	r3, [pc, #12]	; (802749c <cdcGetBaud+0x14>)
 802748e:	681b      	ldr	r3, [r3, #0]
}
 8027490:	4618      	mov	r0, r3
 8027492:	46bd      	mov	sp, r7
 8027494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027498:	4770      	bx	lr
 802749a:	bf00      	nop
 802749c:	20000460 	.word	0x20000460

080274a0 <USBD_CDC_SOF>:

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 80274a0:	b590      	push	{r4, r7, lr}
 80274a2:	b085      	sub	sp, #20
 80274a4:	af00      	add	r7, sp, #0
 80274a6:	6078      	str	r0, [r7, #4]

  if (rx_full == true)
 80274a8:	4b0c      	ldr	r3, [pc, #48]	; (80274dc <USBD_CDC_SOF+0x3c>)
 80274aa:	781b      	ldrb	r3, [r3, #0]
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	d010      	beq.n	80274d2 <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    buf_len = (rx_len - cdcAvailable()) - 1;
 80274b0:	4b0b      	ldr	r3, [pc, #44]	; (80274e0 <USBD_CDC_SOF+0x40>)
 80274b2:	681c      	ldr	r4, [r3, #0]
 80274b4:	f7ff ff4c 	bl	8027350 <cdcAvailable>
 80274b8:	4603      	mov	r3, r0
 80274ba:	1ae3      	subs	r3, r4, r3
 80274bc:	3b01      	subs	r3, #1
 80274be:	60fb      	str	r3, [r7, #12]

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80274c0:	68fb      	ldr	r3, [r7, #12]
 80274c2:	2b3f      	cmp	r3, #63	; 0x3f
 80274c4:	d905      	bls.n	80274d2 <USBD_CDC_SOF+0x32>
    {
      USBD_CDC_ReceivePacket(pdev);
 80274c6:	6878      	ldr	r0, [r7, #4]
 80274c8:	f7fb f9fa 	bl	80228c0 <USBD_CDC_ReceivePacket>
      rx_full = false;
 80274cc:	4b03      	ldr	r3, [pc, #12]	; (80274dc <USBD_CDC_SOF+0x3c>)
 80274ce:	2200      	movs	r2, #0
 80274d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 80274d2:	2300      	movs	r3, #0
}
 80274d4:	4618      	mov	r0, r3
 80274d6:	3714      	adds	r7, #20
 80274d8:	46bd      	mov	sp, r7
 80274da:	bd90      	pop	{r4, r7, pc}
 80274dc:	20003ecf 	.word	0x20003ecf
 80274e0:	20000468 	.word	0x20000468

080274e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80274e4:	b580      	push	{r7, lr}
 80274e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80274e8:	2200      	movs	r2, #0
 80274ea:	4905      	ldr	r1, [pc, #20]	; (8027500 <CDC_Init_FS+0x1c>)
 80274ec:	4805      	ldr	r0, [pc, #20]	; (8027504 <CDC_Init_FS+0x20>)
 80274ee:	f7fb f961 	bl	80227b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80274f2:	4905      	ldr	r1, [pc, #20]	; (8027508 <CDC_Init_FS+0x24>)
 80274f4:	4803      	ldr	r0, [pc, #12]	; (8027504 <CDC_Init_FS+0x20>)
 80274f6:	f7fb f97f 	bl	80227f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80274fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80274fc:	4618      	mov	r0, r3
 80274fe:	bd80      	pop	{r7, pc}
 8027500:	20003150 	.word	0x20003150
 8027504:	2000266c 	.word	0x2000266c
 8027508:	20002d50 	.word	0x20002d50

0802750c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 802750c:	b480      	push	{r7}
 802750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8027510:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8027512:	4618      	mov	r0, r3
 8027514:	46bd      	mov	sp, r7
 8027516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802751a:	4770      	bx	lr

0802751c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802751c:	b480      	push	{r7}
 802751e:	b083      	sub	sp, #12
 8027520:	af00      	add	r7, sp, #0
 8027522:	4603      	mov	r3, r0
 8027524:	6039      	str	r1, [r7, #0]
 8027526:	71fb      	strb	r3, [r7, #7]
 8027528:	4613      	mov	r3, r2
 802752a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802752c:	79fb      	ldrb	r3, [r7, #7]
 802752e:	2b23      	cmp	r3, #35	; 0x23
 8027530:	f200 80a3 	bhi.w	802767a <CDC_Control_FS+0x15e>
 8027534:	a201      	add	r2, pc, #4	; (adr r2, 802753c <CDC_Control_FS+0x20>)
 8027536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802753a:	bf00      	nop
 802753c:	0802767b 	.word	0x0802767b
 8027540:	0802767b 	.word	0x0802767b
 8027544:	0802767b 	.word	0x0802767b
 8027548:	0802767b 	.word	0x0802767b
 802754c:	0802767b 	.word	0x0802767b
 8027550:	0802767b 	.word	0x0802767b
 8027554:	0802767b 	.word	0x0802767b
 8027558:	0802767b 	.word	0x0802767b
 802755c:	0802767b 	.word	0x0802767b
 8027560:	0802767b 	.word	0x0802767b
 8027564:	0802767b 	.word	0x0802767b
 8027568:	0802767b 	.word	0x0802767b
 802756c:	0802767b 	.word	0x0802767b
 8027570:	0802767b 	.word	0x0802767b
 8027574:	0802767b 	.word	0x0802767b
 8027578:	0802767b 	.word	0x0802767b
 802757c:	0802767b 	.word	0x0802767b
 8027580:	0802767b 	.word	0x0802767b
 8027584:	0802767b 	.word	0x0802767b
 8027588:	0802767b 	.word	0x0802767b
 802758c:	0802767b 	.word	0x0802767b
 8027590:	0802767b 	.word	0x0802767b
 8027594:	0802767b 	.word	0x0802767b
 8027598:	0802767b 	.word	0x0802767b
 802759c:	0802767b 	.word	0x0802767b
 80275a0:	0802767b 	.word	0x0802767b
 80275a4:	0802767b 	.word	0x0802767b
 80275a8:	0802767b 	.word	0x0802767b
 80275ac:	0802767b 	.word	0x0802767b
 80275b0:	0802767b 	.word	0x0802767b
 80275b4:	0802767b 	.word	0x0802767b
 80275b8:	0802767b 	.word	0x0802767b
 80275bc:	080275cd 	.word	0x080275cd
 80275c0:	08027627 	.word	0x08027627
 80275c4:	0802767b 	.word	0x0802767b
 80275c8:	0802767b 	.word	0x0802767b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 80275cc:	683b      	ldr	r3, [r7, #0]
 80275ce:	781b      	ldrb	r3, [r3, #0]
 80275d0:	461a      	mov	r2, r3
 80275d2:	4b2e      	ldr	r3, [pc, #184]	; (802768c <CDC_Control_FS+0x170>)
 80275d4:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 80275d6:	4b2d      	ldr	r3, [pc, #180]	; (802768c <CDC_Control_FS+0x170>)
 80275d8:	681b      	ldr	r3, [r3, #0]
 80275da:	683a      	ldr	r2, [r7, #0]
 80275dc:	3201      	adds	r2, #1
 80275de:	7812      	ldrb	r2, [r2, #0]
 80275e0:	0212      	lsls	r2, r2, #8
 80275e2:	4313      	orrs	r3, r2
 80275e4:	4a29      	ldr	r2, [pc, #164]	; (802768c <CDC_Control_FS+0x170>)
 80275e6:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 80275e8:	4b28      	ldr	r3, [pc, #160]	; (802768c <CDC_Control_FS+0x170>)
 80275ea:	681b      	ldr	r3, [r3, #0]
 80275ec:	683a      	ldr	r2, [r7, #0]
 80275ee:	3202      	adds	r2, #2
 80275f0:	7812      	ldrb	r2, [r2, #0]
 80275f2:	0412      	lsls	r2, r2, #16
 80275f4:	4313      	orrs	r3, r2
 80275f6:	4a25      	ldr	r2, [pc, #148]	; (802768c <CDC_Control_FS+0x170>)
 80275f8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 80275fa:	4b24      	ldr	r3, [pc, #144]	; (802768c <CDC_Control_FS+0x170>)
 80275fc:	681b      	ldr	r3, [r3, #0]
 80275fe:	683a      	ldr	r2, [r7, #0]
 8027600:	3203      	adds	r2, #3
 8027602:	7812      	ldrb	r2, [r2, #0]
 8027604:	0612      	lsls	r2, r2, #24
 8027606:	4313      	orrs	r3, r2
 8027608:	4a20      	ldr	r2, [pc, #128]	; (802768c <CDC_Control_FS+0x170>)
 802760a:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 802760c:	683b      	ldr	r3, [r7, #0]
 802760e:	791a      	ldrb	r2, [r3, #4]
 8027610:	4b1e      	ldr	r3, [pc, #120]	; (802768c <CDC_Control_FS+0x170>)
 8027612:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8027614:	683b      	ldr	r3, [r7, #0]
 8027616:	795a      	ldrb	r2, [r3, #5]
 8027618:	4b1c      	ldr	r3, [pc, #112]	; (802768c <CDC_Control_FS+0x170>)
 802761a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 802761c:	683b      	ldr	r3, [r7, #0]
 802761e:	799a      	ldrb	r2, [r3, #6]
 8027620:	4b1a      	ldr	r3, [pc, #104]	; (802768c <CDC_Control_FS+0x170>)
 8027622:	719a      	strb	r2, [r3, #6]
    break;
 8027624:	e02a      	b.n	802767c <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8027626:	4b19      	ldr	r3, [pc, #100]	; (802768c <CDC_Control_FS+0x170>)
 8027628:	681b      	ldr	r3, [r3, #0]
 802762a:	b2da      	uxtb	r2, r3
 802762c:	683b      	ldr	r3, [r7, #0]
 802762e:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8027630:	4b16      	ldr	r3, [pc, #88]	; (802768c <CDC_Control_FS+0x170>)
 8027632:	681b      	ldr	r3, [r3, #0]
 8027634:	0a1a      	lsrs	r2, r3, #8
 8027636:	683b      	ldr	r3, [r7, #0]
 8027638:	3301      	adds	r3, #1
 802763a:	b2d2      	uxtb	r2, r2
 802763c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 802763e:	4b13      	ldr	r3, [pc, #76]	; (802768c <CDC_Control_FS+0x170>)
 8027640:	681b      	ldr	r3, [r3, #0]
 8027642:	0c1a      	lsrs	r2, r3, #16
 8027644:	683b      	ldr	r3, [r7, #0]
 8027646:	3302      	adds	r3, #2
 8027648:	b2d2      	uxtb	r2, r2
 802764a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 802764c:	4b0f      	ldr	r3, [pc, #60]	; (802768c <CDC_Control_FS+0x170>)
 802764e:	681b      	ldr	r3, [r3, #0]
 8027650:	0e1a      	lsrs	r2, r3, #24
 8027652:	683b      	ldr	r3, [r7, #0]
 8027654:	3303      	adds	r3, #3
 8027656:	b2d2      	uxtb	r2, r2
 8027658:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 802765a:	683b      	ldr	r3, [r7, #0]
 802765c:	3304      	adds	r3, #4
 802765e:	4a0b      	ldr	r2, [pc, #44]	; (802768c <CDC_Control_FS+0x170>)
 8027660:	7912      	ldrb	r2, [r2, #4]
 8027662:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8027664:	683b      	ldr	r3, [r7, #0]
 8027666:	3305      	adds	r3, #5
 8027668:	4a08      	ldr	r2, [pc, #32]	; (802768c <CDC_Control_FS+0x170>)
 802766a:	7952      	ldrb	r2, [r2, #5]
 802766c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 802766e:	683b      	ldr	r3, [r7, #0]
 8027670:	3306      	adds	r3, #6
 8027672:	4a06      	ldr	r2, [pc, #24]	; (802768c <CDC_Control_FS+0x170>)
 8027674:	7992      	ldrb	r2, [r2, #6]
 8027676:	701a      	strb	r2, [r3, #0]

    break;
 8027678:	e000      	b.n	802767c <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802767a:	bf00      	nop
  }

  return (USBD_OK);
 802767c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802767e:	4618      	mov	r0, r3
 8027680:	370c      	adds	r7, #12
 8027682:	46bd      	mov	sp, r7
 8027684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027688:	4770      	bx	lr
 802768a:	bf00      	nop
 802768c:	20000460 	.word	0x20000460

08027690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8027690:	b590      	push	{r4, r7, lr}
 8027692:	b085      	sub	sp, #20
 8027694:	af00      	add	r7, sp, #0
 8027696:	6078      	str	r0, [r7, #4]
 8027698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i=0; i<*Len; i++)
 802769a:	2300      	movs	r3, #0
 802769c:	60fb      	str	r3, [r7, #12]
 802769e:	e009      	b.n	80276b4 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 80276a0:	68fb      	ldr	r3, [r7, #12]
 80276a2:	687a      	ldr	r2, [r7, #4]
 80276a4:	4413      	add	r3, r2
 80276a6:	781b      	ldrb	r3, [r3, #0]
 80276a8:	4618      	mov	r0, r3
 80276aa:	f7ff fe99 	bl	80273e0 <cdcDataIn>
  for (int i=0; i<*Len; i++)
 80276ae:	68fb      	ldr	r3, [r7, #12]
 80276b0:	3301      	adds	r3, #1
 80276b2:	60fb      	str	r3, [r7, #12]
 80276b4:	683b      	ldr	r3, [r7, #0]
 80276b6:	681a      	ldr	r2, [r3, #0]
 80276b8:	68fb      	ldr	r3, [r7, #12]
 80276ba:	429a      	cmp	r2, r3
 80276bc:	d8f0      	bhi.n	80276a0 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  buf_len = (rx_len - cdcAvailable()) - 1;
 80276be:	4b0d      	ldr	r3, [pc, #52]	; (80276f4 <CDC_Receive_FS+0x64>)
 80276c0:	681c      	ldr	r4, [r3, #0]
 80276c2:	f7ff fe45 	bl	8027350 <cdcAvailable>
 80276c6:	4603      	mov	r3, r0
 80276c8:	1ae3      	subs	r3, r4, r3
 80276ca:	3b01      	subs	r3, #1
 80276cc:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80276ce:	68bb      	ldr	r3, [r7, #8]
 80276d0:	2b3f      	cmp	r3, #63	; 0x3f
 80276d2:	d907      	bls.n	80276e4 <CDC_Receive_FS+0x54>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80276d4:	6879      	ldr	r1, [r7, #4]
 80276d6:	4808      	ldr	r0, [pc, #32]	; (80276f8 <CDC_Receive_FS+0x68>)
 80276d8:	f7fb f88e 	bl	80227f8 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80276dc:	4806      	ldr	r0, [pc, #24]	; (80276f8 <CDC_Receive_FS+0x68>)
 80276de:	f7fb f8ef 	bl	80228c0 <USBD_CDC_ReceivePacket>
 80276e2:	e002      	b.n	80276ea <CDC_Receive_FS+0x5a>
  }
  else
  {
    rx_full = true;
 80276e4:	4b05      	ldr	r3, [pc, #20]	; (80276fc <CDC_Receive_FS+0x6c>)
 80276e6:	2201      	movs	r2, #1
 80276e8:	701a      	strb	r2, [r3, #0]
  }
  return (USBD_OK);
 80276ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80276ec:	4618      	mov	r0, r3
 80276ee:	3714      	adds	r7, #20
 80276f0:	46bd      	mov	sp, r7
 80276f2:	bd90      	pop	{r4, r7, pc}
 80276f4:	20000468 	.word	0x20000468
 80276f8:	2000266c 	.word	0x2000266c
 80276fc:	20003ecf 	.word	0x20003ecf

08027700 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8027700:	b580      	push	{r7, lr}
 8027702:	b084      	sub	sp, #16
 8027704:	af00      	add	r7, sp, #0
 8027706:	6078      	str	r0, [r7, #4]
 8027708:	460b      	mov	r3, r1
 802770a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 802770c:	2300      	movs	r3, #0
 802770e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8027710:	4b0d      	ldr	r3, [pc, #52]	; (8027748 <CDC_Transmit_FS+0x48>)
 8027712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8027716:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8027718:	68bb      	ldr	r3, [r7, #8]
 802771a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802771e:	2b00      	cmp	r3, #0
 8027720:	d001      	beq.n	8027726 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8027722:	2301      	movs	r3, #1
 8027724:	e00b      	b.n	802773e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8027726:	887b      	ldrh	r3, [r7, #2]
 8027728:	461a      	mov	r2, r3
 802772a:	6879      	ldr	r1, [r7, #4]
 802772c:	4806      	ldr	r0, [pc, #24]	; (8027748 <CDC_Transmit_FS+0x48>)
 802772e:	f7fb f841 	bl	80227b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8027732:	4805      	ldr	r0, [pc, #20]	; (8027748 <CDC_Transmit_FS+0x48>)
 8027734:	f7fb f87e 	bl	8022834 <USBD_CDC_TransmitPacket>
 8027738:	4603      	mov	r3, r0
 802773a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 802773c:	7bfb      	ldrb	r3, [r7, #15]
}
 802773e:	4618      	mov	r0, r3
 8027740:	3710      	adds	r7, #16
 8027742:	46bd      	mov	sp, r7
 8027744:	bd80      	pop	{r7, pc}
 8027746:	bf00      	nop
 8027748:	2000266c 	.word	0x2000266c

0802774c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 802774c:	b480      	push	{r7}
 802774e:	b087      	sub	sp, #28
 8027750:	af00      	add	r7, sp, #0
 8027752:	60f8      	str	r0, [r7, #12]
 8027754:	60b9      	str	r1, [r7, #8]
 8027756:	4613      	mov	r3, r2
 8027758:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 802775a:	2300      	movs	r3, #0
 802775c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 802775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027762:	4618      	mov	r0, r3
 8027764:	371c      	adds	r7, #28
 8027766:	46bd      	mov	sp, r7
 8027768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802776c:	4770      	bx	lr
	...

08027770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8027770:	b480      	push	{r7}
 8027772:	b083      	sub	sp, #12
 8027774:	af00      	add	r7, sp, #0
 8027776:	4603      	mov	r3, r0
 8027778:	6039      	str	r1, [r7, #0]
 802777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802777c:	683b      	ldr	r3, [r7, #0]
 802777e:	2212      	movs	r2, #18
 8027780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8027782:	4b03      	ldr	r3, [pc, #12]	; (8027790 <USBD_FS_DeviceDescriptor+0x20>)
}
 8027784:	4618      	mov	r0, r3
 8027786:	370c      	adds	r7, #12
 8027788:	46bd      	mov	sp, r7
 802778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802778e:	4770      	bx	lr
 8027790:	2000049c 	.word	0x2000049c

08027794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8027794:	b480      	push	{r7}
 8027796:	b083      	sub	sp, #12
 8027798:	af00      	add	r7, sp, #0
 802779a:	4603      	mov	r3, r0
 802779c:	6039      	str	r1, [r7, #0]
 802779e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80277a0:	683b      	ldr	r3, [r7, #0]
 80277a2:	2204      	movs	r2, #4
 80277a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80277a6:	4b03      	ldr	r3, [pc, #12]	; (80277b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80277a8:	4618      	mov	r0, r3
 80277aa:	370c      	adds	r7, #12
 80277ac:	46bd      	mov	sp, r7
 80277ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b2:	4770      	bx	lr
 80277b4:	200004b0 	.word	0x200004b0

080277b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80277b8:	b580      	push	{r7, lr}
 80277ba:	b082      	sub	sp, #8
 80277bc:	af00      	add	r7, sp, #0
 80277be:	4603      	mov	r3, r0
 80277c0:	6039      	str	r1, [r7, #0]
 80277c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80277c4:	79fb      	ldrb	r3, [r7, #7]
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	d105      	bne.n	80277d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80277ca:	683a      	ldr	r2, [r7, #0]
 80277cc:	4907      	ldr	r1, [pc, #28]	; (80277ec <USBD_FS_ProductStrDescriptor+0x34>)
 80277ce:	4808      	ldr	r0, [pc, #32]	; (80277f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80277d0:	f7fc fac6 	bl	8023d60 <USBD_GetString>
 80277d4:	e004      	b.n	80277e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80277d6:	683a      	ldr	r2, [r7, #0]
 80277d8:	4904      	ldr	r1, [pc, #16]	; (80277ec <USBD_FS_ProductStrDescriptor+0x34>)
 80277da:	4805      	ldr	r0, [pc, #20]	; (80277f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80277dc:	f7fc fac0 	bl	8023d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80277e0:	4b02      	ldr	r3, [pc, #8]	; (80277ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80277e2:	4618      	mov	r0, r3
 80277e4:	3708      	adds	r7, #8
 80277e6:	46bd      	mov	sp, r7
 80277e8:	bd80      	pop	{r7, pc}
 80277ea:	bf00      	nop
 80277ec:	20003550 	.word	0x20003550
 80277f0:	0802c930 	.word	0x0802c930

080277f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80277f4:	b580      	push	{r7, lr}
 80277f6:	b082      	sub	sp, #8
 80277f8:	af00      	add	r7, sp, #0
 80277fa:	4603      	mov	r3, r0
 80277fc:	6039      	str	r1, [r7, #0]
 80277fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8027800:	683a      	ldr	r2, [r7, #0]
 8027802:	4904      	ldr	r1, [pc, #16]	; (8027814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8027804:	4804      	ldr	r0, [pc, #16]	; (8027818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8027806:	f7fc faab 	bl	8023d60 <USBD_GetString>
  return USBD_StrDesc;
 802780a:	4b02      	ldr	r3, [pc, #8]	; (8027814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 802780c:	4618      	mov	r0, r3
 802780e:	3708      	adds	r7, #8
 8027810:	46bd      	mov	sp, r7
 8027812:	bd80      	pop	{r7, pc}
 8027814:	20003550 	.word	0x20003550
 8027818:	0802c948 	.word	0x0802c948

0802781c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802781c:	b580      	push	{r7, lr}
 802781e:	b082      	sub	sp, #8
 8027820:	af00      	add	r7, sp, #0
 8027822:	4603      	mov	r3, r0
 8027824:	6039      	str	r1, [r7, #0]
 8027826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8027828:	683b      	ldr	r3, [r7, #0]
 802782a:	221a      	movs	r2, #26
 802782c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802782e:	f000 f843 	bl	80278b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8027832:	4b02      	ldr	r3, [pc, #8]	; (802783c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8027834:	4618      	mov	r0, r3
 8027836:	3708      	adds	r7, #8
 8027838:	46bd      	mov	sp, r7
 802783a:	bd80      	pop	{r7, pc}
 802783c:	200004b4 	.word	0x200004b4

08027840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8027840:	b580      	push	{r7, lr}
 8027842:	b082      	sub	sp, #8
 8027844:	af00      	add	r7, sp, #0
 8027846:	4603      	mov	r3, r0
 8027848:	6039      	str	r1, [r7, #0]
 802784a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802784c:	79fb      	ldrb	r3, [r7, #7]
 802784e:	2b00      	cmp	r3, #0
 8027850:	d105      	bne.n	802785e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8027852:	683a      	ldr	r2, [r7, #0]
 8027854:	4907      	ldr	r1, [pc, #28]	; (8027874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8027856:	4808      	ldr	r0, [pc, #32]	; (8027878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8027858:	f7fc fa82 	bl	8023d60 <USBD_GetString>
 802785c:	e004      	b.n	8027868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802785e:	683a      	ldr	r2, [r7, #0]
 8027860:	4904      	ldr	r1, [pc, #16]	; (8027874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8027862:	4805      	ldr	r0, [pc, #20]	; (8027878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8027864:	f7fc fa7c 	bl	8023d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8027868:	4b02      	ldr	r3, [pc, #8]	; (8027874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802786a:	4618      	mov	r0, r3
 802786c:	3708      	adds	r7, #8
 802786e:	46bd      	mov	sp, r7
 8027870:	bd80      	pop	{r7, pc}
 8027872:	bf00      	nop
 8027874:	20003550 	.word	0x20003550
 8027878:	0802c95c 	.word	0x0802c95c

0802787c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802787c:	b580      	push	{r7, lr}
 802787e:	b082      	sub	sp, #8
 8027880:	af00      	add	r7, sp, #0
 8027882:	4603      	mov	r3, r0
 8027884:	6039      	str	r1, [r7, #0]
 8027886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8027888:	79fb      	ldrb	r3, [r7, #7]
 802788a:	2b00      	cmp	r3, #0
 802788c:	d105      	bne.n	802789a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802788e:	683a      	ldr	r2, [r7, #0]
 8027890:	4907      	ldr	r1, [pc, #28]	; (80278b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8027892:	4808      	ldr	r0, [pc, #32]	; (80278b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8027894:	f7fc fa64 	bl	8023d60 <USBD_GetString>
 8027898:	e004      	b.n	80278a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802789a:	683a      	ldr	r2, [r7, #0]
 802789c:	4904      	ldr	r1, [pc, #16]	; (80278b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802789e:	4805      	ldr	r0, [pc, #20]	; (80278b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80278a0:	f7fc fa5e 	bl	8023d60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80278a4:	4b02      	ldr	r3, [pc, #8]	; (80278b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80278a6:	4618      	mov	r0, r3
 80278a8:	3708      	adds	r7, #8
 80278aa:	46bd      	mov	sp, r7
 80278ac:	bd80      	pop	{r7, pc}
 80278ae:	bf00      	nop
 80278b0:	20003550 	.word	0x20003550
 80278b4:	0802c968 	.word	0x0802c968

080278b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80278b8:	b580      	push	{r7, lr}
 80278ba:	b084      	sub	sp, #16
 80278bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80278be:	4b0f      	ldr	r3, [pc, #60]	; (80278fc <Get_SerialNum+0x44>)
 80278c0:	681b      	ldr	r3, [r3, #0]
 80278c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80278c4:	4b0e      	ldr	r3, [pc, #56]	; (8027900 <Get_SerialNum+0x48>)
 80278c6:	681b      	ldr	r3, [r3, #0]
 80278c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80278ca:	4b0e      	ldr	r3, [pc, #56]	; (8027904 <Get_SerialNum+0x4c>)
 80278cc:	681b      	ldr	r3, [r3, #0]
 80278ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80278d0:	68fa      	ldr	r2, [r7, #12]
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	4413      	add	r3, r2
 80278d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80278d8:	68fb      	ldr	r3, [r7, #12]
 80278da:	2b00      	cmp	r3, #0
 80278dc:	d009      	beq.n	80278f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80278de:	2208      	movs	r2, #8
 80278e0:	4909      	ldr	r1, [pc, #36]	; (8027908 <Get_SerialNum+0x50>)
 80278e2:	68f8      	ldr	r0, [r7, #12]
 80278e4:	f000 f814 	bl	8027910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80278e8:	2204      	movs	r2, #4
 80278ea:	4908      	ldr	r1, [pc, #32]	; (802790c <Get_SerialNum+0x54>)
 80278ec:	68b8      	ldr	r0, [r7, #8]
 80278ee:	f000 f80f 	bl	8027910 <IntToUnicode>
  }
}
 80278f2:	bf00      	nop
 80278f4:	3710      	adds	r7, #16
 80278f6:	46bd      	mov	sp, r7
 80278f8:	bd80      	pop	{r7, pc}
 80278fa:	bf00      	nop
 80278fc:	1fff7a10 	.word	0x1fff7a10
 8027900:	1fff7a14 	.word	0x1fff7a14
 8027904:	1fff7a18 	.word	0x1fff7a18
 8027908:	200004b6 	.word	0x200004b6
 802790c:	200004c6 	.word	0x200004c6

08027910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8027910:	b480      	push	{r7}
 8027912:	b087      	sub	sp, #28
 8027914:	af00      	add	r7, sp, #0
 8027916:	60f8      	str	r0, [r7, #12]
 8027918:	60b9      	str	r1, [r7, #8]
 802791a:	4613      	mov	r3, r2
 802791c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802791e:	2300      	movs	r3, #0
 8027920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8027922:	2300      	movs	r3, #0
 8027924:	75fb      	strb	r3, [r7, #23]
 8027926:	e027      	b.n	8027978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8027928:	68fb      	ldr	r3, [r7, #12]
 802792a:	0f1b      	lsrs	r3, r3, #28
 802792c:	2b09      	cmp	r3, #9
 802792e:	d80b      	bhi.n	8027948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8027930:	68fb      	ldr	r3, [r7, #12]
 8027932:	0f1b      	lsrs	r3, r3, #28
 8027934:	b2da      	uxtb	r2, r3
 8027936:	7dfb      	ldrb	r3, [r7, #23]
 8027938:	005b      	lsls	r3, r3, #1
 802793a:	4619      	mov	r1, r3
 802793c:	68bb      	ldr	r3, [r7, #8]
 802793e:	440b      	add	r3, r1
 8027940:	3230      	adds	r2, #48	; 0x30
 8027942:	b2d2      	uxtb	r2, r2
 8027944:	701a      	strb	r2, [r3, #0]
 8027946:	e00a      	b.n	802795e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8027948:	68fb      	ldr	r3, [r7, #12]
 802794a:	0f1b      	lsrs	r3, r3, #28
 802794c:	b2da      	uxtb	r2, r3
 802794e:	7dfb      	ldrb	r3, [r7, #23]
 8027950:	005b      	lsls	r3, r3, #1
 8027952:	4619      	mov	r1, r3
 8027954:	68bb      	ldr	r3, [r7, #8]
 8027956:	440b      	add	r3, r1
 8027958:	3237      	adds	r2, #55	; 0x37
 802795a:	b2d2      	uxtb	r2, r2
 802795c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802795e:	68fb      	ldr	r3, [r7, #12]
 8027960:	011b      	lsls	r3, r3, #4
 8027962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8027964:	7dfb      	ldrb	r3, [r7, #23]
 8027966:	005b      	lsls	r3, r3, #1
 8027968:	3301      	adds	r3, #1
 802796a:	68ba      	ldr	r2, [r7, #8]
 802796c:	4413      	add	r3, r2
 802796e:	2200      	movs	r2, #0
 8027970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8027972:	7dfb      	ldrb	r3, [r7, #23]
 8027974:	3301      	adds	r3, #1
 8027976:	75fb      	strb	r3, [r7, #23]
 8027978:	7dfa      	ldrb	r2, [r7, #23]
 802797a:	79fb      	ldrb	r3, [r7, #7]
 802797c:	429a      	cmp	r2, r3
 802797e:	d3d3      	bcc.n	8027928 <IntToUnicode+0x18>
  }
}
 8027980:	bf00      	nop
 8027982:	bf00      	nop
 8027984:	371c      	adds	r7, #28
 8027986:	46bd      	mov	sp, r7
 8027988:	f85d 7b04 	ldr.w	r7, [sp], #4
 802798c:	4770      	bx	lr
	...

08027990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8027990:	b580      	push	{r7, lr}
 8027992:	b08a      	sub	sp, #40	; 0x28
 8027994:	af00      	add	r7, sp, #0
 8027996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027998:	f107 0314 	add.w	r3, r7, #20
 802799c:	2200      	movs	r2, #0
 802799e:	601a      	str	r2, [r3, #0]
 80279a0:	605a      	str	r2, [r3, #4]
 80279a2:	609a      	str	r2, [r3, #8]
 80279a4:	60da      	str	r2, [r3, #12]
 80279a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80279a8:	687b      	ldr	r3, [r7, #4]
 80279aa:	681b      	ldr	r3, [r3, #0]
 80279ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80279b0:	d13a      	bne.n	8027a28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80279b2:	2300      	movs	r3, #0
 80279b4:	613b      	str	r3, [r7, #16]
 80279b6:	4b1e      	ldr	r3, [pc, #120]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 80279b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279ba:	4a1d      	ldr	r2, [pc, #116]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 80279bc:	f043 0301 	orr.w	r3, r3, #1
 80279c0:	6313      	str	r3, [r2, #48]	; 0x30
 80279c2:	4b1b      	ldr	r3, [pc, #108]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 80279c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279c6:	f003 0301 	and.w	r3, r3, #1
 80279ca:	613b      	str	r3, [r7, #16]
 80279cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80279ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80279d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80279d4:	2302      	movs	r3, #2
 80279d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80279d8:	2300      	movs	r3, #0
 80279da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80279dc:	2303      	movs	r3, #3
 80279de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80279e0:	230a      	movs	r3, #10
 80279e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80279e4:	f107 0314 	add.w	r3, r7, #20
 80279e8:	4619      	mov	r1, r3
 80279ea:	4812      	ldr	r0, [pc, #72]	; (8027a34 <HAL_PCD_MspInit+0xa4>)
 80279ec:	f7f1 feda 	bl	80197a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80279f0:	4b0f      	ldr	r3, [pc, #60]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 80279f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80279f4:	4a0e      	ldr	r2, [pc, #56]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 80279f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80279fa:	6353      	str	r3, [r2, #52]	; 0x34
 80279fc:	2300      	movs	r3, #0
 80279fe:	60fb      	str	r3, [r7, #12]
 8027a00:	4b0b      	ldr	r3, [pc, #44]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 8027a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027a04:	4a0a      	ldr	r2, [pc, #40]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 8027a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8027a0c:	4b08      	ldr	r3, [pc, #32]	; (8027a30 <HAL_PCD_MspInit+0xa0>)
 8027a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027a14:	60fb      	str	r3, [r7, #12]
 8027a16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8027a18:	2200      	movs	r2, #0
 8027a1a:	2100      	movs	r1, #0
 8027a1c:	2043      	movs	r0, #67	; 0x43
 8027a1e:	f7f0 ff9c 	bl	801895a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8027a22:	2043      	movs	r0, #67	; 0x43
 8027a24:	f7f0 ffb5 	bl	8018992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8027a28:	bf00      	nop
 8027a2a:	3728      	adds	r7, #40	; 0x28
 8027a2c:	46bd      	mov	sp, r7
 8027a2e:	bd80      	pop	{r7, pc}
 8027a30:	40023800 	.word	0x40023800
 8027a34:	40020000 	.word	0x40020000

08027a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027a38:	b580      	push	{r7, lr}
 8027a3a:	b082      	sub	sp, #8
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8027a40:	687b      	ldr	r3, [r7, #4]
 8027a42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8027a46:	687b      	ldr	r3, [r7, #4]
 8027a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8027a4c:	4619      	mov	r1, r3
 8027a4e:	4610      	mov	r0, r2
 8027a50:	f7fb f81f 	bl	8022a92 <USBD_LL_SetupStage>
}
 8027a54:	bf00      	nop
 8027a56:	3708      	adds	r7, #8
 8027a58:	46bd      	mov	sp, r7
 8027a5a:	bd80      	pop	{r7, pc}

08027a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027a5c:	b580      	push	{r7, lr}
 8027a5e:	b082      	sub	sp, #8
 8027a60:	af00      	add	r7, sp, #0
 8027a62:	6078      	str	r0, [r7, #4]
 8027a64:	460b      	mov	r3, r1
 8027a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8027a68:	687b      	ldr	r3, [r7, #4]
 8027a6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8027a6e:	78fa      	ldrb	r2, [r7, #3]
 8027a70:	6879      	ldr	r1, [r7, #4]
 8027a72:	4613      	mov	r3, r2
 8027a74:	00db      	lsls	r3, r3, #3
 8027a76:	4413      	add	r3, r2
 8027a78:	009b      	lsls	r3, r3, #2
 8027a7a:	440b      	add	r3, r1
 8027a7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8027a80:	681a      	ldr	r2, [r3, #0]
 8027a82:	78fb      	ldrb	r3, [r7, #3]
 8027a84:	4619      	mov	r1, r3
 8027a86:	f7fb f859 	bl	8022b3c <USBD_LL_DataOutStage>
}
 8027a8a:	bf00      	nop
 8027a8c:	3708      	adds	r7, #8
 8027a8e:	46bd      	mov	sp, r7
 8027a90:	bd80      	pop	{r7, pc}

08027a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027a92:	b580      	push	{r7, lr}
 8027a94:	b082      	sub	sp, #8
 8027a96:	af00      	add	r7, sp, #0
 8027a98:	6078      	str	r0, [r7, #4]
 8027a9a:	460b      	mov	r3, r1
 8027a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8027a9e:	687b      	ldr	r3, [r7, #4]
 8027aa0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8027aa4:	78fa      	ldrb	r2, [r7, #3]
 8027aa6:	6879      	ldr	r1, [r7, #4]
 8027aa8:	4613      	mov	r3, r2
 8027aaa:	00db      	lsls	r3, r3, #3
 8027aac:	4413      	add	r3, r2
 8027aae:	009b      	lsls	r3, r3, #2
 8027ab0:	440b      	add	r3, r1
 8027ab2:	334c      	adds	r3, #76	; 0x4c
 8027ab4:	681a      	ldr	r2, [r3, #0]
 8027ab6:	78fb      	ldrb	r3, [r7, #3]
 8027ab8:	4619      	mov	r1, r3
 8027aba:	f7fb f8f6 	bl	8022caa <USBD_LL_DataInStage>
}
 8027abe:	bf00      	nop
 8027ac0:	3708      	adds	r7, #8
 8027ac2:	46bd      	mov	sp, r7
 8027ac4:	bd80      	pop	{r7, pc}

08027ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027ac6:	b580      	push	{r7, lr}
 8027ac8:	b082      	sub	sp, #8
 8027aca:	af00      	add	r7, sp, #0
 8027acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8027ace:	687b      	ldr	r3, [r7, #4]
 8027ad0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027ad4:	4618      	mov	r0, r3
 8027ad6:	f7fb fa2a 	bl	8022f2e <USBD_LL_SOF>
}
 8027ada:	bf00      	nop
 8027adc:	3708      	adds	r7, #8
 8027ade:	46bd      	mov	sp, r7
 8027ae0:	bd80      	pop	{r7, pc}

08027ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027ae2:	b580      	push	{r7, lr}
 8027ae4:	b084      	sub	sp, #16
 8027ae6:	af00      	add	r7, sp, #0
 8027ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8027aea:	2301      	movs	r3, #1
 8027aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8027aee:	687b      	ldr	r3, [r7, #4]
 8027af0:	68db      	ldr	r3, [r3, #12]
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d102      	bne.n	8027afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8027af6:	2300      	movs	r3, #0
 8027af8:	73fb      	strb	r3, [r7, #15]
 8027afa:	e008      	b.n	8027b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8027afc:	687b      	ldr	r3, [r7, #4]
 8027afe:	68db      	ldr	r3, [r3, #12]
 8027b00:	2b02      	cmp	r3, #2
 8027b02:	d102      	bne.n	8027b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8027b04:	2301      	movs	r3, #1
 8027b06:	73fb      	strb	r3, [r7, #15]
 8027b08:	e001      	b.n	8027b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8027b0a:	f7e1 fc43 	bl	8009394 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8027b0e:	687b      	ldr	r3, [r7, #4]
 8027b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027b14:	7bfa      	ldrb	r2, [r7, #15]
 8027b16:	4611      	mov	r1, r2
 8027b18:	4618      	mov	r0, r3
 8027b1a:	f7fb f9ca 	bl	8022eb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027b24:	4618      	mov	r0, r3
 8027b26:	f7fb f972 	bl	8022e0e <USBD_LL_Reset>
}
 8027b2a:	bf00      	nop
 8027b2c:	3710      	adds	r7, #16
 8027b2e:	46bd      	mov	sp, r7
 8027b30:	bd80      	pop	{r7, pc}
	...

08027b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027b34:	b580      	push	{r7, lr}
 8027b36:	b082      	sub	sp, #8
 8027b38:	af00      	add	r7, sp, #0
 8027b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027b42:	4618      	mov	r0, r3
 8027b44:	f7fb f9c5 	bl	8022ed2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8027b48:	687b      	ldr	r3, [r7, #4]
 8027b4a:	681b      	ldr	r3, [r3, #0]
 8027b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8027b50:	681b      	ldr	r3, [r3, #0]
 8027b52:	687a      	ldr	r2, [r7, #4]
 8027b54:	6812      	ldr	r2, [r2, #0]
 8027b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8027b5a:	f043 0301 	orr.w	r3, r3, #1
 8027b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	6a1b      	ldr	r3, [r3, #32]
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	d005      	beq.n	8027b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8027b68:	4b04      	ldr	r3, [pc, #16]	; (8027b7c <HAL_PCD_SuspendCallback+0x48>)
 8027b6a:	691b      	ldr	r3, [r3, #16]
 8027b6c:	4a03      	ldr	r2, [pc, #12]	; (8027b7c <HAL_PCD_SuspendCallback+0x48>)
 8027b6e:	f043 0306 	orr.w	r3, r3, #6
 8027b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8027b74:	bf00      	nop
 8027b76:	3708      	adds	r7, #8
 8027b78:	46bd      	mov	sp, r7
 8027b7a:	bd80      	pop	{r7, pc}
 8027b7c:	e000ed00 	.word	0xe000ed00

08027b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027b80:	b580      	push	{r7, lr}
 8027b82:	b082      	sub	sp, #8
 8027b84:	af00      	add	r7, sp, #0
 8027b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8027b88:	687b      	ldr	r3, [r7, #4]
 8027b8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027b8e:	4618      	mov	r0, r3
 8027b90:	f7fb f9b5 	bl	8022efe <USBD_LL_Resume>
}
 8027b94:	bf00      	nop
 8027b96:	3708      	adds	r7, #8
 8027b98:	46bd      	mov	sp, r7
 8027b9a:	bd80      	pop	{r7, pc}

08027b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027b9c:	b580      	push	{r7, lr}
 8027b9e:	b082      	sub	sp, #8
 8027ba0:	af00      	add	r7, sp, #0
 8027ba2:	6078      	str	r0, [r7, #4]
 8027ba4:	460b      	mov	r3, r1
 8027ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8027ba8:	687b      	ldr	r3, [r7, #4]
 8027baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027bae:	78fa      	ldrb	r2, [r7, #3]
 8027bb0:	4611      	mov	r1, r2
 8027bb2:	4618      	mov	r0, r3
 8027bb4:	f7fb fa0d 	bl	8022fd2 <USBD_LL_IsoOUTIncomplete>
}
 8027bb8:	bf00      	nop
 8027bba:	3708      	adds	r7, #8
 8027bbc:	46bd      	mov	sp, r7
 8027bbe:	bd80      	pop	{r7, pc}

08027bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027bc0:	b580      	push	{r7, lr}
 8027bc2:	b082      	sub	sp, #8
 8027bc4:	af00      	add	r7, sp, #0
 8027bc6:	6078      	str	r0, [r7, #4]
 8027bc8:	460b      	mov	r3, r1
 8027bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8027bcc:	687b      	ldr	r3, [r7, #4]
 8027bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027bd2:	78fa      	ldrb	r2, [r7, #3]
 8027bd4:	4611      	mov	r1, r2
 8027bd6:	4618      	mov	r0, r3
 8027bd8:	f7fb f9c9 	bl	8022f6e <USBD_LL_IsoINIncomplete>
}
 8027bdc:	bf00      	nop
 8027bde:	3708      	adds	r7, #8
 8027be0:	46bd      	mov	sp, r7
 8027be2:	bd80      	pop	{r7, pc}

08027be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027be4:	b580      	push	{r7, lr}
 8027be6:	b082      	sub	sp, #8
 8027be8:	af00      	add	r7, sp, #0
 8027bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8027bec:	687b      	ldr	r3, [r7, #4]
 8027bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027bf2:	4618      	mov	r0, r3
 8027bf4:	f7fb fa1f 	bl	8023036 <USBD_LL_DevConnected>
}
 8027bf8:	bf00      	nop
 8027bfa:	3708      	adds	r7, #8
 8027bfc:	46bd      	mov	sp, r7
 8027bfe:	bd80      	pop	{r7, pc}

08027c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8027c00:	b580      	push	{r7, lr}
 8027c02:	b082      	sub	sp, #8
 8027c04:	af00      	add	r7, sp, #0
 8027c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8027c08:	687b      	ldr	r3, [r7, #4]
 8027c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8027c0e:	4618      	mov	r0, r3
 8027c10:	f7fb fa1c 	bl	802304c <USBD_LL_DevDisconnected>
}
 8027c14:	bf00      	nop
 8027c16:	3708      	adds	r7, #8
 8027c18:	46bd      	mov	sp, r7
 8027c1a:	bd80      	pop	{r7, pc}

08027c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8027c1c:	b580      	push	{r7, lr}
 8027c1e:	b082      	sub	sp, #8
 8027c20:	af00      	add	r7, sp, #0
 8027c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8027c24:	687b      	ldr	r3, [r7, #4]
 8027c26:	781b      	ldrb	r3, [r3, #0]
 8027c28:	2b00      	cmp	r3, #0
 8027c2a:	d13c      	bne.n	8027ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8027c2c:	4a20      	ldr	r2, [pc, #128]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c2e:	687b      	ldr	r3, [r7, #4]
 8027c30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	4a1e      	ldr	r2, [pc, #120]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8027c3c:	4b1c      	ldr	r3, [pc, #112]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8027c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8027c44:	4b1a      	ldr	r3, [pc, #104]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c46:	2204      	movs	r2, #4
 8027c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8027c4a:	4b19      	ldr	r3, [pc, #100]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c4c:	2202      	movs	r2, #2
 8027c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8027c50:	4b17      	ldr	r3, [pc, #92]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c52:	2200      	movs	r2, #0
 8027c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8027c56:	4b16      	ldr	r3, [pc, #88]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c58:	2202      	movs	r2, #2
 8027c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8027c5c:	4b14      	ldr	r3, [pc, #80]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c5e:	2201      	movs	r2, #1
 8027c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8027c62:	4b13      	ldr	r3, [pc, #76]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c64:	2200      	movs	r2, #0
 8027c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8027c68:	4b11      	ldr	r3, [pc, #68]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c6a:	2200      	movs	r2, #0
 8027c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8027c6e:	4b10      	ldr	r3, [pc, #64]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c70:	2200      	movs	r2, #0
 8027c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8027c74:	4b0e      	ldr	r3, [pc, #56]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c76:	2200      	movs	r2, #0
 8027c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8027c7a:	480d      	ldr	r0, [pc, #52]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c7c:	f7f4 fd5a 	bl	801c734 <HAL_PCD_Init>
 8027c80:	4603      	mov	r3, r0
 8027c82:	2b00      	cmp	r3, #0
 8027c84:	d001      	beq.n	8027c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8027c86:	f7e1 fb85 	bl	8009394 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8027c8a:	2180      	movs	r1, #128	; 0x80
 8027c8c:	4808      	ldr	r0, [pc, #32]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c8e:	f7f5 ffb2 	bl	801dbf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8027c92:	2240      	movs	r2, #64	; 0x40
 8027c94:	2100      	movs	r1, #0
 8027c96:	4806      	ldr	r0, [pc, #24]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027c98:	f7f5 ff66 	bl	801db68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8027c9c:	2280      	movs	r2, #128	; 0x80
 8027c9e:	2101      	movs	r1, #1
 8027ca0:	4803      	ldr	r0, [pc, #12]	; (8027cb0 <USBD_LL_Init+0x94>)
 8027ca2:	f7f5 ff61 	bl	801db68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8027ca6:	2300      	movs	r3, #0
}
 8027ca8:	4618      	mov	r0, r3
 8027caa:	3708      	adds	r7, #8
 8027cac:	46bd      	mov	sp, r7
 8027cae:	bd80      	pop	{r7, pc}
 8027cb0:	20003750 	.word	0x20003750

08027cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8027cb4:	b580      	push	{r7, lr}
 8027cb6:	b084      	sub	sp, #16
 8027cb8:	af00      	add	r7, sp, #0
 8027cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027cbc:	2300      	movs	r3, #0
 8027cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027cc0:	2300      	movs	r3, #0
 8027cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8027cc4:	687b      	ldr	r3, [r7, #4]
 8027cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027cca:	4618      	mov	r0, r3
 8027ccc:	f7f4 fe4f 	bl	801c96e <HAL_PCD_Start>
 8027cd0:	4603      	mov	r3, r0
 8027cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027cd4:	7bfb      	ldrb	r3, [r7, #15]
 8027cd6:	4618      	mov	r0, r3
 8027cd8:	f000 f942 	bl	8027f60 <USBD_Get_USB_Status>
 8027cdc:	4603      	mov	r3, r0
 8027cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8027ce2:	4618      	mov	r0, r3
 8027ce4:	3710      	adds	r7, #16
 8027ce6:	46bd      	mov	sp, r7
 8027ce8:	bd80      	pop	{r7, pc}

08027cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8027cea:	b580      	push	{r7, lr}
 8027cec:	b084      	sub	sp, #16
 8027cee:	af00      	add	r7, sp, #0
 8027cf0:	6078      	str	r0, [r7, #4]
 8027cf2:	4608      	mov	r0, r1
 8027cf4:	4611      	mov	r1, r2
 8027cf6:	461a      	mov	r2, r3
 8027cf8:	4603      	mov	r3, r0
 8027cfa:	70fb      	strb	r3, [r7, #3]
 8027cfc:	460b      	mov	r3, r1
 8027cfe:	70bb      	strb	r3, [r7, #2]
 8027d00:	4613      	mov	r3, r2
 8027d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027d04:	2300      	movs	r3, #0
 8027d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027d08:	2300      	movs	r3, #0
 8027d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8027d0c:	687b      	ldr	r3, [r7, #4]
 8027d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8027d12:	78bb      	ldrb	r3, [r7, #2]
 8027d14:	883a      	ldrh	r2, [r7, #0]
 8027d16:	78f9      	ldrb	r1, [r7, #3]
 8027d18:	f7f5 fb20 	bl	801d35c <HAL_PCD_EP_Open>
 8027d1c:	4603      	mov	r3, r0
 8027d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027d20:	7bfb      	ldrb	r3, [r7, #15]
 8027d22:	4618      	mov	r0, r3
 8027d24:	f000 f91c 	bl	8027f60 <USBD_Get_USB_Status>
 8027d28:	4603      	mov	r3, r0
 8027d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8027d2e:	4618      	mov	r0, r3
 8027d30:	3710      	adds	r7, #16
 8027d32:	46bd      	mov	sp, r7
 8027d34:	bd80      	pop	{r7, pc}

08027d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8027d36:	b580      	push	{r7, lr}
 8027d38:	b084      	sub	sp, #16
 8027d3a:	af00      	add	r7, sp, #0
 8027d3c:	6078      	str	r0, [r7, #4]
 8027d3e:	460b      	mov	r3, r1
 8027d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027d42:	2300      	movs	r3, #0
 8027d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027d46:	2300      	movs	r3, #0
 8027d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8027d4a:	687b      	ldr	r3, [r7, #4]
 8027d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027d50:	78fa      	ldrb	r2, [r7, #3]
 8027d52:	4611      	mov	r1, r2
 8027d54:	4618      	mov	r0, r3
 8027d56:	f7f5 fb69 	bl	801d42c <HAL_PCD_EP_Close>
 8027d5a:	4603      	mov	r3, r0
 8027d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027d5e:	7bfb      	ldrb	r3, [r7, #15]
 8027d60:	4618      	mov	r0, r3
 8027d62:	f000 f8fd 	bl	8027f60 <USBD_Get_USB_Status>
 8027d66:	4603      	mov	r3, r0
 8027d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8027d6c:	4618      	mov	r0, r3
 8027d6e:	3710      	adds	r7, #16
 8027d70:	46bd      	mov	sp, r7
 8027d72:	bd80      	pop	{r7, pc}

08027d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8027d74:	b580      	push	{r7, lr}
 8027d76:	b084      	sub	sp, #16
 8027d78:	af00      	add	r7, sp, #0
 8027d7a:	6078      	str	r0, [r7, #4]
 8027d7c:	460b      	mov	r3, r1
 8027d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027d80:	2300      	movs	r3, #0
 8027d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027d84:	2300      	movs	r3, #0
 8027d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027d8e:	78fa      	ldrb	r2, [r7, #3]
 8027d90:	4611      	mov	r1, r2
 8027d92:	4618      	mov	r0, r3
 8027d94:	f7f5 fc41 	bl	801d61a <HAL_PCD_EP_SetStall>
 8027d98:	4603      	mov	r3, r0
 8027d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027d9c:	7bfb      	ldrb	r3, [r7, #15]
 8027d9e:	4618      	mov	r0, r3
 8027da0:	f000 f8de 	bl	8027f60 <USBD_Get_USB_Status>
 8027da4:	4603      	mov	r3, r0
 8027da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8027daa:	4618      	mov	r0, r3
 8027dac:	3710      	adds	r7, #16
 8027dae:	46bd      	mov	sp, r7
 8027db0:	bd80      	pop	{r7, pc}

08027db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8027db2:	b580      	push	{r7, lr}
 8027db4:	b084      	sub	sp, #16
 8027db6:	af00      	add	r7, sp, #0
 8027db8:	6078      	str	r0, [r7, #4]
 8027dba:	460b      	mov	r3, r1
 8027dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027dbe:	2300      	movs	r3, #0
 8027dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027dc2:	2300      	movs	r3, #0
 8027dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8027dc6:	687b      	ldr	r3, [r7, #4]
 8027dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027dcc:	78fa      	ldrb	r2, [r7, #3]
 8027dce:	4611      	mov	r1, r2
 8027dd0:	4618      	mov	r0, r3
 8027dd2:	f7f5 fc86 	bl	801d6e2 <HAL_PCD_EP_ClrStall>
 8027dd6:	4603      	mov	r3, r0
 8027dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027dda:	7bfb      	ldrb	r3, [r7, #15]
 8027ddc:	4618      	mov	r0, r3
 8027dde:	f000 f8bf 	bl	8027f60 <USBD_Get_USB_Status>
 8027de2:	4603      	mov	r3, r0
 8027de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8027de8:	4618      	mov	r0, r3
 8027dea:	3710      	adds	r7, #16
 8027dec:	46bd      	mov	sp, r7
 8027dee:	bd80      	pop	{r7, pc}

08027df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8027df0:	b480      	push	{r7}
 8027df2:	b085      	sub	sp, #20
 8027df4:	af00      	add	r7, sp, #0
 8027df6:	6078      	str	r0, [r7, #4]
 8027df8:	460b      	mov	r3, r1
 8027dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8027dfc:	687b      	ldr	r3, [r7, #4]
 8027dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8027e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	da0b      	bge.n	8027e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8027e0c:	78fb      	ldrb	r3, [r7, #3]
 8027e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8027e12:	68f9      	ldr	r1, [r7, #12]
 8027e14:	4613      	mov	r3, r2
 8027e16:	00db      	lsls	r3, r3, #3
 8027e18:	4413      	add	r3, r2
 8027e1a:	009b      	lsls	r3, r3, #2
 8027e1c:	440b      	add	r3, r1
 8027e1e:	333e      	adds	r3, #62	; 0x3e
 8027e20:	781b      	ldrb	r3, [r3, #0]
 8027e22:	e00b      	b.n	8027e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8027e24:	78fb      	ldrb	r3, [r7, #3]
 8027e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8027e2a:	68f9      	ldr	r1, [r7, #12]
 8027e2c:	4613      	mov	r3, r2
 8027e2e:	00db      	lsls	r3, r3, #3
 8027e30:	4413      	add	r3, r2
 8027e32:	009b      	lsls	r3, r3, #2
 8027e34:	440b      	add	r3, r1
 8027e36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8027e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8027e3c:	4618      	mov	r0, r3
 8027e3e:	3714      	adds	r7, #20
 8027e40:	46bd      	mov	sp, r7
 8027e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e46:	4770      	bx	lr

08027e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8027e48:	b580      	push	{r7, lr}
 8027e4a:	b084      	sub	sp, #16
 8027e4c:	af00      	add	r7, sp, #0
 8027e4e:	6078      	str	r0, [r7, #4]
 8027e50:	460b      	mov	r3, r1
 8027e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027e54:	2300      	movs	r3, #0
 8027e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027e58:	2300      	movs	r3, #0
 8027e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8027e5c:	687b      	ldr	r3, [r7, #4]
 8027e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027e62:	78fa      	ldrb	r2, [r7, #3]
 8027e64:	4611      	mov	r1, r2
 8027e66:	4618      	mov	r0, r3
 8027e68:	f7f5 fa53 	bl	801d312 <HAL_PCD_SetAddress>
 8027e6c:	4603      	mov	r3, r0
 8027e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027e70:	7bfb      	ldrb	r3, [r7, #15]
 8027e72:	4618      	mov	r0, r3
 8027e74:	f000 f874 	bl	8027f60 <USBD_Get_USB_Status>
 8027e78:	4603      	mov	r3, r0
 8027e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8027e7e:	4618      	mov	r0, r3
 8027e80:	3710      	adds	r7, #16
 8027e82:	46bd      	mov	sp, r7
 8027e84:	bd80      	pop	{r7, pc}

08027e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8027e86:	b580      	push	{r7, lr}
 8027e88:	b086      	sub	sp, #24
 8027e8a:	af00      	add	r7, sp, #0
 8027e8c:	60f8      	str	r0, [r7, #12]
 8027e8e:	607a      	str	r2, [r7, #4]
 8027e90:	603b      	str	r3, [r7, #0]
 8027e92:	460b      	mov	r3, r1
 8027e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027e96:	2300      	movs	r3, #0
 8027e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027e9a:	2300      	movs	r3, #0
 8027e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8027e9e:	68fb      	ldr	r3, [r7, #12]
 8027ea0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8027ea4:	7af9      	ldrb	r1, [r7, #11]
 8027ea6:	683b      	ldr	r3, [r7, #0]
 8027ea8:	687a      	ldr	r2, [r7, #4]
 8027eaa:	f7f5 fb6c 	bl	801d586 <HAL_PCD_EP_Transmit>
 8027eae:	4603      	mov	r3, r0
 8027eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027eb2:	7dfb      	ldrb	r3, [r7, #23]
 8027eb4:	4618      	mov	r0, r3
 8027eb6:	f000 f853 	bl	8027f60 <USBD_Get_USB_Status>
 8027eba:	4603      	mov	r3, r0
 8027ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8027ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8027ec0:	4618      	mov	r0, r3
 8027ec2:	3718      	adds	r7, #24
 8027ec4:	46bd      	mov	sp, r7
 8027ec6:	bd80      	pop	{r7, pc}

08027ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8027ec8:	b580      	push	{r7, lr}
 8027eca:	b086      	sub	sp, #24
 8027ecc:	af00      	add	r7, sp, #0
 8027ece:	60f8      	str	r0, [r7, #12]
 8027ed0:	607a      	str	r2, [r7, #4]
 8027ed2:	603b      	str	r3, [r7, #0]
 8027ed4:	460b      	mov	r3, r1
 8027ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027ed8:	2300      	movs	r3, #0
 8027eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027edc:	2300      	movs	r3, #0
 8027ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8027ee0:	68fb      	ldr	r3, [r7, #12]
 8027ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8027ee6:	7af9      	ldrb	r1, [r7, #11]
 8027ee8:	683b      	ldr	r3, [r7, #0]
 8027eea:	687a      	ldr	r2, [r7, #4]
 8027eec:	f7f5 fae8 	bl	801d4c0 <HAL_PCD_EP_Receive>
 8027ef0:	4603      	mov	r3, r0
 8027ef2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8027ef4:	7dfb      	ldrb	r3, [r7, #23]
 8027ef6:	4618      	mov	r0, r3
 8027ef8:	f000 f832 	bl	8027f60 <USBD_Get_USB_Status>
 8027efc:	4603      	mov	r3, r0
 8027efe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8027f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8027f02:	4618      	mov	r0, r3
 8027f04:	3718      	adds	r7, #24
 8027f06:	46bd      	mov	sp, r7
 8027f08:	bd80      	pop	{r7, pc}

08027f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8027f0a:	b580      	push	{r7, lr}
 8027f0c:	b082      	sub	sp, #8
 8027f0e:	af00      	add	r7, sp, #0
 8027f10:	6078      	str	r0, [r7, #4]
 8027f12:	460b      	mov	r3, r1
 8027f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8027f16:	687b      	ldr	r3, [r7, #4]
 8027f18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8027f1c:	78fa      	ldrb	r2, [r7, #3]
 8027f1e:	4611      	mov	r1, r2
 8027f20:	4618      	mov	r0, r3
 8027f22:	f7f5 fb18 	bl	801d556 <HAL_PCD_EP_GetRxCount>
 8027f26:	4603      	mov	r3, r0
}
 8027f28:	4618      	mov	r0, r3
 8027f2a:	3708      	adds	r7, #8
 8027f2c:	46bd      	mov	sp, r7
 8027f2e:	bd80      	pop	{r7, pc}

08027f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8027f30:	b480      	push	{r7}
 8027f32:	b083      	sub	sp, #12
 8027f34:	af00      	add	r7, sp, #0
 8027f36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8027f38:	4b03      	ldr	r3, [pc, #12]	; (8027f48 <USBD_static_malloc+0x18>)
}
 8027f3a:	4618      	mov	r0, r3
 8027f3c:	370c      	adds	r7, #12
 8027f3e:	46bd      	mov	sp, r7
 8027f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f44:	4770      	bx	lr
 8027f46:	bf00      	nop
 8027f48:	20003c5c 	.word	0x20003c5c

08027f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8027f4c:	b480      	push	{r7}
 8027f4e:	b083      	sub	sp, #12
 8027f50:	af00      	add	r7, sp, #0
 8027f52:	6078      	str	r0, [r7, #4]

}
 8027f54:	bf00      	nop
 8027f56:	370c      	adds	r7, #12
 8027f58:	46bd      	mov	sp, r7
 8027f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f5e:	4770      	bx	lr

08027f60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8027f60:	b480      	push	{r7}
 8027f62:	b085      	sub	sp, #20
 8027f64:	af00      	add	r7, sp, #0
 8027f66:	4603      	mov	r3, r0
 8027f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8027f6a:	2300      	movs	r3, #0
 8027f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8027f6e:	79fb      	ldrb	r3, [r7, #7]
 8027f70:	2b03      	cmp	r3, #3
 8027f72:	d817      	bhi.n	8027fa4 <USBD_Get_USB_Status+0x44>
 8027f74:	a201      	add	r2, pc, #4	; (adr r2, 8027f7c <USBD_Get_USB_Status+0x1c>)
 8027f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027f7a:	bf00      	nop
 8027f7c:	08027f8d 	.word	0x08027f8d
 8027f80:	08027f93 	.word	0x08027f93
 8027f84:	08027f99 	.word	0x08027f99
 8027f88:	08027f9f 	.word	0x08027f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8027f8c:	2300      	movs	r3, #0
 8027f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8027f90:	e00b      	b.n	8027faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8027f92:	2303      	movs	r3, #3
 8027f94:	73fb      	strb	r3, [r7, #15]
    break;
 8027f96:	e008      	b.n	8027faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8027f98:	2301      	movs	r3, #1
 8027f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8027f9c:	e005      	b.n	8027faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8027f9e:	2303      	movs	r3, #3
 8027fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8027fa2:	e002      	b.n	8027faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8027fa4:	2303      	movs	r3, #3
 8027fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8027fa8:	bf00      	nop
  }
  return usb_status;
 8027faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8027fac:	4618      	mov	r0, r3
 8027fae:	3714      	adds	r7, #20
 8027fb0:	46bd      	mov	sp, r7
 8027fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fb6:	4770      	bx	lr

08027fb8 <main>:


#include "main.h"

int main(void)
{
 8027fb8:	b580      	push	{r7, lr}
 8027fba:	af00      	add	r7, sp, #0
  hwInit();
 8027fbc:	f7ef ff52 	bl	8017e64 <hwInit>
  apInit();
 8027fc0:	f7e1 f89a 	bl	80090f8 <apInit>

  apMain();
 8027fc4:	f7e1 f8b3 	bl	800912e <apMain>

  return 0;
 8027fc8:	2300      	movs	r3, #0
}
 8027fca:	4618      	mov	r0, r3
 8027fcc:	bd80      	pop	{r7, pc}
	...

08027fd0 <__errno>:
 8027fd0:	4b01      	ldr	r3, [pc, #4]	; (8027fd8 <__errno+0x8>)
 8027fd2:	6818      	ldr	r0, [r3, #0]
 8027fd4:	4770      	bx	lr
 8027fd6:	bf00      	nop
 8027fd8:	200004d0 	.word	0x200004d0

08027fdc <__libc_init_array>:
 8027fdc:	b570      	push	{r4, r5, r6, lr}
 8027fde:	4d0d      	ldr	r5, [pc, #52]	; (8028014 <__libc_init_array+0x38>)
 8027fe0:	4c0d      	ldr	r4, [pc, #52]	; (8028018 <__libc_init_array+0x3c>)
 8027fe2:	1b64      	subs	r4, r4, r5
 8027fe4:	10a4      	asrs	r4, r4, #2
 8027fe6:	2600      	movs	r6, #0
 8027fe8:	42a6      	cmp	r6, r4
 8027fea:	d109      	bne.n	8028000 <__libc_init_array+0x24>
 8027fec:	4d0b      	ldr	r5, [pc, #44]	; (802801c <__libc_init_array+0x40>)
 8027fee:	4c0c      	ldr	r4, [pc, #48]	; (8028020 <__libc_init_array+0x44>)
 8027ff0:	f003 fe00 	bl	802bbf4 <_init>
 8027ff4:	1b64      	subs	r4, r4, r5
 8027ff6:	10a4      	asrs	r4, r4, #2
 8027ff8:	2600      	movs	r6, #0
 8027ffa:	42a6      	cmp	r6, r4
 8027ffc:	d105      	bne.n	802800a <__libc_init_array+0x2e>
 8027ffe:	bd70      	pop	{r4, r5, r6, pc}
 8028000:	f855 3b04 	ldr.w	r3, [r5], #4
 8028004:	4798      	blx	r3
 8028006:	3601      	adds	r6, #1
 8028008:	e7ee      	b.n	8027fe8 <__libc_init_array+0xc>
 802800a:	f855 3b04 	ldr.w	r3, [r5], #4
 802800e:	4798      	blx	r3
 8028010:	3601      	adds	r6, #1
 8028012:	e7f2      	b.n	8027ffa <__libc_init_array+0x1e>
 8028014:	0802d07c 	.word	0x0802d07c
 8028018:	0802d07c 	.word	0x0802d07c
 802801c:	0802d07c 	.word	0x0802d07c
 8028020:	0802d080 	.word	0x0802d080

08028024 <memcpy>:
 8028024:	440a      	add	r2, r1
 8028026:	4291      	cmp	r1, r2
 8028028:	f100 33ff 	add.w	r3, r0, #4294967295
 802802c:	d100      	bne.n	8028030 <memcpy+0xc>
 802802e:	4770      	bx	lr
 8028030:	b510      	push	{r4, lr}
 8028032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028036:	f803 4f01 	strb.w	r4, [r3, #1]!
 802803a:	4291      	cmp	r1, r2
 802803c:	d1f9      	bne.n	8028032 <memcpy+0xe>
 802803e:	bd10      	pop	{r4, pc}

08028040 <memmove>:
 8028040:	4288      	cmp	r0, r1
 8028042:	b510      	push	{r4, lr}
 8028044:	eb01 0402 	add.w	r4, r1, r2
 8028048:	d902      	bls.n	8028050 <memmove+0x10>
 802804a:	4284      	cmp	r4, r0
 802804c:	4623      	mov	r3, r4
 802804e:	d807      	bhi.n	8028060 <memmove+0x20>
 8028050:	1e43      	subs	r3, r0, #1
 8028052:	42a1      	cmp	r1, r4
 8028054:	d008      	beq.n	8028068 <memmove+0x28>
 8028056:	f811 2b01 	ldrb.w	r2, [r1], #1
 802805a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802805e:	e7f8      	b.n	8028052 <memmove+0x12>
 8028060:	4402      	add	r2, r0
 8028062:	4601      	mov	r1, r0
 8028064:	428a      	cmp	r2, r1
 8028066:	d100      	bne.n	802806a <memmove+0x2a>
 8028068:	bd10      	pop	{r4, pc}
 802806a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802806e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8028072:	e7f7      	b.n	8028064 <memmove+0x24>

08028074 <memset>:
 8028074:	4402      	add	r2, r0
 8028076:	4603      	mov	r3, r0
 8028078:	4293      	cmp	r3, r2
 802807a:	d100      	bne.n	802807e <memset+0xa>
 802807c:	4770      	bx	lr
 802807e:	f803 1b01 	strb.w	r1, [r3], #1
 8028082:	e7f9      	b.n	8028078 <memset+0x4>

08028084 <strchr>:
 8028084:	b2c9      	uxtb	r1, r1
 8028086:	4603      	mov	r3, r0
 8028088:	f810 2b01 	ldrb.w	r2, [r0], #1
 802808c:	b11a      	cbz	r2, 8028096 <strchr+0x12>
 802808e:	428a      	cmp	r2, r1
 8028090:	d1f9      	bne.n	8028086 <strchr+0x2>
 8028092:	4618      	mov	r0, r3
 8028094:	4770      	bx	lr
 8028096:	2900      	cmp	r1, #0
 8028098:	bf18      	it	ne
 802809a:	2300      	movne	r3, #0
 802809c:	e7f9      	b.n	8028092 <strchr+0xe>

0802809e <strcpy>:
 802809e:	4603      	mov	r3, r0
 80280a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80280a4:	f803 2b01 	strb.w	r2, [r3], #1
 80280a8:	2a00      	cmp	r2, #0
 80280aa:	d1f9      	bne.n	80280a0 <strcpy+0x2>
 80280ac:	4770      	bx	lr

080280ae <sulp>:
 80280ae:	b570      	push	{r4, r5, r6, lr}
 80280b0:	4604      	mov	r4, r0
 80280b2:	460d      	mov	r5, r1
 80280b4:	ec45 4b10 	vmov	d0, r4, r5
 80280b8:	4616      	mov	r6, r2
 80280ba:	f002 f92b 	bl	802a314 <__ulp>
 80280be:	ec51 0b10 	vmov	r0, r1, d0
 80280c2:	b17e      	cbz	r6, 80280e4 <sulp+0x36>
 80280c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80280c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80280cc:	2b00      	cmp	r3, #0
 80280ce:	dd09      	ble.n	80280e4 <sulp+0x36>
 80280d0:	051b      	lsls	r3, r3, #20
 80280d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80280d6:	2400      	movs	r4, #0
 80280d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80280dc:	4622      	mov	r2, r4
 80280de:	462b      	mov	r3, r5
 80280e0:	f7e0 f9d2 	bl	8008488 <__aeabi_dmul>
 80280e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080280e8 <_strtod_l>:
 80280e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280ec:	ed2d 8b02 	vpush	{d8}
 80280f0:	b09d      	sub	sp, #116	; 0x74
 80280f2:	461f      	mov	r7, r3
 80280f4:	2300      	movs	r3, #0
 80280f6:	9318      	str	r3, [sp, #96]	; 0x60
 80280f8:	4ba2      	ldr	r3, [pc, #648]	; (8028384 <_strtod_l+0x29c>)
 80280fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80280fc:	681b      	ldr	r3, [r3, #0]
 80280fe:	9305      	str	r3, [sp, #20]
 8028100:	4604      	mov	r4, r0
 8028102:	4618      	mov	r0, r3
 8028104:	4688      	mov	r8, r1
 8028106:	f7df ffa5 	bl	8008054 <strlen>
 802810a:	f04f 0a00 	mov.w	sl, #0
 802810e:	4605      	mov	r5, r0
 8028110:	f04f 0b00 	mov.w	fp, #0
 8028114:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8028118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802811a:	781a      	ldrb	r2, [r3, #0]
 802811c:	2a2b      	cmp	r2, #43	; 0x2b
 802811e:	d04e      	beq.n	80281be <_strtod_l+0xd6>
 8028120:	d83b      	bhi.n	802819a <_strtod_l+0xb2>
 8028122:	2a0d      	cmp	r2, #13
 8028124:	d834      	bhi.n	8028190 <_strtod_l+0xa8>
 8028126:	2a08      	cmp	r2, #8
 8028128:	d834      	bhi.n	8028194 <_strtod_l+0xac>
 802812a:	2a00      	cmp	r2, #0
 802812c:	d03e      	beq.n	80281ac <_strtod_l+0xc4>
 802812e:	2300      	movs	r3, #0
 8028130:	930a      	str	r3, [sp, #40]	; 0x28
 8028132:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8028134:	7833      	ldrb	r3, [r6, #0]
 8028136:	2b30      	cmp	r3, #48	; 0x30
 8028138:	f040 80b0 	bne.w	802829c <_strtod_l+0x1b4>
 802813c:	7873      	ldrb	r3, [r6, #1]
 802813e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8028142:	2b58      	cmp	r3, #88	; 0x58
 8028144:	d168      	bne.n	8028218 <_strtod_l+0x130>
 8028146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028148:	9301      	str	r3, [sp, #4]
 802814a:	ab18      	add	r3, sp, #96	; 0x60
 802814c:	9702      	str	r7, [sp, #8]
 802814e:	9300      	str	r3, [sp, #0]
 8028150:	4a8d      	ldr	r2, [pc, #564]	; (8028388 <_strtod_l+0x2a0>)
 8028152:	ab19      	add	r3, sp, #100	; 0x64
 8028154:	a917      	add	r1, sp, #92	; 0x5c
 8028156:	4620      	mov	r0, r4
 8028158:	f001 f9e8 	bl	802952c <__gethex>
 802815c:	f010 0707 	ands.w	r7, r0, #7
 8028160:	4605      	mov	r5, r0
 8028162:	d005      	beq.n	8028170 <_strtod_l+0x88>
 8028164:	2f06      	cmp	r7, #6
 8028166:	d12c      	bne.n	80281c2 <_strtod_l+0xda>
 8028168:	3601      	adds	r6, #1
 802816a:	2300      	movs	r3, #0
 802816c:	9617      	str	r6, [sp, #92]	; 0x5c
 802816e:	930a      	str	r3, [sp, #40]	; 0x28
 8028170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028172:	2b00      	cmp	r3, #0
 8028174:	f040 8590 	bne.w	8028c98 <_strtod_l+0xbb0>
 8028178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802817a:	b1eb      	cbz	r3, 80281b8 <_strtod_l+0xd0>
 802817c:	4652      	mov	r2, sl
 802817e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8028182:	ec43 2b10 	vmov	d0, r2, r3
 8028186:	b01d      	add	sp, #116	; 0x74
 8028188:	ecbd 8b02 	vpop	{d8}
 802818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028190:	2a20      	cmp	r2, #32
 8028192:	d1cc      	bne.n	802812e <_strtod_l+0x46>
 8028194:	3301      	adds	r3, #1
 8028196:	9317      	str	r3, [sp, #92]	; 0x5c
 8028198:	e7be      	b.n	8028118 <_strtod_l+0x30>
 802819a:	2a2d      	cmp	r2, #45	; 0x2d
 802819c:	d1c7      	bne.n	802812e <_strtod_l+0x46>
 802819e:	2201      	movs	r2, #1
 80281a0:	920a      	str	r2, [sp, #40]	; 0x28
 80281a2:	1c5a      	adds	r2, r3, #1
 80281a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80281a6:	785b      	ldrb	r3, [r3, #1]
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d1c2      	bne.n	8028132 <_strtod_l+0x4a>
 80281ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80281ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80281b2:	2b00      	cmp	r3, #0
 80281b4:	f040 856e 	bne.w	8028c94 <_strtod_l+0xbac>
 80281b8:	4652      	mov	r2, sl
 80281ba:	465b      	mov	r3, fp
 80281bc:	e7e1      	b.n	8028182 <_strtod_l+0x9a>
 80281be:	2200      	movs	r2, #0
 80281c0:	e7ee      	b.n	80281a0 <_strtod_l+0xb8>
 80281c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80281c4:	b13a      	cbz	r2, 80281d6 <_strtod_l+0xee>
 80281c6:	2135      	movs	r1, #53	; 0x35
 80281c8:	a81a      	add	r0, sp, #104	; 0x68
 80281ca:	f002 f9ae 	bl	802a52a <__copybits>
 80281ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80281d0:	4620      	mov	r0, r4
 80281d2:	f001 fd6d 	bl	8029cb0 <_Bfree>
 80281d6:	3f01      	subs	r7, #1
 80281d8:	2f04      	cmp	r7, #4
 80281da:	d806      	bhi.n	80281ea <_strtod_l+0x102>
 80281dc:	e8df f007 	tbb	[pc, r7]
 80281e0:	1714030a 	.word	0x1714030a
 80281e4:	0a          	.byte	0x0a
 80281e5:	00          	.byte	0x00
 80281e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80281ea:	0728      	lsls	r0, r5, #28
 80281ec:	d5c0      	bpl.n	8028170 <_strtod_l+0x88>
 80281ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80281f2:	e7bd      	b.n	8028170 <_strtod_l+0x88>
 80281f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80281f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80281fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80281fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8028202:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8028206:	e7f0      	b.n	80281ea <_strtod_l+0x102>
 8028208:	f8df b180 	ldr.w	fp, [pc, #384]	; 802838c <_strtod_l+0x2a4>
 802820c:	e7ed      	b.n	80281ea <_strtod_l+0x102>
 802820e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8028212:	f04f 3aff 	mov.w	sl, #4294967295
 8028216:	e7e8      	b.n	80281ea <_strtod_l+0x102>
 8028218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802821a:	1c5a      	adds	r2, r3, #1
 802821c:	9217      	str	r2, [sp, #92]	; 0x5c
 802821e:	785b      	ldrb	r3, [r3, #1]
 8028220:	2b30      	cmp	r3, #48	; 0x30
 8028222:	d0f9      	beq.n	8028218 <_strtod_l+0x130>
 8028224:	2b00      	cmp	r3, #0
 8028226:	d0a3      	beq.n	8028170 <_strtod_l+0x88>
 8028228:	2301      	movs	r3, #1
 802822a:	f04f 0900 	mov.w	r9, #0
 802822e:	9304      	str	r3, [sp, #16]
 8028230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028232:	9308      	str	r3, [sp, #32]
 8028234:	f8cd 901c 	str.w	r9, [sp, #28]
 8028238:	464f      	mov	r7, r9
 802823a:	220a      	movs	r2, #10
 802823c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802823e:	7806      	ldrb	r6, [r0, #0]
 8028240:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8028244:	b2d9      	uxtb	r1, r3
 8028246:	2909      	cmp	r1, #9
 8028248:	d92a      	bls.n	80282a0 <_strtod_l+0x1b8>
 802824a:	9905      	ldr	r1, [sp, #20]
 802824c:	462a      	mov	r2, r5
 802824e:	f002 fdf8 	bl	802ae42 <strncmp>
 8028252:	b398      	cbz	r0, 80282bc <_strtod_l+0x1d4>
 8028254:	2000      	movs	r0, #0
 8028256:	4632      	mov	r2, r6
 8028258:	463d      	mov	r5, r7
 802825a:	9005      	str	r0, [sp, #20]
 802825c:	4603      	mov	r3, r0
 802825e:	2a65      	cmp	r2, #101	; 0x65
 8028260:	d001      	beq.n	8028266 <_strtod_l+0x17e>
 8028262:	2a45      	cmp	r2, #69	; 0x45
 8028264:	d118      	bne.n	8028298 <_strtod_l+0x1b0>
 8028266:	b91d      	cbnz	r5, 8028270 <_strtod_l+0x188>
 8028268:	9a04      	ldr	r2, [sp, #16]
 802826a:	4302      	orrs	r2, r0
 802826c:	d09e      	beq.n	80281ac <_strtod_l+0xc4>
 802826e:	2500      	movs	r5, #0
 8028270:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8028274:	f108 0201 	add.w	r2, r8, #1
 8028278:	9217      	str	r2, [sp, #92]	; 0x5c
 802827a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802827e:	2a2b      	cmp	r2, #43	; 0x2b
 8028280:	d075      	beq.n	802836e <_strtod_l+0x286>
 8028282:	2a2d      	cmp	r2, #45	; 0x2d
 8028284:	d07b      	beq.n	802837e <_strtod_l+0x296>
 8028286:	f04f 0c00 	mov.w	ip, #0
 802828a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802828e:	2909      	cmp	r1, #9
 8028290:	f240 8082 	bls.w	8028398 <_strtod_l+0x2b0>
 8028294:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8028298:	2600      	movs	r6, #0
 802829a:	e09d      	b.n	80283d8 <_strtod_l+0x2f0>
 802829c:	2300      	movs	r3, #0
 802829e:	e7c4      	b.n	802822a <_strtod_l+0x142>
 80282a0:	2f08      	cmp	r7, #8
 80282a2:	bfd8      	it	le
 80282a4:	9907      	ldrle	r1, [sp, #28]
 80282a6:	f100 0001 	add.w	r0, r0, #1
 80282aa:	bfda      	itte	le
 80282ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80282b0:	9307      	strle	r3, [sp, #28]
 80282b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80282b6:	3701      	adds	r7, #1
 80282b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80282ba:	e7bf      	b.n	802823c <_strtod_l+0x154>
 80282bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80282be:	195a      	adds	r2, r3, r5
 80282c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80282c2:	5d5a      	ldrb	r2, [r3, r5]
 80282c4:	2f00      	cmp	r7, #0
 80282c6:	d037      	beq.n	8028338 <_strtod_l+0x250>
 80282c8:	9005      	str	r0, [sp, #20]
 80282ca:	463d      	mov	r5, r7
 80282cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80282d0:	2b09      	cmp	r3, #9
 80282d2:	d912      	bls.n	80282fa <_strtod_l+0x212>
 80282d4:	2301      	movs	r3, #1
 80282d6:	e7c2      	b.n	802825e <_strtod_l+0x176>
 80282d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80282da:	1c5a      	adds	r2, r3, #1
 80282dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80282de:	785a      	ldrb	r2, [r3, #1]
 80282e0:	3001      	adds	r0, #1
 80282e2:	2a30      	cmp	r2, #48	; 0x30
 80282e4:	d0f8      	beq.n	80282d8 <_strtod_l+0x1f0>
 80282e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80282ea:	2b08      	cmp	r3, #8
 80282ec:	f200 84d9 	bhi.w	8028ca2 <_strtod_l+0xbba>
 80282f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80282f2:	9005      	str	r0, [sp, #20]
 80282f4:	2000      	movs	r0, #0
 80282f6:	9308      	str	r3, [sp, #32]
 80282f8:	4605      	mov	r5, r0
 80282fa:	3a30      	subs	r2, #48	; 0x30
 80282fc:	f100 0301 	add.w	r3, r0, #1
 8028300:	d014      	beq.n	802832c <_strtod_l+0x244>
 8028302:	9905      	ldr	r1, [sp, #20]
 8028304:	4419      	add	r1, r3
 8028306:	9105      	str	r1, [sp, #20]
 8028308:	462b      	mov	r3, r5
 802830a:	eb00 0e05 	add.w	lr, r0, r5
 802830e:	210a      	movs	r1, #10
 8028310:	4573      	cmp	r3, lr
 8028312:	d113      	bne.n	802833c <_strtod_l+0x254>
 8028314:	182b      	adds	r3, r5, r0
 8028316:	2b08      	cmp	r3, #8
 8028318:	f105 0501 	add.w	r5, r5, #1
 802831c:	4405      	add	r5, r0
 802831e:	dc1c      	bgt.n	802835a <_strtod_l+0x272>
 8028320:	9907      	ldr	r1, [sp, #28]
 8028322:	230a      	movs	r3, #10
 8028324:	fb03 2301 	mla	r3, r3, r1, r2
 8028328:	9307      	str	r3, [sp, #28]
 802832a:	2300      	movs	r3, #0
 802832c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802832e:	1c51      	adds	r1, r2, #1
 8028330:	9117      	str	r1, [sp, #92]	; 0x5c
 8028332:	7852      	ldrb	r2, [r2, #1]
 8028334:	4618      	mov	r0, r3
 8028336:	e7c9      	b.n	80282cc <_strtod_l+0x1e4>
 8028338:	4638      	mov	r0, r7
 802833a:	e7d2      	b.n	80282e2 <_strtod_l+0x1fa>
 802833c:	2b08      	cmp	r3, #8
 802833e:	dc04      	bgt.n	802834a <_strtod_l+0x262>
 8028340:	9e07      	ldr	r6, [sp, #28]
 8028342:	434e      	muls	r6, r1
 8028344:	9607      	str	r6, [sp, #28]
 8028346:	3301      	adds	r3, #1
 8028348:	e7e2      	b.n	8028310 <_strtod_l+0x228>
 802834a:	f103 0c01 	add.w	ip, r3, #1
 802834e:	f1bc 0f10 	cmp.w	ip, #16
 8028352:	bfd8      	it	le
 8028354:	fb01 f909 	mulle.w	r9, r1, r9
 8028358:	e7f5      	b.n	8028346 <_strtod_l+0x25e>
 802835a:	2d10      	cmp	r5, #16
 802835c:	bfdc      	itt	le
 802835e:	230a      	movle	r3, #10
 8028360:	fb03 2909 	mlale	r9, r3, r9, r2
 8028364:	e7e1      	b.n	802832a <_strtod_l+0x242>
 8028366:	2300      	movs	r3, #0
 8028368:	9305      	str	r3, [sp, #20]
 802836a:	2301      	movs	r3, #1
 802836c:	e77c      	b.n	8028268 <_strtod_l+0x180>
 802836e:	f04f 0c00 	mov.w	ip, #0
 8028372:	f108 0202 	add.w	r2, r8, #2
 8028376:	9217      	str	r2, [sp, #92]	; 0x5c
 8028378:	f898 2002 	ldrb.w	r2, [r8, #2]
 802837c:	e785      	b.n	802828a <_strtod_l+0x1a2>
 802837e:	f04f 0c01 	mov.w	ip, #1
 8028382:	e7f6      	b.n	8028372 <_strtod_l+0x28a>
 8028384:	0802ce60 	.word	0x0802ce60
 8028388:	0802cd38 	.word	0x0802cd38
 802838c:	7ff00000 	.word	0x7ff00000
 8028390:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028392:	1c51      	adds	r1, r2, #1
 8028394:	9117      	str	r1, [sp, #92]	; 0x5c
 8028396:	7852      	ldrb	r2, [r2, #1]
 8028398:	2a30      	cmp	r2, #48	; 0x30
 802839a:	d0f9      	beq.n	8028390 <_strtod_l+0x2a8>
 802839c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80283a0:	2908      	cmp	r1, #8
 80283a2:	f63f af79 	bhi.w	8028298 <_strtod_l+0x1b0>
 80283a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80283aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80283ac:	9206      	str	r2, [sp, #24]
 80283ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80283b0:	1c51      	adds	r1, r2, #1
 80283b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80283b4:	7852      	ldrb	r2, [r2, #1]
 80283b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80283ba:	2e09      	cmp	r6, #9
 80283bc:	d937      	bls.n	802842e <_strtod_l+0x346>
 80283be:	9e06      	ldr	r6, [sp, #24]
 80283c0:	1b89      	subs	r1, r1, r6
 80283c2:	2908      	cmp	r1, #8
 80283c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80283c8:	dc02      	bgt.n	80283d0 <_strtod_l+0x2e8>
 80283ca:	4576      	cmp	r6, lr
 80283cc:	bfa8      	it	ge
 80283ce:	4676      	movge	r6, lr
 80283d0:	f1bc 0f00 	cmp.w	ip, #0
 80283d4:	d000      	beq.n	80283d8 <_strtod_l+0x2f0>
 80283d6:	4276      	negs	r6, r6
 80283d8:	2d00      	cmp	r5, #0
 80283da:	d14d      	bne.n	8028478 <_strtod_l+0x390>
 80283dc:	9904      	ldr	r1, [sp, #16]
 80283de:	4301      	orrs	r1, r0
 80283e0:	f47f aec6 	bne.w	8028170 <_strtod_l+0x88>
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	f47f aee1 	bne.w	80281ac <_strtod_l+0xc4>
 80283ea:	2a69      	cmp	r2, #105	; 0x69
 80283ec:	d027      	beq.n	802843e <_strtod_l+0x356>
 80283ee:	dc24      	bgt.n	802843a <_strtod_l+0x352>
 80283f0:	2a49      	cmp	r2, #73	; 0x49
 80283f2:	d024      	beq.n	802843e <_strtod_l+0x356>
 80283f4:	2a4e      	cmp	r2, #78	; 0x4e
 80283f6:	f47f aed9 	bne.w	80281ac <_strtod_l+0xc4>
 80283fa:	499f      	ldr	r1, [pc, #636]	; (8028678 <_strtod_l+0x590>)
 80283fc:	a817      	add	r0, sp, #92	; 0x5c
 80283fe:	f001 faed 	bl	80299dc <__match>
 8028402:	2800      	cmp	r0, #0
 8028404:	f43f aed2 	beq.w	80281ac <_strtod_l+0xc4>
 8028408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802840a:	781b      	ldrb	r3, [r3, #0]
 802840c:	2b28      	cmp	r3, #40	; 0x28
 802840e:	d12d      	bne.n	802846c <_strtod_l+0x384>
 8028410:	499a      	ldr	r1, [pc, #616]	; (802867c <_strtod_l+0x594>)
 8028412:	aa1a      	add	r2, sp, #104	; 0x68
 8028414:	a817      	add	r0, sp, #92	; 0x5c
 8028416:	f001 faf5 	bl	8029a04 <__hexnan>
 802841a:	2805      	cmp	r0, #5
 802841c:	d126      	bne.n	802846c <_strtod_l+0x384>
 802841e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028420:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8028424:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8028428:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 802842c:	e6a0      	b.n	8028170 <_strtod_l+0x88>
 802842e:	210a      	movs	r1, #10
 8028430:	fb01 2e0e 	mla	lr, r1, lr, r2
 8028434:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8028438:	e7b9      	b.n	80283ae <_strtod_l+0x2c6>
 802843a:	2a6e      	cmp	r2, #110	; 0x6e
 802843c:	e7db      	b.n	80283f6 <_strtod_l+0x30e>
 802843e:	4990      	ldr	r1, [pc, #576]	; (8028680 <_strtod_l+0x598>)
 8028440:	a817      	add	r0, sp, #92	; 0x5c
 8028442:	f001 facb 	bl	80299dc <__match>
 8028446:	2800      	cmp	r0, #0
 8028448:	f43f aeb0 	beq.w	80281ac <_strtod_l+0xc4>
 802844c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802844e:	498d      	ldr	r1, [pc, #564]	; (8028684 <_strtod_l+0x59c>)
 8028450:	3b01      	subs	r3, #1
 8028452:	a817      	add	r0, sp, #92	; 0x5c
 8028454:	9317      	str	r3, [sp, #92]	; 0x5c
 8028456:	f001 fac1 	bl	80299dc <__match>
 802845a:	b910      	cbnz	r0, 8028462 <_strtod_l+0x37a>
 802845c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802845e:	3301      	adds	r3, #1
 8028460:	9317      	str	r3, [sp, #92]	; 0x5c
 8028462:	f8df b230 	ldr.w	fp, [pc, #560]	; 8028694 <_strtod_l+0x5ac>
 8028466:	f04f 0a00 	mov.w	sl, #0
 802846a:	e681      	b.n	8028170 <_strtod_l+0x88>
 802846c:	4886      	ldr	r0, [pc, #536]	; (8028688 <_strtod_l+0x5a0>)
 802846e:	f002 fc87 	bl	802ad80 <nan>
 8028472:	ec5b ab10 	vmov	sl, fp, d0
 8028476:	e67b      	b.n	8028170 <_strtod_l+0x88>
 8028478:	9b05      	ldr	r3, [sp, #20]
 802847a:	9807      	ldr	r0, [sp, #28]
 802847c:	1af3      	subs	r3, r6, r3
 802847e:	2f00      	cmp	r7, #0
 8028480:	bf08      	it	eq
 8028482:	462f      	moveq	r7, r5
 8028484:	2d10      	cmp	r5, #16
 8028486:	9306      	str	r3, [sp, #24]
 8028488:	46a8      	mov	r8, r5
 802848a:	bfa8      	it	ge
 802848c:	f04f 0810 	movge.w	r8, #16
 8028490:	f7df ff80 	bl	8008394 <__aeabi_ui2d>
 8028494:	2d09      	cmp	r5, #9
 8028496:	4682      	mov	sl, r0
 8028498:	468b      	mov	fp, r1
 802849a:	dd13      	ble.n	80284c4 <_strtod_l+0x3dc>
 802849c:	4b7b      	ldr	r3, [pc, #492]	; (802868c <_strtod_l+0x5a4>)
 802849e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80284a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80284a6:	f7df ffef 	bl	8008488 <__aeabi_dmul>
 80284aa:	4682      	mov	sl, r0
 80284ac:	4648      	mov	r0, r9
 80284ae:	468b      	mov	fp, r1
 80284b0:	f7df ff70 	bl	8008394 <__aeabi_ui2d>
 80284b4:	4602      	mov	r2, r0
 80284b6:	460b      	mov	r3, r1
 80284b8:	4650      	mov	r0, sl
 80284ba:	4659      	mov	r1, fp
 80284bc:	f7df fe2e 	bl	800811c <__adddf3>
 80284c0:	4682      	mov	sl, r0
 80284c2:	468b      	mov	fp, r1
 80284c4:	2d0f      	cmp	r5, #15
 80284c6:	dc38      	bgt.n	802853a <_strtod_l+0x452>
 80284c8:	9b06      	ldr	r3, [sp, #24]
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	f43f ae50 	beq.w	8028170 <_strtod_l+0x88>
 80284d0:	dd24      	ble.n	802851c <_strtod_l+0x434>
 80284d2:	2b16      	cmp	r3, #22
 80284d4:	dc0b      	bgt.n	80284ee <_strtod_l+0x406>
 80284d6:	496d      	ldr	r1, [pc, #436]	; (802868c <_strtod_l+0x5a4>)
 80284d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80284dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80284e0:	4652      	mov	r2, sl
 80284e2:	465b      	mov	r3, fp
 80284e4:	f7df ffd0 	bl	8008488 <__aeabi_dmul>
 80284e8:	4682      	mov	sl, r0
 80284ea:	468b      	mov	fp, r1
 80284ec:	e640      	b.n	8028170 <_strtod_l+0x88>
 80284ee:	9a06      	ldr	r2, [sp, #24]
 80284f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80284f4:	4293      	cmp	r3, r2
 80284f6:	db20      	blt.n	802853a <_strtod_l+0x452>
 80284f8:	4c64      	ldr	r4, [pc, #400]	; (802868c <_strtod_l+0x5a4>)
 80284fa:	f1c5 050f 	rsb	r5, r5, #15
 80284fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8028502:	4652      	mov	r2, sl
 8028504:	465b      	mov	r3, fp
 8028506:	e9d1 0100 	ldrd	r0, r1, [r1]
 802850a:	f7df ffbd 	bl	8008488 <__aeabi_dmul>
 802850e:	9b06      	ldr	r3, [sp, #24]
 8028510:	1b5d      	subs	r5, r3, r5
 8028512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8028516:	e9d4 2300 	ldrd	r2, r3, [r4]
 802851a:	e7e3      	b.n	80284e4 <_strtod_l+0x3fc>
 802851c:	9b06      	ldr	r3, [sp, #24]
 802851e:	3316      	adds	r3, #22
 8028520:	db0b      	blt.n	802853a <_strtod_l+0x452>
 8028522:	9b05      	ldr	r3, [sp, #20]
 8028524:	1b9e      	subs	r6, r3, r6
 8028526:	4b59      	ldr	r3, [pc, #356]	; (802868c <_strtod_l+0x5a4>)
 8028528:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802852c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8028530:	4650      	mov	r0, sl
 8028532:	4659      	mov	r1, fp
 8028534:	f7e0 f8d2 	bl	80086dc <__aeabi_ddiv>
 8028538:	e7d6      	b.n	80284e8 <_strtod_l+0x400>
 802853a:	9b06      	ldr	r3, [sp, #24]
 802853c:	eba5 0808 	sub.w	r8, r5, r8
 8028540:	4498      	add	r8, r3
 8028542:	f1b8 0f00 	cmp.w	r8, #0
 8028546:	dd74      	ble.n	8028632 <_strtod_l+0x54a>
 8028548:	f018 030f 	ands.w	r3, r8, #15
 802854c:	d00a      	beq.n	8028564 <_strtod_l+0x47c>
 802854e:	494f      	ldr	r1, [pc, #316]	; (802868c <_strtod_l+0x5a4>)
 8028550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8028554:	4652      	mov	r2, sl
 8028556:	465b      	mov	r3, fp
 8028558:	e9d1 0100 	ldrd	r0, r1, [r1]
 802855c:	f7df ff94 	bl	8008488 <__aeabi_dmul>
 8028560:	4682      	mov	sl, r0
 8028562:	468b      	mov	fp, r1
 8028564:	f038 080f 	bics.w	r8, r8, #15
 8028568:	d04f      	beq.n	802860a <_strtod_l+0x522>
 802856a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802856e:	dd22      	ble.n	80285b6 <_strtod_l+0x4ce>
 8028570:	2500      	movs	r5, #0
 8028572:	462e      	mov	r6, r5
 8028574:	9507      	str	r5, [sp, #28]
 8028576:	9505      	str	r5, [sp, #20]
 8028578:	2322      	movs	r3, #34	; 0x22
 802857a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8028694 <_strtod_l+0x5ac>
 802857e:	6023      	str	r3, [r4, #0]
 8028580:	f04f 0a00 	mov.w	sl, #0
 8028584:	9b07      	ldr	r3, [sp, #28]
 8028586:	2b00      	cmp	r3, #0
 8028588:	f43f adf2 	beq.w	8028170 <_strtod_l+0x88>
 802858c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802858e:	4620      	mov	r0, r4
 8028590:	f001 fb8e 	bl	8029cb0 <_Bfree>
 8028594:	9905      	ldr	r1, [sp, #20]
 8028596:	4620      	mov	r0, r4
 8028598:	f001 fb8a 	bl	8029cb0 <_Bfree>
 802859c:	4631      	mov	r1, r6
 802859e:	4620      	mov	r0, r4
 80285a0:	f001 fb86 	bl	8029cb0 <_Bfree>
 80285a4:	9907      	ldr	r1, [sp, #28]
 80285a6:	4620      	mov	r0, r4
 80285a8:	f001 fb82 	bl	8029cb0 <_Bfree>
 80285ac:	4629      	mov	r1, r5
 80285ae:	4620      	mov	r0, r4
 80285b0:	f001 fb7e 	bl	8029cb0 <_Bfree>
 80285b4:	e5dc      	b.n	8028170 <_strtod_l+0x88>
 80285b6:	4b36      	ldr	r3, [pc, #216]	; (8028690 <_strtod_l+0x5a8>)
 80285b8:	9304      	str	r3, [sp, #16]
 80285ba:	2300      	movs	r3, #0
 80285bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80285c0:	4650      	mov	r0, sl
 80285c2:	4659      	mov	r1, fp
 80285c4:	4699      	mov	r9, r3
 80285c6:	f1b8 0f01 	cmp.w	r8, #1
 80285ca:	dc21      	bgt.n	8028610 <_strtod_l+0x528>
 80285cc:	b10b      	cbz	r3, 80285d2 <_strtod_l+0x4ea>
 80285ce:	4682      	mov	sl, r0
 80285d0:	468b      	mov	fp, r1
 80285d2:	4b2f      	ldr	r3, [pc, #188]	; (8028690 <_strtod_l+0x5a8>)
 80285d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80285d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80285dc:	4652      	mov	r2, sl
 80285de:	465b      	mov	r3, fp
 80285e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80285e4:	f7df ff50 	bl	8008488 <__aeabi_dmul>
 80285e8:	4b2a      	ldr	r3, [pc, #168]	; (8028694 <_strtod_l+0x5ac>)
 80285ea:	460a      	mov	r2, r1
 80285ec:	400b      	ands	r3, r1
 80285ee:	492a      	ldr	r1, [pc, #168]	; (8028698 <_strtod_l+0x5b0>)
 80285f0:	428b      	cmp	r3, r1
 80285f2:	4682      	mov	sl, r0
 80285f4:	d8bc      	bhi.n	8028570 <_strtod_l+0x488>
 80285f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80285fa:	428b      	cmp	r3, r1
 80285fc:	bf86      	itte	hi
 80285fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 802869c <_strtod_l+0x5b4>
 8028602:	f04f 3aff 	movhi.w	sl, #4294967295
 8028606:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802860a:	2300      	movs	r3, #0
 802860c:	9304      	str	r3, [sp, #16]
 802860e:	e084      	b.n	802871a <_strtod_l+0x632>
 8028610:	f018 0f01 	tst.w	r8, #1
 8028614:	d005      	beq.n	8028622 <_strtod_l+0x53a>
 8028616:	9b04      	ldr	r3, [sp, #16]
 8028618:	e9d3 2300 	ldrd	r2, r3, [r3]
 802861c:	f7df ff34 	bl	8008488 <__aeabi_dmul>
 8028620:	2301      	movs	r3, #1
 8028622:	9a04      	ldr	r2, [sp, #16]
 8028624:	3208      	adds	r2, #8
 8028626:	f109 0901 	add.w	r9, r9, #1
 802862a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802862e:	9204      	str	r2, [sp, #16]
 8028630:	e7c9      	b.n	80285c6 <_strtod_l+0x4de>
 8028632:	d0ea      	beq.n	802860a <_strtod_l+0x522>
 8028634:	f1c8 0800 	rsb	r8, r8, #0
 8028638:	f018 020f 	ands.w	r2, r8, #15
 802863c:	d00a      	beq.n	8028654 <_strtod_l+0x56c>
 802863e:	4b13      	ldr	r3, [pc, #76]	; (802868c <_strtod_l+0x5a4>)
 8028640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028644:	4650      	mov	r0, sl
 8028646:	4659      	mov	r1, fp
 8028648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802864c:	f7e0 f846 	bl	80086dc <__aeabi_ddiv>
 8028650:	4682      	mov	sl, r0
 8028652:	468b      	mov	fp, r1
 8028654:	ea5f 1828 	movs.w	r8, r8, asr #4
 8028658:	d0d7      	beq.n	802860a <_strtod_l+0x522>
 802865a:	f1b8 0f1f 	cmp.w	r8, #31
 802865e:	dd1f      	ble.n	80286a0 <_strtod_l+0x5b8>
 8028660:	2500      	movs	r5, #0
 8028662:	462e      	mov	r6, r5
 8028664:	9507      	str	r5, [sp, #28]
 8028666:	9505      	str	r5, [sp, #20]
 8028668:	2322      	movs	r3, #34	; 0x22
 802866a:	f04f 0a00 	mov.w	sl, #0
 802866e:	f04f 0b00 	mov.w	fp, #0
 8028672:	6023      	str	r3, [r4, #0]
 8028674:	e786      	b.n	8028584 <_strtod_l+0x49c>
 8028676:	bf00      	nop
 8028678:	0802cd35 	.word	0x0802cd35
 802867c:	0802cd4c 	.word	0x0802cd4c
 8028680:	0802cd2c 	.word	0x0802cd2c
 8028684:	0802cd2f 	.word	0x0802cd2f
 8028688:	0802d052 	.word	0x0802d052
 802868c:	0802cf10 	.word	0x0802cf10
 8028690:	0802cee8 	.word	0x0802cee8
 8028694:	7ff00000 	.word	0x7ff00000
 8028698:	7ca00000 	.word	0x7ca00000
 802869c:	7fefffff 	.word	0x7fefffff
 80286a0:	f018 0310 	ands.w	r3, r8, #16
 80286a4:	bf18      	it	ne
 80286a6:	236a      	movne	r3, #106	; 0x6a
 80286a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8028a58 <_strtod_l+0x970>
 80286ac:	9304      	str	r3, [sp, #16]
 80286ae:	4650      	mov	r0, sl
 80286b0:	4659      	mov	r1, fp
 80286b2:	2300      	movs	r3, #0
 80286b4:	f018 0f01 	tst.w	r8, #1
 80286b8:	d004      	beq.n	80286c4 <_strtod_l+0x5dc>
 80286ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80286be:	f7df fee3 	bl	8008488 <__aeabi_dmul>
 80286c2:	2301      	movs	r3, #1
 80286c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80286c8:	f109 0908 	add.w	r9, r9, #8
 80286cc:	d1f2      	bne.n	80286b4 <_strtod_l+0x5cc>
 80286ce:	b10b      	cbz	r3, 80286d4 <_strtod_l+0x5ec>
 80286d0:	4682      	mov	sl, r0
 80286d2:	468b      	mov	fp, r1
 80286d4:	9b04      	ldr	r3, [sp, #16]
 80286d6:	b1c3      	cbz	r3, 802870a <_strtod_l+0x622>
 80286d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80286dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80286e0:	2b00      	cmp	r3, #0
 80286e2:	4659      	mov	r1, fp
 80286e4:	dd11      	ble.n	802870a <_strtod_l+0x622>
 80286e6:	2b1f      	cmp	r3, #31
 80286e8:	f340 8124 	ble.w	8028934 <_strtod_l+0x84c>
 80286ec:	2b34      	cmp	r3, #52	; 0x34
 80286ee:	bfde      	ittt	le
 80286f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80286f4:	f04f 33ff 	movle.w	r3, #4294967295
 80286f8:	fa03 f202 	lslle.w	r2, r3, r2
 80286fc:	f04f 0a00 	mov.w	sl, #0
 8028700:	bfcc      	ite	gt
 8028702:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8028706:	ea02 0b01 	andle.w	fp, r2, r1
 802870a:	2200      	movs	r2, #0
 802870c:	2300      	movs	r3, #0
 802870e:	4650      	mov	r0, sl
 8028710:	4659      	mov	r1, fp
 8028712:	f7e0 f921 	bl	8008958 <__aeabi_dcmpeq>
 8028716:	2800      	cmp	r0, #0
 8028718:	d1a2      	bne.n	8028660 <_strtod_l+0x578>
 802871a:	9b07      	ldr	r3, [sp, #28]
 802871c:	9300      	str	r3, [sp, #0]
 802871e:	9908      	ldr	r1, [sp, #32]
 8028720:	462b      	mov	r3, r5
 8028722:	463a      	mov	r2, r7
 8028724:	4620      	mov	r0, r4
 8028726:	f001 fb2b 	bl	8029d80 <__s2b>
 802872a:	9007      	str	r0, [sp, #28]
 802872c:	2800      	cmp	r0, #0
 802872e:	f43f af1f 	beq.w	8028570 <_strtod_l+0x488>
 8028732:	9b05      	ldr	r3, [sp, #20]
 8028734:	1b9e      	subs	r6, r3, r6
 8028736:	9b06      	ldr	r3, [sp, #24]
 8028738:	2b00      	cmp	r3, #0
 802873a:	bfb4      	ite	lt
 802873c:	4633      	movlt	r3, r6
 802873e:	2300      	movge	r3, #0
 8028740:	930c      	str	r3, [sp, #48]	; 0x30
 8028742:	9b06      	ldr	r3, [sp, #24]
 8028744:	2500      	movs	r5, #0
 8028746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802874a:	9312      	str	r3, [sp, #72]	; 0x48
 802874c:	462e      	mov	r6, r5
 802874e:	9b07      	ldr	r3, [sp, #28]
 8028750:	4620      	mov	r0, r4
 8028752:	6859      	ldr	r1, [r3, #4]
 8028754:	f001 fa6c 	bl	8029c30 <_Balloc>
 8028758:	9005      	str	r0, [sp, #20]
 802875a:	2800      	cmp	r0, #0
 802875c:	f43f af0c 	beq.w	8028578 <_strtod_l+0x490>
 8028760:	9b07      	ldr	r3, [sp, #28]
 8028762:	691a      	ldr	r2, [r3, #16]
 8028764:	3202      	adds	r2, #2
 8028766:	f103 010c 	add.w	r1, r3, #12
 802876a:	0092      	lsls	r2, r2, #2
 802876c:	300c      	adds	r0, #12
 802876e:	f7ff fc59 	bl	8028024 <memcpy>
 8028772:	ec4b ab10 	vmov	d0, sl, fp
 8028776:	aa1a      	add	r2, sp, #104	; 0x68
 8028778:	a919      	add	r1, sp, #100	; 0x64
 802877a:	4620      	mov	r0, r4
 802877c:	f001 fe46 	bl	802a40c <__d2b>
 8028780:	ec4b ab18 	vmov	d8, sl, fp
 8028784:	9018      	str	r0, [sp, #96]	; 0x60
 8028786:	2800      	cmp	r0, #0
 8028788:	f43f aef6 	beq.w	8028578 <_strtod_l+0x490>
 802878c:	2101      	movs	r1, #1
 802878e:	4620      	mov	r0, r4
 8028790:	f001 fb90 	bl	8029eb4 <__i2b>
 8028794:	4606      	mov	r6, r0
 8028796:	2800      	cmp	r0, #0
 8028798:	f43f aeee 	beq.w	8028578 <_strtod_l+0x490>
 802879c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802879e:	9904      	ldr	r1, [sp, #16]
 80287a0:	2b00      	cmp	r3, #0
 80287a2:	bfab      	itete	ge
 80287a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80287a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80287a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80287aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80287ae:	bfac      	ite	ge
 80287b0:	eb03 0902 	addge.w	r9, r3, r2
 80287b4:	1ad7      	sublt	r7, r2, r3
 80287b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80287b8:	eba3 0801 	sub.w	r8, r3, r1
 80287bc:	4490      	add	r8, r2
 80287be:	4ba1      	ldr	r3, [pc, #644]	; (8028a44 <_strtod_l+0x95c>)
 80287c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80287c4:	4598      	cmp	r8, r3
 80287c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80287ca:	f280 80c7 	bge.w	802895c <_strtod_l+0x874>
 80287ce:	eba3 0308 	sub.w	r3, r3, r8
 80287d2:	2b1f      	cmp	r3, #31
 80287d4:	eba2 0203 	sub.w	r2, r2, r3
 80287d8:	f04f 0101 	mov.w	r1, #1
 80287dc:	f300 80b1 	bgt.w	8028942 <_strtod_l+0x85a>
 80287e0:	fa01 f303 	lsl.w	r3, r1, r3
 80287e4:	930d      	str	r3, [sp, #52]	; 0x34
 80287e6:	2300      	movs	r3, #0
 80287e8:	9308      	str	r3, [sp, #32]
 80287ea:	eb09 0802 	add.w	r8, r9, r2
 80287ee:	9b04      	ldr	r3, [sp, #16]
 80287f0:	45c1      	cmp	r9, r8
 80287f2:	4417      	add	r7, r2
 80287f4:	441f      	add	r7, r3
 80287f6:	464b      	mov	r3, r9
 80287f8:	bfa8      	it	ge
 80287fa:	4643      	movge	r3, r8
 80287fc:	42bb      	cmp	r3, r7
 80287fe:	bfa8      	it	ge
 8028800:	463b      	movge	r3, r7
 8028802:	2b00      	cmp	r3, #0
 8028804:	bfc2      	ittt	gt
 8028806:	eba8 0803 	subgt.w	r8, r8, r3
 802880a:	1aff      	subgt	r7, r7, r3
 802880c:	eba9 0903 	subgt.w	r9, r9, r3
 8028810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028812:	2b00      	cmp	r3, #0
 8028814:	dd17      	ble.n	8028846 <_strtod_l+0x75e>
 8028816:	4631      	mov	r1, r6
 8028818:	461a      	mov	r2, r3
 802881a:	4620      	mov	r0, r4
 802881c:	f001 fc0a 	bl	802a034 <__pow5mult>
 8028820:	4606      	mov	r6, r0
 8028822:	2800      	cmp	r0, #0
 8028824:	f43f aea8 	beq.w	8028578 <_strtod_l+0x490>
 8028828:	4601      	mov	r1, r0
 802882a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802882c:	4620      	mov	r0, r4
 802882e:	f001 fb57 	bl	8029ee0 <__multiply>
 8028832:	900b      	str	r0, [sp, #44]	; 0x2c
 8028834:	2800      	cmp	r0, #0
 8028836:	f43f ae9f 	beq.w	8028578 <_strtod_l+0x490>
 802883a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802883c:	4620      	mov	r0, r4
 802883e:	f001 fa37 	bl	8029cb0 <_Bfree>
 8028842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028844:	9318      	str	r3, [sp, #96]	; 0x60
 8028846:	f1b8 0f00 	cmp.w	r8, #0
 802884a:	f300 808c 	bgt.w	8028966 <_strtod_l+0x87e>
 802884e:	9b06      	ldr	r3, [sp, #24]
 8028850:	2b00      	cmp	r3, #0
 8028852:	dd08      	ble.n	8028866 <_strtod_l+0x77e>
 8028854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028856:	9905      	ldr	r1, [sp, #20]
 8028858:	4620      	mov	r0, r4
 802885a:	f001 fbeb 	bl	802a034 <__pow5mult>
 802885e:	9005      	str	r0, [sp, #20]
 8028860:	2800      	cmp	r0, #0
 8028862:	f43f ae89 	beq.w	8028578 <_strtod_l+0x490>
 8028866:	2f00      	cmp	r7, #0
 8028868:	dd08      	ble.n	802887c <_strtod_l+0x794>
 802886a:	9905      	ldr	r1, [sp, #20]
 802886c:	463a      	mov	r2, r7
 802886e:	4620      	mov	r0, r4
 8028870:	f001 fc3a 	bl	802a0e8 <__lshift>
 8028874:	9005      	str	r0, [sp, #20]
 8028876:	2800      	cmp	r0, #0
 8028878:	f43f ae7e 	beq.w	8028578 <_strtod_l+0x490>
 802887c:	f1b9 0f00 	cmp.w	r9, #0
 8028880:	dd08      	ble.n	8028894 <_strtod_l+0x7ac>
 8028882:	4631      	mov	r1, r6
 8028884:	464a      	mov	r2, r9
 8028886:	4620      	mov	r0, r4
 8028888:	f001 fc2e 	bl	802a0e8 <__lshift>
 802888c:	4606      	mov	r6, r0
 802888e:	2800      	cmp	r0, #0
 8028890:	f43f ae72 	beq.w	8028578 <_strtod_l+0x490>
 8028894:	9a05      	ldr	r2, [sp, #20]
 8028896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028898:	4620      	mov	r0, r4
 802889a:	f001 fcb1 	bl	802a200 <__mdiff>
 802889e:	4605      	mov	r5, r0
 80288a0:	2800      	cmp	r0, #0
 80288a2:	f43f ae69 	beq.w	8028578 <_strtod_l+0x490>
 80288a6:	68c3      	ldr	r3, [r0, #12]
 80288a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80288aa:	2300      	movs	r3, #0
 80288ac:	60c3      	str	r3, [r0, #12]
 80288ae:	4631      	mov	r1, r6
 80288b0:	f001 fc8a 	bl	802a1c8 <__mcmp>
 80288b4:	2800      	cmp	r0, #0
 80288b6:	da60      	bge.n	802897a <_strtod_l+0x892>
 80288b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80288ba:	ea53 030a 	orrs.w	r3, r3, sl
 80288be:	f040 8082 	bne.w	80289c6 <_strtod_l+0x8de>
 80288c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80288c6:	2b00      	cmp	r3, #0
 80288c8:	d17d      	bne.n	80289c6 <_strtod_l+0x8de>
 80288ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80288ce:	0d1b      	lsrs	r3, r3, #20
 80288d0:	051b      	lsls	r3, r3, #20
 80288d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80288d6:	d976      	bls.n	80289c6 <_strtod_l+0x8de>
 80288d8:	696b      	ldr	r3, [r5, #20]
 80288da:	b913      	cbnz	r3, 80288e2 <_strtod_l+0x7fa>
 80288dc:	692b      	ldr	r3, [r5, #16]
 80288de:	2b01      	cmp	r3, #1
 80288e0:	dd71      	ble.n	80289c6 <_strtod_l+0x8de>
 80288e2:	4629      	mov	r1, r5
 80288e4:	2201      	movs	r2, #1
 80288e6:	4620      	mov	r0, r4
 80288e8:	f001 fbfe 	bl	802a0e8 <__lshift>
 80288ec:	4631      	mov	r1, r6
 80288ee:	4605      	mov	r5, r0
 80288f0:	f001 fc6a 	bl	802a1c8 <__mcmp>
 80288f4:	2800      	cmp	r0, #0
 80288f6:	dd66      	ble.n	80289c6 <_strtod_l+0x8de>
 80288f8:	9904      	ldr	r1, [sp, #16]
 80288fa:	4a53      	ldr	r2, [pc, #332]	; (8028a48 <_strtod_l+0x960>)
 80288fc:	465b      	mov	r3, fp
 80288fe:	2900      	cmp	r1, #0
 8028900:	f000 8081 	beq.w	8028a06 <_strtod_l+0x91e>
 8028904:	ea02 010b 	and.w	r1, r2, fp
 8028908:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802890c:	dc7b      	bgt.n	8028a06 <_strtod_l+0x91e>
 802890e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8028912:	f77f aea9 	ble.w	8028668 <_strtod_l+0x580>
 8028916:	4b4d      	ldr	r3, [pc, #308]	; (8028a4c <_strtod_l+0x964>)
 8028918:	4650      	mov	r0, sl
 802891a:	4659      	mov	r1, fp
 802891c:	2200      	movs	r2, #0
 802891e:	f7df fdb3 	bl	8008488 <__aeabi_dmul>
 8028922:	460b      	mov	r3, r1
 8028924:	4303      	orrs	r3, r0
 8028926:	bf08      	it	eq
 8028928:	2322      	moveq	r3, #34	; 0x22
 802892a:	4682      	mov	sl, r0
 802892c:	468b      	mov	fp, r1
 802892e:	bf08      	it	eq
 8028930:	6023      	streq	r3, [r4, #0]
 8028932:	e62b      	b.n	802858c <_strtod_l+0x4a4>
 8028934:	f04f 32ff 	mov.w	r2, #4294967295
 8028938:	fa02 f303 	lsl.w	r3, r2, r3
 802893c:	ea03 0a0a 	and.w	sl, r3, sl
 8028940:	e6e3      	b.n	802870a <_strtod_l+0x622>
 8028942:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8028946:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802894a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802894e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8028952:	fa01 f308 	lsl.w	r3, r1, r8
 8028956:	9308      	str	r3, [sp, #32]
 8028958:	910d      	str	r1, [sp, #52]	; 0x34
 802895a:	e746      	b.n	80287ea <_strtod_l+0x702>
 802895c:	2300      	movs	r3, #0
 802895e:	9308      	str	r3, [sp, #32]
 8028960:	2301      	movs	r3, #1
 8028962:	930d      	str	r3, [sp, #52]	; 0x34
 8028964:	e741      	b.n	80287ea <_strtod_l+0x702>
 8028966:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028968:	4642      	mov	r2, r8
 802896a:	4620      	mov	r0, r4
 802896c:	f001 fbbc 	bl	802a0e8 <__lshift>
 8028970:	9018      	str	r0, [sp, #96]	; 0x60
 8028972:	2800      	cmp	r0, #0
 8028974:	f47f af6b 	bne.w	802884e <_strtod_l+0x766>
 8028978:	e5fe      	b.n	8028578 <_strtod_l+0x490>
 802897a:	465f      	mov	r7, fp
 802897c:	d16e      	bne.n	8028a5c <_strtod_l+0x974>
 802897e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028984:	b342      	cbz	r2, 80289d8 <_strtod_l+0x8f0>
 8028986:	4a32      	ldr	r2, [pc, #200]	; (8028a50 <_strtod_l+0x968>)
 8028988:	4293      	cmp	r3, r2
 802898a:	d128      	bne.n	80289de <_strtod_l+0x8f6>
 802898c:	9b04      	ldr	r3, [sp, #16]
 802898e:	4651      	mov	r1, sl
 8028990:	b1eb      	cbz	r3, 80289ce <_strtod_l+0x8e6>
 8028992:	4b2d      	ldr	r3, [pc, #180]	; (8028a48 <_strtod_l+0x960>)
 8028994:	403b      	ands	r3, r7
 8028996:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802899a:	f04f 32ff 	mov.w	r2, #4294967295
 802899e:	d819      	bhi.n	80289d4 <_strtod_l+0x8ec>
 80289a0:	0d1b      	lsrs	r3, r3, #20
 80289a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80289a6:	fa02 f303 	lsl.w	r3, r2, r3
 80289aa:	4299      	cmp	r1, r3
 80289ac:	d117      	bne.n	80289de <_strtod_l+0x8f6>
 80289ae:	4b29      	ldr	r3, [pc, #164]	; (8028a54 <_strtod_l+0x96c>)
 80289b0:	429f      	cmp	r7, r3
 80289b2:	d102      	bne.n	80289ba <_strtod_l+0x8d2>
 80289b4:	3101      	adds	r1, #1
 80289b6:	f43f addf 	beq.w	8028578 <_strtod_l+0x490>
 80289ba:	4b23      	ldr	r3, [pc, #140]	; (8028a48 <_strtod_l+0x960>)
 80289bc:	403b      	ands	r3, r7
 80289be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80289c2:	f04f 0a00 	mov.w	sl, #0
 80289c6:	9b04      	ldr	r3, [sp, #16]
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d1a4      	bne.n	8028916 <_strtod_l+0x82e>
 80289cc:	e5de      	b.n	802858c <_strtod_l+0x4a4>
 80289ce:	f04f 33ff 	mov.w	r3, #4294967295
 80289d2:	e7ea      	b.n	80289aa <_strtod_l+0x8c2>
 80289d4:	4613      	mov	r3, r2
 80289d6:	e7e8      	b.n	80289aa <_strtod_l+0x8c2>
 80289d8:	ea53 030a 	orrs.w	r3, r3, sl
 80289dc:	d08c      	beq.n	80288f8 <_strtod_l+0x810>
 80289de:	9b08      	ldr	r3, [sp, #32]
 80289e0:	b1db      	cbz	r3, 8028a1a <_strtod_l+0x932>
 80289e2:	423b      	tst	r3, r7
 80289e4:	d0ef      	beq.n	80289c6 <_strtod_l+0x8de>
 80289e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80289e8:	9a04      	ldr	r2, [sp, #16]
 80289ea:	4650      	mov	r0, sl
 80289ec:	4659      	mov	r1, fp
 80289ee:	b1c3      	cbz	r3, 8028a22 <_strtod_l+0x93a>
 80289f0:	f7ff fb5d 	bl	80280ae <sulp>
 80289f4:	4602      	mov	r2, r0
 80289f6:	460b      	mov	r3, r1
 80289f8:	ec51 0b18 	vmov	r0, r1, d8
 80289fc:	f7df fb8e 	bl	800811c <__adddf3>
 8028a00:	4682      	mov	sl, r0
 8028a02:	468b      	mov	fp, r1
 8028a04:	e7df      	b.n	80289c6 <_strtod_l+0x8de>
 8028a06:	4013      	ands	r3, r2
 8028a08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8028a0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8028a10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8028a14:	f04f 3aff 	mov.w	sl, #4294967295
 8028a18:	e7d5      	b.n	80289c6 <_strtod_l+0x8de>
 8028a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028a1c:	ea13 0f0a 	tst.w	r3, sl
 8028a20:	e7e0      	b.n	80289e4 <_strtod_l+0x8fc>
 8028a22:	f7ff fb44 	bl	80280ae <sulp>
 8028a26:	4602      	mov	r2, r0
 8028a28:	460b      	mov	r3, r1
 8028a2a:	ec51 0b18 	vmov	r0, r1, d8
 8028a2e:	f7df fb73 	bl	8008118 <__aeabi_dsub>
 8028a32:	2200      	movs	r2, #0
 8028a34:	2300      	movs	r3, #0
 8028a36:	4682      	mov	sl, r0
 8028a38:	468b      	mov	fp, r1
 8028a3a:	f7df ff8d 	bl	8008958 <__aeabi_dcmpeq>
 8028a3e:	2800      	cmp	r0, #0
 8028a40:	d0c1      	beq.n	80289c6 <_strtod_l+0x8de>
 8028a42:	e611      	b.n	8028668 <_strtod_l+0x580>
 8028a44:	fffffc02 	.word	0xfffffc02
 8028a48:	7ff00000 	.word	0x7ff00000
 8028a4c:	39500000 	.word	0x39500000
 8028a50:	000fffff 	.word	0x000fffff
 8028a54:	7fefffff 	.word	0x7fefffff
 8028a58:	0802cd60 	.word	0x0802cd60
 8028a5c:	4631      	mov	r1, r6
 8028a5e:	4628      	mov	r0, r5
 8028a60:	f001 fd30 	bl	802a4c4 <__ratio>
 8028a64:	ec59 8b10 	vmov	r8, r9, d0
 8028a68:	ee10 0a10 	vmov	r0, s0
 8028a6c:	2200      	movs	r2, #0
 8028a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8028a72:	4649      	mov	r1, r9
 8028a74:	f7df ff84 	bl	8008980 <__aeabi_dcmple>
 8028a78:	2800      	cmp	r0, #0
 8028a7a:	d07a      	beq.n	8028b72 <_strtod_l+0xa8a>
 8028a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028a7e:	2b00      	cmp	r3, #0
 8028a80:	d04a      	beq.n	8028b18 <_strtod_l+0xa30>
 8028a82:	4b95      	ldr	r3, [pc, #596]	; (8028cd8 <_strtod_l+0xbf0>)
 8028a84:	2200      	movs	r2, #0
 8028a86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8028a8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8028cd8 <_strtod_l+0xbf0>
 8028a8e:	f04f 0800 	mov.w	r8, #0
 8028a92:	4b92      	ldr	r3, [pc, #584]	; (8028cdc <_strtod_l+0xbf4>)
 8028a94:	403b      	ands	r3, r7
 8028a96:	930d      	str	r3, [sp, #52]	; 0x34
 8028a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028a9a:	4b91      	ldr	r3, [pc, #580]	; (8028ce0 <_strtod_l+0xbf8>)
 8028a9c:	429a      	cmp	r2, r3
 8028a9e:	f040 80b0 	bne.w	8028c02 <_strtod_l+0xb1a>
 8028aa2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028aa6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8028aaa:	ec4b ab10 	vmov	d0, sl, fp
 8028aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8028ab2:	f001 fc2f 	bl	802a314 <__ulp>
 8028ab6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028aba:	ec53 2b10 	vmov	r2, r3, d0
 8028abe:	f7df fce3 	bl	8008488 <__aeabi_dmul>
 8028ac2:	4652      	mov	r2, sl
 8028ac4:	465b      	mov	r3, fp
 8028ac6:	f7df fb29 	bl	800811c <__adddf3>
 8028aca:	460b      	mov	r3, r1
 8028acc:	4983      	ldr	r1, [pc, #524]	; (8028cdc <_strtod_l+0xbf4>)
 8028ace:	4a85      	ldr	r2, [pc, #532]	; (8028ce4 <_strtod_l+0xbfc>)
 8028ad0:	4019      	ands	r1, r3
 8028ad2:	4291      	cmp	r1, r2
 8028ad4:	4682      	mov	sl, r0
 8028ad6:	d960      	bls.n	8028b9a <_strtod_l+0xab2>
 8028ad8:	ee18 3a90 	vmov	r3, s17
 8028adc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8028ae0:	4293      	cmp	r3, r2
 8028ae2:	d104      	bne.n	8028aee <_strtod_l+0xa06>
 8028ae4:	ee18 3a10 	vmov	r3, s16
 8028ae8:	3301      	adds	r3, #1
 8028aea:	f43f ad45 	beq.w	8028578 <_strtod_l+0x490>
 8028aee:	f8df b200 	ldr.w	fp, [pc, #512]	; 8028cf0 <_strtod_l+0xc08>
 8028af2:	f04f 3aff 	mov.w	sl, #4294967295
 8028af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8028af8:	4620      	mov	r0, r4
 8028afa:	f001 f8d9 	bl	8029cb0 <_Bfree>
 8028afe:	9905      	ldr	r1, [sp, #20]
 8028b00:	4620      	mov	r0, r4
 8028b02:	f001 f8d5 	bl	8029cb0 <_Bfree>
 8028b06:	4631      	mov	r1, r6
 8028b08:	4620      	mov	r0, r4
 8028b0a:	f001 f8d1 	bl	8029cb0 <_Bfree>
 8028b0e:	4629      	mov	r1, r5
 8028b10:	4620      	mov	r0, r4
 8028b12:	f001 f8cd 	bl	8029cb0 <_Bfree>
 8028b16:	e61a      	b.n	802874e <_strtod_l+0x666>
 8028b18:	f1ba 0f00 	cmp.w	sl, #0
 8028b1c:	d11b      	bne.n	8028b56 <_strtod_l+0xa6e>
 8028b1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028b22:	b9f3      	cbnz	r3, 8028b62 <_strtod_l+0xa7a>
 8028b24:	4b6c      	ldr	r3, [pc, #432]	; (8028cd8 <_strtod_l+0xbf0>)
 8028b26:	2200      	movs	r2, #0
 8028b28:	4640      	mov	r0, r8
 8028b2a:	4649      	mov	r1, r9
 8028b2c:	f7df ff1e 	bl	800896c <__aeabi_dcmplt>
 8028b30:	b9d0      	cbnz	r0, 8028b68 <_strtod_l+0xa80>
 8028b32:	4640      	mov	r0, r8
 8028b34:	4649      	mov	r1, r9
 8028b36:	4b6c      	ldr	r3, [pc, #432]	; (8028ce8 <_strtod_l+0xc00>)
 8028b38:	2200      	movs	r2, #0
 8028b3a:	f7df fca5 	bl	8008488 <__aeabi_dmul>
 8028b3e:	4680      	mov	r8, r0
 8028b40:	4689      	mov	r9, r1
 8028b42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8028b46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8028b4a:	9315      	str	r3, [sp, #84]	; 0x54
 8028b4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8028b50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8028b54:	e79d      	b.n	8028a92 <_strtod_l+0x9aa>
 8028b56:	f1ba 0f01 	cmp.w	sl, #1
 8028b5a:	d102      	bne.n	8028b62 <_strtod_l+0xa7a>
 8028b5c:	2f00      	cmp	r7, #0
 8028b5e:	f43f ad83 	beq.w	8028668 <_strtod_l+0x580>
 8028b62:	4b62      	ldr	r3, [pc, #392]	; (8028cec <_strtod_l+0xc04>)
 8028b64:	2200      	movs	r2, #0
 8028b66:	e78e      	b.n	8028a86 <_strtod_l+0x99e>
 8028b68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8028ce8 <_strtod_l+0xc00>
 8028b6c:	f04f 0800 	mov.w	r8, #0
 8028b70:	e7e7      	b.n	8028b42 <_strtod_l+0xa5a>
 8028b72:	4b5d      	ldr	r3, [pc, #372]	; (8028ce8 <_strtod_l+0xc00>)
 8028b74:	4640      	mov	r0, r8
 8028b76:	4649      	mov	r1, r9
 8028b78:	2200      	movs	r2, #0
 8028b7a:	f7df fc85 	bl	8008488 <__aeabi_dmul>
 8028b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028b80:	4680      	mov	r8, r0
 8028b82:	4689      	mov	r9, r1
 8028b84:	b933      	cbnz	r3, 8028b94 <_strtod_l+0xaac>
 8028b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028b8a:	900e      	str	r0, [sp, #56]	; 0x38
 8028b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8028b8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8028b92:	e7dd      	b.n	8028b50 <_strtod_l+0xa68>
 8028b94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8028b98:	e7f9      	b.n	8028b8e <_strtod_l+0xaa6>
 8028b9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8028b9e:	9b04      	ldr	r3, [sp, #16]
 8028ba0:	2b00      	cmp	r3, #0
 8028ba2:	d1a8      	bne.n	8028af6 <_strtod_l+0xa0e>
 8028ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8028ba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028baa:	0d1b      	lsrs	r3, r3, #20
 8028bac:	051b      	lsls	r3, r3, #20
 8028bae:	429a      	cmp	r2, r3
 8028bb0:	d1a1      	bne.n	8028af6 <_strtod_l+0xa0e>
 8028bb2:	4640      	mov	r0, r8
 8028bb4:	4649      	mov	r1, r9
 8028bb6:	f7e0 f8ff 	bl	8008db8 <__aeabi_d2lz>
 8028bba:	f7df fc37 	bl	800842c <__aeabi_l2d>
 8028bbe:	4602      	mov	r2, r0
 8028bc0:	460b      	mov	r3, r1
 8028bc2:	4640      	mov	r0, r8
 8028bc4:	4649      	mov	r1, r9
 8028bc6:	f7df faa7 	bl	8008118 <__aeabi_dsub>
 8028bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028bd0:	ea43 030a 	orr.w	r3, r3, sl
 8028bd4:	4313      	orrs	r3, r2
 8028bd6:	4680      	mov	r8, r0
 8028bd8:	4689      	mov	r9, r1
 8028bda:	d055      	beq.n	8028c88 <_strtod_l+0xba0>
 8028bdc:	a336      	add	r3, pc, #216	; (adr r3, 8028cb8 <_strtod_l+0xbd0>)
 8028bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028be2:	f7df fec3 	bl	800896c <__aeabi_dcmplt>
 8028be6:	2800      	cmp	r0, #0
 8028be8:	f47f acd0 	bne.w	802858c <_strtod_l+0x4a4>
 8028bec:	a334      	add	r3, pc, #208	; (adr r3, 8028cc0 <_strtod_l+0xbd8>)
 8028bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028bf2:	4640      	mov	r0, r8
 8028bf4:	4649      	mov	r1, r9
 8028bf6:	f7df fed7 	bl	80089a8 <__aeabi_dcmpgt>
 8028bfa:	2800      	cmp	r0, #0
 8028bfc:	f43f af7b 	beq.w	8028af6 <_strtod_l+0xa0e>
 8028c00:	e4c4      	b.n	802858c <_strtod_l+0x4a4>
 8028c02:	9b04      	ldr	r3, [sp, #16]
 8028c04:	b333      	cbz	r3, 8028c54 <_strtod_l+0xb6c>
 8028c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028c08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8028c0c:	d822      	bhi.n	8028c54 <_strtod_l+0xb6c>
 8028c0e:	a32e      	add	r3, pc, #184	; (adr r3, 8028cc8 <_strtod_l+0xbe0>)
 8028c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c14:	4640      	mov	r0, r8
 8028c16:	4649      	mov	r1, r9
 8028c18:	f7df feb2 	bl	8008980 <__aeabi_dcmple>
 8028c1c:	b1a0      	cbz	r0, 8028c48 <_strtod_l+0xb60>
 8028c1e:	4649      	mov	r1, r9
 8028c20:	4640      	mov	r0, r8
 8028c22:	f7df fee1 	bl	80089e8 <__aeabi_d2uiz>
 8028c26:	2801      	cmp	r0, #1
 8028c28:	bf38      	it	cc
 8028c2a:	2001      	movcc	r0, #1
 8028c2c:	f7df fbb2 	bl	8008394 <__aeabi_ui2d>
 8028c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028c32:	4680      	mov	r8, r0
 8028c34:	4689      	mov	r9, r1
 8028c36:	bb23      	cbnz	r3, 8028c82 <_strtod_l+0xb9a>
 8028c38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028c3c:	9010      	str	r0, [sp, #64]	; 0x40
 8028c3e:	9311      	str	r3, [sp, #68]	; 0x44
 8028c40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8028c44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8028c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028c4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028c4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8028c50:	1a9b      	subs	r3, r3, r2
 8028c52:	9309      	str	r3, [sp, #36]	; 0x24
 8028c54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028c58:	eeb0 0a48 	vmov.f32	s0, s16
 8028c5c:	eef0 0a68 	vmov.f32	s1, s17
 8028c60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8028c64:	f001 fb56 	bl	802a314 <__ulp>
 8028c68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028c6c:	ec53 2b10 	vmov	r2, r3, d0
 8028c70:	f7df fc0a 	bl	8008488 <__aeabi_dmul>
 8028c74:	ec53 2b18 	vmov	r2, r3, d8
 8028c78:	f7df fa50 	bl	800811c <__adddf3>
 8028c7c:	4682      	mov	sl, r0
 8028c7e:	468b      	mov	fp, r1
 8028c80:	e78d      	b.n	8028b9e <_strtod_l+0xab6>
 8028c82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8028c86:	e7db      	b.n	8028c40 <_strtod_l+0xb58>
 8028c88:	a311      	add	r3, pc, #68	; (adr r3, 8028cd0 <_strtod_l+0xbe8>)
 8028c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c8e:	f7df fe6d 	bl	800896c <__aeabi_dcmplt>
 8028c92:	e7b2      	b.n	8028bfa <_strtod_l+0xb12>
 8028c94:	2300      	movs	r3, #0
 8028c96:	930a      	str	r3, [sp, #40]	; 0x28
 8028c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028c9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028c9c:	6013      	str	r3, [r2, #0]
 8028c9e:	f7ff ba6b 	b.w	8028178 <_strtod_l+0x90>
 8028ca2:	2a65      	cmp	r2, #101	; 0x65
 8028ca4:	f43f ab5f 	beq.w	8028366 <_strtod_l+0x27e>
 8028ca8:	2a45      	cmp	r2, #69	; 0x45
 8028caa:	f43f ab5c 	beq.w	8028366 <_strtod_l+0x27e>
 8028cae:	2301      	movs	r3, #1
 8028cb0:	f7ff bb94 	b.w	80283dc <_strtod_l+0x2f4>
 8028cb4:	f3af 8000 	nop.w
 8028cb8:	94a03595 	.word	0x94a03595
 8028cbc:	3fdfffff 	.word	0x3fdfffff
 8028cc0:	35afe535 	.word	0x35afe535
 8028cc4:	3fe00000 	.word	0x3fe00000
 8028cc8:	ffc00000 	.word	0xffc00000
 8028ccc:	41dfffff 	.word	0x41dfffff
 8028cd0:	94a03595 	.word	0x94a03595
 8028cd4:	3fcfffff 	.word	0x3fcfffff
 8028cd8:	3ff00000 	.word	0x3ff00000
 8028cdc:	7ff00000 	.word	0x7ff00000
 8028ce0:	7fe00000 	.word	0x7fe00000
 8028ce4:	7c9fffff 	.word	0x7c9fffff
 8028ce8:	3fe00000 	.word	0x3fe00000
 8028cec:	bff00000 	.word	0xbff00000
 8028cf0:	7fefffff 	.word	0x7fefffff

08028cf4 <strtof>:
 8028cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cf8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8028da8 <strtof+0xb4>
 8028cfc:	4b26      	ldr	r3, [pc, #152]	; (8028d98 <strtof+0xa4>)
 8028cfe:	460a      	mov	r2, r1
 8028d00:	ed2d 8b02 	vpush	{d8}
 8028d04:	4601      	mov	r1, r0
 8028d06:	f8d8 0000 	ldr.w	r0, [r8]
 8028d0a:	f7ff f9ed 	bl	80280e8 <_strtod_l>
 8028d0e:	ec55 4b10 	vmov	r4, r5, d0
 8028d12:	ee10 2a10 	vmov	r2, s0
 8028d16:	ee10 0a10 	vmov	r0, s0
 8028d1a:	462b      	mov	r3, r5
 8028d1c:	4629      	mov	r1, r5
 8028d1e:	f7df fe4d 	bl	80089bc <__aeabi_dcmpun>
 8028d22:	b190      	cbz	r0, 8028d4a <strtof+0x56>
 8028d24:	2d00      	cmp	r5, #0
 8028d26:	481d      	ldr	r0, [pc, #116]	; (8028d9c <strtof+0xa8>)
 8028d28:	da09      	bge.n	8028d3e <strtof+0x4a>
 8028d2a:	f002 f841 	bl	802adb0 <nanf>
 8028d2e:	eeb1 8a40 	vneg.f32	s16, s0
 8028d32:	eeb0 0a48 	vmov.f32	s0, s16
 8028d36:	ecbd 8b02 	vpop	{d8}
 8028d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d3e:	ecbd 8b02 	vpop	{d8}
 8028d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d46:	f002 b833 	b.w	802adb0 <nanf>
 8028d4a:	4620      	mov	r0, r4
 8028d4c:	4629      	mov	r1, r5
 8028d4e:	f7df fe6b 	bl	8008a28 <__aeabi_d2f>
 8028d52:	ee08 0a10 	vmov	s16, r0
 8028d56:	eddf 7a12 	vldr	s15, [pc, #72]	; 8028da0 <strtof+0xac>
 8028d5a:	eeb0 7ac8 	vabs.f32	s14, s16
 8028d5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8028d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d66:	dde4      	ble.n	8028d32 <strtof+0x3e>
 8028d68:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8028d6c:	4b0d      	ldr	r3, [pc, #52]	; (8028da4 <strtof+0xb0>)
 8028d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8028d72:	4620      	mov	r0, r4
 8028d74:	4639      	mov	r1, r7
 8028d76:	f7df fe21 	bl	80089bc <__aeabi_dcmpun>
 8028d7a:	b940      	cbnz	r0, 8028d8e <strtof+0x9a>
 8028d7c:	4b09      	ldr	r3, [pc, #36]	; (8028da4 <strtof+0xb0>)
 8028d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8028d82:	4620      	mov	r0, r4
 8028d84:	4639      	mov	r1, r7
 8028d86:	f7df fdfb 	bl	8008980 <__aeabi_dcmple>
 8028d8a:	2800      	cmp	r0, #0
 8028d8c:	d0d1      	beq.n	8028d32 <strtof+0x3e>
 8028d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8028d92:	2222      	movs	r2, #34	; 0x22
 8028d94:	601a      	str	r2, [r3, #0]
 8028d96:	e7cc      	b.n	8028d32 <strtof+0x3e>
 8028d98:	20000538 	.word	0x20000538
 8028d9c:	0802d052 	.word	0x0802d052
 8028da0:	7f7fffff 	.word	0x7f7fffff
 8028da4:	7fefffff 	.word	0x7fefffff
 8028da8:	200004d0 	.word	0x200004d0

08028dac <__strtok_r>:
 8028dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028dae:	b908      	cbnz	r0, 8028db4 <__strtok_r+0x8>
 8028db0:	6810      	ldr	r0, [r2, #0]
 8028db2:	b188      	cbz	r0, 8028dd8 <__strtok_r+0x2c>
 8028db4:	4604      	mov	r4, r0
 8028db6:	4620      	mov	r0, r4
 8028db8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8028dbc:	460f      	mov	r7, r1
 8028dbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8028dc2:	b91e      	cbnz	r6, 8028dcc <__strtok_r+0x20>
 8028dc4:	b965      	cbnz	r5, 8028de0 <__strtok_r+0x34>
 8028dc6:	6015      	str	r5, [r2, #0]
 8028dc8:	4628      	mov	r0, r5
 8028dca:	e005      	b.n	8028dd8 <__strtok_r+0x2c>
 8028dcc:	42b5      	cmp	r5, r6
 8028dce:	d1f6      	bne.n	8028dbe <__strtok_r+0x12>
 8028dd0:	2b00      	cmp	r3, #0
 8028dd2:	d1f0      	bne.n	8028db6 <__strtok_r+0xa>
 8028dd4:	6014      	str	r4, [r2, #0]
 8028dd6:	7003      	strb	r3, [r0, #0]
 8028dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028dda:	461c      	mov	r4, r3
 8028ddc:	e00c      	b.n	8028df8 <__strtok_r+0x4c>
 8028dde:	b915      	cbnz	r5, 8028de6 <__strtok_r+0x3a>
 8028de0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8028de4:	460e      	mov	r6, r1
 8028de6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8028dea:	42ab      	cmp	r3, r5
 8028dec:	d1f7      	bne.n	8028dde <__strtok_r+0x32>
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	d0f3      	beq.n	8028dda <__strtok_r+0x2e>
 8028df2:	2300      	movs	r3, #0
 8028df4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8028df8:	6014      	str	r4, [r2, #0]
 8028dfa:	e7ed      	b.n	8028dd8 <__strtok_r+0x2c>

08028dfc <strtok_r>:
 8028dfc:	2301      	movs	r3, #1
 8028dfe:	f7ff bfd5 	b.w	8028dac <__strtok_r>
	...

08028e04 <_strtoul_l.constprop.0>:
 8028e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028e08:	4f36      	ldr	r7, [pc, #216]	; (8028ee4 <_strtoul_l.constprop.0+0xe0>)
 8028e0a:	4686      	mov	lr, r0
 8028e0c:	460d      	mov	r5, r1
 8028e0e:	4628      	mov	r0, r5
 8028e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028e14:	5de6      	ldrb	r6, [r4, r7]
 8028e16:	f016 0608 	ands.w	r6, r6, #8
 8028e1a:	d1f8      	bne.n	8028e0e <_strtoul_l.constprop.0+0xa>
 8028e1c:	2c2d      	cmp	r4, #45	; 0x2d
 8028e1e:	d12f      	bne.n	8028e80 <_strtoul_l.constprop.0+0x7c>
 8028e20:	782c      	ldrb	r4, [r5, #0]
 8028e22:	2601      	movs	r6, #1
 8028e24:	1c85      	adds	r5, r0, #2
 8028e26:	2b00      	cmp	r3, #0
 8028e28:	d057      	beq.n	8028eda <_strtoul_l.constprop.0+0xd6>
 8028e2a:	2b10      	cmp	r3, #16
 8028e2c:	d109      	bne.n	8028e42 <_strtoul_l.constprop.0+0x3e>
 8028e2e:	2c30      	cmp	r4, #48	; 0x30
 8028e30:	d107      	bne.n	8028e42 <_strtoul_l.constprop.0+0x3e>
 8028e32:	7828      	ldrb	r0, [r5, #0]
 8028e34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8028e38:	2858      	cmp	r0, #88	; 0x58
 8028e3a:	d149      	bne.n	8028ed0 <_strtoul_l.constprop.0+0xcc>
 8028e3c:	786c      	ldrb	r4, [r5, #1]
 8028e3e:	2310      	movs	r3, #16
 8028e40:	3502      	adds	r5, #2
 8028e42:	f04f 38ff 	mov.w	r8, #4294967295
 8028e46:	2700      	movs	r7, #0
 8028e48:	fbb8 f8f3 	udiv	r8, r8, r3
 8028e4c:	fb03 f908 	mul.w	r9, r3, r8
 8028e50:	ea6f 0909 	mvn.w	r9, r9
 8028e54:	4638      	mov	r0, r7
 8028e56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8028e5a:	f1bc 0f09 	cmp.w	ip, #9
 8028e5e:	d814      	bhi.n	8028e8a <_strtoul_l.constprop.0+0x86>
 8028e60:	4664      	mov	r4, ip
 8028e62:	42a3      	cmp	r3, r4
 8028e64:	dd22      	ble.n	8028eac <_strtoul_l.constprop.0+0xa8>
 8028e66:	2f00      	cmp	r7, #0
 8028e68:	db1d      	blt.n	8028ea6 <_strtoul_l.constprop.0+0xa2>
 8028e6a:	4580      	cmp	r8, r0
 8028e6c:	d31b      	bcc.n	8028ea6 <_strtoul_l.constprop.0+0xa2>
 8028e6e:	d101      	bne.n	8028e74 <_strtoul_l.constprop.0+0x70>
 8028e70:	45a1      	cmp	r9, r4
 8028e72:	db18      	blt.n	8028ea6 <_strtoul_l.constprop.0+0xa2>
 8028e74:	fb00 4003 	mla	r0, r0, r3, r4
 8028e78:	2701      	movs	r7, #1
 8028e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028e7e:	e7ea      	b.n	8028e56 <_strtoul_l.constprop.0+0x52>
 8028e80:	2c2b      	cmp	r4, #43	; 0x2b
 8028e82:	bf04      	itt	eq
 8028e84:	782c      	ldrbeq	r4, [r5, #0]
 8028e86:	1c85      	addeq	r5, r0, #2
 8028e88:	e7cd      	b.n	8028e26 <_strtoul_l.constprop.0+0x22>
 8028e8a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8028e8e:	f1bc 0f19 	cmp.w	ip, #25
 8028e92:	d801      	bhi.n	8028e98 <_strtoul_l.constprop.0+0x94>
 8028e94:	3c37      	subs	r4, #55	; 0x37
 8028e96:	e7e4      	b.n	8028e62 <_strtoul_l.constprop.0+0x5e>
 8028e98:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8028e9c:	f1bc 0f19 	cmp.w	ip, #25
 8028ea0:	d804      	bhi.n	8028eac <_strtoul_l.constprop.0+0xa8>
 8028ea2:	3c57      	subs	r4, #87	; 0x57
 8028ea4:	e7dd      	b.n	8028e62 <_strtoul_l.constprop.0+0x5e>
 8028ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8028eaa:	e7e6      	b.n	8028e7a <_strtoul_l.constprop.0+0x76>
 8028eac:	2f00      	cmp	r7, #0
 8028eae:	da07      	bge.n	8028ec0 <_strtoul_l.constprop.0+0xbc>
 8028eb0:	2322      	movs	r3, #34	; 0x22
 8028eb2:	f8ce 3000 	str.w	r3, [lr]
 8028eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8028eba:	b932      	cbnz	r2, 8028eca <_strtoul_l.constprop.0+0xc6>
 8028ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028ec0:	b106      	cbz	r6, 8028ec4 <_strtoul_l.constprop.0+0xc0>
 8028ec2:	4240      	negs	r0, r0
 8028ec4:	2a00      	cmp	r2, #0
 8028ec6:	d0f9      	beq.n	8028ebc <_strtoul_l.constprop.0+0xb8>
 8028ec8:	b107      	cbz	r7, 8028ecc <_strtoul_l.constprop.0+0xc8>
 8028eca:	1e69      	subs	r1, r5, #1
 8028ecc:	6011      	str	r1, [r2, #0]
 8028ece:	e7f5      	b.n	8028ebc <_strtoul_l.constprop.0+0xb8>
 8028ed0:	2430      	movs	r4, #48	; 0x30
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d1b5      	bne.n	8028e42 <_strtoul_l.constprop.0+0x3e>
 8028ed6:	2308      	movs	r3, #8
 8028ed8:	e7b3      	b.n	8028e42 <_strtoul_l.constprop.0+0x3e>
 8028eda:	2c30      	cmp	r4, #48	; 0x30
 8028edc:	d0a9      	beq.n	8028e32 <_strtoul_l.constprop.0+0x2e>
 8028ede:	230a      	movs	r3, #10
 8028ee0:	e7af      	b.n	8028e42 <_strtoul_l.constprop.0+0x3e>
 8028ee2:	bf00      	nop
 8028ee4:	0802cc25 	.word	0x0802cc25

08028ee8 <strtoul>:
 8028ee8:	4613      	mov	r3, r2
 8028eea:	460a      	mov	r2, r1
 8028eec:	4601      	mov	r1, r0
 8028eee:	4802      	ldr	r0, [pc, #8]	; (8028ef8 <strtoul+0x10>)
 8028ef0:	6800      	ldr	r0, [r0, #0]
 8028ef2:	f7ff bf87 	b.w	8028e04 <_strtoul_l.constprop.0>
 8028ef6:	bf00      	nop
 8028ef8:	200004d0 	.word	0x200004d0

08028efc <_vsniprintf_r>:
 8028efc:	b530      	push	{r4, r5, lr}
 8028efe:	4614      	mov	r4, r2
 8028f00:	2c00      	cmp	r4, #0
 8028f02:	b09b      	sub	sp, #108	; 0x6c
 8028f04:	4605      	mov	r5, r0
 8028f06:	461a      	mov	r2, r3
 8028f08:	da05      	bge.n	8028f16 <_vsniprintf_r+0x1a>
 8028f0a:	238b      	movs	r3, #139	; 0x8b
 8028f0c:	6003      	str	r3, [r0, #0]
 8028f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8028f12:	b01b      	add	sp, #108	; 0x6c
 8028f14:	bd30      	pop	{r4, r5, pc}
 8028f16:	f44f 7302 	mov.w	r3, #520	; 0x208
 8028f1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8028f1e:	bf14      	ite	ne
 8028f20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8028f24:	4623      	moveq	r3, r4
 8028f26:	9302      	str	r3, [sp, #8]
 8028f28:	9305      	str	r3, [sp, #20]
 8028f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028f2e:	9100      	str	r1, [sp, #0]
 8028f30:	9104      	str	r1, [sp, #16]
 8028f32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f36:	4669      	mov	r1, sp
 8028f38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028f3a:	f001 fc8d 	bl	802a858 <_svfiprintf_r>
 8028f3e:	1c43      	adds	r3, r0, #1
 8028f40:	bfbc      	itt	lt
 8028f42:	238b      	movlt	r3, #139	; 0x8b
 8028f44:	602b      	strlt	r3, [r5, #0]
 8028f46:	2c00      	cmp	r4, #0
 8028f48:	d0e3      	beq.n	8028f12 <_vsniprintf_r+0x16>
 8028f4a:	9b00      	ldr	r3, [sp, #0]
 8028f4c:	2200      	movs	r2, #0
 8028f4e:	701a      	strb	r2, [r3, #0]
 8028f50:	e7df      	b.n	8028f12 <_vsniprintf_r+0x16>
	...

08028f54 <vsniprintf>:
 8028f54:	b507      	push	{r0, r1, r2, lr}
 8028f56:	9300      	str	r3, [sp, #0]
 8028f58:	4613      	mov	r3, r2
 8028f5a:	460a      	mov	r2, r1
 8028f5c:	4601      	mov	r1, r0
 8028f5e:	4803      	ldr	r0, [pc, #12]	; (8028f6c <vsniprintf+0x18>)
 8028f60:	6800      	ldr	r0, [r0, #0]
 8028f62:	f7ff ffcb 	bl	8028efc <_vsniprintf_r>
 8028f66:	b003      	add	sp, #12
 8028f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8028f6c:	200004d0 	.word	0x200004d0

08028f70 <__swbuf_r>:
 8028f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f72:	460e      	mov	r6, r1
 8028f74:	4614      	mov	r4, r2
 8028f76:	4605      	mov	r5, r0
 8028f78:	b118      	cbz	r0, 8028f82 <__swbuf_r+0x12>
 8028f7a:	6983      	ldr	r3, [r0, #24]
 8028f7c:	b90b      	cbnz	r3, 8028f82 <__swbuf_r+0x12>
 8028f7e:	f000 f9d1 	bl	8029324 <__sinit>
 8028f82:	4b21      	ldr	r3, [pc, #132]	; (8029008 <__swbuf_r+0x98>)
 8028f84:	429c      	cmp	r4, r3
 8028f86:	d12b      	bne.n	8028fe0 <__swbuf_r+0x70>
 8028f88:	686c      	ldr	r4, [r5, #4]
 8028f8a:	69a3      	ldr	r3, [r4, #24]
 8028f8c:	60a3      	str	r3, [r4, #8]
 8028f8e:	89a3      	ldrh	r3, [r4, #12]
 8028f90:	071a      	lsls	r2, r3, #28
 8028f92:	d52f      	bpl.n	8028ff4 <__swbuf_r+0x84>
 8028f94:	6923      	ldr	r3, [r4, #16]
 8028f96:	b36b      	cbz	r3, 8028ff4 <__swbuf_r+0x84>
 8028f98:	6923      	ldr	r3, [r4, #16]
 8028f9a:	6820      	ldr	r0, [r4, #0]
 8028f9c:	1ac0      	subs	r0, r0, r3
 8028f9e:	6963      	ldr	r3, [r4, #20]
 8028fa0:	b2f6      	uxtb	r6, r6
 8028fa2:	4283      	cmp	r3, r0
 8028fa4:	4637      	mov	r7, r6
 8028fa6:	dc04      	bgt.n	8028fb2 <__swbuf_r+0x42>
 8028fa8:	4621      	mov	r1, r4
 8028faa:	4628      	mov	r0, r5
 8028fac:	f000 f926 	bl	80291fc <_fflush_r>
 8028fb0:	bb30      	cbnz	r0, 8029000 <__swbuf_r+0x90>
 8028fb2:	68a3      	ldr	r3, [r4, #8]
 8028fb4:	3b01      	subs	r3, #1
 8028fb6:	60a3      	str	r3, [r4, #8]
 8028fb8:	6823      	ldr	r3, [r4, #0]
 8028fba:	1c5a      	adds	r2, r3, #1
 8028fbc:	6022      	str	r2, [r4, #0]
 8028fbe:	701e      	strb	r6, [r3, #0]
 8028fc0:	6963      	ldr	r3, [r4, #20]
 8028fc2:	3001      	adds	r0, #1
 8028fc4:	4283      	cmp	r3, r0
 8028fc6:	d004      	beq.n	8028fd2 <__swbuf_r+0x62>
 8028fc8:	89a3      	ldrh	r3, [r4, #12]
 8028fca:	07db      	lsls	r3, r3, #31
 8028fcc:	d506      	bpl.n	8028fdc <__swbuf_r+0x6c>
 8028fce:	2e0a      	cmp	r6, #10
 8028fd0:	d104      	bne.n	8028fdc <__swbuf_r+0x6c>
 8028fd2:	4621      	mov	r1, r4
 8028fd4:	4628      	mov	r0, r5
 8028fd6:	f000 f911 	bl	80291fc <_fflush_r>
 8028fda:	b988      	cbnz	r0, 8029000 <__swbuf_r+0x90>
 8028fdc:	4638      	mov	r0, r7
 8028fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028fe0:	4b0a      	ldr	r3, [pc, #40]	; (802900c <__swbuf_r+0x9c>)
 8028fe2:	429c      	cmp	r4, r3
 8028fe4:	d101      	bne.n	8028fea <__swbuf_r+0x7a>
 8028fe6:	68ac      	ldr	r4, [r5, #8]
 8028fe8:	e7cf      	b.n	8028f8a <__swbuf_r+0x1a>
 8028fea:	4b09      	ldr	r3, [pc, #36]	; (8029010 <__swbuf_r+0xa0>)
 8028fec:	429c      	cmp	r4, r3
 8028fee:	bf08      	it	eq
 8028ff0:	68ec      	ldreq	r4, [r5, #12]
 8028ff2:	e7ca      	b.n	8028f8a <__swbuf_r+0x1a>
 8028ff4:	4621      	mov	r1, r4
 8028ff6:	4628      	mov	r0, r5
 8028ff8:	f000 f80c 	bl	8029014 <__swsetup_r>
 8028ffc:	2800      	cmp	r0, #0
 8028ffe:	d0cb      	beq.n	8028f98 <__swbuf_r+0x28>
 8029000:	f04f 37ff 	mov.w	r7, #4294967295
 8029004:	e7ea      	b.n	8028fdc <__swbuf_r+0x6c>
 8029006:	bf00      	nop
 8029008:	0802cda8 	.word	0x0802cda8
 802900c:	0802cdc8 	.word	0x0802cdc8
 8029010:	0802cd88 	.word	0x0802cd88

08029014 <__swsetup_r>:
 8029014:	4b32      	ldr	r3, [pc, #200]	; (80290e0 <__swsetup_r+0xcc>)
 8029016:	b570      	push	{r4, r5, r6, lr}
 8029018:	681d      	ldr	r5, [r3, #0]
 802901a:	4606      	mov	r6, r0
 802901c:	460c      	mov	r4, r1
 802901e:	b125      	cbz	r5, 802902a <__swsetup_r+0x16>
 8029020:	69ab      	ldr	r3, [r5, #24]
 8029022:	b913      	cbnz	r3, 802902a <__swsetup_r+0x16>
 8029024:	4628      	mov	r0, r5
 8029026:	f000 f97d 	bl	8029324 <__sinit>
 802902a:	4b2e      	ldr	r3, [pc, #184]	; (80290e4 <__swsetup_r+0xd0>)
 802902c:	429c      	cmp	r4, r3
 802902e:	d10f      	bne.n	8029050 <__swsetup_r+0x3c>
 8029030:	686c      	ldr	r4, [r5, #4]
 8029032:	89a3      	ldrh	r3, [r4, #12]
 8029034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029038:	0719      	lsls	r1, r3, #28
 802903a:	d42c      	bmi.n	8029096 <__swsetup_r+0x82>
 802903c:	06dd      	lsls	r5, r3, #27
 802903e:	d411      	bmi.n	8029064 <__swsetup_r+0x50>
 8029040:	2309      	movs	r3, #9
 8029042:	6033      	str	r3, [r6, #0]
 8029044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029048:	81a3      	strh	r3, [r4, #12]
 802904a:	f04f 30ff 	mov.w	r0, #4294967295
 802904e:	e03e      	b.n	80290ce <__swsetup_r+0xba>
 8029050:	4b25      	ldr	r3, [pc, #148]	; (80290e8 <__swsetup_r+0xd4>)
 8029052:	429c      	cmp	r4, r3
 8029054:	d101      	bne.n	802905a <__swsetup_r+0x46>
 8029056:	68ac      	ldr	r4, [r5, #8]
 8029058:	e7eb      	b.n	8029032 <__swsetup_r+0x1e>
 802905a:	4b24      	ldr	r3, [pc, #144]	; (80290ec <__swsetup_r+0xd8>)
 802905c:	429c      	cmp	r4, r3
 802905e:	bf08      	it	eq
 8029060:	68ec      	ldreq	r4, [r5, #12]
 8029062:	e7e6      	b.n	8029032 <__swsetup_r+0x1e>
 8029064:	0758      	lsls	r0, r3, #29
 8029066:	d512      	bpl.n	802908e <__swsetup_r+0x7a>
 8029068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802906a:	b141      	cbz	r1, 802907e <__swsetup_r+0x6a>
 802906c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029070:	4299      	cmp	r1, r3
 8029072:	d002      	beq.n	802907a <__swsetup_r+0x66>
 8029074:	4630      	mov	r0, r6
 8029076:	f001 fab3 	bl	802a5e0 <_free_r>
 802907a:	2300      	movs	r3, #0
 802907c:	6363      	str	r3, [r4, #52]	; 0x34
 802907e:	89a3      	ldrh	r3, [r4, #12]
 8029080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029084:	81a3      	strh	r3, [r4, #12]
 8029086:	2300      	movs	r3, #0
 8029088:	6063      	str	r3, [r4, #4]
 802908a:	6923      	ldr	r3, [r4, #16]
 802908c:	6023      	str	r3, [r4, #0]
 802908e:	89a3      	ldrh	r3, [r4, #12]
 8029090:	f043 0308 	orr.w	r3, r3, #8
 8029094:	81a3      	strh	r3, [r4, #12]
 8029096:	6923      	ldr	r3, [r4, #16]
 8029098:	b94b      	cbnz	r3, 80290ae <__swsetup_r+0x9a>
 802909a:	89a3      	ldrh	r3, [r4, #12]
 802909c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80290a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80290a4:	d003      	beq.n	80290ae <__swsetup_r+0x9a>
 80290a6:	4621      	mov	r1, r4
 80290a8:	4630      	mov	r0, r6
 80290aa:	f000 fd6f 	bl	8029b8c <__smakebuf_r>
 80290ae:	89a0      	ldrh	r0, [r4, #12]
 80290b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80290b4:	f010 0301 	ands.w	r3, r0, #1
 80290b8:	d00a      	beq.n	80290d0 <__swsetup_r+0xbc>
 80290ba:	2300      	movs	r3, #0
 80290bc:	60a3      	str	r3, [r4, #8]
 80290be:	6963      	ldr	r3, [r4, #20]
 80290c0:	425b      	negs	r3, r3
 80290c2:	61a3      	str	r3, [r4, #24]
 80290c4:	6923      	ldr	r3, [r4, #16]
 80290c6:	b943      	cbnz	r3, 80290da <__swsetup_r+0xc6>
 80290c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80290cc:	d1ba      	bne.n	8029044 <__swsetup_r+0x30>
 80290ce:	bd70      	pop	{r4, r5, r6, pc}
 80290d0:	0781      	lsls	r1, r0, #30
 80290d2:	bf58      	it	pl
 80290d4:	6963      	ldrpl	r3, [r4, #20]
 80290d6:	60a3      	str	r3, [r4, #8]
 80290d8:	e7f4      	b.n	80290c4 <__swsetup_r+0xb0>
 80290da:	2000      	movs	r0, #0
 80290dc:	e7f7      	b.n	80290ce <__swsetup_r+0xba>
 80290de:	bf00      	nop
 80290e0:	200004d0 	.word	0x200004d0
 80290e4:	0802cda8 	.word	0x0802cda8
 80290e8:	0802cdc8 	.word	0x0802cdc8
 80290ec:	0802cd88 	.word	0x0802cd88

080290f0 <__sflush_r>:
 80290f0:	898a      	ldrh	r2, [r1, #12]
 80290f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80290f6:	4605      	mov	r5, r0
 80290f8:	0710      	lsls	r0, r2, #28
 80290fa:	460c      	mov	r4, r1
 80290fc:	d458      	bmi.n	80291b0 <__sflush_r+0xc0>
 80290fe:	684b      	ldr	r3, [r1, #4]
 8029100:	2b00      	cmp	r3, #0
 8029102:	dc05      	bgt.n	8029110 <__sflush_r+0x20>
 8029104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029106:	2b00      	cmp	r3, #0
 8029108:	dc02      	bgt.n	8029110 <__sflush_r+0x20>
 802910a:	2000      	movs	r0, #0
 802910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029112:	2e00      	cmp	r6, #0
 8029114:	d0f9      	beq.n	802910a <__sflush_r+0x1a>
 8029116:	2300      	movs	r3, #0
 8029118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802911c:	682f      	ldr	r7, [r5, #0]
 802911e:	602b      	str	r3, [r5, #0]
 8029120:	d032      	beq.n	8029188 <__sflush_r+0x98>
 8029122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029124:	89a3      	ldrh	r3, [r4, #12]
 8029126:	075a      	lsls	r2, r3, #29
 8029128:	d505      	bpl.n	8029136 <__sflush_r+0x46>
 802912a:	6863      	ldr	r3, [r4, #4]
 802912c:	1ac0      	subs	r0, r0, r3
 802912e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029130:	b10b      	cbz	r3, 8029136 <__sflush_r+0x46>
 8029132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029134:	1ac0      	subs	r0, r0, r3
 8029136:	2300      	movs	r3, #0
 8029138:	4602      	mov	r2, r0
 802913a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802913c:	6a21      	ldr	r1, [r4, #32]
 802913e:	4628      	mov	r0, r5
 8029140:	47b0      	blx	r6
 8029142:	1c43      	adds	r3, r0, #1
 8029144:	89a3      	ldrh	r3, [r4, #12]
 8029146:	d106      	bne.n	8029156 <__sflush_r+0x66>
 8029148:	6829      	ldr	r1, [r5, #0]
 802914a:	291d      	cmp	r1, #29
 802914c:	d82c      	bhi.n	80291a8 <__sflush_r+0xb8>
 802914e:	4a2a      	ldr	r2, [pc, #168]	; (80291f8 <__sflush_r+0x108>)
 8029150:	40ca      	lsrs	r2, r1
 8029152:	07d6      	lsls	r6, r2, #31
 8029154:	d528      	bpl.n	80291a8 <__sflush_r+0xb8>
 8029156:	2200      	movs	r2, #0
 8029158:	6062      	str	r2, [r4, #4]
 802915a:	04d9      	lsls	r1, r3, #19
 802915c:	6922      	ldr	r2, [r4, #16]
 802915e:	6022      	str	r2, [r4, #0]
 8029160:	d504      	bpl.n	802916c <__sflush_r+0x7c>
 8029162:	1c42      	adds	r2, r0, #1
 8029164:	d101      	bne.n	802916a <__sflush_r+0x7a>
 8029166:	682b      	ldr	r3, [r5, #0]
 8029168:	b903      	cbnz	r3, 802916c <__sflush_r+0x7c>
 802916a:	6560      	str	r0, [r4, #84]	; 0x54
 802916c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802916e:	602f      	str	r7, [r5, #0]
 8029170:	2900      	cmp	r1, #0
 8029172:	d0ca      	beq.n	802910a <__sflush_r+0x1a>
 8029174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029178:	4299      	cmp	r1, r3
 802917a:	d002      	beq.n	8029182 <__sflush_r+0x92>
 802917c:	4628      	mov	r0, r5
 802917e:	f001 fa2f 	bl	802a5e0 <_free_r>
 8029182:	2000      	movs	r0, #0
 8029184:	6360      	str	r0, [r4, #52]	; 0x34
 8029186:	e7c1      	b.n	802910c <__sflush_r+0x1c>
 8029188:	6a21      	ldr	r1, [r4, #32]
 802918a:	2301      	movs	r3, #1
 802918c:	4628      	mov	r0, r5
 802918e:	47b0      	blx	r6
 8029190:	1c41      	adds	r1, r0, #1
 8029192:	d1c7      	bne.n	8029124 <__sflush_r+0x34>
 8029194:	682b      	ldr	r3, [r5, #0]
 8029196:	2b00      	cmp	r3, #0
 8029198:	d0c4      	beq.n	8029124 <__sflush_r+0x34>
 802919a:	2b1d      	cmp	r3, #29
 802919c:	d001      	beq.n	80291a2 <__sflush_r+0xb2>
 802919e:	2b16      	cmp	r3, #22
 80291a0:	d101      	bne.n	80291a6 <__sflush_r+0xb6>
 80291a2:	602f      	str	r7, [r5, #0]
 80291a4:	e7b1      	b.n	802910a <__sflush_r+0x1a>
 80291a6:	89a3      	ldrh	r3, [r4, #12]
 80291a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291ac:	81a3      	strh	r3, [r4, #12]
 80291ae:	e7ad      	b.n	802910c <__sflush_r+0x1c>
 80291b0:	690f      	ldr	r7, [r1, #16]
 80291b2:	2f00      	cmp	r7, #0
 80291b4:	d0a9      	beq.n	802910a <__sflush_r+0x1a>
 80291b6:	0793      	lsls	r3, r2, #30
 80291b8:	680e      	ldr	r6, [r1, #0]
 80291ba:	bf08      	it	eq
 80291bc:	694b      	ldreq	r3, [r1, #20]
 80291be:	600f      	str	r7, [r1, #0]
 80291c0:	bf18      	it	ne
 80291c2:	2300      	movne	r3, #0
 80291c4:	eba6 0807 	sub.w	r8, r6, r7
 80291c8:	608b      	str	r3, [r1, #8]
 80291ca:	f1b8 0f00 	cmp.w	r8, #0
 80291ce:	dd9c      	ble.n	802910a <__sflush_r+0x1a>
 80291d0:	6a21      	ldr	r1, [r4, #32]
 80291d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80291d4:	4643      	mov	r3, r8
 80291d6:	463a      	mov	r2, r7
 80291d8:	4628      	mov	r0, r5
 80291da:	47b0      	blx	r6
 80291dc:	2800      	cmp	r0, #0
 80291de:	dc06      	bgt.n	80291ee <__sflush_r+0xfe>
 80291e0:	89a3      	ldrh	r3, [r4, #12]
 80291e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291e6:	81a3      	strh	r3, [r4, #12]
 80291e8:	f04f 30ff 	mov.w	r0, #4294967295
 80291ec:	e78e      	b.n	802910c <__sflush_r+0x1c>
 80291ee:	4407      	add	r7, r0
 80291f0:	eba8 0800 	sub.w	r8, r8, r0
 80291f4:	e7e9      	b.n	80291ca <__sflush_r+0xda>
 80291f6:	bf00      	nop
 80291f8:	20400001 	.word	0x20400001

080291fc <_fflush_r>:
 80291fc:	b538      	push	{r3, r4, r5, lr}
 80291fe:	690b      	ldr	r3, [r1, #16]
 8029200:	4605      	mov	r5, r0
 8029202:	460c      	mov	r4, r1
 8029204:	b913      	cbnz	r3, 802920c <_fflush_r+0x10>
 8029206:	2500      	movs	r5, #0
 8029208:	4628      	mov	r0, r5
 802920a:	bd38      	pop	{r3, r4, r5, pc}
 802920c:	b118      	cbz	r0, 8029216 <_fflush_r+0x1a>
 802920e:	6983      	ldr	r3, [r0, #24]
 8029210:	b90b      	cbnz	r3, 8029216 <_fflush_r+0x1a>
 8029212:	f000 f887 	bl	8029324 <__sinit>
 8029216:	4b14      	ldr	r3, [pc, #80]	; (8029268 <_fflush_r+0x6c>)
 8029218:	429c      	cmp	r4, r3
 802921a:	d11b      	bne.n	8029254 <_fflush_r+0x58>
 802921c:	686c      	ldr	r4, [r5, #4]
 802921e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029222:	2b00      	cmp	r3, #0
 8029224:	d0ef      	beq.n	8029206 <_fflush_r+0xa>
 8029226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029228:	07d0      	lsls	r0, r2, #31
 802922a:	d404      	bmi.n	8029236 <_fflush_r+0x3a>
 802922c:	0599      	lsls	r1, r3, #22
 802922e:	d402      	bmi.n	8029236 <_fflush_r+0x3a>
 8029230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029232:	f000 fc84 	bl	8029b3e <__retarget_lock_acquire_recursive>
 8029236:	4628      	mov	r0, r5
 8029238:	4621      	mov	r1, r4
 802923a:	f7ff ff59 	bl	80290f0 <__sflush_r>
 802923e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029240:	07da      	lsls	r2, r3, #31
 8029242:	4605      	mov	r5, r0
 8029244:	d4e0      	bmi.n	8029208 <_fflush_r+0xc>
 8029246:	89a3      	ldrh	r3, [r4, #12]
 8029248:	059b      	lsls	r3, r3, #22
 802924a:	d4dd      	bmi.n	8029208 <_fflush_r+0xc>
 802924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802924e:	f000 fc77 	bl	8029b40 <__retarget_lock_release_recursive>
 8029252:	e7d9      	b.n	8029208 <_fflush_r+0xc>
 8029254:	4b05      	ldr	r3, [pc, #20]	; (802926c <_fflush_r+0x70>)
 8029256:	429c      	cmp	r4, r3
 8029258:	d101      	bne.n	802925e <_fflush_r+0x62>
 802925a:	68ac      	ldr	r4, [r5, #8]
 802925c:	e7df      	b.n	802921e <_fflush_r+0x22>
 802925e:	4b04      	ldr	r3, [pc, #16]	; (8029270 <_fflush_r+0x74>)
 8029260:	429c      	cmp	r4, r3
 8029262:	bf08      	it	eq
 8029264:	68ec      	ldreq	r4, [r5, #12]
 8029266:	e7da      	b.n	802921e <_fflush_r+0x22>
 8029268:	0802cda8 	.word	0x0802cda8
 802926c:	0802cdc8 	.word	0x0802cdc8
 8029270:	0802cd88 	.word	0x0802cd88

08029274 <std>:
 8029274:	2300      	movs	r3, #0
 8029276:	b510      	push	{r4, lr}
 8029278:	4604      	mov	r4, r0
 802927a:	e9c0 3300 	strd	r3, r3, [r0]
 802927e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029282:	6083      	str	r3, [r0, #8]
 8029284:	8181      	strh	r1, [r0, #12]
 8029286:	6643      	str	r3, [r0, #100]	; 0x64
 8029288:	81c2      	strh	r2, [r0, #14]
 802928a:	6183      	str	r3, [r0, #24]
 802928c:	4619      	mov	r1, r3
 802928e:	2208      	movs	r2, #8
 8029290:	305c      	adds	r0, #92	; 0x5c
 8029292:	f7fe feef 	bl	8028074 <memset>
 8029296:	4b05      	ldr	r3, [pc, #20]	; (80292ac <std+0x38>)
 8029298:	6263      	str	r3, [r4, #36]	; 0x24
 802929a:	4b05      	ldr	r3, [pc, #20]	; (80292b0 <std+0x3c>)
 802929c:	62a3      	str	r3, [r4, #40]	; 0x28
 802929e:	4b05      	ldr	r3, [pc, #20]	; (80292b4 <std+0x40>)
 80292a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80292a2:	4b05      	ldr	r3, [pc, #20]	; (80292b8 <std+0x44>)
 80292a4:	6224      	str	r4, [r4, #32]
 80292a6:	6323      	str	r3, [r4, #48]	; 0x30
 80292a8:	bd10      	pop	{r4, pc}
 80292aa:	bf00      	nop
 80292ac:	0802adbd 	.word	0x0802adbd
 80292b0:	0802addf 	.word	0x0802addf
 80292b4:	0802ae17 	.word	0x0802ae17
 80292b8:	0802ae3b 	.word	0x0802ae3b

080292bc <_cleanup_r>:
 80292bc:	4901      	ldr	r1, [pc, #4]	; (80292c4 <_cleanup_r+0x8>)
 80292be:	f000 b8af 	b.w	8029420 <_fwalk_reent>
 80292c2:	bf00      	nop
 80292c4:	080291fd 	.word	0x080291fd

080292c8 <__sfmoreglue>:
 80292c8:	b570      	push	{r4, r5, r6, lr}
 80292ca:	2268      	movs	r2, #104	; 0x68
 80292cc:	1e4d      	subs	r5, r1, #1
 80292ce:	4355      	muls	r5, r2
 80292d0:	460e      	mov	r6, r1
 80292d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80292d6:	f001 f9ef 	bl	802a6b8 <_malloc_r>
 80292da:	4604      	mov	r4, r0
 80292dc:	b140      	cbz	r0, 80292f0 <__sfmoreglue+0x28>
 80292de:	2100      	movs	r1, #0
 80292e0:	e9c0 1600 	strd	r1, r6, [r0]
 80292e4:	300c      	adds	r0, #12
 80292e6:	60a0      	str	r0, [r4, #8]
 80292e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80292ec:	f7fe fec2 	bl	8028074 <memset>
 80292f0:	4620      	mov	r0, r4
 80292f2:	bd70      	pop	{r4, r5, r6, pc}

080292f4 <__sfp_lock_acquire>:
 80292f4:	4801      	ldr	r0, [pc, #4]	; (80292fc <__sfp_lock_acquire+0x8>)
 80292f6:	f000 bc22 	b.w	8029b3e <__retarget_lock_acquire_recursive>
 80292fa:	bf00      	nop
 80292fc:	20003ed1 	.word	0x20003ed1

08029300 <__sfp_lock_release>:
 8029300:	4801      	ldr	r0, [pc, #4]	; (8029308 <__sfp_lock_release+0x8>)
 8029302:	f000 bc1d 	b.w	8029b40 <__retarget_lock_release_recursive>
 8029306:	bf00      	nop
 8029308:	20003ed1 	.word	0x20003ed1

0802930c <__sinit_lock_acquire>:
 802930c:	4801      	ldr	r0, [pc, #4]	; (8029314 <__sinit_lock_acquire+0x8>)
 802930e:	f000 bc16 	b.w	8029b3e <__retarget_lock_acquire_recursive>
 8029312:	bf00      	nop
 8029314:	20003ed2 	.word	0x20003ed2

08029318 <__sinit_lock_release>:
 8029318:	4801      	ldr	r0, [pc, #4]	; (8029320 <__sinit_lock_release+0x8>)
 802931a:	f000 bc11 	b.w	8029b40 <__retarget_lock_release_recursive>
 802931e:	bf00      	nop
 8029320:	20003ed2 	.word	0x20003ed2

08029324 <__sinit>:
 8029324:	b510      	push	{r4, lr}
 8029326:	4604      	mov	r4, r0
 8029328:	f7ff fff0 	bl	802930c <__sinit_lock_acquire>
 802932c:	69a3      	ldr	r3, [r4, #24]
 802932e:	b11b      	cbz	r3, 8029338 <__sinit+0x14>
 8029330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029334:	f7ff bff0 	b.w	8029318 <__sinit_lock_release>
 8029338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802933c:	6523      	str	r3, [r4, #80]	; 0x50
 802933e:	4b13      	ldr	r3, [pc, #76]	; (802938c <__sinit+0x68>)
 8029340:	4a13      	ldr	r2, [pc, #76]	; (8029390 <__sinit+0x6c>)
 8029342:	681b      	ldr	r3, [r3, #0]
 8029344:	62a2      	str	r2, [r4, #40]	; 0x28
 8029346:	42a3      	cmp	r3, r4
 8029348:	bf04      	itt	eq
 802934a:	2301      	moveq	r3, #1
 802934c:	61a3      	streq	r3, [r4, #24]
 802934e:	4620      	mov	r0, r4
 8029350:	f000 f820 	bl	8029394 <__sfp>
 8029354:	6060      	str	r0, [r4, #4]
 8029356:	4620      	mov	r0, r4
 8029358:	f000 f81c 	bl	8029394 <__sfp>
 802935c:	60a0      	str	r0, [r4, #8]
 802935e:	4620      	mov	r0, r4
 8029360:	f000 f818 	bl	8029394 <__sfp>
 8029364:	2200      	movs	r2, #0
 8029366:	60e0      	str	r0, [r4, #12]
 8029368:	2104      	movs	r1, #4
 802936a:	6860      	ldr	r0, [r4, #4]
 802936c:	f7ff ff82 	bl	8029274 <std>
 8029370:	68a0      	ldr	r0, [r4, #8]
 8029372:	2201      	movs	r2, #1
 8029374:	2109      	movs	r1, #9
 8029376:	f7ff ff7d 	bl	8029274 <std>
 802937a:	68e0      	ldr	r0, [r4, #12]
 802937c:	2202      	movs	r2, #2
 802937e:	2112      	movs	r1, #18
 8029380:	f7ff ff78 	bl	8029274 <std>
 8029384:	2301      	movs	r3, #1
 8029386:	61a3      	str	r3, [r4, #24]
 8029388:	e7d2      	b.n	8029330 <__sinit+0xc>
 802938a:	bf00      	nop
 802938c:	0802cd28 	.word	0x0802cd28
 8029390:	080292bd 	.word	0x080292bd

08029394 <__sfp>:
 8029394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029396:	4607      	mov	r7, r0
 8029398:	f7ff ffac 	bl	80292f4 <__sfp_lock_acquire>
 802939c:	4b1e      	ldr	r3, [pc, #120]	; (8029418 <__sfp+0x84>)
 802939e:	681e      	ldr	r6, [r3, #0]
 80293a0:	69b3      	ldr	r3, [r6, #24]
 80293a2:	b913      	cbnz	r3, 80293aa <__sfp+0x16>
 80293a4:	4630      	mov	r0, r6
 80293a6:	f7ff ffbd 	bl	8029324 <__sinit>
 80293aa:	3648      	adds	r6, #72	; 0x48
 80293ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80293b0:	3b01      	subs	r3, #1
 80293b2:	d503      	bpl.n	80293bc <__sfp+0x28>
 80293b4:	6833      	ldr	r3, [r6, #0]
 80293b6:	b30b      	cbz	r3, 80293fc <__sfp+0x68>
 80293b8:	6836      	ldr	r6, [r6, #0]
 80293ba:	e7f7      	b.n	80293ac <__sfp+0x18>
 80293bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80293c0:	b9d5      	cbnz	r5, 80293f8 <__sfp+0x64>
 80293c2:	4b16      	ldr	r3, [pc, #88]	; (802941c <__sfp+0x88>)
 80293c4:	60e3      	str	r3, [r4, #12]
 80293c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80293ca:	6665      	str	r5, [r4, #100]	; 0x64
 80293cc:	f000 fbb6 	bl	8029b3c <__retarget_lock_init_recursive>
 80293d0:	f7ff ff96 	bl	8029300 <__sfp_lock_release>
 80293d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80293d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80293dc:	6025      	str	r5, [r4, #0]
 80293de:	61a5      	str	r5, [r4, #24]
 80293e0:	2208      	movs	r2, #8
 80293e2:	4629      	mov	r1, r5
 80293e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80293e8:	f7fe fe44 	bl	8028074 <memset>
 80293ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80293f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80293f4:	4620      	mov	r0, r4
 80293f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80293f8:	3468      	adds	r4, #104	; 0x68
 80293fa:	e7d9      	b.n	80293b0 <__sfp+0x1c>
 80293fc:	2104      	movs	r1, #4
 80293fe:	4638      	mov	r0, r7
 8029400:	f7ff ff62 	bl	80292c8 <__sfmoreglue>
 8029404:	4604      	mov	r4, r0
 8029406:	6030      	str	r0, [r6, #0]
 8029408:	2800      	cmp	r0, #0
 802940a:	d1d5      	bne.n	80293b8 <__sfp+0x24>
 802940c:	f7ff ff78 	bl	8029300 <__sfp_lock_release>
 8029410:	230c      	movs	r3, #12
 8029412:	603b      	str	r3, [r7, #0]
 8029414:	e7ee      	b.n	80293f4 <__sfp+0x60>
 8029416:	bf00      	nop
 8029418:	0802cd28 	.word	0x0802cd28
 802941c:	ffff0001 	.word	0xffff0001

08029420 <_fwalk_reent>:
 8029420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029424:	4606      	mov	r6, r0
 8029426:	4688      	mov	r8, r1
 8029428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802942c:	2700      	movs	r7, #0
 802942e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029432:	f1b9 0901 	subs.w	r9, r9, #1
 8029436:	d505      	bpl.n	8029444 <_fwalk_reent+0x24>
 8029438:	6824      	ldr	r4, [r4, #0]
 802943a:	2c00      	cmp	r4, #0
 802943c:	d1f7      	bne.n	802942e <_fwalk_reent+0xe>
 802943e:	4638      	mov	r0, r7
 8029440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029444:	89ab      	ldrh	r3, [r5, #12]
 8029446:	2b01      	cmp	r3, #1
 8029448:	d907      	bls.n	802945a <_fwalk_reent+0x3a>
 802944a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802944e:	3301      	adds	r3, #1
 8029450:	d003      	beq.n	802945a <_fwalk_reent+0x3a>
 8029452:	4629      	mov	r1, r5
 8029454:	4630      	mov	r0, r6
 8029456:	47c0      	blx	r8
 8029458:	4307      	orrs	r7, r0
 802945a:	3568      	adds	r5, #104	; 0x68
 802945c:	e7e9      	b.n	8029432 <_fwalk_reent+0x12>

0802945e <rshift>:
 802945e:	6903      	ldr	r3, [r0, #16]
 8029460:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8029464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029468:	ea4f 1261 	mov.w	r2, r1, asr #5
 802946c:	f100 0414 	add.w	r4, r0, #20
 8029470:	dd45      	ble.n	80294fe <rshift+0xa0>
 8029472:	f011 011f 	ands.w	r1, r1, #31
 8029476:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802947a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802947e:	d10c      	bne.n	802949a <rshift+0x3c>
 8029480:	f100 0710 	add.w	r7, r0, #16
 8029484:	4629      	mov	r1, r5
 8029486:	42b1      	cmp	r1, r6
 8029488:	d334      	bcc.n	80294f4 <rshift+0x96>
 802948a:	1a9b      	subs	r3, r3, r2
 802948c:	009b      	lsls	r3, r3, #2
 802948e:	1eea      	subs	r2, r5, #3
 8029490:	4296      	cmp	r6, r2
 8029492:	bf38      	it	cc
 8029494:	2300      	movcc	r3, #0
 8029496:	4423      	add	r3, r4
 8029498:	e015      	b.n	80294c6 <rshift+0x68>
 802949a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802949e:	f1c1 0820 	rsb	r8, r1, #32
 80294a2:	40cf      	lsrs	r7, r1
 80294a4:	f105 0e04 	add.w	lr, r5, #4
 80294a8:	46a1      	mov	r9, r4
 80294aa:	4576      	cmp	r6, lr
 80294ac:	46f4      	mov	ip, lr
 80294ae:	d815      	bhi.n	80294dc <rshift+0x7e>
 80294b0:	1a9a      	subs	r2, r3, r2
 80294b2:	0092      	lsls	r2, r2, #2
 80294b4:	3a04      	subs	r2, #4
 80294b6:	3501      	adds	r5, #1
 80294b8:	42ae      	cmp	r6, r5
 80294ba:	bf38      	it	cc
 80294bc:	2200      	movcc	r2, #0
 80294be:	18a3      	adds	r3, r4, r2
 80294c0:	50a7      	str	r7, [r4, r2]
 80294c2:	b107      	cbz	r7, 80294c6 <rshift+0x68>
 80294c4:	3304      	adds	r3, #4
 80294c6:	1b1a      	subs	r2, r3, r4
 80294c8:	42a3      	cmp	r3, r4
 80294ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80294ce:	bf08      	it	eq
 80294d0:	2300      	moveq	r3, #0
 80294d2:	6102      	str	r2, [r0, #16]
 80294d4:	bf08      	it	eq
 80294d6:	6143      	streq	r3, [r0, #20]
 80294d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80294dc:	f8dc c000 	ldr.w	ip, [ip]
 80294e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80294e4:	ea4c 0707 	orr.w	r7, ip, r7
 80294e8:	f849 7b04 	str.w	r7, [r9], #4
 80294ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80294f0:	40cf      	lsrs	r7, r1
 80294f2:	e7da      	b.n	80294aa <rshift+0x4c>
 80294f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80294f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80294fc:	e7c3      	b.n	8029486 <rshift+0x28>
 80294fe:	4623      	mov	r3, r4
 8029500:	e7e1      	b.n	80294c6 <rshift+0x68>

08029502 <__hexdig_fun>:
 8029502:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8029506:	2b09      	cmp	r3, #9
 8029508:	d802      	bhi.n	8029510 <__hexdig_fun+0xe>
 802950a:	3820      	subs	r0, #32
 802950c:	b2c0      	uxtb	r0, r0
 802950e:	4770      	bx	lr
 8029510:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8029514:	2b05      	cmp	r3, #5
 8029516:	d801      	bhi.n	802951c <__hexdig_fun+0x1a>
 8029518:	3847      	subs	r0, #71	; 0x47
 802951a:	e7f7      	b.n	802950c <__hexdig_fun+0xa>
 802951c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8029520:	2b05      	cmp	r3, #5
 8029522:	d801      	bhi.n	8029528 <__hexdig_fun+0x26>
 8029524:	3827      	subs	r0, #39	; 0x27
 8029526:	e7f1      	b.n	802950c <__hexdig_fun+0xa>
 8029528:	2000      	movs	r0, #0
 802952a:	4770      	bx	lr

0802952c <__gethex>:
 802952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029530:	ed2d 8b02 	vpush	{d8}
 8029534:	b089      	sub	sp, #36	; 0x24
 8029536:	ee08 0a10 	vmov	s16, r0
 802953a:	9304      	str	r3, [sp, #16]
 802953c:	4bb4      	ldr	r3, [pc, #720]	; (8029810 <__gethex+0x2e4>)
 802953e:	681b      	ldr	r3, [r3, #0]
 8029540:	9301      	str	r3, [sp, #4]
 8029542:	4618      	mov	r0, r3
 8029544:	468b      	mov	fp, r1
 8029546:	4690      	mov	r8, r2
 8029548:	f7de fd84 	bl	8008054 <strlen>
 802954c:	9b01      	ldr	r3, [sp, #4]
 802954e:	f8db 2000 	ldr.w	r2, [fp]
 8029552:	4403      	add	r3, r0
 8029554:	4682      	mov	sl, r0
 8029556:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802955a:	9305      	str	r3, [sp, #20]
 802955c:	1c93      	adds	r3, r2, #2
 802955e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8029562:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8029566:	32fe      	adds	r2, #254	; 0xfe
 8029568:	18d1      	adds	r1, r2, r3
 802956a:	461f      	mov	r7, r3
 802956c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029570:	9100      	str	r1, [sp, #0]
 8029572:	2830      	cmp	r0, #48	; 0x30
 8029574:	d0f8      	beq.n	8029568 <__gethex+0x3c>
 8029576:	f7ff ffc4 	bl	8029502 <__hexdig_fun>
 802957a:	4604      	mov	r4, r0
 802957c:	2800      	cmp	r0, #0
 802957e:	d13a      	bne.n	80295f6 <__gethex+0xca>
 8029580:	9901      	ldr	r1, [sp, #4]
 8029582:	4652      	mov	r2, sl
 8029584:	4638      	mov	r0, r7
 8029586:	f001 fc5c 	bl	802ae42 <strncmp>
 802958a:	4605      	mov	r5, r0
 802958c:	2800      	cmp	r0, #0
 802958e:	d168      	bne.n	8029662 <__gethex+0x136>
 8029590:	f817 000a 	ldrb.w	r0, [r7, sl]
 8029594:	eb07 060a 	add.w	r6, r7, sl
 8029598:	f7ff ffb3 	bl	8029502 <__hexdig_fun>
 802959c:	2800      	cmp	r0, #0
 802959e:	d062      	beq.n	8029666 <__gethex+0x13a>
 80295a0:	4633      	mov	r3, r6
 80295a2:	7818      	ldrb	r0, [r3, #0]
 80295a4:	2830      	cmp	r0, #48	; 0x30
 80295a6:	461f      	mov	r7, r3
 80295a8:	f103 0301 	add.w	r3, r3, #1
 80295ac:	d0f9      	beq.n	80295a2 <__gethex+0x76>
 80295ae:	f7ff ffa8 	bl	8029502 <__hexdig_fun>
 80295b2:	2301      	movs	r3, #1
 80295b4:	fab0 f480 	clz	r4, r0
 80295b8:	0964      	lsrs	r4, r4, #5
 80295ba:	4635      	mov	r5, r6
 80295bc:	9300      	str	r3, [sp, #0]
 80295be:	463a      	mov	r2, r7
 80295c0:	4616      	mov	r6, r2
 80295c2:	3201      	adds	r2, #1
 80295c4:	7830      	ldrb	r0, [r6, #0]
 80295c6:	f7ff ff9c 	bl	8029502 <__hexdig_fun>
 80295ca:	2800      	cmp	r0, #0
 80295cc:	d1f8      	bne.n	80295c0 <__gethex+0x94>
 80295ce:	9901      	ldr	r1, [sp, #4]
 80295d0:	4652      	mov	r2, sl
 80295d2:	4630      	mov	r0, r6
 80295d4:	f001 fc35 	bl	802ae42 <strncmp>
 80295d8:	b980      	cbnz	r0, 80295fc <__gethex+0xd0>
 80295da:	b94d      	cbnz	r5, 80295f0 <__gethex+0xc4>
 80295dc:	eb06 050a 	add.w	r5, r6, sl
 80295e0:	462a      	mov	r2, r5
 80295e2:	4616      	mov	r6, r2
 80295e4:	3201      	adds	r2, #1
 80295e6:	7830      	ldrb	r0, [r6, #0]
 80295e8:	f7ff ff8b 	bl	8029502 <__hexdig_fun>
 80295ec:	2800      	cmp	r0, #0
 80295ee:	d1f8      	bne.n	80295e2 <__gethex+0xb6>
 80295f0:	1bad      	subs	r5, r5, r6
 80295f2:	00ad      	lsls	r5, r5, #2
 80295f4:	e004      	b.n	8029600 <__gethex+0xd4>
 80295f6:	2400      	movs	r4, #0
 80295f8:	4625      	mov	r5, r4
 80295fa:	e7e0      	b.n	80295be <__gethex+0x92>
 80295fc:	2d00      	cmp	r5, #0
 80295fe:	d1f7      	bne.n	80295f0 <__gethex+0xc4>
 8029600:	7833      	ldrb	r3, [r6, #0]
 8029602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8029606:	2b50      	cmp	r3, #80	; 0x50
 8029608:	d13b      	bne.n	8029682 <__gethex+0x156>
 802960a:	7873      	ldrb	r3, [r6, #1]
 802960c:	2b2b      	cmp	r3, #43	; 0x2b
 802960e:	d02c      	beq.n	802966a <__gethex+0x13e>
 8029610:	2b2d      	cmp	r3, #45	; 0x2d
 8029612:	d02e      	beq.n	8029672 <__gethex+0x146>
 8029614:	1c71      	adds	r1, r6, #1
 8029616:	f04f 0900 	mov.w	r9, #0
 802961a:	7808      	ldrb	r0, [r1, #0]
 802961c:	f7ff ff71 	bl	8029502 <__hexdig_fun>
 8029620:	1e43      	subs	r3, r0, #1
 8029622:	b2db      	uxtb	r3, r3
 8029624:	2b18      	cmp	r3, #24
 8029626:	d82c      	bhi.n	8029682 <__gethex+0x156>
 8029628:	f1a0 0210 	sub.w	r2, r0, #16
 802962c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8029630:	f7ff ff67 	bl	8029502 <__hexdig_fun>
 8029634:	1e43      	subs	r3, r0, #1
 8029636:	b2db      	uxtb	r3, r3
 8029638:	2b18      	cmp	r3, #24
 802963a:	d91d      	bls.n	8029678 <__gethex+0x14c>
 802963c:	f1b9 0f00 	cmp.w	r9, #0
 8029640:	d000      	beq.n	8029644 <__gethex+0x118>
 8029642:	4252      	negs	r2, r2
 8029644:	4415      	add	r5, r2
 8029646:	f8cb 1000 	str.w	r1, [fp]
 802964a:	b1e4      	cbz	r4, 8029686 <__gethex+0x15a>
 802964c:	9b00      	ldr	r3, [sp, #0]
 802964e:	2b00      	cmp	r3, #0
 8029650:	bf14      	ite	ne
 8029652:	2700      	movne	r7, #0
 8029654:	2706      	moveq	r7, #6
 8029656:	4638      	mov	r0, r7
 8029658:	b009      	add	sp, #36	; 0x24
 802965a:	ecbd 8b02 	vpop	{d8}
 802965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029662:	463e      	mov	r6, r7
 8029664:	4625      	mov	r5, r4
 8029666:	2401      	movs	r4, #1
 8029668:	e7ca      	b.n	8029600 <__gethex+0xd4>
 802966a:	f04f 0900 	mov.w	r9, #0
 802966e:	1cb1      	adds	r1, r6, #2
 8029670:	e7d3      	b.n	802961a <__gethex+0xee>
 8029672:	f04f 0901 	mov.w	r9, #1
 8029676:	e7fa      	b.n	802966e <__gethex+0x142>
 8029678:	230a      	movs	r3, #10
 802967a:	fb03 0202 	mla	r2, r3, r2, r0
 802967e:	3a10      	subs	r2, #16
 8029680:	e7d4      	b.n	802962c <__gethex+0x100>
 8029682:	4631      	mov	r1, r6
 8029684:	e7df      	b.n	8029646 <__gethex+0x11a>
 8029686:	1bf3      	subs	r3, r6, r7
 8029688:	3b01      	subs	r3, #1
 802968a:	4621      	mov	r1, r4
 802968c:	2b07      	cmp	r3, #7
 802968e:	dc0b      	bgt.n	80296a8 <__gethex+0x17c>
 8029690:	ee18 0a10 	vmov	r0, s16
 8029694:	f000 facc 	bl	8029c30 <_Balloc>
 8029698:	4604      	mov	r4, r0
 802969a:	b940      	cbnz	r0, 80296ae <__gethex+0x182>
 802969c:	4b5d      	ldr	r3, [pc, #372]	; (8029814 <__gethex+0x2e8>)
 802969e:	4602      	mov	r2, r0
 80296a0:	21de      	movs	r1, #222	; 0xde
 80296a2:	485d      	ldr	r0, [pc, #372]	; (8029818 <__gethex+0x2ec>)
 80296a4:	f001 fc00 	bl	802aea8 <__assert_func>
 80296a8:	3101      	adds	r1, #1
 80296aa:	105b      	asrs	r3, r3, #1
 80296ac:	e7ee      	b.n	802968c <__gethex+0x160>
 80296ae:	f100 0914 	add.w	r9, r0, #20
 80296b2:	f04f 0b00 	mov.w	fp, #0
 80296b6:	f1ca 0301 	rsb	r3, sl, #1
 80296ba:	f8cd 9008 	str.w	r9, [sp, #8]
 80296be:	f8cd b000 	str.w	fp, [sp]
 80296c2:	9306      	str	r3, [sp, #24]
 80296c4:	42b7      	cmp	r7, r6
 80296c6:	d340      	bcc.n	802974a <__gethex+0x21e>
 80296c8:	9802      	ldr	r0, [sp, #8]
 80296ca:	9b00      	ldr	r3, [sp, #0]
 80296cc:	f840 3b04 	str.w	r3, [r0], #4
 80296d0:	eba0 0009 	sub.w	r0, r0, r9
 80296d4:	1080      	asrs	r0, r0, #2
 80296d6:	0146      	lsls	r6, r0, #5
 80296d8:	6120      	str	r0, [r4, #16]
 80296da:	4618      	mov	r0, r3
 80296dc:	f000 fb9a 	bl	8029e14 <__hi0bits>
 80296e0:	1a30      	subs	r0, r6, r0
 80296e2:	f8d8 6000 	ldr.w	r6, [r8]
 80296e6:	42b0      	cmp	r0, r6
 80296e8:	dd63      	ble.n	80297b2 <__gethex+0x286>
 80296ea:	1b87      	subs	r7, r0, r6
 80296ec:	4639      	mov	r1, r7
 80296ee:	4620      	mov	r0, r4
 80296f0:	f000 ff3e 	bl	802a570 <__any_on>
 80296f4:	4682      	mov	sl, r0
 80296f6:	b1a8      	cbz	r0, 8029724 <__gethex+0x1f8>
 80296f8:	1e7b      	subs	r3, r7, #1
 80296fa:	1159      	asrs	r1, r3, #5
 80296fc:	f003 021f 	and.w	r2, r3, #31
 8029700:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8029704:	f04f 0a01 	mov.w	sl, #1
 8029708:	fa0a f202 	lsl.w	r2, sl, r2
 802970c:	420a      	tst	r2, r1
 802970e:	d009      	beq.n	8029724 <__gethex+0x1f8>
 8029710:	4553      	cmp	r3, sl
 8029712:	dd05      	ble.n	8029720 <__gethex+0x1f4>
 8029714:	1eb9      	subs	r1, r7, #2
 8029716:	4620      	mov	r0, r4
 8029718:	f000 ff2a 	bl	802a570 <__any_on>
 802971c:	2800      	cmp	r0, #0
 802971e:	d145      	bne.n	80297ac <__gethex+0x280>
 8029720:	f04f 0a02 	mov.w	sl, #2
 8029724:	4639      	mov	r1, r7
 8029726:	4620      	mov	r0, r4
 8029728:	f7ff fe99 	bl	802945e <rshift>
 802972c:	443d      	add	r5, r7
 802972e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8029732:	42ab      	cmp	r3, r5
 8029734:	da4c      	bge.n	80297d0 <__gethex+0x2a4>
 8029736:	ee18 0a10 	vmov	r0, s16
 802973a:	4621      	mov	r1, r4
 802973c:	f000 fab8 	bl	8029cb0 <_Bfree>
 8029740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029742:	2300      	movs	r3, #0
 8029744:	6013      	str	r3, [r2, #0]
 8029746:	27a3      	movs	r7, #163	; 0xa3
 8029748:	e785      	b.n	8029656 <__gethex+0x12a>
 802974a:	1e73      	subs	r3, r6, #1
 802974c:	9a05      	ldr	r2, [sp, #20]
 802974e:	9303      	str	r3, [sp, #12]
 8029750:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029754:	4293      	cmp	r3, r2
 8029756:	d019      	beq.n	802978c <__gethex+0x260>
 8029758:	f1bb 0f20 	cmp.w	fp, #32
 802975c:	d107      	bne.n	802976e <__gethex+0x242>
 802975e:	9b02      	ldr	r3, [sp, #8]
 8029760:	9a00      	ldr	r2, [sp, #0]
 8029762:	f843 2b04 	str.w	r2, [r3], #4
 8029766:	9302      	str	r3, [sp, #8]
 8029768:	2300      	movs	r3, #0
 802976a:	9300      	str	r3, [sp, #0]
 802976c:	469b      	mov	fp, r3
 802976e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8029772:	f7ff fec6 	bl	8029502 <__hexdig_fun>
 8029776:	9b00      	ldr	r3, [sp, #0]
 8029778:	f000 000f 	and.w	r0, r0, #15
 802977c:	fa00 f00b 	lsl.w	r0, r0, fp
 8029780:	4303      	orrs	r3, r0
 8029782:	9300      	str	r3, [sp, #0]
 8029784:	f10b 0b04 	add.w	fp, fp, #4
 8029788:	9b03      	ldr	r3, [sp, #12]
 802978a:	e00d      	b.n	80297a8 <__gethex+0x27c>
 802978c:	9b03      	ldr	r3, [sp, #12]
 802978e:	9a06      	ldr	r2, [sp, #24]
 8029790:	4413      	add	r3, r2
 8029792:	42bb      	cmp	r3, r7
 8029794:	d3e0      	bcc.n	8029758 <__gethex+0x22c>
 8029796:	4618      	mov	r0, r3
 8029798:	9901      	ldr	r1, [sp, #4]
 802979a:	9307      	str	r3, [sp, #28]
 802979c:	4652      	mov	r2, sl
 802979e:	f001 fb50 	bl	802ae42 <strncmp>
 80297a2:	9b07      	ldr	r3, [sp, #28]
 80297a4:	2800      	cmp	r0, #0
 80297a6:	d1d7      	bne.n	8029758 <__gethex+0x22c>
 80297a8:	461e      	mov	r6, r3
 80297aa:	e78b      	b.n	80296c4 <__gethex+0x198>
 80297ac:	f04f 0a03 	mov.w	sl, #3
 80297b0:	e7b8      	b.n	8029724 <__gethex+0x1f8>
 80297b2:	da0a      	bge.n	80297ca <__gethex+0x29e>
 80297b4:	1a37      	subs	r7, r6, r0
 80297b6:	4621      	mov	r1, r4
 80297b8:	ee18 0a10 	vmov	r0, s16
 80297bc:	463a      	mov	r2, r7
 80297be:	f000 fc93 	bl	802a0e8 <__lshift>
 80297c2:	1bed      	subs	r5, r5, r7
 80297c4:	4604      	mov	r4, r0
 80297c6:	f100 0914 	add.w	r9, r0, #20
 80297ca:	f04f 0a00 	mov.w	sl, #0
 80297ce:	e7ae      	b.n	802972e <__gethex+0x202>
 80297d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80297d4:	42a8      	cmp	r0, r5
 80297d6:	dd72      	ble.n	80298be <__gethex+0x392>
 80297d8:	1b45      	subs	r5, r0, r5
 80297da:	42ae      	cmp	r6, r5
 80297dc:	dc36      	bgt.n	802984c <__gethex+0x320>
 80297de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80297e2:	2b02      	cmp	r3, #2
 80297e4:	d02a      	beq.n	802983c <__gethex+0x310>
 80297e6:	2b03      	cmp	r3, #3
 80297e8:	d02c      	beq.n	8029844 <__gethex+0x318>
 80297ea:	2b01      	cmp	r3, #1
 80297ec:	d11c      	bne.n	8029828 <__gethex+0x2fc>
 80297ee:	42ae      	cmp	r6, r5
 80297f0:	d11a      	bne.n	8029828 <__gethex+0x2fc>
 80297f2:	2e01      	cmp	r6, #1
 80297f4:	d112      	bne.n	802981c <__gethex+0x2f0>
 80297f6:	9a04      	ldr	r2, [sp, #16]
 80297f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80297fc:	6013      	str	r3, [r2, #0]
 80297fe:	2301      	movs	r3, #1
 8029800:	6123      	str	r3, [r4, #16]
 8029802:	f8c9 3000 	str.w	r3, [r9]
 8029806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029808:	2762      	movs	r7, #98	; 0x62
 802980a:	601c      	str	r4, [r3, #0]
 802980c:	e723      	b.n	8029656 <__gethex+0x12a>
 802980e:	bf00      	nop
 8029810:	0802ce60 	.word	0x0802ce60
 8029814:	0802cde8 	.word	0x0802cde8
 8029818:	0802cdf9 	.word	0x0802cdf9
 802981c:	1e71      	subs	r1, r6, #1
 802981e:	4620      	mov	r0, r4
 8029820:	f000 fea6 	bl	802a570 <__any_on>
 8029824:	2800      	cmp	r0, #0
 8029826:	d1e6      	bne.n	80297f6 <__gethex+0x2ca>
 8029828:	ee18 0a10 	vmov	r0, s16
 802982c:	4621      	mov	r1, r4
 802982e:	f000 fa3f 	bl	8029cb0 <_Bfree>
 8029832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029834:	2300      	movs	r3, #0
 8029836:	6013      	str	r3, [r2, #0]
 8029838:	2750      	movs	r7, #80	; 0x50
 802983a:	e70c      	b.n	8029656 <__gethex+0x12a>
 802983c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802983e:	2b00      	cmp	r3, #0
 8029840:	d1f2      	bne.n	8029828 <__gethex+0x2fc>
 8029842:	e7d8      	b.n	80297f6 <__gethex+0x2ca>
 8029844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8029846:	2b00      	cmp	r3, #0
 8029848:	d1d5      	bne.n	80297f6 <__gethex+0x2ca>
 802984a:	e7ed      	b.n	8029828 <__gethex+0x2fc>
 802984c:	1e6f      	subs	r7, r5, #1
 802984e:	f1ba 0f00 	cmp.w	sl, #0
 8029852:	d131      	bne.n	80298b8 <__gethex+0x38c>
 8029854:	b127      	cbz	r7, 8029860 <__gethex+0x334>
 8029856:	4639      	mov	r1, r7
 8029858:	4620      	mov	r0, r4
 802985a:	f000 fe89 	bl	802a570 <__any_on>
 802985e:	4682      	mov	sl, r0
 8029860:	117b      	asrs	r3, r7, #5
 8029862:	2101      	movs	r1, #1
 8029864:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8029868:	f007 071f 	and.w	r7, r7, #31
 802986c:	fa01 f707 	lsl.w	r7, r1, r7
 8029870:	421f      	tst	r7, r3
 8029872:	4629      	mov	r1, r5
 8029874:	4620      	mov	r0, r4
 8029876:	bf18      	it	ne
 8029878:	f04a 0a02 	orrne.w	sl, sl, #2
 802987c:	1b76      	subs	r6, r6, r5
 802987e:	f7ff fdee 	bl	802945e <rshift>
 8029882:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029886:	2702      	movs	r7, #2
 8029888:	f1ba 0f00 	cmp.w	sl, #0
 802988c:	d048      	beq.n	8029920 <__gethex+0x3f4>
 802988e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8029892:	2b02      	cmp	r3, #2
 8029894:	d015      	beq.n	80298c2 <__gethex+0x396>
 8029896:	2b03      	cmp	r3, #3
 8029898:	d017      	beq.n	80298ca <__gethex+0x39e>
 802989a:	2b01      	cmp	r3, #1
 802989c:	d109      	bne.n	80298b2 <__gethex+0x386>
 802989e:	f01a 0f02 	tst.w	sl, #2
 80298a2:	d006      	beq.n	80298b2 <__gethex+0x386>
 80298a4:	f8d9 0000 	ldr.w	r0, [r9]
 80298a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80298ac:	f01a 0f01 	tst.w	sl, #1
 80298b0:	d10e      	bne.n	80298d0 <__gethex+0x3a4>
 80298b2:	f047 0710 	orr.w	r7, r7, #16
 80298b6:	e033      	b.n	8029920 <__gethex+0x3f4>
 80298b8:	f04f 0a01 	mov.w	sl, #1
 80298bc:	e7d0      	b.n	8029860 <__gethex+0x334>
 80298be:	2701      	movs	r7, #1
 80298c0:	e7e2      	b.n	8029888 <__gethex+0x35c>
 80298c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80298c4:	f1c3 0301 	rsb	r3, r3, #1
 80298c8:	9315      	str	r3, [sp, #84]	; 0x54
 80298ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80298cc:	2b00      	cmp	r3, #0
 80298ce:	d0f0      	beq.n	80298b2 <__gethex+0x386>
 80298d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80298d4:	f104 0314 	add.w	r3, r4, #20
 80298d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80298dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80298e0:	f04f 0c00 	mov.w	ip, #0
 80298e4:	4618      	mov	r0, r3
 80298e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80298ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80298ee:	d01c      	beq.n	802992a <__gethex+0x3fe>
 80298f0:	3201      	adds	r2, #1
 80298f2:	6002      	str	r2, [r0, #0]
 80298f4:	2f02      	cmp	r7, #2
 80298f6:	f104 0314 	add.w	r3, r4, #20
 80298fa:	d13f      	bne.n	802997c <__gethex+0x450>
 80298fc:	f8d8 2000 	ldr.w	r2, [r8]
 8029900:	3a01      	subs	r2, #1
 8029902:	42b2      	cmp	r2, r6
 8029904:	d10a      	bne.n	802991c <__gethex+0x3f0>
 8029906:	1171      	asrs	r1, r6, #5
 8029908:	2201      	movs	r2, #1
 802990a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802990e:	f006 061f 	and.w	r6, r6, #31
 8029912:	fa02 f606 	lsl.w	r6, r2, r6
 8029916:	421e      	tst	r6, r3
 8029918:	bf18      	it	ne
 802991a:	4617      	movne	r7, r2
 802991c:	f047 0720 	orr.w	r7, r7, #32
 8029920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029922:	601c      	str	r4, [r3, #0]
 8029924:	9b04      	ldr	r3, [sp, #16]
 8029926:	601d      	str	r5, [r3, #0]
 8029928:	e695      	b.n	8029656 <__gethex+0x12a>
 802992a:	4299      	cmp	r1, r3
 802992c:	f843 cc04 	str.w	ip, [r3, #-4]
 8029930:	d8d8      	bhi.n	80298e4 <__gethex+0x3b8>
 8029932:	68a3      	ldr	r3, [r4, #8]
 8029934:	459b      	cmp	fp, r3
 8029936:	db19      	blt.n	802996c <__gethex+0x440>
 8029938:	6861      	ldr	r1, [r4, #4]
 802993a:	ee18 0a10 	vmov	r0, s16
 802993e:	3101      	adds	r1, #1
 8029940:	f000 f976 	bl	8029c30 <_Balloc>
 8029944:	4681      	mov	r9, r0
 8029946:	b918      	cbnz	r0, 8029950 <__gethex+0x424>
 8029948:	4b1a      	ldr	r3, [pc, #104]	; (80299b4 <__gethex+0x488>)
 802994a:	4602      	mov	r2, r0
 802994c:	2184      	movs	r1, #132	; 0x84
 802994e:	e6a8      	b.n	80296a2 <__gethex+0x176>
 8029950:	6922      	ldr	r2, [r4, #16]
 8029952:	3202      	adds	r2, #2
 8029954:	f104 010c 	add.w	r1, r4, #12
 8029958:	0092      	lsls	r2, r2, #2
 802995a:	300c      	adds	r0, #12
 802995c:	f7fe fb62 	bl	8028024 <memcpy>
 8029960:	4621      	mov	r1, r4
 8029962:	ee18 0a10 	vmov	r0, s16
 8029966:	f000 f9a3 	bl	8029cb0 <_Bfree>
 802996a:	464c      	mov	r4, r9
 802996c:	6923      	ldr	r3, [r4, #16]
 802996e:	1c5a      	adds	r2, r3, #1
 8029970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029974:	6122      	str	r2, [r4, #16]
 8029976:	2201      	movs	r2, #1
 8029978:	615a      	str	r2, [r3, #20]
 802997a:	e7bb      	b.n	80298f4 <__gethex+0x3c8>
 802997c:	6922      	ldr	r2, [r4, #16]
 802997e:	455a      	cmp	r2, fp
 8029980:	dd0b      	ble.n	802999a <__gethex+0x46e>
 8029982:	2101      	movs	r1, #1
 8029984:	4620      	mov	r0, r4
 8029986:	f7ff fd6a 	bl	802945e <rshift>
 802998a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802998e:	3501      	adds	r5, #1
 8029990:	42ab      	cmp	r3, r5
 8029992:	f6ff aed0 	blt.w	8029736 <__gethex+0x20a>
 8029996:	2701      	movs	r7, #1
 8029998:	e7c0      	b.n	802991c <__gethex+0x3f0>
 802999a:	f016 061f 	ands.w	r6, r6, #31
 802999e:	d0fa      	beq.n	8029996 <__gethex+0x46a>
 80299a0:	4453      	add	r3, sl
 80299a2:	f1c6 0620 	rsb	r6, r6, #32
 80299a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80299aa:	f000 fa33 	bl	8029e14 <__hi0bits>
 80299ae:	42b0      	cmp	r0, r6
 80299b0:	dbe7      	blt.n	8029982 <__gethex+0x456>
 80299b2:	e7f0      	b.n	8029996 <__gethex+0x46a>
 80299b4:	0802cde8 	.word	0x0802cde8

080299b8 <L_shift>:
 80299b8:	f1c2 0208 	rsb	r2, r2, #8
 80299bc:	0092      	lsls	r2, r2, #2
 80299be:	b570      	push	{r4, r5, r6, lr}
 80299c0:	f1c2 0620 	rsb	r6, r2, #32
 80299c4:	6843      	ldr	r3, [r0, #4]
 80299c6:	6804      	ldr	r4, [r0, #0]
 80299c8:	fa03 f506 	lsl.w	r5, r3, r6
 80299cc:	432c      	orrs	r4, r5
 80299ce:	40d3      	lsrs	r3, r2
 80299d0:	6004      	str	r4, [r0, #0]
 80299d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80299d6:	4288      	cmp	r0, r1
 80299d8:	d3f4      	bcc.n	80299c4 <L_shift+0xc>
 80299da:	bd70      	pop	{r4, r5, r6, pc}

080299dc <__match>:
 80299dc:	b530      	push	{r4, r5, lr}
 80299de:	6803      	ldr	r3, [r0, #0]
 80299e0:	3301      	adds	r3, #1
 80299e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80299e6:	b914      	cbnz	r4, 80299ee <__match+0x12>
 80299e8:	6003      	str	r3, [r0, #0]
 80299ea:	2001      	movs	r0, #1
 80299ec:	bd30      	pop	{r4, r5, pc}
 80299ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80299f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80299f6:	2d19      	cmp	r5, #25
 80299f8:	bf98      	it	ls
 80299fa:	3220      	addls	r2, #32
 80299fc:	42a2      	cmp	r2, r4
 80299fe:	d0f0      	beq.n	80299e2 <__match+0x6>
 8029a00:	2000      	movs	r0, #0
 8029a02:	e7f3      	b.n	80299ec <__match+0x10>

08029a04 <__hexnan>:
 8029a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a08:	680b      	ldr	r3, [r1, #0]
 8029a0a:	115e      	asrs	r6, r3, #5
 8029a0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8029a10:	f013 031f 	ands.w	r3, r3, #31
 8029a14:	b087      	sub	sp, #28
 8029a16:	bf18      	it	ne
 8029a18:	3604      	addne	r6, #4
 8029a1a:	2500      	movs	r5, #0
 8029a1c:	1f37      	subs	r7, r6, #4
 8029a1e:	4690      	mov	r8, r2
 8029a20:	6802      	ldr	r2, [r0, #0]
 8029a22:	9301      	str	r3, [sp, #4]
 8029a24:	4682      	mov	sl, r0
 8029a26:	f846 5c04 	str.w	r5, [r6, #-4]
 8029a2a:	46b9      	mov	r9, r7
 8029a2c:	463c      	mov	r4, r7
 8029a2e:	9502      	str	r5, [sp, #8]
 8029a30:	46ab      	mov	fp, r5
 8029a32:	7851      	ldrb	r1, [r2, #1]
 8029a34:	1c53      	adds	r3, r2, #1
 8029a36:	9303      	str	r3, [sp, #12]
 8029a38:	b341      	cbz	r1, 8029a8c <__hexnan+0x88>
 8029a3a:	4608      	mov	r0, r1
 8029a3c:	9205      	str	r2, [sp, #20]
 8029a3e:	9104      	str	r1, [sp, #16]
 8029a40:	f7ff fd5f 	bl	8029502 <__hexdig_fun>
 8029a44:	2800      	cmp	r0, #0
 8029a46:	d14f      	bne.n	8029ae8 <__hexnan+0xe4>
 8029a48:	9904      	ldr	r1, [sp, #16]
 8029a4a:	9a05      	ldr	r2, [sp, #20]
 8029a4c:	2920      	cmp	r1, #32
 8029a4e:	d818      	bhi.n	8029a82 <__hexnan+0x7e>
 8029a50:	9b02      	ldr	r3, [sp, #8]
 8029a52:	459b      	cmp	fp, r3
 8029a54:	dd13      	ble.n	8029a7e <__hexnan+0x7a>
 8029a56:	454c      	cmp	r4, r9
 8029a58:	d206      	bcs.n	8029a68 <__hexnan+0x64>
 8029a5a:	2d07      	cmp	r5, #7
 8029a5c:	dc04      	bgt.n	8029a68 <__hexnan+0x64>
 8029a5e:	462a      	mov	r2, r5
 8029a60:	4649      	mov	r1, r9
 8029a62:	4620      	mov	r0, r4
 8029a64:	f7ff ffa8 	bl	80299b8 <L_shift>
 8029a68:	4544      	cmp	r4, r8
 8029a6a:	d950      	bls.n	8029b0e <__hexnan+0x10a>
 8029a6c:	2300      	movs	r3, #0
 8029a6e:	f1a4 0904 	sub.w	r9, r4, #4
 8029a72:	f844 3c04 	str.w	r3, [r4, #-4]
 8029a76:	f8cd b008 	str.w	fp, [sp, #8]
 8029a7a:	464c      	mov	r4, r9
 8029a7c:	461d      	mov	r5, r3
 8029a7e:	9a03      	ldr	r2, [sp, #12]
 8029a80:	e7d7      	b.n	8029a32 <__hexnan+0x2e>
 8029a82:	2929      	cmp	r1, #41	; 0x29
 8029a84:	d156      	bne.n	8029b34 <__hexnan+0x130>
 8029a86:	3202      	adds	r2, #2
 8029a88:	f8ca 2000 	str.w	r2, [sl]
 8029a8c:	f1bb 0f00 	cmp.w	fp, #0
 8029a90:	d050      	beq.n	8029b34 <__hexnan+0x130>
 8029a92:	454c      	cmp	r4, r9
 8029a94:	d206      	bcs.n	8029aa4 <__hexnan+0xa0>
 8029a96:	2d07      	cmp	r5, #7
 8029a98:	dc04      	bgt.n	8029aa4 <__hexnan+0xa0>
 8029a9a:	462a      	mov	r2, r5
 8029a9c:	4649      	mov	r1, r9
 8029a9e:	4620      	mov	r0, r4
 8029aa0:	f7ff ff8a 	bl	80299b8 <L_shift>
 8029aa4:	4544      	cmp	r4, r8
 8029aa6:	d934      	bls.n	8029b12 <__hexnan+0x10e>
 8029aa8:	f1a8 0204 	sub.w	r2, r8, #4
 8029aac:	4623      	mov	r3, r4
 8029aae:	f853 1b04 	ldr.w	r1, [r3], #4
 8029ab2:	f842 1f04 	str.w	r1, [r2, #4]!
 8029ab6:	429f      	cmp	r7, r3
 8029ab8:	d2f9      	bcs.n	8029aae <__hexnan+0xaa>
 8029aba:	1b3b      	subs	r3, r7, r4
 8029abc:	f023 0303 	bic.w	r3, r3, #3
 8029ac0:	3304      	adds	r3, #4
 8029ac2:	3401      	adds	r4, #1
 8029ac4:	3e03      	subs	r6, #3
 8029ac6:	42b4      	cmp	r4, r6
 8029ac8:	bf88      	it	hi
 8029aca:	2304      	movhi	r3, #4
 8029acc:	4443      	add	r3, r8
 8029ace:	2200      	movs	r2, #0
 8029ad0:	f843 2b04 	str.w	r2, [r3], #4
 8029ad4:	429f      	cmp	r7, r3
 8029ad6:	d2fb      	bcs.n	8029ad0 <__hexnan+0xcc>
 8029ad8:	683b      	ldr	r3, [r7, #0]
 8029ada:	b91b      	cbnz	r3, 8029ae4 <__hexnan+0xe0>
 8029adc:	4547      	cmp	r7, r8
 8029ade:	d127      	bne.n	8029b30 <__hexnan+0x12c>
 8029ae0:	2301      	movs	r3, #1
 8029ae2:	603b      	str	r3, [r7, #0]
 8029ae4:	2005      	movs	r0, #5
 8029ae6:	e026      	b.n	8029b36 <__hexnan+0x132>
 8029ae8:	3501      	adds	r5, #1
 8029aea:	2d08      	cmp	r5, #8
 8029aec:	f10b 0b01 	add.w	fp, fp, #1
 8029af0:	dd06      	ble.n	8029b00 <__hexnan+0xfc>
 8029af2:	4544      	cmp	r4, r8
 8029af4:	d9c3      	bls.n	8029a7e <__hexnan+0x7a>
 8029af6:	2300      	movs	r3, #0
 8029af8:	f844 3c04 	str.w	r3, [r4, #-4]
 8029afc:	2501      	movs	r5, #1
 8029afe:	3c04      	subs	r4, #4
 8029b00:	6822      	ldr	r2, [r4, #0]
 8029b02:	f000 000f 	and.w	r0, r0, #15
 8029b06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8029b0a:	6022      	str	r2, [r4, #0]
 8029b0c:	e7b7      	b.n	8029a7e <__hexnan+0x7a>
 8029b0e:	2508      	movs	r5, #8
 8029b10:	e7b5      	b.n	8029a7e <__hexnan+0x7a>
 8029b12:	9b01      	ldr	r3, [sp, #4]
 8029b14:	2b00      	cmp	r3, #0
 8029b16:	d0df      	beq.n	8029ad8 <__hexnan+0xd4>
 8029b18:	f04f 32ff 	mov.w	r2, #4294967295
 8029b1c:	f1c3 0320 	rsb	r3, r3, #32
 8029b20:	fa22 f303 	lsr.w	r3, r2, r3
 8029b24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029b28:	401a      	ands	r2, r3
 8029b2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8029b2e:	e7d3      	b.n	8029ad8 <__hexnan+0xd4>
 8029b30:	3f04      	subs	r7, #4
 8029b32:	e7d1      	b.n	8029ad8 <__hexnan+0xd4>
 8029b34:	2004      	movs	r0, #4
 8029b36:	b007      	add	sp, #28
 8029b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029b3c <__retarget_lock_init_recursive>:
 8029b3c:	4770      	bx	lr

08029b3e <__retarget_lock_acquire_recursive>:
 8029b3e:	4770      	bx	lr

08029b40 <__retarget_lock_release_recursive>:
 8029b40:	4770      	bx	lr

08029b42 <__swhatbuf_r>:
 8029b42:	b570      	push	{r4, r5, r6, lr}
 8029b44:	460e      	mov	r6, r1
 8029b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029b4a:	2900      	cmp	r1, #0
 8029b4c:	b096      	sub	sp, #88	; 0x58
 8029b4e:	4614      	mov	r4, r2
 8029b50:	461d      	mov	r5, r3
 8029b52:	da08      	bge.n	8029b66 <__swhatbuf_r+0x24>
 8029b54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8029b58:	2200      	movs	r2, #0
 8029b5a:	602a      	str	r2, [r5, #0]
 8029b5c:	061a      	lsls	r2, r3, #24
 8029b5e:	d410      	bmi.n	8029b82 <__swhatbuf_r+0x40>
 8029b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029b64:	e00e      	b.n	8029b84 <__swhatbuf_r+0x42>
 8029b66:	466a      	mov	r2, sp
 8029b68:	f001 f9de 	bl	802af28 <_fstat_r>
 8029b6c:	2800      	cmp	r0, #0
 8029b6e:	dbf1      	blt.n	8029b54 <__swhatbuf_r+0x12>
 8029b70:	9a01      	ldr	r2, [sp, #4]
 8029b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8029b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8029b7a:	425a      	negs	r2, r3
 8029b7c:	415a      	adcs	r2, r3
 8029b7e:	602a      	str	r2, [r5, #0]
 8029b80:	e7ee      	b.n	8029b60 <__swhatbuf_r+0x1e>
 8029b82:	2340      	movs	r3, #64	; 0x40
 8029b84:	2000      	movs	r0, #0
 8029b86:	6023      	str	r3, [r4, #0]
 8029b88:	b016      	add	sp, #88	; 0x58
 8029b8a:	bd70      	pop	{r4, r5, r6, pc}

08029b8c <__smakebuf_r>:
 8029b8c:	898b      	ldrh	r3, [r1, #12]
 8029b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029b90:	079d      	lsls	r5, r3, #30
 8029b92:	4606      	mov	r6, r0
 8029b94:	460c      	mov	r4, r1
 8029b96:	d507      	bpl.n	8029ba8 <__smakebuf_r+0x1c>
 8029b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8029b9c:	6023      	str	r3, [r4, #0]
 8029b9e:	6123      	str	r3, [r4, #16]
 8029ba0:	2301      	movs	r3, #1
 8029ba2:	6163      	str	r3, [r4, #20]
 8029ba4:	b002      	add	sp, #8
 8029ba6:	bd70      	pop	{r4, r5, r6, pc}
 8029ba8:	ab01      	add	r3, sp, #4
 8029baa:	466a      	mov	r2, sp
 8029bac:	f7ff ffc9 	bl	8029b42 <__swhatbuf_r>
 8029bb0:	9900      	ldr	r1, [sp, #0]
 8029bb2:	4605      	mov	r5, r0
 8029bb4:	4630      	mov	r0, r6
 8029bb6:	f000 fd7f 	bl	802a6b8 <_malloc_r>
 8029bba:	b948      	cbnz	r0, 8029bd0 <__smakebuf_r+0x44>
 8029bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029bc0:	059a      	lsls	r2, r3, #22
 8029bc2:	d4ef      	bmi.n	8029ba4 <__smakebuf_r+0x18>
 8029bc4:	f023 0303 	bic.w	r3, r3, #3
 8029bc8:	f043 0302 	orr.w	r3, r3, #2
 8029bcc:	81a3      	strh	r3, [r4, #12]
 8029bce:	e7e3      	b.n	8029b98 <__smakebuf_r+0xc>
 8029bd0:	4b0d      	ldr	r3, [pc, #52]	; (8029c08 <__smakebuf_r+0x7c>)
 8029bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8029bd4:	89a3      	ldrh	r3, [r4, #12]
 8029bd6:	6020      	str	r0, [r4, #0]
 8029bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029bdc:	81a3      	strh	r3, [r4, #12]
 8029bde:	9b00      	ldr	r3, [sp, #0]
 8029be0:	6163      	str	r3, [r4, #20]
 8029be2:	9b01      	ldr	r3, [sp, #4]
 8029be4:	6120      	str	r0, [r4, #16]
 8029be6:	b15b      	cbz	r3, 8029c00 <__smakebuf_r+0x74>
 8029be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029bec:	4630      	mov	r0, r6
 8029bee:	f001 f9ad 	bl	802af4c <_isatty_r>
 8029bf2:	b128      	cbz	r0, 8029c00 <__smakebuf_r+0x74>
 8029bf4:	89a3      	ldrh	r3, [r4, #12]
 8029bf6:	f023 0303 	bic.w	r3, r3, #3
 8029bfa:	f043 0301 	orr.w	r3, r3, #1
 8029bfe:	81a3      	strh	r3, [r4, #12]
 8029c00:	89a0      	ldrh	r0, [r4, #12]
 8029c02:	4305      	orrs	r5, r0
 8029c04:	81a5      	strh	r5, [r4, #12]
 8029c06:	e7cd      	b.n	8029ba4 <__smakebuf_r+0x18>
 8029c08:	080292bd 	.word	0x080292bd

08029c0c <__ascii_mbtowc>:
 8029c0c:	b082      	sub	sp, #8
 8029c0e:	b901      	cbnz	r1, 8029c12 <__ascii_mbtowc+0x6>
 8029c10:	a901      	add	r1, sp, #4
 8029c12:	b142      	cbz	r2, 8029c26 <__ascii_mbtowc+0x1a>
 8029c14:	b14b      	cbz	r3, 8029c2a <__ascii_mbtowc+0x1e>
 8029c16:	7813      	ldrb	r3, [r2, #0]
 8029c18:	600b      	str	r3, [r1, #0]
 8029c1a:	7812      	ldrb	r2, [r2, #0]
 8029c1c:	1e10      	subs	r0, r2, #0
 8029c1e:	bf18      	it	ne
 8029c20:	2001      	movne	r0, #1
 8029c22:	b002      	add	sp, #8
 8029c24:	4770      	bx	lr
 8029c26:	4610      	mov	r0, r2
 8029c28:	e7fb      	b.n	8029c22 <__ascii_mbtowc+0x16>
 8029c2a:	f06f 0001 	mvn.w	r0, #1
 8029c2e:	e7f8      	b.n	8029c22 <__ascii_mbtowc+0x16>

08029c30 <_Balloc>:
 8029c30:	b570      	push	{r4, r5, r6, lr}
 8029c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029c34:	4604      	mov	r4, r0
 8029c36:	460d      	mov	r5, r1
 8029c38:	b976      	cbnz	r6, 8029c58 <_Balloc+0x28>
 8029c3a:	2010      	movs	r0, #16
 8029c3c:	f001 f9a8 	bl	802af90 <malloc>
 8029c40:	4602      	mov	r2, r0
 8029c42:	6260      	str	r0, [r4, #36]	; 0x24
 8029c44:	b920      	cbnz	r0, 8029c50 <_Balloc+0x20>
 8029c46:	4b18      	ldr	r3, [pc, #96]	; (8029ca8 <_Balloc+0x78>)
 8029c48:	4818      	ldr	r0, [pc, #96]	; (8029cac <_Balloc+0x7c>)
 8029c4a:	2166      	movs	r1, #102	; 0x66
 8029c4c:	f001 f92c 	bl	802aea8 <__assert_func>
 8029c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029c54:	6006      	str	r6, [r0, #0]
 8029c56:	60c6      	str	r6, [r0, #12]
 8029c58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8029c5a:	68f3      	ldr	r3, [r6, #12]
 8029c5c:	b183      	cbz	r3, 8029c80 <_Balloc+0x50>
 8029c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029c60:	68db      	ldr	r3, [r3, #12]
 8029c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8029c66:	b9b8      	cbnz	r0, 8029c98 <_Balloc+0x68>
 8029c68:	2101      	movs	r1, #1
 8029c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8029c6e:	1d72      	adds	r2, r6, #5
 8029c70:	0092      	lsls	r2, r2, #2
 8029c72:	4620      	mov	r0, r4
 8029c74:	f000 fc9d 	bl	802a5b2 <_calloc_r>
 8029c78:	b160      	cbz	r0, 8029c94 <_Balloc+0x64>
 8029c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8029c7e:	e00e      	b.n	8029c9e <_Balloc+0x6e>
 8029c80:	2221      	movs	r2, #33	; 0x21
 8029c82:	2104      	movs	r1, #4
 8029c84:	4620      	mov	r0, r4
 8029c86:	f000 fc94 	bl	802a5b2 <_calloc_r>
 8029c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029c8c:	60f0      	str	r0, [r6, #12]
 8029c8e:	68db      	ldr	r3, [r3, #12]
 8029c90:	2b00      	cmp	r3, #0
 8029c92:	d1e4      	bne.n	8029c5e <_Balloc+0x2e>
 8029c94:	2000      	movs	r0, #0
 8029c96:	bd70      	pop	{r4, r5, r6, pc}
 8029c98:	6802      	ldr	r2, [r0, #0]
 8029c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8029c9e:	2300      	movs	r3, #0
 8029ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029ca4:	e7f7      	b.n	8029c96 <_Balloc+0x66>
 8029ca6:	bf00      	nop
 8029ca8:	0802ce74 	.word	0x0802ce74
 8029cac:	0802ce8b 	.word	0x0802ce8b

08029cb0 <_Bfree>:
 8029cb0:	b570      	push	{r4, r5, r6, lr}
 8029cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8029cb4:	4605      	mov	r5, r0
 8029cb6:	460c      	mov	r4, r1
 8029cb8:	b976      	cbnz	r6, 8029cd8 <_Bfree+0x28>
 8029cba:	2010      	movs	r0, #16
 8029cbc:	f001 f968 	bl	802af90 <malloc>
 8029cc0:	4602      	mov	r2, r0
 8029cc2:	6268      	str	r0, [r5, #36]	; 0x24
 8029cc4:	b920      	cbnz	r0, 8029cd0 <_Bfree+0x20>
 8029cc6:	4b09      	ldr	r3, [pc, #36]	; (8029cec <_Bfree+0x3c>)
 8029cc8:	4809      	ldr	r0, [pc, #36]	; (8029cf0 <_Bfree+0x40>)
 8029cca:	218a      	movs	r1, #138	; 0x8a
 8029ccc:	f001 f8ec 	bl	802aea8 <__assert_func>
 8029cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029cd4:	6006      	str	r6, [r0, #0]
 8029cd6:	60c6      	str	r6, [r0, #12]
 8029cd8:	b13c      	cbz	r4, 8029cea <_Bfree+0x3a>
 8029cda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029cdc:	6862      	ldr	r2, [r4, #4]
 8029cde:	68db      	ldr	r3, [r3, #12]
 8029ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029ce4:	6021      	str	r1, [r4, #0]
 8029ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8029cea:	bd70      	pop	{r4, r5, r6, pc}
 8029cec:	0802ce74 	.word	0x0802ce74
 8029cf0:	0802ce8b 	.word	0x0802ce8b

08029cf4 <__multadd>:
 8029cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029cf8:	690d      	ldr	r5, [r1, #16]
 8029cfa:	4607      	mov	r7, r0
 8029cfc:	460c      	mov	r4, r1
 8029cfe:	461e      	mov	r6, r3
 8029d00:	f101 0c14 	add.w	ip, r1, #20
 8029d04:	2000      	movs	r0, #0
 8029d06:	f8dc 3000 	ldr.w	r3, [ip]
 8029d0a:	b299      	uxth	r1, r3
 8029d0c:	fb02 6101 	mla	r1, r2, r1, r6
 8029d10:	0c1e      	lsrs	r6, r3, #16
 8029d12:	0c0b      	lsrs	r3, r1, #16
 8029d14:	fb02 3306 	mla	r3, r2, r6, r3
 8029d18:	b289      	uxth	r1, r1
 8029d1a:	3001      	adds	r0, #1
 8029d1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029d20:	4285      	cmp	r5, r0
 8029d22:	f84c 1b04 	str.w	r1, [ip], #4
 8029d26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8029d2a:	dcec      	bgt.n	8029d06 <__multadd+0x12>
 8029d2c:	b30e      	cbz	r6, 8029d72 <__multadd+0x7e>
 8029d2e:	68a3      	ldr	r3, [r4, #8]
 8029d30:	42ab      	cmp	r3, r5
 8029d32:	dc19      	bgt.n	8029d68 <__multadd+0x74>
 8029d34:	6861      	ldr	r1, [r4, #4]
 8029d36:	4638      	mov	r0, r7
 8029d38:	3101      	adds	r1, #1
 8029d3a:	f7ff ff79 	bl	8029c30 <_Balloc>
 8029d3e:	4680      	mov	r8, r0
 8029d40:	b928      	cbnz	r0, 8029d4e <__multadd+0x5a>
 8029d42:	4602      	mov	r2, r0
 8029d44:	4b0c      	ldr	r3, [pc, #48]	; (8029d78 <__multadd+0x84>)
 8029d46:	480d      	ldr	r0, [pc, #52]	; (8029d7c <__multadd+0x88>)
 8029d48:	21b5      	movs	r1, #181	; 0xb5
 8029d4a:	f001 f8ad 	bl	802aea8 <__assert_func>
 8029d4e:	6922      	ldr	r2, [r4, #16]
 8029d50:	3202      	adds	r2, #2
 8029d52:	f104 010c 	add.w	r1, r4, #12
 8029d56:	0092      	lsls	r2, r2, #2
 8029d58:	300c      	adds	r0, #12
 8029d5a:	f7fe f963 	bl	8028024 <memcpy>
 8029d5e:	4621      	mov	r1, r4
 8029d60:	4638      	mov	r0, r7
 8029d62:	f7ff ffa5 	bl	8029cb0 <_Bfree>
 8029d66:	4644      	mov	r4, r8
 8029d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8029d6c:	3501      	adds	r5, #1
 8029d6e:	615e      	str	r6, [r3, #20]
 8029d70:	6125      	str	r5, [r4, #16]
 8029d72:	4620      	mov	r0, r4
 8029d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029d78:	0802cde8 	.word	0x0802cde8
 8029d7c:	0802ce8b 	.word	0x0802ce8b

08029d80 <__s2b>:
 8029d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029d84:	460c      	mov	r4, r1
 8029d86:	4615      	mov	r5, r2
 8029d88:	461f      	mov	r7, r3
 8029d8a:	2209      	movs	r2, #9
 8029d8c:	3308      	adds	r3, #8
 8029d8e:	4606      	mov	r6, r0
 8029d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8029d94:	2100      	movs	r1, #0
 8029d96:	2201      	movs	r2, #1
 8029d98:	429a      	cmp	r2, r3
 8029d9a:	db09      	blt.n	8029db0 <__s2b+0x30>
 8029d9c:	4630      	mov	r0, r6
 8029d9e:	f7ff ff47 	bl	8029c30 <_Balloc>
 8029da2:	b940      	cbnz	r0, 8029db6 <__s2b+0x36>
 8029da4:	4602      	mov	r2, r0
 8029da6:	4b19      	ldr	r3, [pc, #100]	; (8029e0c <__s2b+0x8c>)
 8029da8:	4819      	ldr	r0, [pc, #100]	; (8029e10 <__s2b+0x90>)
 8029daa:	21ce      	movs	r1, #206	; 0xce
 8029dac:	f001 f87c 	bl	802aea8 <__assert_func>
 8029db0:	0052      	lsls	r2, r2, #1
 8029db2:	3101      	adds	r1, #1
 8029db4:	e7f0      	b.n	8029d98 <__s2b+0x18>
 8029db6:	9b08      	ldr	r3, [sp, #32]
 8029db8:	6143      	str	r3, [r0, #20]
 8029dba:	2d09      	cmp	r5, #9
 8029dbc:	f04f 0301 	mov.w	r3, #1
 8029dc0:	6103      	str	r3, [r0, #16]
 8029dc2:	dd16      	ble.n	8029df2 <__s2b+0x72>
 8029dc4:	f104 0909 	add.w	r9, r4, #9
 8029dc8:	46c8      	mov	r8, r9
 8029dca:	442c      	add	r4, r5
 8029dcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029dd0:	4601      	mov	r1, r0
 8029dd2:	3b30      	subs	r3, #48	; 0x30
 8029dd4:	220a      	movs	r2, #10
 8029dd6:	4630      	mov	r0, r6
 8029dd8:	f7ff ff8c 	bl	8029cf4 <__multadd>
 8029ddc:	45a0      	cmp	r8, r4
 8029dde:	d1f5      	bne.n	8029dcc <__s2b+0x4c>
 8029de0:	f1a5 0408 	sub.w	r4, r5, #8
 8029de4:	444c      	add	r4, r9
 8029de6:	1b2d      	subs	r5, r5, r4
 8029de8:	1963      	adds	r3, r4, r5
 8029dea:	42bb      	cmp	r3, r7
 8029dec:	db04      	blt.n	8029df8 <__s2b+0x78>
 8029dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029df2:	340a      	adds	r4, #10
 8029df4:	2509      	movs	r5, #9
 8029df6:	e7f6      	b.n	8029de6 <__s2b+0x66>
 8029df8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8029dfc:	4601      	mov	r1, r0
 8029dfe:	3b30      	subs	r3, #48	; 0x30
 8029e00:	220a      	movs	r2, #10
 8029e02:	4630      	mov	r0, r6
 8029e04:	f7ff ff76 	bl	8029cf4 <__multadd>
 8029e08:	e7ee      	b.n	8029de8 <__s2b+0x68>
 8029e0a:	bf00      	nop
 8029e0c:	0802cde8 	.word	0x0802cde8
 8029e10:	0802ce8b 	.word	0x0802ce8b

08029e14 <__hi0bits>:
 8029e14:	0c03      	lsrs	r3, r0, #16
 8029e16:	041b      	lsls	r3, r3, #16
 8029e18:	b9d3      	cbnz	r3, 8029e50 <__hi0bits+0x3c>
 8029e1a:	0400      	lsls	r0, r0, #16
 8029e1c:	2310      	movs	r3, #16
 8029e1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8029e22:	bf04      	itt	eq
 8029e24:	0200      	lsleq	r0, r0, #8
 8029e26:	3308      	addeq	r3, #8
 8029e28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8029e2c:	bf04      	itt	eq
 8029e2e:	0100      	lsleq	r0, r0, #4
 8029e30:	3304      	addeq	r3, #4
 8029e32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8029e36:	bf04      	itt	eq
 8029e38:	0080      	lsleq	r0, r0, #2
 8029e3a:	3302      	addeq	r3, #2
 8029e3c:	2800      	cmp	r0, #0
 8029e3e:	db05      	blt.n	8029e4c <__hi0bits+0x38>
 8029e40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8029e44:	f103 0301 	add.w	r3, r3, #1
 8029e48:	bf08      	it	eq
 8029e4a:	2320      	moveq	r3, #32
 8029e4c:	4618      	mov	r0, r3
 8029e4e:	4770      	bx	lr
 8029e50:	2300      	movs	r3, #0
 8029e52:	e7e4      	b.n	8029e1e <__hi0bits+0xa>

08029e54 <__lo0bits>:
 8029e54:	6803      	ldr	r3, [r0, #0]
 8029e56:	f013 0207 	ands.w	r2, r3, #7
 8029e5a:	4601      	mov	r1, r0
 8029e5c:	d00b      	beq.n	8029e76 <__lo0bits+0x22>
 8029e5e:	07da      	lsls	r2, r3, #31
 8029e60:	d423      	bmi.n	8029eaa <__lo0bits+0x56>
 8029e62:	0798      	lsls	r0, r3, #30
 8029e64:	bf49      	itett	mi
 8029e66:	085b      	lsrmi	r3, r3, #1
 8029e68:	089b      	lsrpl	r3, r3, #2
 8029e6a:	2001      	movmi	r0, #1
 8029e6c:	600b      	strmi	r3, [r1, #0]
 8029e6e:	bf5c      	itt	pl
 8029e70:	600b      	strpl	r3, [r1, #0]
 8029e72:	2002      	movpl	r0, #2
 8029e74:	4770      	bx	lr
 8029e76:	b298      	uxth	r0, r3
 8029e78:	b9a8      	cbnz	r0, 8029ea6 <__lo0bits+0x52>
 8029e7a:	0c1b      	lsrs	r3, r3, #16
 8029e7c:	2010      	movs	r0, #16
 8029e7e:	b2da      	uxtb	r2, r3
 8029e80:	b90a      	cbnz	r2, 8029e86 <__lo0bits+0x32>
 8029e82:	3008      	adds	r0, #8
 8029e84:	0a1b      	lsrs	r3, r3, #8
 8029e86:	071a      	lsls	r2, r3, #28
 8029e88:	bf04      	itt	eq
 8029e8a:	091b      	lsreq	r3, r3, #4
 8029e8c:	3004      	addeq	r0, #4
 8029e8e:	079a      	lsls	r2, r3, #30
 8029e90:	bf04      	itt	eq
 8029e92:	089b      	lsreq	r3, r3, #2
 8029e94:	3002      	addeq	r0, #2
 8029e96:	07da      	lsls	r2, r3, #31
 8029e98:	d403      	bmi.n	8029ea2 <__lo0bits+0x4e>
 8029e9a:	085b      	lsrs	r3, r3, #1
 8029e9c:	f100 0001 	add.w	r0, r0, #1
 8029ea0:	d005      	beq.n	8029eae <__lo0bits+0x5a>
 8029ea2:	600b      	str	r3, [r1, #0]
 8029ea4:	4770      	bx	lr
 8029ea6:	4610      	mov	r0, r2
 8029ea8:	e7e9      	b.n	8029e7e <__lo0bits+0x2a>
 8029eaa:	2000      	movs	r0, #0
 8029eac:	4770      	bx	lr
 8029eae:	2020      	movs	r0, #32
 8029eb0:	4770      	bx	lr
	...

08029eb4 <__i2b>:
 8029eb4:	b510      	push	{r4, lr}
 8029eb6:	460c      	mov	r4, r1
 8029eb8:	2101      	movs	r1, #1
 8029eba:	f7ff feb9 	bl	8029c30 <_Balloc>
 8029ebe:	4602      	mov	r2, r0
 8029ec0:	b928      	cbnz	r0, 8029ece <__i2b+0x1a>
 8029ec2:	4b05      	ldr	r3, [pc, #20]	; (8029ed8 <__i2b+0x24>)
 8029ec4:	4805      	ldr	r0, [pc, #20]	; (8029edc <__i2b+0x28>)
 8029ec6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8029eca:	f000 ffed 	bl	802aea8 <__assert_func>
 8029ece:	2301      	movs	r3, #1
 8029ed0:	6144      	str	r4, [r0, #20]
 8029ed2:	6103      	str	r3, [r0, #16]
 8029ed4:	bd10      	pop	{r4, pc}
 8029ed6:	bf00      	nop
 8029ed8:	0802cde8 	.word	0x0802cde8
 8029edc:	0802ce8b 	.word	0x0802ce8b

08029ee0 <__multiply>:
 8029ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ee4:	4691      	mov	r9, r2
 8029ee6:	690a      	ldr	r2, [r1, #16]
 8029ee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8029eec:	429a      	cmp	r2, r3
 8029eee:	bfb8      	it	lt
 8029ef0:	460b      	movlt	r3, r1
 8029ef2:	460c      	mov	r4, r1
 8029ef4:	bfbc      	itt	lt
 8029ef6:	464c      	movlt	r4, r9
 8029ef8:	4699      	movlt	r9, r3
 8029efa:	6927      	ldr	r7, [r4, #16]
 8029efc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8029f00:	68a3      	ldr	r3, [r4, #8]
 8029f02:	6861      	ldr	r1, [r4, #4]
 8029f04:	eb07 060a 	add.w	r6, r7, sl
 8029f08:	42b3      	cmp	r3, r6
 8029f0a:	b085      	sub	sp, #20
 8029f0c:	bfb8      	it	lt
 8029f0e:	3101      	addlt	r1, #1
 8029f10:	f7ff fe8e 	bl	8029c30 <_Balloc>
 8029f14:	b930      	cbnz	r0, 8029f24 <__multiply+0x44>
 8029f16:	4602      	mov	r2, r0
 8029f18:	4b44      	ldr	r3, [pc, #272]	; (802a02c <__multiply+0x14c>)
 8029f1a:	4845      	ldr	r0, [pc, #276]	; (802a030 <__multiply+0x150>)
 8029f1c:	f240 115d 	movw	r1, #349	; 0x15d
 8029f20:	f000 ffc2 	bl	802aea8 <__assert_func>
 8029f24:	f100 0514 	add.w	r5, r0, #20
 8029f28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8029f2c:	462b      	mov	r3, r5
 8029f2e:	2200      	movs	r2, #0
 8029f30:	4543      	cmp	r3, r8
 8029f32:	d321      	bcc.n	8029f78 <__multiply+0x98>
 8029f34:	f104 0314 	add.w	r3, r4, #20
 8029f38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8029f3c:	f109 0314 	add.w	r3, r9, #20
 8029f40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8029f44:	9202      	str	r2, [sp, #8]
 8029f46:	1b3a      	subs	r2, r7, r4
 8029f48:	3a15      	subs	r2, #21
 8029f4a:	f022 0203 	bic.w	r2, r2, #3
 8029f4e:	3204      	adds	r2, #4
 8029f50:	f104 0115 	add.w	r1, r4, #21
 8029f54:	428f      	cmp	r7, r1
 8029f56:	bf38      	it	cc
 8029f58:	2204      	movcc	r2, #4
 8029f5a:	9201      	str	r2, [sp, #4]
 8029f5c:	9a02      	ldr	r2, [sp, #8]
 8029f5e:	9303      	str	r3, [sp, #12]
 8029f60:	429a      	cmp	r2, r3
 8029f62:	d80c      	bhi.n	8029f7e <__multiply+0x9e>
 8029f64:	2e00      	cmp	r6, #0
 8029f66:	dd03      	ble.n	8029f70 <__multiply+0x90>
 8029f68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8029f6c:	2b00      	cmp	r3, #0
 8029f6e:	d05a      	beq.n	802a026 <__multiply+0x146>
 8029f70:	6106      	str	r6, [r0, #16]
 8029f72:	b005      	add	sp, #20
 8029f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f78:	f843 2b04 	str.w	r2, [r3], #4
 8029f7c:	e7d8      	b.n	8029f30 <__multiply+0x50>
 8029f7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8029f82:	f1ba 0f00 	cmp.w	sl, #0
 8029f86:	d024      	beq.n	8029fd2 <__multiply+0xf2>
 8029f88:	f104 0e14 	add.w	lr, r4, #20
 8029f8c:	46a9      	mov	r9, r5
 8029f8e:	f04f 0c00 	mov.w	ip, #0
 8029f92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8029f96:	f8d9 1000 	ldr.w	r1, [r9]
 8029f9a:	fa1f fb82 	uxth.w	fp, r2
 8029f9e:	b289      	uxth	r1, r1
 8029fa0:	fb0a 110b 	mla	r1, sl, fp, r1
 8029fa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8029fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8029fac:	4461      	add	r1, ip
 8029fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029fb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8029fb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8029fba:	b289      	uxth	r1, r1
 8029fbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8029fc0:	4577      	cmp	r7, lr
 8029fc2:	f849 1b04 	str.w	r1, [r9], #4
 8029fc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8029fca:	d8e2      	bhi.n	8029f92 <__multiply+0xb2>
 8029fcc:	9a01      	ldr	r2, [sp, #4]
 8029fce:	f845 c002 	str.w	ip, [r5, r2]
 8029fd2:	9a03      	ldr	r2, [sp, #12]
 8029fd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8029fd8:	3304      	adds	r3, #4
 8029fda:	f1b9 0f00 	cmp.w	r9, #0
 8029fde:	d020      	beq.n	802a022 <__multiply+0x142>
 8029fe0:	6829      	ldr	r1, [r5, #0]
 8029fe2:	f104 0c14 	add.w	ip, r4, #20
 8029fe6:	46ae      	mov	lr, r5
 8029fe8:	f04f 0a00 	mov.w	sl, #0
 8029fec:	f8bc b000 	ldrh.w	fp, [ip]
 8029ff0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029ff4:	fb09 220b 	mla	r2, r9, fp, r2
 8029ff8:	4492      	add	sl, r2
 8029ffa:	b289      	uxth	r1, r1
 8029ffc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802a000:	f84e 1b04 	str.w	r1, [lr], #4
 802a004:	f85c 2b04 	ldr.w	r2, [ip], #4
 802a008:	f8be 1000 	ldrh.w	r1, [lr]
 802a00c:	0c12      	lsrs	r2, r2, #16
 802a00e:	fb09 1102 	mla	r1, r9, r2, r1
 802a012:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802a016:	4567      	cmp	r7, ip
 802a018:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802a01c:	d8e6      	bhi.n	8029fec <__multiply+0x10c>
 802a01e:	9a01      	ldr	r2, [sp, #4]
 802a020:	50a9      	str	r1, [r5, r2]
 802a022:	3504      	adds	r5, #4
 802a024:	e79a      	b.n	8029f5c <__multiply+0x7c>
 802a026:	3e01      	subs	r6, #1
 802a028:	e79c      	b.n	8029f64 <__multiply+0x84>
 802a02a:	bf00      	nop
 802a02c:	0802cde8 	.word	0x0802cde8
 802a030:	0802ce8b 	.word	0x0802ce8b

0802a034 <__pow5mult>:
 802a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a038:	4615      	mov	r5, r2
 802a03a:	f012 0203 	ands.w	r2, r2, #3
 802a03e:	4606      	mov	r6, r0
 802a040:	460f      	mov	r7, r1
 802a042:	d007      	beq.n	802a054 <__pow5mult+0x20>
 802a044:	4c25      	ldr	r4, [pc, #148]	; (802a0dc <__pow5mult+0xa8>)
 802a046:	3a01      	subs	r2, #1
 802a048:	2300      	movs	r3, #0
 802a04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a04e:	f7ff fe51 	bl	8029cf4 <__multadd>
 802a052:	4607      	mov	r7, r0
 802a054:	10ad      	asrs	r5, r5, #2
 802a056:	d03d      	beq.n	802a0d4 <__pow5mult+0xa0>
 802a058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a05a:	b97c      	cbnz	r4, 802a07c <__pow5mult+0x48>
 802a05c:	2010      	movs	r0, #16
 802a05e:	f000 ff97 	bl	802af90 <malloc>
 802a062:	4602      	mov	r2, r0
 802a064:	6270      	str	r0, [r6, #36]	; 0x24
 802a066:	b928      	cbnz	r0, 802a074 <__pow5mult+0x40>
 802a068:	4b1d      	ldr	r3, [pc, #116]	; (802a0e0 <__pow5mult+0xac>)
 802a06a:	481e      	ldr	r0, [pc, #120]	; (802a0e4 <__pow5mult+0xb0>)
 802a06c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802a070:	f000 ff1a 	bl	802aea8 <__assert_func>
 802a074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a078:	6004      	str	r4, [r0, #0]
 802a07a:	60c4      	str	r4, [r0, #12]
 802a07c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802a080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a084:	b94c      	cbnz	r4, 802a09a <__pow5mult+0x66>
 802a086:	f240 2171 	movw	r1, #625	; 0x271
 802a08a:	4630      	mov	r0, r6
 802a08c:	f7ff ff12 	bl	8029eb4 <__i2b>
 802a090:	2300      	movs	r3, #0
 802a092:	f8c8 0008 	str.w	r0, [r8, #8]
 802a096:	4604      	mov	r4, r0
 802a098:	6003      	str	r3, [r0, #0]
 802a09a:	f04f 0900 	mov.w	r9, #0
 802a09e:	07eb      	lsls	r3, r5, #31
 802a0a0:	d50a      	bpl.n	802a0b8 <__pow5mult+0x84>
 802a0a2:	4639      	mov	r1, r7
 802a0a4:	4622      	mov	r2, r4
 802a0a6:	4630      	mov	r0, r6
 802a0a8:	f7ff ff1a 	bl	8029ee0 <__multiply>
 802a0ac:	4639      	mov	r1, r7
 802a0ae:	4680      	mov	r8, r0
 802a0b0:	4630      	mov	r0, r6
 802a0b2:	f7ff fdfd 	bl	8029cb0 <_Bfree>
 802a0b6:	4647      	mov	r7, r8
 802a0b8:	106d      	asrs	r5, r5, #1
 802a0ba:	d00b      	beq.n	802a0d4 <__pow5mult+0xa0>
 802a0bc:	6820      	ldr	r0, [r4, #0]
 802a0be:	b938      	cbnz	r0, 802a0d0 <__pow5mult+0x9c>
 802a0c0:	4622      	mov	r2, r4
 802a0c2:	4621      	mov	r1, r4
 802a0c4:	4630      	mov	r0, r6
 802a0c6:	f7ff ff0b 	bl	8029ee0 <__multiply>
 802a0ca:	6020      	str	r0, [r4, #0]
 802a0cc:	f8c0 9000 	str.w	r9, [r0]
 802a0d0:	4604      	mov	r4, r0
 802a0d2:	e7e4      	b.n	802a09e <__pow5mult+0x6a>
 802a0d4:	4638      	mov	r0, r7
 802a0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a0da:	bf00      	nop
 802a0dc:	0802cfd8 	.word	0x0802cfd8
 802a0e0:	0802ce74 	.word	0x0802ce74
 802a0e4:	0802ce8b 	.word	0x0802ce8b

0802a0e8 <__lshift>:
 802a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a0ec:	460c      	mov	r4, r1
 802a0ee:	6849      	ldr	r1, [r1, #4]
 802a0f0:	6923      	ldr	r3, [r4, #16]
 802a0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a0f6:	68a3      	ldr	r3, [r4, #8]
 802a0f8:	4607      	mov	r7, r0
 802a0fa:	4691      	mov	r9, r2
 802a0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a100:	f108 0601 	add.w	r6, r8, #1
 802a104:	42b3      	cmp	r3, r6
 802a106:	db0b      	blt.n	802a120 <__lshift+0x38>
 802a108:	4638      	mov	r0, r7
 802a10a:	f7ff fd91 	bl	8029c30 <_Balloc>
 802a10e:	4605      	mov	r5, r0
 802a110:	b948      	cbnz	r0, 802a126 <__lshift+0x3e>
 802a112:	4602      	mov	r2, r0
 802a114:	4b2a      	ldr	r3, [pc, #168]	; (802a1c0 <__lshift+0xd8>)
 802a116:	482b      	ldr	r0, [pc, #172]	; (802a1c4 <__lshift+0xdc>)
 802a118:	f240 11d9 	movw	r1, #473	; 0x1d9
 802a11c:	f000 fec4 	bl	802aea8 <__assert_func>
 802a120:	3101      	adds	r1, #1
 802a122:	005b      	lsls	r3, r3, #1
 802a124:	e7ee      	b.n	802a104 <__lshift+0x1c>
 802a126:	2300      	movs	r3, #0
 802a128:	f100 0114 	add.w	r1, r0, #20
 802a12c:	f100 0210 	add.w	r2, r0, #16
 802a130:	4618      	mov	r0, r3
 802a132:	4553      	cmp	r3, sl
 802a134:	db37      	blt.n	802a1a6 <__lshift+0xbe>
 802a136:	6920      	ldr	r0, [r4, #16]
 802a138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a13c:	f104 0314 	add.w	r3, r4, #20
 802a140:	f019 091f 	ands.w	r9, r9, #31
 802a144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a148:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802a14c:	d02f      	beq.n	802a1ae <__lshift+0xc6>
 802a14e:	f1c9 0e20 	rsb	lr, r9, #32
 802a152:	468a      	mov	sl, r1
 802a154:	f04f 0c00 	mov.w	ip, #0
 802a158:	681a      	ldr	r2, [r3, #0]
 802a15a:	fa02 f209 	lsl.w	r2, r2, r9
 802a15e:	ea42 020c 	orr.w	r2, r2, ip
 802a162:	f84a 2b04 	str.w	r2, [sl], #4
 802a166:	f853 2b04 	ldr.w	r2, [r3], #4
 802a16a:	4298      	cmp	r0, r3
 802a16c:	fa22 fc0e 	lsr.w	ip, r2, lr
 802a170:	d8f2      	bhi.n	802a158 <__lshift+0x70>
 802a172:	1b03      	subs	r3, r0, r4
 802a174:	3b15      	subs	r3, #21
 802a176:	f023 0303 	bic.w	r3, r3, #3
 802a17a:	3304      	adds	r3, #4
 802a17c:	f104 0215 	add.w	r2, r4, #21
 802a180:	4290      	cmp	r0, r2
 802a182:	bf38      	it	cc
 802a184:	2304      	movcc	r3, #4
 802a186:	f841 c003 	str.w	ip, [r1, r3]
 802a18a:	f1bc 0f00 	cmp.w	ip, #0
 802a18e:	d001      	beq.n	802a194 <__lshift+0xac>
 802a190:	f108 0602 	add.w	r6, r8, #2
 802a194:	3e01      	subs	r6, #1
 802a196:	4638      	mov	r0, r7
 802a198:	612e      	str	r6, [r5, #16]
 802a19a:	4621      	mov	r1, r4
 802a19c:	f7ff fd88 	bl	8029cb0 <_Bfree>
 802a1a0:	4628      	mov	r0, r5
 802a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 802a1aa:	3301      	adds	r3, #1
 802a1ac:	e7c1      	b.n	802a132 <__lshift+0x4a>
 802a1ae:	3904      	subs	r1, #4
 802a1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 802a1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 802a1b8:	4298      	cmp	r0, r3
 802a1ba:	d8f9      	bhi.n	802a1b0 <__lshift+0xc8>
 802a1bc:	e7ea      	b.n	802a194 <__lshift+0xac>
 802a1be:	bf00      	nop
 802a1c0:	0802cde8 	.word	0x0802cde8
 802a1c4:	0802ce8b 	.word	0x0802ce8b

0802a1c8 <__mcmp>:
 802a1c8:	b530      	push	{r4, r5, lr}
 802a1ca:	6902      	ldr	r2, [r0, #16]
 802a1cc:	690c      	ldr	r4, [r1, #16]
 802a1ce:	1b12      	subs	r2, r2, r4
 802a1d0:	d10e      	bne.n	802a1f0 <__mcmp+0x28>
 802a1d2:	f100 0314 	add.w	r3, r0, #20
 802a1d6:	3114      	adds	r1, #20
 802a1d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802a1dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802a1e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802a1e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802a1e8:	42a5      	cmp	r5, r4
 802a1ea:	d003      	beq.n	802a1f4 <__mcmp+0x2c>
 802a1ec:	d305      	bcc.n	802a1fa <__mcmp+0x32>
 802a1ee:	2201      	movs	r2, #1
 802a1f0:	4610      	mov	r0, r2
 802a1f2:	bd30      	pop	{r4, r5, pc}
 802a1f4:	4283      	cmp	r3, r0
 802a1f6:	d3f3      	bcc.n	802a1e0 <__mcmp+0x18>
 802a1f8:	e7fa      	b.n	802a1f0 <__mcmp+0x28>
 802a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 802a1fe:	e7f7      	b.n	802a1f0 <__mcmp+0x28>

0802a200 <__mdiff>:
 802a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a204:	460c      	mov	r4, r1
 802a206:	4606      	mov	r6, r0
 802a208:	4611      	mov	r1, r2
 802a20a:	4620      	mov	r0, r4
 802a20c:	4690      	mov	r8, r2
 802a20e:	f7ff ffdb 	bl	802a1c8 <__mcmp>
 802a212:	1e05      	subs	r5, r0, #0
 802a214:	d110      	bne.n	802a238 <__mdiff+0x38>
 802a216:	4629      	mov	r1, r5
 802a218:	4630      	mov	r0, r6
 802a21a:	f7ff fd09 	bl	8029c30 <_Balloc>
 802a21e:	b930      	cbnz	r0, 802a22e <__mdiff+0x2e>
 802a220:	4b3a      	ldr	r3, [pc, #232]	; (802a30c <__mdiff+0x10c>)
 802a222:	4602      	mov	r2, r0
 802a224:	f240 2132 	movw	r1, #562	; 0x232
 802a228:	4839      	ldr	r0, [pc, #228]	; (802a310 <__mdiff+0x110>)
 802a22a:	f000 fe3d 	bl	802aea8 <__assert_func>
 802a22e:	2301      	movs	r3, #1
 802a230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a238:	bfa4      	itt	ge
 802a23a:	4643      	movge	r3, r8
 802a23c:	46a0      	movge	r8, r4
 802a23e:	4630      	mov	r0, r6
 802a240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802a244:	bfa6      	itte	ge
 802a246:	461c      	movge	r4, r3
 802a248:	2500      	movge	r5, #0
 802a24a:	2501      	movlt	r5, #1
 802a24c:	f7ff fcf0 	bl	8029c30 <_Balloc>
 802a250:	b920      	cbnz	r0, 802a25c <__mdiff+0x5c>
 802a252:	4b2e      	ldr	r3, [pc, #184]	; (802a30c <__mdiff+0x10c>)
 802a254:	4602      	mov	r2, r0
 802a256:	f44f 7110 	mov.w	r1, #576	; 0x240
 802a25a:	e7e5      	b.n	802a228 <__mdiff+0x28>
 802a25c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802a260:	6926      	ldr	r6, [r4, #16]
 802a262:	60c5      	str	r5, [r0, #12]
 802a264:	f104 0914 	add.w	r9, r4, #20
 802a268:	f108 0514 	add.w	r5, r8, #20
 802a26c:	f100 0e14 	add.w	lr, r0, #20
 802a270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802a274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802a278:	f108 0210 	add.w	r2, r8, #16
 802a27c:	46f2      	mov	sl, lr
 802a27e:	2100      	movs	r1, #0
 802a280:	f859 3b04 	ldr.w	r3, [r9], #4
 802a284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802a288:	fa1f f883 	uxth.w	r8, r3
 802a28c:	fa11 f18b 	uxtah	r1, r1, fp
 802a290:	0c1b      	lsrs	r3, r3, #16
 802a292:	eba1 0808 	sub.w	r8, r1, r8
 802a296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802a29a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802a29e:	fa1f f888 	uxth.w	r8, r8
 802a2a2:	1419      	asrs	r1, r3, #16
 802a2a4:	454e      	cmp	r6, r9
 802a2a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802a2aa:	f84a 3b04 	str.w	r3, [sl], #4
 802a2ae:	d8e7      	bhi.n	802a280 <__mdiff+0x80>
 802a2b0:	1b33      	subs	r3, r6, r4
 802a2b2:	3b15      	subs	r3, #21
 802a2b4:	f023 0303 	bic.w	r3, r3, #3
 802a2b8:	3304      	adds	r3, #4
 802a2ba:	3415      	adds	r4, #21
 802a2bc:	42a6      	cmp	r6, r4
 802a2be:	bf38      	it	cc
 802a2c0:	2304      	movcc	r3, #4
 802a2c2:	441d      	add	r5, r3
 802a2c4:	4473      	add	r3, lr
 802a2c6:	469e      	mov	lr, r3
 802a2c8:	462e      	mov	r6, r5
 802a2ca:	4566      	cmp	r6, ip
 802a2cc:	d30e      	bcc.n	802a2ec <__mdiff+0xec>
 802a2ce:	f10c 0203 	add.w	r2, ip, #3
 802a2d2:	1b52      	subs	r2, r2, r5
 802a2d4:	f022 0203 	bic.w	r2, r2, #3
 802a2d8:	3d03      	subs	r5, #3
 802a2da:	45ac      	cmp	ip, r5
 802a2dc:	bf38      	it	cc
 802a2de:	2200      	movcc	r2, #0
 802a2e0:	441a      	add	r2, r3
 802a2e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802a2e6:	b17b      	cbz	r3, 802a308 <__mdiff+0x108>
 802a2e8:	6107      	str	r7, [r0, #16]
 802a2ea:	e7a3      	b.n	802a234 <__mdiff+0x34>
 802a2ec:	f856 8b04 	ldr.w	r8, [r6], #4
 802a2f0:	fa11 f288 	uxtah	r2, r1, r8
 802a2f4:	1414      	asrs	r4, r2, #16
 802a2f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802a2fa:	b292      	uxth	r2, r2
 802a2fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802a300:	f84e 2b04 	str.w	r2, [lr], #4
 802a304:	1421      	asrs	r1, r4, #16
 802a306:	e7e0      	b.n	802a2ca <__mdiff+0xca>
 802a308:	3f01      	subs	r7, #1
 802a30a:	e7ea      	b.n	802a2e2 <__mdiff+0xe2>
 802a30c:	0802cde8 	.word	0x0802cde8
 802a310:	0802ce8b 	.word	0x0802ce8b

0802a314 <__ulp>:
 802a314:	b082      	sub	sp, #8
 802a316:	ed8d 0b00 	vstr	d0, [sp]
 802a31a:	9b01      	ldr	r3, [sp, #4]
 802a31c:	4912      	ldr	r1, [pc, #72]	; (802a368 <__ulp+0x54>)
 802a31e:	4019      	ands	r1, r3
 802a320:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802a324:	2900      	cmp	r1, #0
 802a326:	dd05      	ble.n	802a334 <__ulp+0x20>
 802a328:	2200      	movs	r2, #0
 802a32a:	460b      	mov	r3, r1
 802a32c:	ec43 2b10 	vmov	d0, r2, r3
 802a330:	b002      	add	sp, #8
 802a332:	4770      	bx	lr
 802a334:	4249      	negs	r1, r1
 802a336:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802a33a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802a33e:	f04f 0200 	mov.w	r2, #0
 802a342:	f04f 0300 	mov.w	r3, #0
 802a346:	da04      	bge.n	802a352 <__ulp+0x3e>
 802a348:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802a34c:	fa41 f300 	asr.w	r3, r1, r0
 802a350:	e7ec      	b.n	802a32c <__ulp+0x18>
 802a352:	f1a0 0114 	sub.w	r1, r0, #20
 802a356:	291e      	cmp	r1, #30
 802a358:	bfda      	itte	le
 802a35a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802a35e:	fa20 f101 	lsrle.w	r1, r0, r1
 802a362:	2101      	movgt	r1, #1
 802a364:	460a      	mov	r2, r1
 802a366:	e7e1      	b.n	802a32c <__ulp+0x18>
 802a368:	7ff00000 	.word	0x7ff00000

0802a36c <__b2d>:
 802a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a36e:	6905      	ldr	r5, [r0, #16]
 802a370:	f100 0714 	add.w	r7, r0, #20
 802a374:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802a378:	1f2e      	subs	r6, r5, #4
 802a37a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802a37e:	4620      	mov	r0, r4
 802a380:	f7ff fd48 	bl	8029e14 <__hi0bits>
 802a384:	f1c0 0320 	rsb	r3, r0, #32
 802a388:	280a      	cmp	r0, #10
 802a38a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802a408 <__b2d+0x9c>
 802a38e:	600b      	str	r3, [r1, #0]
 802a390:	dc14      	bgt.n	802a3bc <__b2d+0x50>
 802a392:	f1c0 0e0b 	rsb	lr, r0, #11
 802a396:	fa24 f10e 	lsr.w	r1, r4, lr
 802a39a:	42b7      	cmp	r7, r6
 802a39c:	ea41 030c 	orr.w	r3, r1, ip
 802a3a0:	bf34      	ite	cc
 802a3a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a3a6:	2100      	movcs	r1, #0
 802a3a8:	3015      	adds	r0, #21
 802a3aa:	fa04 f000 	lsl.w	r0, r4, r0
 802a3ae:	fa21 f10e 	lsr.w	r1, r1, lr
 802a3b2:	ea40 0201 	orr.w	r2, r0, r1
 802a3b6:	ec43 2b10 	vmov	d0, r2, r3
 802a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a3bc:	42b7      	cmp	r7, r6
 802a3be:	bf3a      	itte	cc
 802a3c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802a3c4:	f1a5 0608 	subcc.w	r6, r5, #8
 802a3c8:	2100      	movcs	r1, #0
 802a3ca:	380b      	subs	r0, #11
 802a3cc:	d017      	beq.n	802a3fe <__b2d+0x92>
 802a3ce:	f1c0 0c20 	rsb	ip, r0, #32
 802a3d2:	fa04 f500 	lsl.w	r5, r4, r0
 802a3d6:	42be      	cmp	r6, r7
 802a3d8:	fa21 f40c 	lsr.w	r4, r1, ip
 802a3dc:	ea45 0504 	orr.w	r5, r5, r4
 802a3e0:	bf8c      	ite	hi
 802a3e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802a3e6:	2400      	movls	r4, #0
 802a3e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802a3ec:	fa01 f000 	lsl.w	r0, r1, r0
 802a3f0:	fa24 f40c 	lsr.w	r4, r4, ip
 802a3f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802a3f8:	ea40 0204 	orr.w	r2, r0, r4
 802a3fc:	e7db      	b.n	802a3b6 <__b2d+0x4a>
 802a3fe:	ea44 030c 	orr.w	r3, r4, ip
 802a402:	460a      	mov	r2, r1
 802a404:	e7d7      	b.n	802a3b6 <__b2d+0x4a>
 802a406:	bf00      	nop
 802a408:	3ff00000 	.word	0x3ff00000

0802a40c <__d2b>:
 802a40c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a410:	4689      	mov	r9, r1
 802a412:	2101      	movs	r1, #1
 802a414:	ec57 6b10 	vmov	r6, r7, d0
 802a418:	4690      	mov	r8, r2
 802a41a:	f7ff fc09 	bl	8029c30 <_Balloc>
 802a41e:	4604      	mov	r4, r0
 802a420:	b930      	cbnz	r0, 802a430 <__d2b+0x24>
 802a422:	4602      	mov	r2, r0
 802a424:	4b25      	ldr	r3, [pc, #148]	; (802a4bc <__d2b+0xb0>)
 802a426:	4826      	ldr	r0, [pc, #152]	; (802a4c0 <__d2b+0xb4>)
 802a428:	f240 310a 	movw	r1, #778	; 0x30a
 802a42c:	f000 fd3c 	bl	802aea8 <__assert_func>
 802a430:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802a434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802a438:	bb35      	cbnz	r5, 802a488 <__d2b+0x7c>
 802a43a:	2e00      	cmp	r6, #0
 802a43c:	9301      	str	r3, [sp, #4]
 802a43e:	d028      	beq.n	802a492 <__d2b+0x86>
 802a440:	4668      	mov	r0, sp
 802a442:	9600      	str	r6, [sp, #0]
 802a444:	f7ff fd06 	bl	8029e54 <__lo0bits>
 802a448:	9900      	ldr	r1, [sp, #0]
 802a44a:	b300      	cbz	r0, 802a48e <__d2b+0x82>
 802a44c:	9a01      	ldr	r2, [sp, #4]
 802a44e:	f1c0 0320 	rsb	r3, r0, #32
 802a452:	fa02 f303 	lsl.w	r3, r2, r3
 802a456:	430b      	orrs	r3, r1
 802a458:	40c2      	lsrs	r2, r0
 802a45a:	6163      	str	r3, [r4, #20]
 802a45c:	9201      	str	r2, [sp, #4]
 802a45e:	9b01      	ldr	r3, [sp, #4]
 802a460:	61a3      	str	r3, [r4, #24]
 802a462:	2b00      	cmp	r3, #0
 802a464:	bf14      	ite	ne
 802a466:	2202      	movne	r2, #2
 802a468:	2201      	moveq	r2, #1
 802a46a:	6122      	str	r2, [r4, #16]
 802a46c:	b1d5      	cbz	r5, 802a4a4 <__d2b+0x98>
 802a46e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802a472:	4405      	add	r5, r0
 802a474:	f8c9 5000 	str.w	r5, [r9]
 802a478:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802a47c:	f8c8 0000 	str.w	r0, [r8]
 802a480:	4620      	mov	r0, r4
 802a482:	b003      	add	sp, #12
 802a484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802a48c:	e7d5      	b.n	802a43a <__d2b+0x2e>
 802a48e:	6161      	str	r1, [r4, #20]
 802a490:	e7e5      	b.n	802a45e <__d2b+0x52>
 802a492:	a801      	add	r0, sp, #4
 802a494:	f7ff fcde 	bl	8029e54 <__lo0bits>
 802a498:	9b01      	ldr	r3, [sp, #4]
 802a49a:	6163      	str	r3, [r4, #20]
 802a49c:	2201      	movs	r2, #1
 802a49e:	6122      	str	r2, [r4, #16]
 802a4a0:	3020      	adds	r0, #32
 802a4a2:	e7e3      	b.n	802a46c <__d2b+0x60>
 802a4a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a4a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802a4ac:	f8c9 0000 	str.w	r0, [r9]
 802a4b0:	6918      	ldr	r0, [r3, #16]
 802a4b2:	f7ff fcaf 	bl	8029e14 <__hi0bits>
 802a4b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a4ba:	e7df      	b.n	802a47c <__d2b+0x70>
 802a4bc:	0802cde8 	.word	0x0802cde8
 802a4c0:	0802ce8b 	.word	0x0802ce8b

0802a4c4 <__ratio>:
 802a4c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4c8:	4688      	mov	r8, r1
 802a4ca:	4669      	mov	r1, sp
 802a4cc:	4681      	mov	r9, r0
 802a4ce:	f7ff ff4d 	bl	802a36c <__b2d>
 802a4d2:	a901      	add	r1, sp, #4
 802a4d4:	4640      	mov	r0, r8
 802a4d6:	ec55 4b10 	vmov	r4, r5, d0
 802a4da:	f7ff ff47 	bl	802a36c <__b2d>
 802a4de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802a4e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802a4e6:	eba3 0c02 	sub.w	ip, r3, r2
 802a4ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 802a4ee:	1a9b      	subs	r3, r3, r2
 802a4f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802a4f4:	ec51 0b10 	vmov	r0, r1, d0
 802a4f8:	2b00      	cmp	r3, #0
 802a4fa:	bfd6      	itet	le
 802a4fc:	460a      	movle	r2, r1
 802a4fe:	462a      	movgt	r2, r5
 802a500:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802a504:	468b      	mov	fp, r1
 802a506:	462f      	mov	r7, r5
 802a508:	bfd4      	ite	le
 802a50a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802a50e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802a512:	4620      	mov	r0, r4
 802a514:	ee10 2a10 	vmov	r2, s0
 802a518:	465b      	mov	r3, fp
 802a51a:	4639      	mov	r1, r7
 802a51c:	f7de f8de 	bl	80086dc <__aeabi_ddiv>
 802a520:	ec41 0b10 	vmov	d0, r0, r1
 802a524:	b003      	add	sp, #12
 802a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a52a <__copybits>:
 802a52a:	3901      	subs	r1, #1
 802a52c:	b570      	push	{r4, r5, r6, lr}
 802a52e:	1149      	asrs	r1, r1, #5
 802a530:	6914      	ldr	r4, [r2, #16]
 802a532:	3101      	adds	r1, #1
 802a534:	f102 0314 	add.w	r3, r2, #20
 802a538:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802a53c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802a540:	1f05      	subs	r5, r0, #4
 802a542:	42a3      	cmp	r3, r4
 802a544:	d30c      	bcc.n	802a560 <__copybits+0x36>
 802a546:	1aa3      	subs	r3, r4, r2
 802a548:	3b11      	subs	r3, #17
 802a54a:	f023 0303 	bic.w	r3, r3, #3
 802a54e:	3211      	adds	r2, #17
 802a550:	42a2      	cmp	r2, r4
 802a552:	bf88      	it	hi
 802a554:	2300      	movhi	r3, #0
 802a556:	4418      	add	r0, r3
 802a558:	2300      	movs	r3, #0
 802a55a:	4288      	cmp	r0, r1
 802a55c:	d305      	bcc.n	802a56a <__copybits+0x40>
 802a55e:	bd70      	pop	{r4, r5, r6, pc}
 802a560:	f853 6b04 	ldr.w	r6, [r3], #4
 802a564:	f845 6f04 	str.w	r6, [r5, #4]!
 802a568:	e7eb      	b.n	802a542 <__copybits+0x18>
 802a56a:	f840 3b04 	str.w	r3, [r0], #4
 802a56e:	e7f4      	b.n	802a55a <__copybits+0x30>

0802a570 <__any_on>:
 802a570:	f100 0214 	add.w	r2, r0, #20
 802a574:	6900      	ldr	r0, [r0, #16]
 802a576:	114b      	asrs	r3, r1, #5
 802a578:	4298      	cmp	r0, r3
 802a57a:	b510      	push	{r4, lr}
 802a57c:	db11      	blt.n	802a5a2 <__any_on+0x32>
 802a57e:	dd0a      	ble.n	802a596 <__any_on+0x26>
 802a580:	f011 011f 	ands.w	r1, r1, #31
 802a584:	d007      	beq.n	802a596 <__any_on+0x26>
 802a586:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802a58a:	fa24 f001 	lsr.w	r0, r4, r1
 802a58e:	fa00 f101 	lsl.w	r1, r0, r1
 802a592:	428c      	cmp	r4, r1
 802a594:	d10b      	bne.n	802a5ae <__any_on+0x3e>
 802a596:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a59a:	4293      	cmp	r3, r2
 802a59c:	d803      	bhi.n	802a5a6 <__any_on+0x36>
 802a59e:	2000      	movs	r0, #0
 802a5a0:	bd10      	pop	{r4, pc}
 802a5a2:	4603      	mov	r3, r0
 802a5a4:	e7f7      	b.n	802a596 <__any_on+0x26>
 802a5a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a5aa:	2900      	cmp	r1, #0
 802a5ac:	d0f5      	beq.n	802a59a <__any_on+0x2a>
 802a5ae:	2001      	movs	r0, #1
 802a5b0:	e7f6      	b.n	802a5a0 <__any_on+0x30>

0802a5b2 <_calloc_r>:
 802a5b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a5b4:	fba1 2402 	umull	r2, r4, r1, r2
 802a5b8:	b94c      	cbnz	r4, 802a5ce <_calloc_r+0x1c>
 802a5ba:	4611      	mov	r1, r2
 802a5bc:	9201      	str	r2, [sp, #4]
 802a5be:	f000 f87b 	bl	802a6b8 <_malloc_r>
 802a5c2:	9a01      	ldr	r2, [sp, #4]
 802a5c4:	4605      	mov	r5, r0
 802a5c6:	b930      	cbnz	r0, 802a5d6 <_calloc_r+0x24>
 802a5c8:	4628      	mov	r0, r5
 802a5ca:	b003      	add	sp, #12
 802a5cc:	bd30      	pop	{r4, r5, pc}
 802a5ce:	220c      	movs	r2, #12
 802a5d0:	6002      	str	r2, [r0, #0]
 802a5d2:	2500      	movs	r5, #0
 802a5d4:	e7f8      	b.n	802a5c8 <_calloc_r+0x16>
 802a5d6:	4621      	mov	r1, r4
 802a5d8:	f7fd fd4c 	bl	8028074 <memset>
 802a5dc:	e7f4      	b.n	802a5c8 <_calloc_r+0x16>
	...

0802a5e0 <_free_r>:
 802a5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a5e2:	2900      	cmp	r1, #0
 802a5e4:	d044      	beq.n	802a670 <_free_r+0x90>
 802a5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a5ea:	9001      	str	r0, [sp, #4]
 802a5ec:	2b00      	cmp	r3, #0
 802a5ee:	f1a1 0404 	sub.w	r4, r1, #4
 802a5f2:	bfb8      	it	lt
 802a5f4:	18e4      	addlt	r4, r4, r3
 802a5f6:	f000 fcd3 	bl	802afa0 <__malloc_lock>
 802a5fa:	4a1e      	ldr	r2, [pc, #120]	; (802a674 <_free_r+0x94>)
 802a5fc:	9801      	ldr	r0, [sp, #4]
 802a5fe:	6813      	ldr	r3, [r2, #0]
 802a600:	b933      	cbnz	r3, 802a610 <_free_r+0x30>
 802a602:	6063      	str	r3, [r4, #4]
 802a604:	6014      	str	r4, [r2, #0]
 802a606:	b003      	add	sp, #12
 802a608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a60c:	f000 bcce 	b.w	802afac <__malloc_unlock>
 802a610:	42a3      	cmp	r3, r4
 802a612:	d908      	bls.n	802a626 <_free_r+0x46>
 802a614:	6825      	ldr	r5, [r4, #0]
 802a616:	1961      	adds	r1, r4, r5
 802a618:	428b      	cmp	r3, r1
 802a61a:	bf01      	itttt	eq
 802a61c:	6819      	ldreq	r1, [r3, #0]
 802a61e:	685b      	ldreq	r3, [r3, #4]
 802a620:	1949      	addeq	r1, r1, r5
 802a622:	6021      	streq	r1, [r4, #0]
 802a624:	e7ed      	b.n	802a602 <_free_r+0x22>
 802a626:	461a      	mov	r2, r3
 802a628:	685b      	ldr	r3, [r3, #4]
 802a62a:	b10b      	cbz	r3, 802a630 <_free_r+0x50>
 802a62c:	42a3      	cmp	r3, r4
 802a62e:	d9fa      	bls.n	802a626 <_free_r+0x46>
 802a630:	6811      	ldr	r1, [r2, #0]
 802a632:	1855      	adds	r5, r2, r1
 802a634:	42a5      	cmp	r5, r4
 802a636:	d10b      	bne.n	802a650 <_free_r+0x70>
 802a638:	6824      	ldr	r4, [r4, #0]
 802a63a:	4421      	add	r1, r4
 802a63c:	1854      	adds	r4, r2, r1
 802a63e:	42a3      	cmp	r3, r4
 802a640:	6011      	str	r1, [r2, #0]
 802a642:	d1e0      	bne.n	802a606 <_free_r+0x26>
 802a644:	681c      	ldr	r4, [r3, #0]
 802a646:	685b      	ldr	r3, [r3, #4]
 802a648:	6053      	str	r3, [r2, #4]
 802a64a:	4421      	add	r1, r4
 802a64c:	6011      	str	r1, [r2, #0]
 802a64e:	e7da      	b.n	802a606 <_free_r+0x26>
 802a650:	d902      	bls.n	802a658 <_free_r+0x78>
 802a652:	230c      	movs	r3, #12
 802a654:	6003      	str	r3, [r0, #0]
 802a656:	e7d6      	b.n	802a606 <_free_r+0x26>
 802a658:	6825      	ldr	r5, [r4, #0]
 802a65a:	1961      	adds	r1, r4, r5
 802a65c:	428b      	cmp	r3, r1
 802a65e:	bf04      	itt	eq
 802a660:	6819      	ldreq	r1, [r3, #0]
 802a662:	685b      	ldreq	r3, [r3, #4]
 802a664:	6063      	str	r3, [r4, #4]
 802a666:	bf04      	itt	eq
 802a668:	1949      	addeq	r1, r1, r5
 802a66a:	6021      	streq	r1, [r4, #0]
 802a66c:	6054      	str	r4, [r2, #4]
 802a66e:	e7ca      	b.n	802a606 <_free_r+0x26>
 802a670:	b003      	add	sp, #12
 802a672:	bd30      	pop	{r4, r5, pc}
 802a674:	20003e7c 	.word	0x20003e7c

0802a678 <sbrk_aligned>:
 802a678:	b570      	push	{r4, r5, r6, lr}
 802a67a:	4e0e      	ldr	r6, [pc, #56]	; (802a6b4 <sbrk_aligned+0x3c>)
 802a67c:	460c      	mov	r4, r1
 802a67e:	6831      	ldr	r1, [r6, #0]
 802a680:	4605      	mov	r5, r0
 802a682:	b911      	cbnz	r1, 802a68a <sbrk_aligned+0x12>
 802a684:	f000 fb84 	bl	802ad90 <_sbrk_r>
 802a688:	6030      	str	r0, [r6, #0]
 802a68a:	4621      	mov	r1, r4
 802a68c:	4628      	mov	r0, r5
 802a68e:	f000 fb7f 	bl	802ad90 <_sbrk_r>
 802a692:	1c43      	adds	r3, r0, #1
 802a694:	d00a      	beq.n	802a6ac <sbrk_aligned+0x34>
 802a696:	1cc4      	adds	r4, r0, #3
 802a698:	f024 0403 	bic.w	r4, r4, #3
 802a69c:	42a0      	cmp	r0, r4
 802a69e:	d007      	beq.n	802a6b0 <sbrk_aligned+0x38>
 802a6a0:	1a21      	subs	r1, r4, r0
 802a6a2:	4628      	mov	r0, r5
 802a6a4:	f000 fb74 	bl	802ad90 <_sbrk_r>
 802a6a8:	3001      	adds	r0, #1
 802a6aa:	d101      	bne.n	802a6b0 <sbrk_aligned+0x38>
 802a6ac:	f04f 34ff 	mov.w	r4, #4294967295
 802a6b0:	4620      	mov	r0, r4
 802a6b2:	bd70      	pop	{r4, r5, r6, pc}
 802a6b4:	20003e80 	.word	0x20003e80

0802a6b8 <_malloc_r>:
 802a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a6bc:	1ccd      	adds	r5, r1, #3
 802a6be:	f025 0503 	bic.w	r5, r5, #3
 802a6c2:	3508      	adds	r5, #8
 802a6c4:	2d0c      	cmp	r5, #12
 802a6c6:	bf38      	it	cc
 802a6c8:	250c      	movcc	r5, #12
 802a6ca:	2d00      	cmp	r5, #0
 802a6cc:	4607      	mov	r7, r0
 802a6ce:	db01      	blt.n	802a6d4 <_malloc_r+0x1c>
 802a6d0:	42a9      	cmp	r1, r5
 802a6d2:	d905      	bls.n	802a6e0 <_malloc_r+0x28>
 802a6d4:	230c      	movs	r3, #12
 802a6d6:	603b      	str	r3, [r7, #0]
 802a6d8:	2600      	movs	r6, #0
 802a6da:	4630      	mov	r0, r6
 802a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6e0:	4e2e      	ldr	r6, [pc, #184]	; (802a79c <_malloc_r+0xe4>)
 802a6e2:	f000 fc5d 	bl	802afa0 <__malloc_lock>
 802a6e6:	6833      	ldr	r3, [r6, #0]
 802a6e8:	461c      	mov	r4, r3
 802a6ea:	bb34      	cbnz	r4, 802a73a <_malloc_r+0x82>
 802a6ec:	4629      	mov	r1, r5
 802a6ee:	4638      	mov	r0, r7
 802a6f0:	f7ff ffc2 	bl	802a678 <sbrk_aligned>
 802a6f4:	1c43      	adds	r3, r0, #1
 802a6f6:	4604      	mov	r4, r0
 802a6f8:	d14d      	bne.n	802a796 <_malloc_r+0xde>
 802a6fa:	6834      	ldr	r4, [r6, #0]
 802a6fc:	4626      	mov	r6, r4
 802a6fe:	2e00      	cmp	r6, #0
 802a700:	d140      	bne.n	802a784 <_malloc_r+0xcc>
 802a702:	6823      	ldr	r3, [r4, #0]
 802a704:	4631      	mov	r1, r6
 802a706:	4638      	mov	r0, r7
 802a708:	eb04 0803 	add.w	r8, r4, r3
 802a70c:	f000 fb40 	bl	802ad90 <_sbrk_r>
 802a710:	4580      	cmp	r8, r0
 802a712:	d13a      	bne.n	802a78a <_malloc_r+0xd2>
 802a714:	6821      	ldr	r1, [r4, #0]
 802a716:	3503      	adds	r5, #3
 802a718:	1a6d      	subs	r5, r5, r1
 802a71a:	f025 0503 	bic.w	r5, r5, #3
 802a71e:	3508      	adds	r5, #8
 802a720:	2d0c      	cmp	r5, #12
 802a722:	bf38      	it	cc
 802a724:	250c      	movcc	r5, #12
 802a726:	4629      	mov	r1, r5
 802a728:	4638      	mov	r0, r7
 802a72a:	f7ff ffa5 	bl	802a678 <sbrk_aligned>
 802a72e:	3001      	adds	r0, #1
 802a730:	d02b      	beq.n	802a78a <_malloc_r+0xd2>
 802a732:	6823      	ldr	r3, [r4, #0]
 802a734:	442b      	add	r3, r5
 802a736:	6023      	str	r3, [r4, #0]
 802a738:	e00e      	b.n	802a758 <_malloc_r+0xa0>
 802a73a:	6822      	ldr	r2, [r4, #0]
 802a73c:	1b52      	subs	r2, r2, r5
 802a73e:	d41e      	bmi.n	802a77e <_malloc_r+0xc6>
 802a740:	2a0b      	cmp	r2, #11
 802a742:	d916      	bls.n	802a772 <_malloc_r+0xba>
 802a744:	1961      	adds	r1, r4, r5
 802a746:	42a3      	cmp	r3, r4
 802a748:	6025      	str	r5, [r4, #0]
 802a74a:	bf18      	it	ne
 802a74c:	6059      	strne	r1, [r3, #4]
 802a74e:	6863      	ldr	r3, [r4, #4]
 802a750:	bf08      	it	eq
 802a752:	6031      	streq	r1, [r6, #0]
 802a754:	5162      	str	r2, [r4, r5]
 802a756:	604b      	str	r3, [r1, #4]
 802a758:	4638      	mov	r0, r7
 802a75a:	f104 060b 	add.w	r6, r4, #11
 802a75e:	f000 fc25 	bl	802afac <__malloc_unlock>
 802a762:	f026 0607 	bic.w	r6, r6, #7
 802a766:	1d23      	adds	r3, r4, #4
 802a768:	1af2      	subs	r2, r6, r3
 802a76a:	d0b6      	beq.n	802a6da <_malloc_r+0x22>
 802a76c:	1b9b      	subs	r3, r3, r6
 802a76e:	50a3      	str	r3, [r4, r2]
 802a770:	e7b3      	b.n	802a6da <_malloc_r+0x22>
 802a772:	6862      	ldr	r2, [r4, #4]
 802a774:	42a3      	cmp	r3, r4
 802a776:	bf0c      	ite	eq
 802a778:	6032      	streq	r2, [r6, #0]
 802a77a:	605a      	strne	r2, [r3, #4]
 802a77c:	e7ec      	b.n	802a758 <_malloc_r+0xa0>
 802a77e:	4623      	mov	r3, r4
 802a780:	6864      	ldr	r4, [r4, #4]
 802a782:	e7b2      	b.n	802a6ea <_malloc_r+0x32>
 802a784:	4634      	mov	r4, r6
 802a786:	6876      	ldr	r6, [r6, #4]
 802a788:	e7b9      	b.n	802a6fe <_malloc_r+0x46>
 802a78a:	230c      	movs	r3, #12
 802a78c:	603b      	str	r3, [r7, #0]
 802a78e:	4638      	mov	r0, r7
 802a790:	f000 fc0c 	bl	802afac <__malloc_unlock>
 802a794:	e7a1      	b.n	802a6da <_malloc_r+0x22>
 802a796:	6025      	str	r5, [r4, #0]
 802a798:	e7de      	b.n	802a758 <_malloc_r+0xa0>
 802a79a:	bf00      	nop
 802a79c:	20003e7c 	.word	0x20003e7c

0802a7a0 <__ssputs_r>:
 802a7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a7a4:	688e      	ldr	r6, [r1, #8]
 802a7a6:	429e      	cmp	r6, r3
 802a7a8:	4682      	mov	sl, r0
 802a7aa:	460c      	mov	r4, r1
 802a7ac:	4690      	mov	r8, r2
 802a7ae:	461f      	mov	r7, r3
 802a7b0:	d838      	bhi.n	802a824 <__ssputs_r+0x84>
 802a7b2:	898a      	ldrh	r2, [r1, #12]
 802a7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802a7b8:	d032      	beq.n	802a820 <__ssputs_r+0x80>
 802a7ba:	6825      	ldr	r5, [r4, #0]
 802a7bc:	6909      	ldr	r1, [r1, #16]
 802a7be:	eba5 0901 	sub.w	r9, r5, r1
 802a7c2:	6965      	ldr	r5, [r4, #20]
 802a7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a7c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a7cc:	3301      	adds	r3, #1
 802a7ce:	444b      	add	r3, r9
 802a7d0:	106d      	asrs	r5, r5, #1
 802a7d2:	429d      	cmp	r5, r3
 802a7d4:	bf38      	it	cc
 802a7d6:	461d      	movcc	r5, r3
 802a7d8:	0553      	lsls	r3, r2, #21
 802a7da:	d531      	bpl.n	802a840 <__ssputs_r+0xa0>
 802a7dc:	4629      	mov	r1, r5
 802a7de:	f7ff ff6b 	bl	802a6b8 <_malloc_r>
 802a7e2:	4606      	mov	r6, r0
 802a7e4:	b950      	cbnz	r0, 802a7fc <__ssputs_r+0x5c>
 802a7e6:	230c      	movs	r3, #12
 802a7e8:	f8ca 3000 	str.w	r3, [sl]
 802a7ec:	89a3      	ldrh	r3, [r4, #12]
 802a7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a7f2:	81a3      	strh	r3, [r4, #12]
 802a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 802a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a7fc:	6921      	ldr	r1, [r4, #16]
 802a7fe:	464a      	mov	r2, r9
 802a800:	f7fd fc10 	bl	8028024 <memcpy>
 802a804:	89a3      	ldrh	r3, [r4, #12]
 802a806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802a80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a80e:	81a3      	strh	r3, [r4, #12]
 802a810:	6126      	str	r6, [r4, #16]
 802a812:	6165      	str	r5, [r4, #20]
 802a814:	444e      	add	r6, r9
 802a816:	eba5 0509 	sub.w	r5, r5, r9
 802a81a:	6026      	str	r6, [r4, #0]
 802a81c:	60a5      	str	r5, [r4, #8]
 802a81e:	463e      	mov	r6, r7
 802a820:	42be      	cmp	r6, r7
 802a822:	d900      	bls.n	802a826 <__ssputs_r+0x86>
 802a824:	463e      	mov	r6, r7
 802a826:	6820      	ldr	r0, [r4, #0]
 802a828:	4632      	mov	r2, r6
 802a82a:	4641      	mov	r1, r8
 802a82c:	f7fd fc08 	bl	8028040 <memmove>
 802a830:	68a3      	ldr	r3, [r4, #8]
 802a832:	1b9b      	subs	r3, r3, r6
 802a834:	60a3      	str	r3, [r4, #8]
 802a836:	6823      	ldr	r3, [r4, #0]
 802a838:	4433      	add	r3, r6
 802a83a:	6023      	str	r3, [r4, #0]
 802a83c:	2000      	movs	r0, #0
 802a83e:	e7db      	b.n	802a7f8 <__ssputs_r+0x58>
 802a840:	462a      	mov	r2, r5
 802a842:	f000 fbb9 	bl	802afb8 <_realloc_r>
 802a846:	4606      	mov	r6, r0
 802a848:	2800      	cmp	r0, #0
 802a84a:	d1e1      	bne.n	802a810 <__ssputs_r+0x70>
 802a84c:	6921      	ldr	r1, [r4, #16]
 802a84e:	4650      	mov	r0, sl
 802a850:	f7ff fec6 	bl	802a5e0 <_free_r>
 802a854:	e7c7      	b.n	802a7e6 <__ssputs_r+0x46>
	...

0802a858 <_svfiprintf_r>:
 802a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a85c:	4698      	mov	r8, r3
 802a85e:	898b      	ldrh	r3, [r1, #12]
 802a860:	061b      	lsls	r3, r3, #24
 802a862:	b09d      	sub	sp, #116	; 0x74
 802a864:	4607      	mov	r7, r0
 802a866:	460d      	mov	r5, r1
 802a868:	4614      	mov	r4, r2
 802a86a:	d50e      	bpl.n	802a88a <_svfiprintf_r+0x32>
 802a86c:	690b      	ldr	r3, [r1, #16]
 802a86e:	b963      	cbnz	r3, 802a88a <_svfiprintf_r+0x32>
 802a870:	2140      	movs	r1, #64	; 0x40
 802a872:	f7ff ff21 	bl	802a6b8 <_malloc_r>
 802a876:	6028      	str	r0, [r5, #0]
 802a878:	6128      	str	r0, [r5, #16]
 802a87a:	b920      	cbnz	r0, 802a886 <_svfiprintf_r+0x2e>
 802a87c:	230c      	movs	r3, #12
 802a87e:	603b      	str	r3, [r7, #0]
 802a880:	f04f 30ff 	mov.w	r0, #4294967295
 802a884:	e0d1      	b.n	802aa2a <_svfiprintf_r+0x1d2>
 802a886:	2340      	movs	r3, #64	; 0x40
 802a888:	616b      	str	r3, [r5, #20]
 802a88a:	2300      	movs	r3, #0
 802a88c:	9309      	str	r3, [sp, #36]	; 0x24
 802a88e:	2320      	movs	r3, #32
 802a890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a894:	f8cd 800c 	str.w	r8, [sp, #12]
 802a898:	2330      	movs	r3, #48	; 0x30
 802a89a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802aa44 <_svfiprintf_r+0x1ec>
 802a89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a8a2:	f04f 0901 	mov.w	r9, #1
 802a8a6:	4623      	mov	r3, r4
 802a8a8:	469a      	mov	sl, r3
 802a8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a8ae:	b10a      	cbz	r2, 802a8b4 <_svfiprintf_r+0x5c>
 802a8b0:	2a25      	cmp	r2, #37	; 0x25
 802a8b2:	d1f9      	bne.n	802a8a8 <_svfiprintf_r+0x50>
 802a8b4:	ebba 0b04 	subs.w	fp, sl, r4
 802a8b8:	d00b      	beq.n	802a8d2 <_svfiprintf_r+0x7a>
 802a8ba:	465b      	mov	r3, fp
 802a8bc:	4622      	mov	r2, r4
 802a8be:	4629      	mov	r1, r5
 802a8c0:	4638      	mov	r0, r7
 802a8c2:	f7ff ff6d 	bl	802a7a0 <__ssputs_r>
 802a8c6:	3001      	adds	r0, #1
 802a8c8:	f000 80aa 	beq.w	802aa20 <_svfiprintf_r+0x1c8>
 802a8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a8ce:	445a      	add	r2, fp
 802a8d0:	9209      	str	r2, [sp, #36]	; 0x24
 802a8d2:	f89a 3000 	ldrb.w	r3, [sl]
 802a8d6:	2b00      	cmp	r3, #0
 802a8d8:	f000 80a2 	beq.w	802aa20 <_svfiprintf_r+0x1c8>
 802a8dc:	2300      	movs	r3, #0
 802a8de:	f04f 32ff 	mov.w	r2, #4294967295
 802a8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a8e6:	f10a 0a01 	add.w	sl, sl, #1
 802a8ea:	9304      	str	r3, [sp, #16]
 802a8ec:	9307      	str	r3, [sp, #28]
 802a8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a8f2:	931a      	str	r3, [sp, #104]	; 0x68
 802a8f4:	4654      	mov	r4, sl
 802a8f6:	2205      	movs	r2, #5
 802a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a8fc:	4851      	ldr	r0, [pc, #324]	; (802aa44 <_svfiprintf_r+0x1ec>)
 802a8fe:	f7dd fbb7 	bl	8008070 <memchr>
 802a902:	9a04      	ldr	r2, [sp, #16]
 802a904:	b9d8      	cbnz	r0, 802a93e <_svfiprintf_r+0xe6>
 802a906:	06d0      	lsls	r0, r2, #27
 802a908:	bf44      	itt	mi
 802a90a:	2320      	movmi	r3, #32
 802a90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a910:	0711      	lsls	r1, r2, #28
 802a912:	bf44      	itt	mi
 802a914:	232b      	movmi	r3, #43	; 0x2b
 802a916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a91a:	f89a 3000 	ldrb.w	r3, [sl]
 802a91e:	2b2a      	cmp	r3, #42	; 0x2a
 802a920:	d015      	beq.n	802a94e <_svfiprintf_r+0xf6>
 802a922:	9a07      	ldr	r2, [sp, #28]
 802a924:	4654      	mov	r4, sl
 802a926:	2000      	movs	r0, #0
 802a928:	f04f 0c0a 	mov.w	ip, #10
 802a92c:	4621      	mov	r1, r4
 802a92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a932:	3b30      	subs	r3, #48	; 0x30
 802a934:	2b09      	cmp	r3, #9
 802a936:	d94e      	bls.n	802a9d6 <_svfiprintf_r+0x17e>
 802a938:	b1b0      	cbz	r0, 802a968 <_svfiprintf_r+0x110>
 802a93a:	9207      	str	r2, [sp, #28]
 802a93c:	e014      	b.n	802a968 <_svfiprintf_r+0x110>
 802a93e:	eba0 0308 	sub.w	r3, r0, r8
 802a942:	fa09 f303 	lsl.w	r3, r9, r3
 802a946:	4313      	orrs	r3, r2
 802a948:	9304      	str	r3, [sp, #16]
 802a94a:	46a2      	mov	sl, r4
 802a94c:	e7d2      	b.n	802a8f4 <_svfiprintf_r+0x9c>
 802a94e:	9b03      	ldr	r3, [sp, #12]
 802a950:	1d19      	adds	r1, r3, #4
 802a952:	681b      	ldr	r3, [r3, #0]
 802a954:	9103      	str	r1, [sp, #12]
 802a956:	2b00      	cmp	r3, #0
 802a958:	bfbb      	ittet	lt
 802a95a:	425b      	neglt	r3, r3
 802a95c:	f042 0202 	orrlt.w	r2, r2, #2
 802a960:	9307      	strge	r3, [sp, #28]
 802a962:	9307      	strlt	r3, [sp, #28]
 802a964:	bfb8      	it	lt
 802a966:	9204      	strlt	r2, [sp, #16]
 802a968:	7823      	ldrb	r3, [r4, #0]
 802a96a:	2b2e      	cmp	r3, #46	; 0x2e
 802a96c:	d10c      	bne.n	802a988 <_svfiprintf_r+0x130>
 802a96e:	7863      	ldrb	r3, [r4, #1]
 802a970:	2b2a      	cmp	r3, #42	; 0x2a
 802a972:	d135      	bne.n	802a9e0 <_svfiprintf_r+0x188>
 802a974:	9b03      	ldr	r3, [sp, #12]
 802a976:	1d1a      	adds	r2, r3, #4
 802a978:	681b      	ldr	r3, [r3, #0]
 802a97a:	9203      	str	r2, [sp, #12]
 802a97c:	2b00      	cmp	r3, #0
 802a97e:	bfb8      	it	lt
 802a980:	f04f 33ff 	movlt.w	r3, #4294967295
 802a984:	3402      	adds	r4, #2
 802a986:	9305      	str	r3, [sp, #20]
 802a988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802aa54 <_svfiprintf_r+0x1fc>
 802a98c:	7821      	ldrb	r1, [r4, #0]
 802a98e:	2203      	movs	r2, #3
 802a990:	4650      	mov	r0, sl
 802a992:	f7dd fb6d 	bl	8008070 <memchr>
 802a996:	b140      	cbz	r0, 802a9aa <_svfiprintf_r+0x152>
 802a998:	2340      	movs	r3, #64	; 0x40
 802a99a:	eba0 000a 	sub.w	r0, r0, sl
 802a99e:	fa03 f000 	lsl.w	r0, r3, r0
 802a9a2:	9b04      	ldr	r3, [sp, #16]
 802a9a4:	4303      	orrs	r3, r0
 802a9a6:	3401      	adds	r4, #1
 802a9a8:	9304      	str	r3, [sp, #16]
 802a9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a9ae:	4826      	ldr	r0, [pc, #152]	; (802aa48 <_svfiprintf_r+0x1f0>)
 802a9b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a9b4:	2206      	movs	r2, #6
 802a9b6:	f7dd fb5b 	bl	8008070 <memchr>
 802a9ba:	2800      	cmp	r0, #0
 802a9bc:	d038      	beq.n	802aa30 <_svfiprintf_r+0x1d8>
 802a9be:	4b23      	ldr	r3, [pc, #140]	; (802aa4c <_svfiprintf_r+0x1f4>)
 802a9c0:	bb1b      	cbnz	r3, 802aa0a <_svfiprintf_r+0x1b2>
 802a9c2:	9b03      	ldr	r3, [sp, #12]
 802a9c4:	3307      	adds	r3, #7
 802a9c6:	f023 0307 	bic.w	r3, r3, #7
 802a9ca:	3308      	adds	r3, #8
 802a9cc:	9303      	str	r3, [sp, #12]
 802a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a9d0:	4433      	add	r3, r6
 802a9d2:	9309      	str	r3, [sp, #36]	; 0x24
 802a9d4:	e767      	b.n	802a8a6 <_svfiprintf_r+0x4e>
 802a9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 802a9da:	460c      	mov	r4, r1
 802a9dc:	2001      	movs	r0, #1
 802a9de:	e7a5      	b.n	802a92c <_svfiprintf_r+0xd4>
 802a9e0:	2300      	movs	r3, #0
 802a9e2:	3401      	adds	r4, #1
 802a9e4:	9305      	str	r3, [sp, #20]
 802a9e6:	4619      	mov	r1, r3
 802a9e8:	f04f 0c0a 	mov.w	ip, #10
 802a9ec:	4620      	mov	r0, r4
 802a9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a9f2:	3a30      	subs	r2, #48	; 0x30
 802a9f4:	2a09      	cmp	r2, #9
 802a9f6:	d903      	bls.n	802aa00 <_svfiprintf_r+0x1a8>
 802a9f8:	2b00      	cmp	r3, #0
 802a9fa:	d0c5      	beq.n	802a988 <_svfiprintf_r+0x130>
 802a9fc:	9105      	str	r1, [sp, #20]
 802a9fe:	e7c3      	b.n	802a988 <_svfiprintf_r+0x130>
 802aa00:	fb0c 2101 	mla	r1, ip, r1, r2
 802aa04:	4604      	mov	r4, r0
 802aa06:	2301      	movs	r3, #1
 802aa08:	e7f0      	b.n	802a9ec <_svfiprintf_r+0x194>
 802aa0a:	ab03      	add	r3, sp, #12
 802aa0c:	9300      	str	r3, [sp, #0]
 802aa0e:	462a      	mov	r2, r5
 802aa10:	4b0f      	ldr	r3, [pc, #60]	; (802aa50 <_svfiprintf_r+0x1f8>)
 802aa12:	a904      	add	r1, sp, #16
 802aa14:	4638      	mov	r0, r7
 802aa16:	f3af 8000 	nop.w
 802aa1a:	1c42      	adds	r2, r0, #1
 802aa1c:	4606      	mov	r6, r0
 802aa1e:	d1d6      	bne.n	802a9ce <_svfiprintf_r+0x176>
 802aa20:	89ab      	ldrh	r3, [r5, #12]
 802aa22:	065b      	lsls	r3, r3, #25
 802aa24:	f53f af2c 	bmi.w	802a880 <_svfiprintf_r+0x28>
 802aa28:	9809      	ldr	r0, [sp, #36]	; 0x24
 802aa2a:	b01d      	add	sp, #116	; 0x74
 802aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa30:	ab03      	add	r3, sp, #12
 802aa32:	9300      	str	r3, [sp, #0]
 802aa34:	462a      	mov	r2, r5
 802aa36:	4b06      	ldr	r3, [pc, #24]	; (802aa50 <_svfiprintf_r+0x1f8>)
 802aa38:	a904      	add	r1, sp, #16
 802aa3a:	4638      	mov	r0, r7
 802aa3c:	f000 f87a 	bl	802ab34 <_printf_i>
 802aa40:	e7eb      	b.n	802aa1a <_svfiprintf_r+0x1c2>
 802aa42:	bf00      	nop
 802aa44:	0802cfe4 	.word	0x0802cfe4
 802aa48:	0802cfee 	.word	0x0802cfee
 802aa4c:	00000000 	.word	0x00000000
 802aa50:	0802a7a1 	.word	0x0802a7a1
 802aa54:	0802cfea 	.word	0x0802cfea

0802aa58 <_printf_common>:
 802aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aa5c:	4616      	mov	r6, r2
 802aa5e:	4699      	mov	r9, r3
 802aa60:	688a      	ldr	r2, [r1, #8]
 802aa62:	690b      	ldr	r3, [r1, #16]
 802aa64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802aa68:	4293      	cmp	r3, r2
 802aa6a:	bfb8      	it	lt
 802aa6c:	4613      	movlt	r3, r2
 802aa6e:	6033      	str	r3, [r6, #0]
 802aa70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802aa74:	4607      	mov	r7, r0
 802aa76:	460c      	mov	r4, r1
 802aa78:	b10a      	cbz	r2, 802aa7e <_printf_common+0x26>
 802aa7a:	3301      	adds	r3, #1
 802aa7c:	6033      	str	r3, [r6, #0]
 802aa7e:	6823      	ldr	r3, [r4, #0]
 802aa80:	0699      	lsls	r1, r3, #26
 802aa82:	bf42      	ittt	mi
 802aa84:	6833      	ldrmi	r3, [r6, #0]
 802aa86:	3302      	addmi	r3, #2
 802aa88:	6033      	strmi	r3, [r6, #0]
 802aa8a:	6825      	ldr	r5, [r4, #0]
 802aa8c:	f015 0506 	ands.w	r5, r5, #6
 802aa90:	d106      	bne.n	802aaa0 <_printf_common+0x48>
 802aa92:	f104 0a19 	add.w	sl, r4, #25
 802aa96:	68e3      	ldr	r3, [r4, #12]
 802aa98:	6832      	ldr	r2, [r6, #0]
 802aa9a:	1a9b      	subs	r3, r3, r2
 802aa9c:	42ab      	cmp	r3, r5
 802aa9e:	dc26      	bgt.n	802aaee <_printf_common+0x96>
 802aaa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802aaa4:	1e13      	subs	r3, r2, #0
 802aaa6:	6822      	ldr	r2, [r4, #0]
 802aaa8:	bf18      	it	ne
 802aaaa:	2301      	movne	r3, #1
 802aaac:	0692      	lsls	r2, r2, #26
 802aaae:	d42b      	bmi.n	802ab08 <_printf_common+0xb0>
 802aab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aab4:	4649      	mov	r1, r9
 802aab6:	4638      	mov	r0, r7
 802aab8:	47c0      	blx	r8
 802aaba:	3001      	adds	r0, #1
 802aabc:	d01e      	beq.n	802aafc <_printf_common+0xa4>
 802aabe:	6823      	ldr	r3, [r4, #0]
 802aac0:	68e5      	ldr	r5, [r4, #12]
 802aac2:	6832      	ldr	r2, [r6, #0]
 802aac4:	f003 0306 	and.w	r3, r3, #6
 802aac8:	2b04      	cmp	r3, #4
 802aaca:	bf08      	it	eq
 802aacc:	1aad      	subeq	r5, r5, r2
 802aace:	68a3      	ldr	r3, [r4, #8]
 802aad0:	6922      	ldr	r2, [r4, #16]
 802aad2:	bf0c      	ite	eq
 802aad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802aad8:	2500      	movne	r5, #0
 802aada:	4293      	cmp	r3, r2
 802aadc:	bfc4      	itt	gt
 802aade:	1a9b      	subgt	r3, r3, r2
 802aae0:	18ed      	addgt	r5, r5, r3
 802aae2:	2600      	movs	r6, #0
 802aae4:	341a      	adds	r4, #26
 802aae6:	42b5      	cmp	r5, r6
 802aae8:	d11a      	bne.n	802ab20 <_printf_common+0xc8>
 802aaea:	2000      	movs	r0, #0
 802aaec:	e008      	b.n	802ab00 <_printf_common+0xa8>
 802aaee:	2301      	movs	r3, #1
 802aaf0:	4652      	mov	r2, sl
 802aaf2:	4649      	mov	r1, r9
 802aaf4:	4638      	mov	r0, r7
 802aaf6:	47c0      	blx	r8
 802aaf8:	3001      	adds	r0, #1
 802aafa:	d103      	bne.n	802ab04 <_printf_common+0xac>
 802aafc:	f04f 30ff 	mov.w	r0, #4294967295
 802ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ab04:	3501      	adds	r5, #1
 802ab06:	e7c6      	b.n	802aa96 <_printf_common+0x3e>
 802ab08:	18e1      	adds	r1, r4, r3
 802ab0a:	1c5a      	adds	r2, r3, #1
 802ab0c:	2030      	movs	r0, #48	; 0x30
 802ab0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ab12:	4422      	add	r2, r4
 802ab14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ab18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ab1c:	3302      	adds	r3, #2
 802ab1e:	e7c7      	b.n	802aab0 <_printf_common+0x58>
 802ab20:	2301      	movs	r3, #1
 802ab22:	4622      	mov	r2, r4
 802ab24:	4649      	mov	r1, r9
 802ab26:	4638      	mov	r0, r7
 802ab28:	47c0      	blx	r8
 802ab2a:	3001      	adds	r0, #1
 802ab2c:	d0e6      	beq.n	802aafc <_printf_common+0xa4>
 802ab2e:	3601      	adds	r6, #1
 802ab30:	e7d9      	b.n	802aae6 <_printf_common+0x8e>
	...

0802ab34 <_printf_i>:
 802ab34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ab38:	7e0f      	ldrb	r7, [r1, #24]
 802ab3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802ab3c:	2f78      	cmp	r7, #120	; 0x78
 802ab3e:	4691      	mov	r9, r2
 802ab40:	4680      	mov	r8, r0
 802ab42:	460c      	mov	r4, r1
 802ab44:	469a      	mov	sl, r3
 802ab46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ab4a:	d807      	bhi.n	802ab5c <_printf_i+0x28>
 802ab4c:	2f62      	cmp	r7, #98	; 0x62
 802ab4e:	d80a      	bhi.n	802ab66 <_printf_i+0x32>
 802ab50:	2f00      	cmp	r7, #0
 802ab52:	f000 80d8 	beq.w	802ad06 <_printf_i+0x1d2>
 802ab56:	2f58      	cmp	r7, #88	; 0x58
 802ab58:	f000 80a3 	beq.w	802aca2 <_printf_i+0x16e>
 802ab5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ab60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ab64:	e03a      	b.n	802abdc <_printf_i+0xa8>
 802ab66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ab6a:	2b15      	cmp	r3, #21
 802ab6c:	d8f6      	bhi.n	802ab5c <_printf_i+0x28>
 802ab6e:	a101      	add	r1, pc, #4	; (adr r1, 802ab74 <_printf_i+0x40>)
 802ab70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ab74:	0802abcd 	.word	0x0802abcd
 802ab78:	0802abe1 	.word	0x0802abe1
 802ab7c:	0802ab5d 	.word	0x0802ab5d
 802ab80:	0802ab5d 	.word	0x0802ab5d
 802ab84:	0802ab5d 	.word	0x0802ab5d
 802ab88:	0802ab5d 	.word	0x0802ab5d
 802ab8c:	0802abe1 	.word	0x0802abe1
 802ab90:	0802ab5d 	.word	0x0802ab5d
 802ab94:	0802ab5d 	.word	0x0802ab5d
 802ab98:	0802ab5d 	.word	0x0802ab5d
 802ab9c:	0802ab5d 	.word	0x0802ab5d
 802aba0:	0802aced 	.word	0x0802aced
 802aba4:	0802ac11 	.word	0x0802ac11
 802aba8:	0802accf 	.word	0x0802accf
 802abac:	0802ab5d 	.word	0x0802ab5d
 802abb0:	0802ab5d 	.word	0x0802ab5d
 802abb4:	0802ad0f 	.word	0x0802ad0f
 802abb8:	0802ab5d 	.word	0x0802ab5d
 802abbc:	0802ac11 	.word	0x0802ac11
 802abc0:	0802ab5d 	.word	0x0802ab5d
 802abc4:	0802ab5d 	.word	0x0802ab5d
 802abc8:	0802acd7 	.word	0x0802acd7
 802abcc:	682b      	ldr	r3, [r5, #0]
 802abce:	1d1a      	adds	r2, r3, #4
 802abd0:	681b      	ldr	r3, [r3, #0]
 802abd2:	602a      	str	r2, [r5, #0]
 802abd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802abd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802abdc:	2301      	movs	r3, #1
 802abde:	e0a3      	b.n	802ad28 <_printf_i+0x1f4>
 802abe0:	6820      	ldr	r0, [r4, #0]
 802abe2:	6829      	ldr	r1, [r5, #0]
 802abe4:	0606      	lsls	r6, r0, #24
 802abe6:	f101 0304 	add.w	r3, r1, #4
 802abea:	d50a      	bpl.n	802ac02 <_printf_i+0xce>
 802abec:	680e      	ldr	r6, [r1, #0]
 802abee:	602b      	str	r3, [r5, #0]
 802abf0:	2e00      	cmp	r6, #0
 802abf2:	da03      	bge.n	802abfc <_printf_i+0xc8>
 802abf4:	232d      	movs	r3, #45	; 0x2d
 802abf6:	4276      	negs	r6, r6
 802abf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802abfc:	485e      	ldr	r0, [pc, #376]	; (802ad78 <_printf_i+0x244>)
 802abfe:	230a      	movs	r3, #10
 802ac00:	e019      	b.n	802ac36 <_printf_i+0x102>
 802ac02:	680e      	ldr	r6, [r1, #0]
 802ac04:	602b      	str	r3, [r5, #0]
 802ac06:	f010 0f40 	tst.w	r0, #64	; 0x40
 802ac0a:	bf18      	it	ne
 802ac0c:	b236      	sxthne	r6, r6
 802ac0e:	e7ef      	b.n	802abf0 <_printf_i+0xbc>
 802ac10:	682b      	ldr	r3, [r5, #0]
 802ac12:	6820      	ldr	r0, [r4, #0]
 802ac14:	1d19      	adds	r1, r3, #4
 802ac16:	6029      	str	r1, [r5, #0]
 802ac18:	0601      	lsls	r1, r0, #24
 802ac1a:	d501      	bpl.n	802ac20 <_printf_i+0xec>
 802ac1c:	681e      	ldr	r6, [r3, #0]
 802ac1e:	e002      	b.n	802ac26 <_printf_i+0xf2>
 802ac20:	0646      	lsls	r6, r0, #25
 802ac22:	d5fb      	bpl.n	802ac1c <_printf_i+0xe8>
 802ac24:	881e      	ldrh	r6, [r3, #0]
 802ac26:	4854      	ldr	r0, [pc, #336]	; (802ad78 <_printf_i+0x244>)
 802ac28:	2f6f      	cmp	r7, #111	; 0x6f
 802ac2a:	bf0c      	ite	eq
 802ac2c:	2308      	moveq	r3, #8
 802ac2e:	230a      	movne	r3, #10
 802ac30:	2100      	movs	r1, #0
 802ac32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ac36:	6865      	ldr	r5, [r4, #4]
 802ac38:	60a5      	str	r5, [r4, #8]
 802ac3a:	2d00      	cmp	r5, #0
 802ac3c:	bfa2      	ittt	ge
 802ac3e:	6821      	ldrge	r1, [r4, #0]
 802ac40:	f021 0104 	bicge.w	r1, r1, #4
 802ac44:	6021      	strge	r1, [r4, #0]
 802ac46:	b90e      	cbnz	r6, 802ac4c <_printf_i+0x118>
 802ac48:	2d00      	cmp	r5, #0
 802ac4a:	d04d      	beq.n	802ace8 <_printf_i+0x1b4>
 802ac4c:	4615      	mov	r5, r2
 802ac4e:	fbb6 f1f3 	udiv	r1, r6, r3
 802ac52:	fb03 6711 	mls	r7, r3, r1, r6
 802ac56:	5dc7      	ldrb	r7, [r0, r7]
 802ac58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802ac5c:	4637      	mov	r7, r6
 802ac5e:	42bb      	cmp	r3, r7
 802ac60:	460e      	mov	r6, r1
 802ac62:	d9f4      	bls.n	802ac4e <_printf_i+0x11a>
 802ac64:	2b08      	cmp	r3, #8
 802ac66:	d10b      	bne.n	802ac80 <_printf_i+0x14c>
 802ac68:	6823      	ldr	r3, [r4, #0]
 802ac6a:	07de      	lsls	r6, r3, #31
 802ac6c:	d508      	bpl.n	802ac80 <_printf_i+0x14c>
 802ac6e:	6923      	ldr	r3, [r4, #16]
 802ac70:	6861      	ldr	r1, [r4, #4]
 802ac72:	4299      	cmp	r1, r3
 802ac74:	bfde      	ittt	le
 802ac76:	2330      	movle	r3, #48	; 0x30
 802ac78:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ac7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 802ac80:	1b52      	subs	r2, r2, r5
 802ac82:	6122      	str	r2, [r4, #16]
 802ac84:	f8cd a000 	str.w	sl, [sp]
 802ac88:	464b      	mov	r3, r9
 802ac8a:	aa03      	add	r2, sp, #12
 802ac8c:	4621      	mov	r1, r4
 802ac8e:	4640      	mov	r0, r8
 802ac90:	f7ff fee2 	bl	802aa58 <_printf_common>
 802ac94:	3001      	adds	r0, #1
 802ac96:	d14c      	bne.n	802ad32 <_printf_i+0x1fe>
 802ac98:	f04f 30ff 	mov.w	r0, #4294967295
 802ac9c:	b004      	add	sp, #16
 802ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aca2:	4835      	ldr	r0, [pc, #212]	; (802ad78 <_printf_i+0x244>)
 802aca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802aca8:	6829      	ldr	r1, [r5, #0]
 802acaa:	6823      	ldr	r3, [r4, #0]
 802acac:	f851 6b04 	ldr.w	r6, [r1], #4
 802acb0:	6029      	str	r1, [r5, #0]
 802acb2:	061d      	lsls	r5, r3, #24
 802acb4:	d514      	bpl.n	802ace0 <_printf_i+0x1ac>
 802acb6:	07df      	lsls	r7, r3, #31
 802acb8:	bf44      	itt	mi
 802acba:	f043 0320 	orrmi.w	r3, r3, #32
 802acbe:	6023      	strmi	r3, [r4, #0]
 802acc0:	b91e      	cbnz	r6, 802acca <_printf_i+0x196>
 802acc2:	6823      	ldr	r3, [r4, #0]
 802acc4:	f023 0320 	bic.w	r3, r3, #32
 802acc8:	6023      	str	r3, [r4, #0]
 802acca:	2310      	movs	r3, #16
 802accc:	e7b0      	b.n	802ac30 <_printf_i+0xfc>
 802acce:	6823      	ldr	r3, [r4, #0]
 802acd0:	f043 0320 	orr.w	r3, r3, #32
 802acd4:	6023      	str	r3, [r4, #0]
 802acd6:	2378      	movs	r3, #120	; 0x78
 802acd8:	4828      	ldr	r0, [pc, #160]	; (802ad7c <_printf_i+0x248>)
 802acda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802acde:	e7e3      	b.n	802aca8 <_printf_i+0x174>
 802ace0:	0659      	lsls	r1, r3, #25
 802ace2:	bf48      	it	mi
 802ace4:	b2b6      	uxthmi	r6, r6
 802ace6:	e7e6      	b.n	802acb6 <_printf_i+0x182>
 802ace8:	4615      	mov	r5, r2
 802acea:	e7bb      	b.n	802ac64 <_printf_i+0x130>
 802acec:	682b      	ldr	r3, [r5, #0]
 802acee:	6826      	ldr	r6, [r4, #0]
 802acf0:	6961      	ldr	r1, [r4, #20]
 802acf2:	1d18      	adds	r0, r3, #4
 802acf4:	6028      	str	r0, [r5, #0]
 802acf6:	0635      	lsls	r5, r6, #24
 802acf8:	681b      	ldr	r3, [r3, #0]
 802acfa:	d501      	bpl.n	802ad00 <_printf_i+0x1cc>
 802acfc:	6019      	str	r1, [r3, #0]
 802acfe:	e002      	b.n	802ad06 <_printf_i+0x1d2>
 802ad00:	0670      	lsls	r0, r6, #25
 802ad02:	d5fb      	bpl.n	802acfc <_printf_i+0x1c8>
 802ad04:	8019      	strh	r1, [r3, #0]
 802ad06:	2300      	movs	r3, #0
 802ad08:	6123      	str	r3, [r4, #16]
 802ad0a:	4615      	mov	r5, r2
 802ad0c:	e7ba      	b.n	802ac84 <_printf_i+0x150>
 802ad0e:	682b      	ldr	r3, [r5, #0]
 802ad10:	1d1a      	adds	r2, r3, #4
 802ad12:	602a      	str	r2, [r5, #0]
 802ad14:	681d      	ldr	r5, [r3, #0]
 802ad16:	6862      	ldr	r2, [r4, #4]
 802ad18:	2100      	movs	r1, #0
 802ad1a:	4628      	mov	r0, r5
 802ad1c:	f7dd f9a8 	bl	8008070 <memchr>
 802ad20:	b108      	cbz	r0, 802ad26 <_printf_i+0x1f2>
 802ad22:	1b40      	subs	r0, r0, r5
 802ad24:	6060      	str	r0, [r4, #4]
 802ad26:	6863      	ldr	r3, [r4, #4]
 802ad28:	6123      	str	r3, [r4, #16]
 802ad2a:	2300      	movs	r3, #0
 802ad2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ad30:	e7a8      	b.n	802ac84 <_printf_i+0x150>
 802ad32:	6923      	ldr	r3, [r4, #16]
 802ad34:	462a      	mov	r2, r5
 802ad36:	4649      	mov	r1, r9
 802ad38:	4640      	mov	r0, r8
 802ad3a:	47d0      	blx	sl
 802ad3c:	3001      	adds	r0, #1
 802ad3e:	d0ab      	beq.n	802ac98 <_printf_i+0x164>
 802ad40:	6823      	ldr	r3, [r4, #0]
 802ad42:	079b      	lsls	r3, r3, #30
 802ad44:	d413      	bmi.n	802ad6e <_printf_i+0x23a>
 802ad46:	68e0      	ldr	r0, [r4, #12]
 802ad48:	9b03      	ldr	r3, [sp, #12]
 802ad4a:	4298      	cmp	r0, r3
 802ad4c:	bfb8      	it	lt
 802ad4e:	4618      	movlt	r0, r3
 802ad50:	e7a4      	b.n	802ac9c <_printf_i+0x168>
 802ad52:	2301      	movs	r3, #1
 802ad54:	4632      	mov	r2, r6
 802ad56:	4649      	mov	r1, r9
 802ad58:	4640      	mov	r0, r8
 802ad5a:	47d0      	blx	sl
 802ad5c:	3001      	adds	r0, #1
 802ad5e:	d09b      	beq.n	802ac98 <_printf_i+0x164>
 802ad60:	3501      	adds	r5, #1
 802ad62:	68e3      	ldr	r3, [r4, #12]
 802ad64:	9903      	ldr	r1, [sp, #12]
 802ad66:	1a5b      	subs	r3, r3, r1
 802ad68:	42ab      	cmp	r3, r5
 802ad6a:	dcf2      	bgt.n	802ad52 <_printf_i+0x21e>
 802ad6c:	e7eb      	b.n	802ad46 <_printf_i+0x212>
 802ad6e:	2500      	movs	r5, #0
 802ad70:	f104 0619 	add.w	r6, r4, #25
 802ad74:	e7f5      	b.n	802ad62 <_printf_i+0x22e>
 802ad76:	bf00      	nop
 802ad78:	0802cff5 	.word	0x0802cff5
 802ad7c:	0802d006 	.word	0x0802d006

0802ad80 <nan>:
 802ad80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802ad88 <nan+0x8>
 802ad84:	4770      	bx	lr
 802ad86:	bf00      	nop
 802ad88:	00000000 	.word	0x00000000
 802ad8c:	7ff80000 	.word	0x7ff80000

0802ad90 <_sbrk_r>:
 802ad90:	b538      	push	{r3, r4, r5, lr}
 802ad92:	4d06      	ldr	r5, [pc, #24]	; (802adac <_sbrk_r+0x1c>)
 802ad94:	2300      	movs	r3, #0
 802ad96:	4604      	mov	r4, r0
 802ad98:	4608      	mov	r0, r1
 802ad9a:	602b      	str	r3, [r5, #0]
 802ad9c:	f7de fcd2 	bl	8009744 <_sbrk>
 802ada0:	1c43      	adds	r3, r0, #1
 802ada2:	d102      	bne.n	802adaa <_sbrk_r+0x1a>
 802ada4:	682b      	ldr	r3, [r5, #0]
 802ada6:	b103      	cbz	r3, 802adaa <_sbrk_r+0x1a>
 802ada8:	6023      	str	r3, [r4, #0]
 802adaa:	bd38      	pop	{r3, r4, r5, pc}
 802adac:	20003e84 	.word	0x20003e84

0802adb0 <nanf>:
 802adb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802adb8 <nanf+0x8>
 802adb4:	4770      	bx	lr
 802adb6:	bf00      	nop
 802adb8:	7fc00000 	.word	0x7fc00000

0802adbc <__sread>:
 802adbc:	b510      	push	{r4, lr}
 802adbe:	460c      	mov	r4, r1
 802adc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802adc4:	f000 fa80 	bl	802b2c8 <_read_r>
 802adc8:	2800      	cmp	r0, #0
 802adca:	bfab      	itete	ge
 802adcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802adce:	89a3      	ldrhlt	r3, [r4, #12]
 802add0:	181b      	addge	r3, r3, r0
 802add2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802add6:	bfac      	ite	ge
 802add8:	6563      	strge	r3, [r4, #84]	; 0x54
 802adda:	81a3      	strhlt	r3, [r4, #12]
 802addc:	bd10      	pop	{r4, pc}

0802adde <__swrite>:
 802adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ade2:	461f      	mov	r7, r3
 802ade4:	898b      	ldrh	r3, [r1, #12]
 802ade6:	05db      	lsls	r3, r3, #23
 802ade8:	4605      	mov	r5, r0
 802adea:	460c      	mov	r4, r1
 802adec:	4616      	mov	r6, r2
 802adee:	d505      	bpl.n	802adfc <__swrite+0x1e>
 802adf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802adf4:	2302      	movs	r3, #2
 802adf6:	2200      	movs	r2, #0
 802adf8:	f000 f8b8 	bl	802af6c <_lseek_r>
 802adfc:	89a3      	ldrh	r3, [r4, #12]
 802adfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ae02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ae06:	81a3      	strh	r3, [r4, #12]
 802ae08:	4632      	mov	r2, r6
 802ae0a:	463b      	mov	r3, r7
 802ae0c:	4628      	mov	r0, r5
 802ae0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ae12:	f000 b837 	b.w	802ae84 <_write_r>

0802ae16 <__sseek>:
 802ae16:	b510      	push	{r4, lr}
 802ae18:	460c      	mov	r4, r1
 802ae1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ae1e:	f000 f8a5 	bl	802af6c <_lseek_r>
 802ae22:	1c43      	adds	r3, r0, #1
 802ae24:	89a3      	ldrh	r3, [r4, #12]
 802ae26:	bf15      	itete	ne
 802ae28:	6560      	strne	r0, [r4, #84]	; 0x54
 802ae2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ae2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ae32:	81a3      	strheq	r3, [r4, #12]
 802ae34:	bf18      	it	ne
 802ae36:	81a3      	strhne	r3, [r4, #12]
 802ae38:	bd10      	pop	{r4, pc}

0802ae3a <__sclose>:
 802ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ae3e:	f000 b851 	b.w	802aee4 <_close_r>

0802ae42 <strncmp>:
 802ae42:	b510      	push	{r4, lr}
 802ae44:	b17a      	cbz	r2, 802ae66 <strncmp+0x24>
 802ae46:	4603      	mov	r3, r0
 802ae48:	3901      	subs	r1, #1
 802ae4a:	1884      	adds	r4, r0, r2
 802ae4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 802ae50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ae54:	4290      	cmp	r0, r2
 802ae56:	d101      	bne.n	802ae5c <strncmp+0x1a>
 802ae58:	42a3      	cmp	r3, r4
 802ae5a:	d101      	bne.n	802ae60 <strncmp+0x1e>
 802ae5c:	1a80      	subs	r0, r0, r2
 802ae5e:	bd10      	pop	{r4, pc}
 802ae60:	2800      	cmp	r0, #0
 802ae62:	d1f3      	bne.n	802ae4c <strncmp+0xa>
 802ae64:	e7fa      	b.n	802ae5c <strncmp+0x1a>
 802ae66:	4610      	mov	r0, r2
 802ae68:	e7f9      	b.n	802ae5e <strncmp+0x1c>

0802ae6a <__ascii_wctomb>:
 802ae6a:	b149      	cbz	r1, 802ae80 <__ascii_wctomb+0x16>
 802ae6c:	2aff      	cmp	r2, #255	; 0xff
 802ae6e:	bf85      	ittet	hi
 802ae70:	238a      	movhi	r3, #138	; 0x8a
 802ae72:	6003      	strhi	r3, [r0, #0]
 802ae74:	700a      	strbls	r2, [r1, #0]
 802ae76:	f04f 30ff 	movhi.w	r0, #4294967295
 802ae7a:	bf98      	it	ls
 802ae7c:	2001      	movls	r0, #1
 802ae7e:	4770      	bx	lr
 802ae80:	4608      	mov	r0, r1
 802ae82:	4770      	bx	lr

0802ae84 <_write_r>:
 802ae84:	b538      	push	{r3, r4, r5, lr}
 802ae86:	4d07      	ldr	r5, [pc, #28]	; (802aea4 <_write_r+0x20>)
 802ae88:	4604      	mov	r4, r0
 802ae8a:	4608      	mov	r0, r1
 802ae8c:	4611      	mov	r1, r2
 802ae8e:	2200      	movs	r2, #0
 802ae90:	602a      	str	r2, [r5, #0]
 802ae92:	461a      	mov	r2, r3
 802ae94:	f7de fc05 	bl	80096a2 <_write>
 802ae98:	1c43      	adds	r3, r0, #1
 802ae9a:	d102      	bne.n	802aea2 <_write_r+0x1e>
 802ae9c:	682b      	ldr	r3, [r5, #0]
 802ae9e:	b103      	cbz	r3, 802aea2 <_write_r+0x1e>
 802aea0:	6023      	str	r3, [r4, #0]
 802aea2:	bd38      	pop	{r3, r4, r5, pc}
 802aea4:	20003e84 	.word	0x20003e84

0802aea8 <__assert_func>:
 802aea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802aeaa:	4614      	mov	r4, r2
 802aeac:	461a      	mov	r2, r3
 802aeae:	4b09      	ldr	r3, [pc, #36]	; (802aed4 <__assert_func+0x2c>)
 802aeb0:	681b      	ldr	r3, [r3, #0]
 802aeb2:	4605      	mov	r5, r0
 802aeb4:	68d8      	ldr	r0, [r3, #12]
 802aeb6:	b14c      	cbz	r4, 802aecc <__assert_func+0x24>
 802aeb8:	4b07      	ldr	r3, [pc, #28]	; (802aed8 <__assert_func+0x30>)
 802aeba:	9100      	str	r1, [sp, #0]
 802aebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802aec0:	4906      	ldr	r1, [pc, #24]	; (802aedc <__assert_func+0x34>)
 802aec2:	462b      	mov	r3, r5
 802aec4:	f000 f81e 	bl	802af04 <fiprintf>
 802aec8:	f000 fa10 	bl	802b2ec <abort>
 802aecc:	4b04      	ldr	r3, [pc, #16]	; (802aee0 <__assert_func+0x38>)
 802aece:	461c      	mov	r4, r3
 802aed0:	e7f3      	b.n	802aeba <__assert_func+0x12>
 802aed2:	bf00      	nop
 802aed4:	200004d0 	.word	0x200004d0
 802aed8:	0802d017 	.word	0x0802d017
 802aedc:	0802d024 	.word	0x0802d024
 802aee0:	0802d052 	.word	0x0802d052

0802aee4 <_close_r>:
 802aee4:	b538      	push	{r3, r4, r5, lr}
 802aee6:	4d06      	ldr	r5, [pc, #24]	; (802af00 <_close_r+0x1c>)
 802aee8:	2300      	movs	r3, #0
 802aeea:	4604      	mov	r4, r0
 802aeec:	4608      	mov	r0, r1
 802aeee:	602b      	str	r3, [r5, #0]
 802aef0:	f7de fbf3 	bl	80096da <_close>
 802aef4:	1c43      	adds	r3, r0, #1
 802aef6:	d102      	bne.n	802aefe <_close_r+0x1a>
 802aef8:	682b      	ldr	r3, [r5, #0]
 802aefa:	b103      	cbz	r3, 802aefe <_close_r+0x1a>
 802aefc:	6023      	str	r3, [r4, #0]
 802aefe:	bd38      	pop	{r3, r4, r5, pc}
 802af00:	20003e84 	.word	0x20003e84

0802af04 <fiprintf>:
 802af04:	b40e      	push	{r1, r2, r3}
 802af06:	b503      	push	{r0, r1, lr}
 802af08:	4601      	mov	r1, r0
 802af0a:	ab03      	add	r3, sp, #12
 802af0c:	4805      	ldr	r0, [pc, #20]	; (802af24 <fiprintf+0x20>)
 802af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 802af12:	6800      	ldr	r0, [r0, #0]
 802af14:	9301      	str	r3, [sp, #4]
 802af16:	f000 f8a7 	bl	802b068 <_vfiprintf_r>
 802af1a:	b002      	add	sp, #8
 802af1c:	f85d eb04 	ldr.w	lr, [sp], #4
 802af20:	b003      	add	sp, #12
 802af22:	4770      	bx	lr
 802af24:	200004d0 	.word	0x200004d0

0802af28 <_fstat_r>:
 802af28:	b538      	push	{r3, r4, r5, lr}
 802af2a:	4d07      	ldr	r5, [pc, #28]	; (802af48 <_fstat_r+0x20>)
 802af2c:	2300      	movs	r3, #0
 802af2e:	4604      	mov	r4, r0
 802af30:	4608      	mov	r0, r1
 802af32:	4611      	mov	r1, r2
 802af34:	602b      	str	r3, [r5, #0]
 802af36:	f7de fbdc 	bl	80096f2 <_fstat>
 802af3a:	1c43      	adds	r3, r0, #1
 802af3c:	d102      	bne.n	802af44 <_fstat_r+0x1c>
 802af3e:	682b      	ldr	r3, [r5, #0]
 802af40:	b103      	cbz	r3, 802af44 <_fstat_r+0x1c>
 802af42:	6023      	str	r3, [r4, #0]
 802af44:	bd38      	pop	{r3, r4, r5, pc}
 802af46:	bf00      	nop
 802af48:	20003e84 	.word	0x20003e84

0802af4c <_isatty_r>:
 802af4c:	b538      	push	{r3, r4, r5, lr}
 802af4e:	4d06      	ldr	r5, [pc, #24]	; (802af68 <_isatty_r+0x1c>)
 802af50:	2300      	movs	r3, #0
 802af52:	4604      	mov	r4, r0
 802af54:	4608      	mov	r0, r1
 802af56:	602b      	str	r3, [r5, #0]
 802af58:	f7de fbdb 	bl	8009712 <_isatty>
 802af5c:	1c43      	adds	r3, r0, #1
 802af5e:	d102      	bne.n	802af66 <_isatty_r+0x1a>
 802af60:	682b      	ldr	r3, [r5, #0]
 802af62:	b103      	cbz	r3, 802af66 <_isatty_r+0x1a>
 802af64:	6023      	str	r3, [r4, #0]
 802af66:	bd38      	pop	{r3, r4, r5, pc}
 802af68:	20003e84 	.word	0x20003e84

0802af6c <_lseek_r>:
 802af6c:	b538      	push	{r3, r4, r5, lr}
 802af6e:	4d07      	ldr	r5, [pc, #28]	; (802af8c <_lseek_r+0x20>)
 802af70:	4604      	mov	r4, r0
 802af72:	4608      	mov	r0, r1
 802af74:	4611      	mov	r1, r2
 802af76:	2200      	movs	r2, #0
 802af78:	602a      	str	r2, [r5, #0]
 802af7a:	461a      	mov	r2, r3
 802af7c:	f7de fbd4 	bl	8009728 <_lseek>
 802af80:	1c43      	adds	r3, r0, #1
 802af82:	d102      	bne.n	802af8a <_lseek_r+0x1e>
 802af84:	682b      	ldr	r3, [r5, #0]
 802af86:	b103      	cbz	r3, 802af8a <_lseek_r+0x1e>
 802af88:	6023      	str	r3, [r4, #0]
 802af8a:	bd38      	pop	{r3, r4, r5, pc}
 802af8c:	20003e84 	.word	0x20003e84

0802af90 <malloc>:
 802af90:	4b02      	ldr	r3, [pc, #8]	; (802af9c <malloc+0xc>)
 802af92:	4601      	mov	r1, r0
 802af94:	6818      	ldr	r0, [r3, #0]
 802af96:	f7ff bb8f 	b.w	802a6b8 <_malloc_r>
 802af9a:	bf00      	nop
 802af9c:	200004d0 	.word	0x200004d0

0802afa0 <__malloc_lock>:
 802afa0:	4801      	ldr	r0, [pc, #4]	; (802afa8 <__malloc_lock+0x8>)
 802afa2:	f7fe bdcc 	b.w	8029b3e <__retarget_lock_acquire_recursive>
 802afa6:	bf00      	nop
 802afa8:	20003ed0 	.word	0x20003ed0

0802afac <__malloc_unlock>:
 802afac:	4801      	ldr	r0, [pc, #4]	; (802afb4 <__malloc_unlock+0x8>)
 802afae:	f7fe bdc7 	b.w	8029b40 <__retarget_lock_release_recursive>
 802afb2:	bf00      	nop
 802afb4:	20003ed0 	.word	0x20003ed0

0802afb8 <_realloc_r>:
 802afb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802afbc:	4680      	mov	r8, r0
 802afbe:	4614      	mov	r4, r2
 802afc0:	460e      	mov	r6, r1
 802afc2:	b921      	cbnz	r1, 802afce <_realloc_r+0x16>
 802afc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802afc8:	4611      	mov	r1, r2
 802afca:	f7ff bb75 	b.w	802a6b8 <_malloc_r>
 802afce:	b92a      	cbnz	r2, 802afdc <_realloc_r+0x24>
 802afd0:	f7ff fb06 	bl	802a5e0 <_free_r>
 802afd4:	4625      	mov	r5, r4
 802afd6:	4628      	mov	r0, r5
 802afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802afdc:	f000 f98d 	bl	802b2fa <_malloc_usable_size_r>
 802afe0:	4284      	cmp	r4, r0
 802afe2:	4607      	mov	r7, r0
 802afe4:	d802      	bhi.n	802afec <_realloc_r+0x34>
 802afe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802afea:	d812      	bhi.n	802b012 <_realloc_r+0x5a>
 802afec:	4621      	mov	r1, r4
 802afee:	4640      	mov	r0, r8
 802aff0:	f7ff fb62 	bl	802a6b8 <_malloc_r>
 802aff4:	4605      	mov	r5, r0
 802aff6:	2800      	cmp	r0, #0
 802aff8:	d0ed      	beq.n	802afd6 <_realloc_r+0x1e>
 802affa:	42bc      	cmp	r4, r7
 802affc:	4622      	mov	r2, r4
 802affe:	4631      	mov	r1, r6
 802b000:	bf28      	it	cs
 802b002:	463a      	movcs	r2, r7
 802b004:	f7fd f80e 	bl	8028024 <memcpy>
 802b008:	4631      	mov	r1, r6
 802b00a:	4640      	mov	r0, r8
 802b00c:	f7ff fae8 	bl	802a5e0 <_free_r>
 802b010:	e7e1      	b.n	802afd6 <_realloc_r+0x1e>
 802b012:	4635      	mov	r5, r6
 802b014:	e7df      	b.n	802afd6 <_realloc_r+0x1e>

0802b016 <__sfputc_r>:
 802b016:	6893      	ldr	r3, [r2, #8]
 802b018:	3b01      	subs	r3, #1
 802b01a:	2b00      	cmp	r3, #0
 802b01c:	b410      	push	{r4}
 802b01e:	6093      	str	r3, [r2, #8]
 802b020:	da08      	bge.n	802b034 <__sfputc_r+0x1e>
 802b022:	6994      	ldr	r4, [r2, #24]
 802b024:	42a3      	cmp	r3, r4
 802b026:	db01      	blt.n	802b02c <__sfputc_r+0x16>
 802b028:	290a      	cmp	r1, #10
 802b02a:	d103      	bne.n	802b034 <__sfputc_r+0x1e>
 802b02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b030:	f7fd bf9e 	b.w	8028f70 <__swbuf_r>
 802b034:	6813      	ldr	r3, [r2, #0]
 802b036:	1c58      	adds	r0, r3, #1
 802b038:	6010      	str	r0, [r2, #0]
 802b03a:	7019      	strb	r1, [r3, #0]
 802b03c:	4608      	mov	r0, r1
 802b03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b042:	4770      	bx	lr

0802b044 <__sfputs_r>:
 802b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b046:	4606      	mov	r6, r0
 802b048:	460f      	mov	r7, r1
 802b04a:	4614      	mov	r4, r2
 802b04c:	18d5      	adds	r5, r2, r3
 802b04e:	42ac      	cmp	r4, r5
 802b050:	d101      	bne.n	802b056 <__sfputs_r+0x12>
 802b052:	2000      	movs	r0, #0
 802b054:	e007      	b.n	802b066 <__sfputs_r+0x22>
 802b056:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b05a:	463a      	mov	r2, r7
 802b05c:	4630      	mov	r0, r6
 802b05e:	f7ff ffda 	bl	802b016 <__sfputc_r>
 802b062:	1c43      	adds	r3, r0, #1
 802b064:	d1f3      	bne.n	802b04e <__sfputs_r+0xa>
 802b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802b068 <_vfiprintf_r>:
 802b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b06c:	460d      	mov	r5, r1
 802b06e:	b09d      	sub	sp, #116	; 0x74
 802b070:	4614      	mov	r4, r2
 802b072:	4698      	mov	r8, r3
 802b074:	4606      	mov	r6, r0
 802b076:	b118      	cbz	r0, 802b080 <_vfiprintf_r+0x18>
 802b078:	6983      	ldr	r3, [r0, #24]
 802b07a:	b90b      	cbnz	r3, 802b080 <_vfiprintf_r+0x18>
 802b07c:	f7fe f952 	bl	8029324 <__sinit>
 802b080:	4b89      	ldr	r3, [pc, #548]	; (802b2a8 <_vfiprintf_r+0x240>)
 802b082:	429d      	cmp	r5, r3
 802b084:	d11b      	bne.n	802b0be <_vfiprintf_r+0x56>
 802b086:	6875      	ldr	r5, [r6, #4]
 802b088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b08a:	07d9      	lsls	r1, r3, #31
 802b08c:	d405      	bmi.n	802b09a <_vfiprintf_r+0x32>
 802b08e:	89ab      	ldrh	r3, [r5, #12]
 802b090:	059a      	lsls	r2, r3, #22
 802b092:	d402      	bmi.n	802b09a <_vfiprintf_r+0x32>
 802b094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b096:	f7fe fd52 	bl	8029b3e <__retarget_lock_acquire_recursive>
 802b09a:	89ab      	ldrh	r3, [r5, #12]
 802b09c:	071b      	lsls	r3, r3, #28
 802b09e:	d501      	bpl.n	802b0a4 <_vfiprintf_r+0x3c>
 802b0a0:	692b      	ldr	r3, [r5, #16]
 802b0a2:	b9eb      	cbnz	r3, 802b0e0 <_vfiprintf_r+0x78>
 802b0a4:	4629      	mov	r1, r5
 802b0a6:	4630      	mov	r0, r6
 802b0a8:	f7fd ffb4 	bl	8029014 <__swsetup_r>
 802b0ac:	b1c0      	cbz	r0, 802b0e0 <_vfiprintf_r+0x78>
 802b0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b0b0:	07dc      	lsls	r4, r3, #31
 802b0b2:	d50e      	bpl.n	802b0d2 <_vfiprintf_r+0x6a>
 802b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 802b0b8:	b01d      	add	sp, #116	; 0x74
 802b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0be:	4b7b      	ldr	r3, [pc, #492]	; (802b2ac <_vfiprintf_r+0x244>)
 802b0c0:	429d      	cmp	r5, r3
 802b0c2:	d101      	bne.n	802b0c8 <_vfiprintf_r+0x60>
 802b0c4:	68b5      	ldr	r5, [r6, #8]
 802b0c6:	e7df      	b.n	802b088 <_vfiprintf_r+0x20>
 802b0c8:	4b79      	ldr	r3, [pc, #484]	; (802b2b0 <_vfiprintf_r+0x248>)
 802b0ca:	429d      	cmp	r5, r3
 802b0cc:	bf08      	it	eq
 802b0ce:	68f5      	ldreq	r5, [r6, #12]
 802b0d0:	e7da      	b.n	802b088 <_vfiprintf_r+0x20>
 802b0d2:	89ab      	ldrh	r3, [r5, #12]
 802b0d4:	0598      	lsls	r0, r3, #22
 802b0d6:	d4ed      	bmi.n	802b0b4 <_vfiprintf_r+0x4c>
 802b0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b0da:	f7fe fd31 	bl	8029b40 <__retarget_lock_release_recursive>
 802b0de:	e7e9      	b.n	802b0b4 <_vfiprintf_r+0x4c>
 802b0e0:	2300      	movs	r3, #0
 802b0e2:	9309      	str	r3, [sp, #36]	; 0x24
 802b0e4:	2320      	movs	r3, #32
 802b0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 802b0ee:	2330      	movs	r3, #48	; 0x30
 802b0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802b2b4 <_vfiprintf_r+0x24c>
 802b0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b0f8:	f04f 0901 	mov.w	r9, #1
 802b0fc:	4623      	mov	r3, r4
 802b0fe:	469a      	mov	sl, r3
 802b100:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b104:	b10a      	cbz	r2, 802b10a <_vfiprintf_r+0xa2>
 802b106:	2a25      	cmp	r2, #37	; 0x25
 802b108:	d1f9      	bne.n	802b0fe <_vfiprintf_r+0x96>
 802b10a:	ebba 0b04 	subs.w	fp, sl, r4
 802b10e:	d00b      	beq.n	802b128 <_vfiprintf_r+0xc0>
 802b110:	465b      	mov	r3, fp
 802b112:	4622      	mov	r2, r4
 802b114:	4629      	mov	r1, r5
 802b116:	4630      	mov	r0, r6
 802b118:	f7ff ff94 	bl	802b044 <__sfputs_r>
 802b11c:	3001      	adds	r0, #1
 802b11e:	f000 80aa 	beq.w	802b276 <_vfiprintf_r+0x20e>
 802b122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b124:	445a      	add	r2, fp
 802b126:	9209      	str	r2, [sp, #36]	; 0x24
 802b128:	f89a 3000 	ldrb.w	r3, [sl]
 802b12c:	2b00      	cmp	r3, #0
 802b12e:	f000 80a2 	beq.w	802b276 <_vfiprintf_r+0x20e>
 802b132:	2300      	movs	r3, #0
 802b134:	f04f 32ff 	mov.w	r2, #4294967295
 802b138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b13c:	f10a 0a01 	add.w	sl, sl, #1
 802b140:	9304      	str	r3, [sp, #16]
 802b142:	9307      	str	r3, [sp, #28]
 802b144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b148:	931a      	str	r3, [sp, #104]	; 0x68
 802b14a:	4654      	mov	r4, sl
 802b14c:	2205      	movs	r2, #5
 802b14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b152:	4858      	ldr	r0, [pc, #352]	; (802b2b4 <_vfiprintf_r+0x24c>)
 802b154:	f7dc ff8c 	bl	8008070 <memchr>
 802b158:	9a04      	ldr	r2, [sp, #16]
 802b15a:	b9d8      	cbnz	r0, 802b194 <_vfiprintf_r+0x12c>
 802b15c:	06d1      	lsls	r1, r2, #27
 802b15e:	bf44      	itt	mi
 802b160:	2320      	movmi	r3, #32
 802b162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b166:	0713      	lsls	r3, r2, #28
 802b168:	bf44      	itt	mi
 802b16a:	232b      	movmi	r3, #43	; 0x2b
 802b16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b170:	f89a 3000 	ldrb.w	r3, [sl]
 802b174:	2b2a      	cmp	r3, #42	; 0x2a
 802b176:	d015      	beq.n	802b1a4 <_vfiprintf_r+0x13c>
 802b178:	9a07      	ldr	r2, [sp, #28]
 802b17a:	4654      	mov	r4, sl
 802b17c:	2000      	movs	r0, #0
 802b17e:	f04f 0c0a 	mov.w	ip, #10
 802b182:	4621      	mov	r1, r4
 802b184:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b188:	3b30      	subs	r3, #48	; 0x30
 802b18a:	2b09      	cmp	r3, #9
 802b18c:	d94e      	bls.n	802b22c <_vfiprintf_r+0x1c4>
 802b18e:	b1b0      	cbz	r0, 802b1be <_vfiprintf_r+0x156>
 802b190:	9207      	str	r2, [sp, #28]
 802b192:	e014      	b.n	802b1be <_vfiprintf_r+0x156>
 802b194:	eba0 0308 	sub.w	r3, r0, r8
 802b198:	fa09 f303 	lsl.w	r3, r9, r3
 802b19c:	4313      	orrs	r3, r2
 802b19e:	9304      	str	r3, [sp, #16]
 802b1a0:	46a2      	mov	sl, r4
 802b1a2:	e7d2      	b.n	802b14a <_vfiprintf_r+0xe2>
 802b1a4:	9b03      	ldr	r3, [sp, #12]
 802b1a6:	1d19      	adds	r1, r3, #4
 802b1a8:	681b      	ldr	r3, [r3, #0]
 802b1aa:	9103      	str	r1, [sp, #12]
 802b1ac:	2b00      	cmp	r3, #0
 802b1ae:	bfbb      	ittet	lt
 802b1b0:	425b      	neglt	r3, r3
 802b1b2:	f042 0202 	orrlt.w	r2, r2, #2
 802b1b6:	9307      	strge	r3, [sp, #28]
 802b1b8:	9307      	strlt	r3, [sp, #28]
 802b1ba:	bfb8      	it	lt
 802b1bc:	9204      	strlt	r2, [sp, #16]
 802b1be:	7823      	ldrb	r3, [r4, #0]
 802b1c0:	2b2e      	cmp	r3, #46	; 0x2e
 802b1c2:	d10c      	bne.n	802b1de <_vfiprintf_r+0x176>
 802b1c4:	7863      	ldrb	r3, [r4, #1]
 802b1c6:	2b2a      	cmp	r3, #42	; 0x2a
 802b1c8:	d135      	bne.n	802b236 <_vfiprintf_r+0x1ce>
 802b1ca:	9b03      	ldr	r3, [sp, #12]
 802b1cc:	1d1a      	adds	r2, r3, #4
 802b1ce:	681b      	ldr	r3, [r3, #0]
 802b1d0:	9203      	str	r2, [sp, #12]
 802b1d2:	2b00      	cmp	r3, #0
 802b1d4:	bfb8      	it	lt
 802b1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 802b1da:	3402      	adds	r4, #2
 802b1dc:	9305      	str	r3, [sp, #20]
 802b1de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802b2c4 <_vfiprintf_r+0x25c>
 802b1e2:	7821      	ldrb	r1, [r4, #0]
 802b1e4:	2203      	movs	r2, #3
 802b1e6:	4650      	mov	r0, sl
 802b1e8:	f7dc ff42 	bl	8008070 <memchr>
 802b1ec:	b140      	cbz	r0, 802b200 <_vfiprintf_r+0x198>
 802b1ee:	2340      	movs	r3, #64	; 0x40
 802b1f0:	eba0 000a 	sub.w	r0, r0, sl
 802b1f4:	fa03 f000 	lsl.w	r0, r3, r0
 802b1f8:	9b04      	ldr	r3, [sp, #16]
 802b1fa:	4303      	orrs	r3, r0
 802b1fc:	3401      	adds	r4, #1
 802b1fe:	9304      	str	r3, [sp, #16]
 802b200:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b204:	482c      	ldr	r0, [pc, #176]	; (802b2b8 <_vfiprintf_r+0x250>)
 802b206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b20a:	2206      	movs	r2, #6
 802b20c:	f7dc ff30 	bl	8008070 <memchr>
 802b210:	2800      	cmp	r0, #0
 802b212:	d03f      	beq.n	802b294 <_vfiprintf_r+0x22c>
 802b214:	4b29      	ldr	r3, [pc, #164]	; (802b2bc <_vfiprintf_r+0x254>)
 802b216:	bb1b      	cbnz	r3, 802b260 <_vfiprintf_r+0x1f8>
 802b218:	9b03      	ldr	r3, [sp, #12]
 802b21a:	3307      	adds	r3, #7
 802b21c:	f023 0307 	bic.w	r3, r3, #7
 802b220:	3308      	adds	r3, #8
 802b222:	9303      	str	r3, [sp, #12]
 802b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b226:	443b      	add	r3, r7
 802b228:	9309      	str	r3, [sp, #36]	; 0x24
 802b22a:	e767      	b.n	802b0fc <_vfiprintf_r+0x94>
 802b22c:	fb0c 3202 	mla	r2, ip, r2, r3
 802b230:	460c      	mov	r4, r1
 802b232:	2001      	movs	r0, #1
 802b234:	e7a5      	b.n	802b182 <_vfiprintf_r+0x11a>
 802b236:	2300      	movs	r3, #0
 802b238:	3401      	adds	r4, #1
 802b23a:	9305      	str	r3, [sp, #20]
 802b23c:	4619      	mov	r1, r3
 802b23e:	f04f 0c0a 	mov.w	ip, #10
 802b242:	4620      	mov	r0, r4
 802b244:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b248:	3a30      	subs	r2, #48	; 0x30
 802b24a:	2a09      	cmp	r2, #9
 802b24c:	d903      	bls.n	802b256 <_vfiprintf_r+0x1ee>
 802b24e:	2b00      	cmp	r3, #0
 802b250:	d0c5      	beq.n	802b1de <_vfiprintf_r+0x176>
 802b252:	9105      	str	r1, [sp, #20]
 802b254:	e7c3      	b.n	802b1de <_vfiprintf_r+0x176>
 802b256:	fb0c 2101 	mla	r1, ip, r1, r2
 802b25a:	4604      	mov	r4, r0
 802b25c:	2301      	movs	r3, #1
 802b25e:	e7f0      	b.n	802b242 <_vfiprintf_r+0x1da>
 802b260:	ab03      	add	r3, sp, #12
 802b262:	9300      	str	r3, [sp, #0]
 802b264:	462a      	mov	r2, r5
 802b266:	4b16      	ldr	r3, [pc, #88]	; (802b2c0 <_vfiprintf_r+0x258>)
 802b268:	a904      	add	r1, sp, #16
 802b26a:	4630      	mov	r0, r6
 802b26c:	f3af 8000 	nop.w
 802b270:	4607      	mov	r7, r0
 802b272:	1c78      	adds	r0, r7, #1
 802b274:	d1d6      	bne.n	802b224 <_vfiprintf_r+0x1bc>
 802b276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b278:	07d9      	lsls	r1, r3, #31
 802b27a:	d405      	bmi.n	802b288 <_vfiprintf_r+0x220>
 802b27c:	89ab      	ldrh	r3, [r5, #12]
 802b27e:	059a      	lsls	r2, r3, #22
 802b280:	d402      	bmi.n	802b288 <_vfiprintf_r+0x220>
 802b282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b284:	f7fe fc5c 	bl	8029b40 <__retarget_lock_release_recursive>
 802b288:	89ab      	ldrh	r3, [r5, #12]
 802b28a:	065b      	lsls	r3, r3, #25
 802b28c:	f53f af12 	bmi.w	802b0b4 <_vfiprintf_r+0x4c>
 802b290:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b292:	e711      	b.n	802b0b8 <_vfiprintf_r+0x50>
 802b294:	ab03      	add	r3, sp, #12
 802b296:	9300      	str	r3, [sp, #0]
 802b298:	462a      	mov	r2, r5
 802b29a:	4b09      	ldr	r3, [pc, #36]	; (802b2c0 <_vfiprintf_r+0x258>)
 802b29c:	a904      	add	r1, sp, #16
 802b29e:	4630      	mov	r0, r6
 802b2a0:	f7ff fc48 	bl	802ab34 <_printf_i>
 802b2a4:	e7e4      	b.n	802b270 <_vfiprintf_r+0x208>
 802b2a6:	bf00      	nop
 802b2a8:	0802cda8 	.word	0x0802cda8
 802b2ac:	0802cdc8 	.word	0x0802cdc8
 802b2b0:	0802cd88 	.word	0x0802cd88
 802b2b4:	0802cfe4 	.word	0x0802cfe4
 802b2b8:	0802cfee 	.word	0x0802cfee
 802b2bc:	00000000 	.word	0x00000000
 802b2c0:	0802b045 	.word	0x0802b045
 802b2c4:	0802cfea 	.word	0x0802cfea

0802b2c8 <_read_r>:
 802b2c8:	b538      	push	{r3, r4, r5, lr}
 802b2ca:	4d07      	ldr	r5, [pc, #28]	; (802b2e8 <_read_r+0x20>)
 802b2cc:	4604      	mov	r4, r0
 802b2ce:	4608      	mov	r0, r1
 802b2d0:	4611      	mov	r1, r2
 802b2d2:	2200      	movs	r2, #0
 802b2d4:	602a      	str	r2, [r5, #0]
 802b2d6:	461a      	mov	r2, r3
 802b2d8:	f7de f9c6 	bl	8009668 <_read>
 802b2dc:	1c43      	adds	r3, r0, #1
 802b2de:	d102      	bne.n	802b2e6 <_read_r+0x1e>
 802b2e0:	682b      	ldr	r3, [r5, #0]
 802b2e2:	b103      	cbz	r3, 802b2e6 <_read_r+0x1e>
 802b2e4:	6023      	str	r3, [r4, #0]
 802b2e6:	bd38      	pop	{r3, r4, r5, pc}
 802b2e8:	20003e84 	.word	0x20003e84

0802b2ec <abort>:
 802b2ec:	b508      	push	{r3, lr}
 802b2ee:	2006      	movs	r0, #6
 802b2f0:	f000 f834 	bl	802b35c <raise>
 802b2f4:	2001      	movs	r0, #1
 802b2f6:	f7de f9ad 	bl	8009654 <_exit>

0802b2fa <_malloc_usable_size_r>:
 802b2fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b2fe:	1f18      	subs	r0, r3, #4
 802b300:	2b00      	cmp	r3, #0
 802b302:	bfbc      	itt	lt
 802b304:	580b      	ldrlt	r3, [r1, r0]
 802b306:	18c0      	addlt	r0, r0, r3
 802b308:	4770      	bx	lr

0802b30a <_raise_r>:
 802b30a:	291f      	cmp	r1, #31
 802b30c:	b538      	push	{r3, r4, r5, lr}
 802b30e:	4604      	mov	r4, r0
 802b310:	460d      	mov	r5, r1
 802b312:	d904      	bls.n	802b31e <_raise_r+0x14>
 802b314:	2316      	movs	r3, #22
 802b316:	6003      	str	r3, [r0, #0]
 802b318:	f04f 30ff 	mov.w	r0, #4294967295
 802b31c:	bd38      	pop	{r3, r4, r5, pc}
 802b31e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b320:	b112      	cbz	r2, 802b328 <_raise_r+0x1e>
 802b322:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b326:	b94b      	cbnz	r3, 802b33c <_raise_r+0x32>
 802b328:	4620      	mov	r0, r4
 802b32a:	f000 f831 	bl	802b390 <_getpid_r>
 802b32e:	462a      	mov	r2, r5
 802b330:	4601      	mov	r1, r0
 802b332:	4620      	mov	r0, r4
 802b334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b338:	f000 b818 	b.w	802b36c <_kill_r>
 802b33c:	2b01      	cmp	r3, #1
 802b33e:	d00a      	beq.n	802b356 <_raise_r+0x4c>
 802b340:	1c59      	adds	r1, r3, #1
 802b342:	d103      	bne.n	802b34c <_raise_r+0x42>
 802b344:	2316      	movs	r3, #22
 802b346:	6003      	str	r3, [r0, #0]
 802b348:	2001      	movs	r0, #1
 802b34a:	e7e7      	b.n	802b31c <_raise_r+0x12>
 802b34c:	2400      	movs	r4, #0
 802b34e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b352:	4628      	mov	r0, r5
 802b354:	4798      	blx	r3
 802b356:	2000      	movs	r0, #0
 802b358:	e7e0      	b.n	802b31c <_raise_r+0x12>
	...

0802b35c <raise>:
 802b35c:	4b02      	ldr	r3, [pc, #8]	; (802b368 <raise+0xc>)
 802b35e:	4601      	mov	r1, r0
 802b360:	6818      	ldr	r0, [r3, #0]
 802b362:	f7ff bfd2 	b.w	802b30a <_raise_r>
 802b366:	bf00      	nop
 802b368:	200004d0 	.word	0x200004d0

0802b36c <_kill_r>:
 802b36c:	b538      	push	{r3, r4, r5, lr}
 802b36e:	4d07      	ldr	r5, [pc, #28]	; (802b38c <_kill_r+0x20>)
 802b370:	2300      	movs	r3, #0
 802b372:	4604      	mov	r4, r0
 802b374:	4608      	mov	r0, r1
 802b376:	4611      	mov	r1, r2
 802b378:	602b      	str	r3, [r5, #0]
 802b37a:	f7de f95b 	bl	8009634 <_kill>
 802b37e:	1c43      	adds	r3, r0, #1
 802b380:	d102      	bne.n	802b388 <_kill_r+0x1c>
 802b382:	682b      	ldr	r3, [r5, #0]
 802b384:	b103      	cbz	r3, 802b388 <_kill_r+0x1c>
 802b386:	6023      	str	r3, [r4, #0]
 802b388:	bd38      	pop	{r3, r4, r5, pc}
 802b38a:	bf00      	nop
 802b38c:	20003e84 	.word	0x20003e84

0802b390 <_getpid_r>:
 802b390:	f7de b948 	b.w	8009624 <_getpid>

0802b394 <lrintf>:
 802b394:	ee10 3a10 	vmov	r3, s0
 802b398:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b39c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 802b3a0:	281e      	cmp	r0, #30
 802b3a2:	b082      	sub	sp, #8
 802b3a4:	dc2e      	bgt.n	802b404 <lrintf+0x70>
 802b3a6:	1c41      	adds	r1, r0, #1
 802b3a8:	da02      	bge.n	802b3b0 <lrintf+0x1c>
 802b3aa:	2000      	movs	r0, #0
 802b3ac:	b002      	add	sp, #8
 802b3ae:	4770      	bx	lr
 802b3b0:	2816      	cmp	r0, #22
 802b3b2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 802b3b6:	dd09      	ble.n	802b3cc <lrintf+0x38>
 802b3b8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 802b3bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802b3c0:	3a96      	subs	r2, #150	; 0x96
 802b3c2:	4090      	lsls	r0, r2
 802b3c4:	2900      	cmp	r1, #0
 802b3c6:	d0f1      	beq.n	802b3ac <lrintf+0x18>
 802b3c8:	4240      	negs	r0, r0
 802b3ca:	e7ef      	b.n	802b3ac <lrintf+0x18>
 802b3cc:	4b10      	ldr	r3, [pc, #64]	; (802b410 <lrintf+0x7c>)
 802b3ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802b3d2:	ed93 7a00 	vldr	s14, [r3]
 802b3d6:	ee37 0a00 	vadd.f32	s0, s14, s0
 802b3da:	ed8d 0a01 	vstr	s0, [sp, #4]
 802b3de:	eddd 7a01 	vldr	s15, [sp, #4]
 802b3e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b3e6:	ee17 3a90 	vmov	r3, s15
 802b3ea:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802b3ee:	d0dc      	beq.n	802b3aa <lrintf+0x16>
 802b3f0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 802b3f4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 802b3f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802b3fc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802b400:	40d8      	lsrs	r0, r3
 802b402:	e7df      	b.n	802b3c4 <lrintf+0x30>
 802b404:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802b408:	ee17 0a90 	vmov	r0, s15
 802b40c:	e7ce      	b.n	802b3ac <lrintf+0x18>
 802b40e:	bf00      	nop
 802b410:	0802d054 	.word	0x0802d054

0802b414 <powf>:
 802b414:	b508      	push	{r3, lr}
 802b416:	ed2d 8b04 	vpush	{d8-d9}
 802b41a:	eeb0 8a60 	vmov.f32	s16, s1
 802b41e:	eeb0 9a40 	vmov.f32	s18, s0
 802b422:	f000 f86d 	bl	802b500 <__ieee754_powf>
 802b426:	eeb4 8a48 	vcmp.f32	s16, s16
 802b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b42e:	eef0 8a40 	vmov.f32	s17, s0
 802b432:	d63e      	bvs.n	802b4b2 <powf+0x9e>
 802b434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802b438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b43c:	d112      	bne.n	802b464 <powf+0x50>
 802b43e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802b442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b446:	d039      	beq.n	802b4bc <powf+0xa8>
 802b448:	eeb0 0a48 	vmov.f32	s0, s16
 802b44c:	f000 fb53 	bl	802baf6 <finitef>
 802b450:	b378      	cbz	r0, 802b4b2 <powf+0x9e>
 802b452:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802b456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b45a:	d52a      	bpl.n	802b4b2 <powf+0x9e>
 802b45c:	f7fc fdb8 	bl	8027fd0 <__errno>
 802b460:	2322      	movs	r3, #34	; 0x22
 802b462:	e014      	b.n	802b48e <powf+0x7a>
 802b464:	f000 fb47 	bl	802baf6 <finitef>
 802b468:	b998      	cbnz	r0, 802b492 <powf+0x7e>
 802b46a:	eeb0 0a49 	vmov.f32	s0, s18
 802b46e:	f000 fb42 	bl	802baf6 <finitef>
 802b472:	b170      	cbz	r0, 802b492 <powf+0x7e>
 802b474:	eeb0 0a48 	vmov.f32	s0, s16
 802b478:	f000 fb3d 	bl	802baf6 <finitef>
 802b47c:	b148      	cbz	r0, 802b492 <powf+0x7e>
 802b47e:	eef4 8a68 	vcmp.f32	s17, s17
 802b482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b486:	d7e9      	bvc.n	802b45c <powf+0x48>
 802b488:	f7fc fda2 	bl	8027fd0 <__errno>
 802b48c:	2321      	movs	r3, #33	; 0x21
 802b48e:	6003      	str	r3, [r0, #0]
 802b490:	e00f      	b.n	802b4b2 <powf+0x9e>
 802b492:	eef5 8a40 	vcmp.f32	s17, #0.0
 802b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b49a:	d10a      	bne.n	802b4b2 <powf+0x9e>
 802b49c:	eeb0 0a49 	vmov.f32	s0, s18
 802b4a0:	f000 fb29 	bl	802baf6 <finitef>
 802b4a4:	b128      	cbz	r0, 802b4b2 <powf+0x9e>
 802b4a6:	eeb0 0a48 	vmov.f32	s0, s16
 802b4aa:	f000 fb24 	bl	802baf6 <finitef>
 802b4ae:	2800      	cmp	r0, #0
 802b4b0:	d1d4      	bne.n	802b45c <powf+0x48>
 802b4b2:	eeb0 0a68 	vmov.f32	s0, s17
 802b4b6:	ecbd 8b04 	vpop	{d8-d9}
 802b4ba:	bd08      	pop	{r3, pc}
 802b4bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802b4c0:	e7f7      	b.n	802b4b2 <powf+0x9e>
	...

0802b4c4 <sqrtf>:
 802b4c4:	b508      	push	{r3, lr}
 802b4c6:	ed2d 8b02 	vpush	{d8}
 802b4ca:	eeb0 8a40 	vmov.f32	s16, s0
 802b4ce:	f000 fae5 	bl	802ba9c <__ieee754_sqrtf>
 802b4d2:	eeb4 8a48 	vcmp.f32	s16, s16
 802b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4da:	d60c      	bvs.n	802b4f6 <sqrtf+0x32>
 802b4dc:	eddf 8a07 	vldr	s17, [pc, #28]	; 802b4fc <sqrtf+0x38>
 802b4e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802b4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4e8:	d505      	bpl.n	802b4f6 <sqrtf+0x32>
 802b4ea:	f7fc fd71 	bl	8027fd0 <__errno>
 802b4ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802b4f2:	2321      	movs	r3, #33	; 0x21
 802b4f4:	6003      	str	r3, [r0, #0]
 802b4f6:	ecbd 8b02 	vpop	{d8}
 802b4fa:	bd08      	pop	{r3, pc}
 802b4fc:	00000000 	.word	0x00000000

0802b500 <__ieee754_powf>:
 802b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b504:	ee10 4a90 	vmov	r4, s1
 802b508:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 802b50c:	ed2d 8b02 	vpush	{d8}
 802b510:	ee10 6a10 	vmov	r6, s0
 802b514:	eeb0 8a40 	vmov.f32	s16, s0
 802b518:	eef0 8a60 	vmov.f32	s17, s1
 802b51c:	d10c      	bne.n	802b538 <__ieee754_powf+0x38>
 802b51e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 802b522:	0076      	lsls	r6, r6, #1
 802b524:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 802b528:	f240 8296 	bls.w	802ba58 <__ieee754_powf+0x558>
 802b52c:	ee38 0a28 	vadd.f32	s0, s16, s17
 802b530:	ecbd 8b02 	vpop	{d8}
 802b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b538:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802b53c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802b540:	dcf4      	bgt.n	802b52c <__ieee754_powf+0x2c>
 802b542:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802b546:	dd08      	ble.n	802b55a <__ieee754_powf+0x5a>
 802b548:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802b54c:	d1ee      	bne.n	802b52c <__ieee754_powf+0x2c>
 802b54e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802b552:	0064      	lsls	r4, r4, #1
 802b554:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 802b558:	e7e6      	b.n	802b528 <__ieee754_powf+0x28>
 802b55a:	2e00      	cmp	r6, #0
 802b55c:	da20      	bge.n	802b5a0 <__ieee754_powf+0xa0>
 802b55e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 802b562:	da2d      	bge.n	802b5c0 <__ieee754_powf+0xc0>
 802b564:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802b568:	f2c0 827f 	blt.w	802ba6a <__ieee754_powf+0x56a>
 802b56c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 802b570:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802b574:	fa48 f703 	asr.w	r7, r8, r3
 802b578:	fa07 f303 	lsl.w	r3, r7, r3
 802b57c:	4543      	cmp	r3, r8
 802b57e:	f040 8274 	bne.w	802ba6a <__ieee754_powf+0x56a>
 802b582:	f007 0701 	and.w	r7, r7, #1
 802b586:	f1c7 0702 	rsb	r7, r7, #2
 802b58a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802b58e:	d11f      	bne.n	802b5d0 <__ieee754_powf+0xd0>
 802b590:	2c00      	cmp	r4, #0
 802b592:	f280 8267 	bge.w	802ba64 <__ieee754_powf+0x564>
 802b596:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802b59a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802b59e:	e7c7      	b.n	802b530 <__ieee754_powf+0x30>
 802b5a0:	2700      	movs	r7, #0
 802b5a2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802b5a6:	d1f0      	bne.n	802b58a <__ieee754_powf+0x8a>
 802b5a8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802b5ac:	f000 8254 	beq.w	802ba58 <__ieee754_powf+0x558>
 802b5b0:	dd08      	ble.n	802b5c4 <__ieee754_powf+0xc4>
 802b5b2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802b8bc <__ieee754_powf+0x3bc>
 802b5b6:	2c00      	cmp	r4, #0
 802b5b8:	bfa8      	it	ge
 802b5ba:	eeb0 0a68 	vmovge.f32	s0, s17
 802b5be:	e7b7      	b.n	802b530 <__ieee754_powf+0x30>
 802b5c0:	2702      	movs	r7, #2
 802b5c2:	e7ee      	b.n	802b5a2 <__ieee754_powf+0xa2>
 802b5c4:	2c00      	cmp	r4, #0
 802b5c6:	f280 824a 	bge.w	802ba5e <__ieee754_powf+0x55e>
 802b5ca:	eeb1 0a68 	vneg.f32	s0, s17
 802b5ce:	e7af      	b.n	802b530 <__ieee754_powf+0x30>
 802b5d0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 802b5d4:	d102      	bne.n	802b5dc <__ieee754_powf+0xdc>
 802b5d6:	ee28 0a08 	vmul.f32	s0, s16, s16
 802b5da:	e7a9      	b.n	802b530 <__ieee754_powf+0x30>
 802b5dc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 802b5e0:	eeb0 0a48 	vmov.f32	s0, s16
 802b5e4:	d107      	bne.n	802b5f6 <__ieee754_powf+0xf6>
 802b5e6:	2e00      	cmp	r6, #0
 802b5e8:	db05      	blt.n	802b5f6 <__ieee754_powf+0xf6>
 802b5ea:	ecbd 8b02 	vpop	{d8}
 802b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b5f2:	f000 ba53 	b.w	802ba9c <__ieee754_sqrtf>
 802b5f6:	f000 fa77 	bl	802bae8 <fabsf>
 802b5fa:	b125      	cbz	r5, 802b606 <__ieee754_powf+0x106>
 802b5fc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 802b600:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 802b604:	d116      	bne.n	802b634 <__ieee754_powf+0x134>
 802b606:	2c00      	cmp	r4, #0
 802b608:	bfbc      	itt	lt
 802b60a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 802b60e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 802b612:	2e00      	cmp	r6, #0
 802b614:	da8c      	bge.n	802b530 <__ieee754_powf+0x30>
 802b616:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 802b61a:	ea55 0307 	orrs.w	r3, r5, r7
 802b61e:	d104      	bne.n	802b62a <__ieee754_powf+0x12a>
 802b620:	ee70 7a40 	vsub.f32	s15, s0, s0
 802b624:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 802b628:	e782      	b.n	802b530 <__ieee754_powf+0x30>
 802b62a:	2f01      	cmp	r7, #1
 802b62c:	d180      	bne.n	802b530 <__ieee754_powf+0x30>
 802b62e:	eeb1 0a40 	vneg.f32	s0, s0
 802b632:	e77d      	b.n	802b530 <__ieee754_powf+0x30>
 802b634:	0ff0      	lsrs	r0, r6, #31
 802b636:	3801      	subs	r0, #1
 802b638:	ea57 0300 	orrs.w	r3, r7, r0
 802b63c:	d104      	bne.n	802b648 <__ieee754_powf+0x148>
 802b63e:	ee38 8a48 	vsub.f32	s16, s16, s16
 802b642:	ee88 0a08 	vdiv.f32	s0, s16, s16
 802b646:	e773      	b.n	802b530 <__ieee754_powf+0x30>
 802b648:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802b64c:	dd74      	ble.n	802b738 <__ieee754_powf+0x238>
 802b64e:	4b9c      	ldr	r3, [pc, #624]	; (802b8c0 <__ieee754_powf+0x3c0>)
 802b650:	429d      	cmp	r5, r3
 802b652:	dc08      	bgt.n	802b666 <__ieee754_powf+0x166>
 802b654:	2c00      	cmp	r4, #0
 802b656:	da0b      	bge.n	802b670 <__ieee754_powf+0x170>
 802b658:	2000      	movs	r0, #0
 802b65a:	ecbd 8b02 	vpop	{d8}
 802b65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b662:	f000 ba3b 	b.w	802badc <__math_oflowf>
 802b666:	4b97      	ldr	r3, [pc, #604]	; (802b8c4 <__ieee754_powf+0x3c4>)
 802b668:	429d      	cmp	r5, r3
 802b66a:	dd08      	ble.n	802b67e <__ieee754_powf+0x17e>
 802b66c:	2c00      	cmp	r4, #0
 802b66e:	dcf3      	bgt.n	802b658 <__ieee754_powf+0x158>
 802b670:	2000      	movs	r0, #0
 802b672:	ecbd 8b02 	vpop	{d8}
 802b676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b67a:	f000 ba29 	b.w	802bad0 <__math_uflowf>
 802b67e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802b682:	ee30 0a67 	vsub.f32	s0, s0, s15
 802b686:	eddf 6a90 	vldr	s13, [pc, #576]	; 802b8c8 <__ieee754_powf+0x3c8>
 802b68a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802b68e:	eee0 6a67 	vfms.f32	s13, s0, s15
 802b692:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802b696:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802b69a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802b69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 802b6a2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 802b8cc <__ieee754_powf+0x3cc>
 802b6a6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802b6aa:	ed9f 7a89 	vldr	s14, [pc, #548]	; 802b8d0 <__ieee754_powf+0x3d0>
 802b6ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 802b6b2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 802b8d4 <__ieee754_powf+0x3d4>
 802b6b6:	eef0 6a67 	vmov.f32	s13, s15
 802b6ba:	eee0 6a07 	vfma.f32	s13, s0, s14
 802b6be:	ee16 3a90 	vmov	r3, s13
 802b6c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802b6c6:	f023 030f 	bic.w	r3, r3, #15
 802b6ca:	ee00 3a90 	vmov	s1, r3
 802b6ce:	eee0 0a47 	vfms.f32	s1, s0, s14
 802b6d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802b6d6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 802b6da:	f024 040f 	bic.w	r4, r4, #15
 802b6de:	ee07 4a10 	vmov	s14, r4
 802b6e2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 802b6e6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802b6ea:	ee07 3a90 	vmov	s15, r3
 802b6ee:	eee7 0a27 	vfma.f32	s1, s14, s15
 802b6f2:	3f01      	subs	r7, #1
 802b6f4:	ea57 0200 	orrs.w	r2, r7, r0
 802b6f8:	ee07 4a10 	vmov	s14, r4
 802b6fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 802b700:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 802b704:	ee30 7aa7 	vadd.f32	s14, s1, s15
 802b708:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 802b70c:	ee17 4a10 	vmov	r4, s14
 802b710:	bf08      	it	eq
 802b712:	eeb0 8a40 	vmoveq.f32	s16, s0
 802b716:	2c00      	cmp	r4, #0
 802b718:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802b71c:	f340 817e 	ble.w	802ba1c <__ieee754_powf+0x51c>
 802b720:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 802b724:	f340 80f8 	ble.w	802b918 <__ieee754_powf+0x418>
 802b728:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802b72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b730:	bf4c      	ite	mi
 802b732:	2001      	movmi	r0, #1
 802b734:	2000      	movpl	r0, #0
 802b736:	e790      	b.n	802b65a <__ieee754_powf+0x15a>
 802b738:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802b73c:	bf01      	itttt	eq
 802b73e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 802b8d8 <__ieee754_powf+0x3d8>
 802b742:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 802b746:	f06f 0217 	mvneq.w	r2, #23
 802b74a:	ee17 5a90 	vmoveq	r5, s15
 802b74e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802b752:	bf18      	it	ne
 802b754:	2200      	movne	r2, #0
 802b756:	3b7f      	subs	r3, #127	; 0x7f
 802b758:	4413      	add	r3, r2
 802b75a:	4a60      	ldr	r2, [pc, #384]	; (802b8dc <__ieee754_powf+0x3dc>)
 802b75c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 802b760:	4295      	cmp	r5, r2
 802b762:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 802b766:	dd06      	ble.n	802b776 <__ieee754_powf+0x276>
 802b768:	4a5d      	ldr	r2, [pc, #372]	; (802b8e0 <__ieee754_powf+0x3e0>)
 802b76a:	4295      	cmp	r5, r2
 802b76c:	f340 80a4 	ble.w	802b8b8 <__ieee754_powf+0x3b8>
 802b770:	3301      	adds	r3, #1
 802b772:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 802b776:	2500      	movs	r5, #0
 802b778:	4a5a      	ldr	r2, [pc, #360]	; (802b8e4 <__ieee754_powf+0x3e4>)
 802b77a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802b77e:	ee07 1a90 	vmov	s15, r1
 802b782:	ed92 7a00 	vldr	s14, [r2]
 802b786:	4a58      	ldr	r2, [pc, #352]	; (802b8e8 <__ieee754_powf+0x3e8>)
 802b788:	ee37 6a27 	vadd.f32	s12, s14, s15
 802b78c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 802b790:	eec5 6a86 	vdiv.f32	s13, s11, s12
 802b794:	1049      	asrs	r1, r1, #1
 802b796:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802b79a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802b79e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 802b7a2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 802b7a6:	ee06 1a10 	vmov	s12, r1
 802b7aa:	ee65 4a26 	vmul.f32	s9, s10, s13
 802b7ae:	ee36 7a47 	vsub.f32	s14, s12, s14
 802b7b2:	ee14 6a90 	vmov	r6, s9
 802b7b6:	4016      	ands	r6, r2
 802b7b8:	ee05 6a90 	vmov	s11, r6
 802b7bc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 802b7c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b7c4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802b8ec <__ieee754_powf+0x3ec>
 802b7c8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802b7cc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 802b7d0:	ee25 6a26 	vmul.f32	s12, s10, s13
 802b7d4:	eddf 6a46 	vldr	s13, [pc, #280]	; 802b8f0 <__ieee754_powf+0x3f0>
 802b7d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802b7dc:	eddf 6a45 	vldr	s13, [pc, #276]	; 802b8f4 <__ieee754_powf+0x3f4>
 802b7e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b7e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802b8c8 <__ieee754_powf+0x3c8>
 802b7e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802b7ec:	eddf 6a42 	vldr	s13, [pc, #264]	; 802b8f8 <__ieee754_powf+0x3f8>
 802b7f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 802b7f4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 802b8fc <__ieee754_powf+0x3fc>
 802b7f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802b7fc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 802b800:	ee27 5aa7 	vmul.f32	s10, s15, s15
 802b804:	ee66 6a86 	vmul.f32	s13, s13, s12
 802b808:	eee5 6a07 	vfma.f32	s13, s10, s14
 802b80c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 802b810:	eef0 7a45 	vmov.f32	s15, s10
 802b814:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802b818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b81c:	ee17 1a90 	vmov	r1, s15
 802b820:	4011      	ands	r1, r2
 802b822:	ee07 1a90 	vmov	s15, r1
 802b826:	ee37 7ac5 	vsub.f32	s14, s15, s10
 802b82a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 802b82e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 802b832:	ee27 7a24 	vmul.f32	s14, s14, s9
 802b836:	eea6 7a27 	vfma.f32	s14, s12, s15
 802b83a:	eeb0 6a47 	vmov.f32	s12, s14
 802b83e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 802b842:	ee16 1a10 	vmov	r1, s12
 802b846:	4011      	ands	r1, r2
 802b848:	ee06 1a90 	vmov	s13, r1
 802b84c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 802b850:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802b900 <__ieee754_powf+0x400>
 802b854:	eddf 5a2b 	vldr	s11, [pc, #172]	; 802b904 <__ieee754_powf+0x404>
 802b858:	ee37 7a66 	vsub.f32	s14, s14, s13
 802b85c:	ee06 1a10 	vmov	s12, r1
 802b860:	ee27 7a27 	vmul.f32	s14, s14, s15
 802b864:	eddf 7a28 	vldr	s15, [pc, #160]	; 802b908 <__ieee754_powf+0x408>
 802b868:	4928      	ldr	r1, [pc, #160]	; (802b90c <__ieee754_powf+0x40c>)
 802b86a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802b86e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 802b872:	edd1 7a00 	vldr	s15, [r1]
 802b876:	ee37 7a27 	vadd.f32	s14, s14, s15
 802b87a:	ee07 3a90 	vmov	s15, r3
 802b87e:	4b24      	ldr	r3, [pc, #144]	; (802b910 <__ieee754_powf+0x410>)
 802b880:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802b884:	eef0 7a47 	vmov.f32	s15, s14
 802b888:	eee6 7a25 	vfma.f32	s15, s12, s11
 802b88c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 802b890:	edd5 0a00 	vldr	s1, [r5]
 802b894:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802b898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802b89c:	ee17 3a90 	vmov	r3, s15
 802b8a0:	4013      	ands	r3, r2
 802b8a2:	ee07 3a90 	vmov	s15, r3
 802b8a6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802b8aa:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802b8ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 802b8b2:	ee77 7a66 	vsub.f32	s15, s14, s13
 802b8b6:	e70e      	b.n	802b6d6 <__ieee754_powf+0x1d6>
 802b8b8:	2501      	movs	r5, #1
 802b8ba:	e75d      	b.n	802b778 <__ieee754_powf+0x278>
 802b8bc:	00000000 	.word	0x00000000
 802b8c0:	3f7ffff3 	.word	0x3f7ffff3
 802b8c4:	3f800007 	.word	0x3f800007
 802b8c8:	3eaaaaab 	.word	0x3eaaaaab
 802b8cc:	3fb8aa3b 	.word	0x3fb8aa3b
 802b8d0:	36eca570 	.word	0x36eca570
 802b8d4:	3fb8aa00 	.word	0x3fb8aa00
 802b8d8:	4b800000 	.word	0x4b800000
 802b8dc:	001cc471 	.word	0x001cc471
 802b8e0:	005db3d6 	.word	0x005db3d6
 802b8e4:	0802d05c 	.word	0x0802d05c
 802b8e8:	fffff000 	.word	0xfffff000
 802b8ec:	3e6c3255 	.word	0x3e6c3255
 802b8f0:	3e53f142 	.word	0x3e53f142
 802b8f4:	3e8ba305 	.word	0x3e8ba305
 802b8f8:	3edb6db7 	.word	0x3edb6db7
 802b8fc:	3f19999a 	.word	0x3f19999a
 802b900:	3f76384f 	.word	0x3f76384f
 802b904:	3f763800 	.word	0x3f763800
 802b908:	369dc3a0 	.word	0x369dc3a0
 802b90c:	0802d06c 	.word	0x0802d06c
 802b910:	0802d064 	.word	0x0802d064
 802b914:	3338aa3c 	.word	0x3338aa3c
 802b918:	f040 8095 	bne.w	802ba46 <__ieee754_powf+0x546>
 802b91c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 802b914 <__ieee754_powf+0x414>
 802b920:	ee37 7a67 	vsub.f32	s14, s14, s15
 802b924:	ee70 6aa6 	vadd.f32	s13, s1, s13
 802b928:	eef4 6ac7 	vcmpe.f32	s13, s14
 802b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b930:	f73f aefa 	bgt.w	802b728 <__ieee754_powf+0x228>
 802b934:	15db      	asrs	r3, r3, #23
 802b936:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 802b93a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802b93e:	4103      	asrs	r3, r0
 802b940:	4423      	add	r3, r4
 802b942:	494b      	ldr	r1, [pc, #300]	; (802ba70 <__ieee754_powf+0x570>)
 802b944:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802b948:	3a7f      	subs	r2, #127	; 0x7f
 802b94a:	4111      	asrs	r1, r2
 802b94c:	ea23 0101 	bic.w	r1, r3, r1
 802b950:	ee07 1a10 	vmov	s14, r1
 802b954:	f3c3 0016 	ubfx	r0, r3, #0, #23
 802b958:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802b95c:	f1c2 0217 	rsb	r2, r2, #23
 802b960:	4110      	asrs	r0, r2
 802b962:	2c00      	cmp	r4, #0
 802b964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802b968:	bfb8      	it	lt
 802b96a:	4240      	neglt	r0, r0
 802b96c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802b970:	ed9f 0a40 	vldr	s0, [pc, #256]	; 802ba74 <__ieee754_powf+0x574>
 802b974:	eddf 6a40 	vldr	s13, [pc, #256]	; 802ba78 <__ieee754_powf+0x578>
 802b978:	ee17 3a10 	vmov	r3, s14
 802b97c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802b980:	f023 030f 	bic.w	r3, r3, #15
 802b984:	ee07 3a10 	vmov	s14, r3
 802b988:	ee77 7a67 	vsub.f32	s15, s14, s15
 802b98c:	ee27 0a00 	vmul.f32	s0, s14, s0
 802b990:	ee70 0ae7 	vsub.f32	s1, s1, s15
 802b994:	eddf 7a39 	vldr	s15, [pc, #228]	; 802ba7c <__ieee754_powf+0x57c>
 802b998:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802b99c:	eef0 7a40 	vmov.f32	s15, s0
 802b9a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 802b9a4:	eeb0 6a67 	vmov.f32	s12, s15
 802b9a8:	eea7 6a66 	vfms.f32	s12, s14, s13
 802b9ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 802b9b0:	ee30 0a46 	vsub.f32	s0, s0, s12
 802b9b4:	eddf 6a32 	vldr	s13, [pc, #200]	; 802ba80 <__ieee754_powf+0x580>
 802b9b8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 802ba84 <__ieee754_powf+0x584>
 802b9bc:	eee7 6a06 	vfma.f32	s13, s14, s12
 802b9c0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 802ba88 <__ieee754_powf+0x588>
 802b9c4:	eea6 6a87 	vfma.f32	s12, s13, s14
 802b9c8:	eddf 6a30 	vldr	s13, [pc, #192]	; 802ba8c <__ieee754_powf+0x58c>
 802b9cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 802b9d0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 802ba90 <__ieee754_powf+0x590>
 802b9d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 802b9d8:	eef0 6a67 	vmov.f32	s13, s15
 802b9dc:	eee6 6a47 	vfms.f32	s13, s12, s14
 802b9e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802b9e4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 802b9e8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 802b9ec:	eea7 0a80 	vfma.f32	s0, s15, s0
 802b9f0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802b9f4:	ee37 0a40 	vsub.f32	s0, s14, s0
 802b9f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 802b9fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ba00:	ee30 0a67 	vsub.f32	s0, s0, s15
 802ba04:	ee10 3a10 	vmov	r3, s0
 802ba08:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 802ba0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802ba10:	da1f      	bge.n	802ba52 <__ieee754_powf+0x552>
 802ba12:	f000 f87d 	bl	802bb10 <scalbnf>
 802ba16:	ee20 0a08 	vmul.f32	s0, s0, s16
 802ba1a:	e589      	b.n	802b530 <__ieee754_powf+0x30>
 802ba1c:	4a1d      	ldr	r2, [pc, #116]	; (802ba94 <__ieee754_powf+0x594>)
 802ba1e:	4293      	cmp	r3, r2
 802ba20:	dd07      	ble.n	802ba32 <__ieee754_powf+0x532>
 802ba22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba2a:	bf4c      	ite	mi
 802ba2c:	2001      	movmi	r0, #1
 802ba2e:	2000      	movpl	r0, #0
 802ba30:	e61f      	b.n	802b672 <__ieee754_powf+0x172>
 802ba32:	d108      	bne.n	802ba46 <__ieee754_powf+0x546>
 802ba34:	ee37 7a67 	vsub.f32	s14, s14, s15
 802ba38:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ba40:	f6ff af78 	blt.w	802b934 <__ieee754_powf+0x434>
 802ba44:	e7ed      	b.n	802ba22 <__ieee754_powf+0x522>
 802ba46:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802ba4a:	f73f af73 	bgt.w	802b934 <__ieee754_powf+0x434>
 802ba4e:	2000      	movs	r0, #0
 802ba50:	e78c      	b.n	802b96c <__ieee754_powf+0x46c>
 802ba52:	ee00 3a10 	vmov	s0, r3
 802ba56:	e7de      	b.n	802ba16 <__ieee754_powf+0x516>
 802ba58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ba5c:	e568      	b.n	802b530 <__ieee754_powf+0x30>
 802ba5e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 802ba98 <__ieee754_powf+0x598>
 802ba62:	e565      	b.n	802b530 <__ieee754_powf+0x30>
 802ba64:	eeb0 0a48 	vmov.f32	s0, s16
 802ba68:	e562      	b.n	802b530 <__ieee754_powf+0x30>
 802ba6a:	2700      	movs	r7, #0
 802ba6c:	e58d      	b.n	802b58a <__ieee754_powf+0x8a>
 802ba6e:	bf00      	nop
 802ba70:	007fffff 	.word	0x007fffff
 802ba74:	35bfbe8c 	.word	0x35bfbe8c
 802ba78:	3f317200 	.word	0x3f317200
 802ba7c:	3f317218 	.word	0x3f317218
 802ba80:	b5ddea0e 	.word	0xb5ddea0e
 802ba84:	3331bb4c 	.word	0x3331bb4c
 802ba88:	388ab355 	.word	0x388ab355
 802ba8c:	bb360b61 	.word	0xbb360b61
 802ba90:	3e2aaaab 	.word	0x3e2aaaab
 802ba94:	43160000 	.word	0x43160000
 802ba98:	00000000 	.word	0x00000000

0802ba9c <__ieee754_sqrtf>:
 802ba9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802baa0:	4770      	bx	lr

0802baa2 <with_errnof>:
 802baa2:	b513      	push	{r0, r1, r4, lr}
 802baa4:	4604      	mov	r4, r0
 802baa6:	ed8d 0a01 	vstr	s0, [sp, #4]
 802baaa:	f7fc fa91 	bl	8027fd0 <__errno>
 802baae:	ed9d 0a01 	vldr	s0, [sp, #4]
 802bab2:	6004      	str	r4, [r0, #0]
 802bab4:	b002      	add	sp, #8
 802bab6:	bd10      	pop	{r4, pc}

0802bab8 <xflowf>:
 802bab8:	b130      	cbz	r0, 802bac8 <xflowf+0x10>
 802baba:	eef1 7a40 	vneg.f32	s15, s0
 802babe:	ee27 0a80 	vmul.f32	s0, s15, s0
 802bac2:	2022      	movs	r0, #34	; 0x22
 802bac4:	f7ff bfed 	b.w	802baa2 <with_errnof>
 802bac8:	eef0 7a40 	vmov.f32	s15, s0
 802bacc:	e7f7      	b.n	802babe <xflowf+0x6>
	...

0802bad0 <__math_uflowf>:
 802bad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802bad8 <__math_uflowf+0x8>
 802bad4:	f7ff bff0 	b.w	802bab8 <xflowf>
 802bad8:	10000000 	.word	0x10000000

0802badc <__math_oflowf>:
 802badc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802bae4 <__math_oflowf+0x8>
 802bae0:	f7ff bfea 	b.w	802bab8 <xflowf>
 802bae4:	70000000 	.word	0x70000000

0802bae8 <fabsf>:
 802bae8:	ee10 3a10 	vmov	r3, s0
 802baec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802baf0:	ee00 3a10 	vmov	s0, r3
 802baf4:	4770      	bx	lr

0802baf6 <finitef>:
 802baf6:	b082      	sub	sp, #8
 802baf8:	ed8d 0a01 	vstr	s0, [sp, #4]
 802bafc:	9801      	ldr	r0, [sp, #4]
 802bafe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802bb02:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 802bb06:	bfac      	ite	ge
 802bb08:	2000      	movge	r0, #0
 802bb0a:	2001      	movlt	r0, #1
 802bb0c:	b002      	add	sp, #8
 802bb0e:	4770      	bx	lr

0802bb10 <scalbnf>:
 802bb10:	ee10 3a10 	vmov	r3, s0
 802bb14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802bb18:	d025      	beq.n	802bb66 <scalbnf+0x56>
 802bb1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802bb1e:	d302      	bcc.n	802bb26 <scalbnf+0x16>
 802bb20:	ee30 0a00 	vadd.f32	s0, s0, s0
 802bb24:	4770      	bx	lr
 802bb26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802bb2a:	d122      	bne.n	802bb72 <scalbnf+0x62>
 802bb2c:	4b2a      	ldr	r3, [pc, #168]	; (802bbd8 <scalbnf+0xc8>)
 802bb2e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802bbdc <scalbnf+0xcc>
 802bb32:	4298      	cmp	r0, r3
 802bb34:	ee20 0a27 	vmul.f32	s0, s0, s15
 802bb38:	db16      	blt.n	802bb68 <scalbnf+0x58>
 802bb3a:	ee10 3a10 	vmov	r3, s0
 802bb3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802bb42:	3a19      	subs	r2, #25
 802bb44:	4402      	add	r2, r0
 802bb46:	2afe      	cmp	r2, #254	; 0xfe
 802bb48:	dd15      	ble.n	802bb76 <scalbnf+0x66>
 802bb4a:	ee10 3a10 	vmov	r3, s0
 802bb4e:	eddf 7a24 	vldr	s15, [pc, #144]	; 802bbe0 <scalbnf+0xd0>
 802bb52:	eddf 6a24 	vldr	s13, [pc, #144]	; 802bbe4 <scalbnf+0xd4>
 802bb56:	2b00      	cmp	r3, #0
 802bb58:	eeb0 7a67 	vmov.f32	s14, s15
 802bb5c:	bfb8      	it	lt
 802bb5e:	eef0 7a66 	vmovlt.f32	s15, s13
 802bb62:	ee27 0a27 	vmul.f32	s0, s14, s15
 802bb66:	4770      	bx	lr
 802bb68:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802bbe8 <scalbnf+0xd8>
 802bb6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802bb70:	4770      	bx	lr
 802bb72:	0dd2      	lsrs	r2, r2, #23
 802bb74:	e7e6      	b.n	802bb44 <scalbnf+0x34>
 802bb76:	2a00      	cmp	r2, #0
 802bb78:	dd06      	ble.n	802bb88 <scalbnf+0x78>
 802bb7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802bb7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802bb82:	ee00 3a10 	vmov	s0, r3
 802bb86:	4770      	bx	lr
 802bb88:	f112 0f16 	cmn.w	r2, #22
 802bb8c:	da1a      	bge.n	802bbc4 <scalbnf+0xb4>
 802bb8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 802bb92:	4298      	cmp	r0, r3
 802bb94:	ee10 3a10 	vmov	r3, s0
 802bb98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802bb9c:	dd0a      	ble.n	802bbb4 <scalbnf+0xa4>
 802bb9e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802bbe0 <scalbnf+0xd0>
 802bba2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802bbe4 <scalbnf+0xd4>
 802bba6:	eef0 7a40 	vmov.f32	s15, s0
 802bbaa:	2b00      	cmp	r3, #0
 802bbac:	bf18      	it	ne
 802bbae:	eeb0 0a47 	vmovne.f32	s0, s14
 802bbb2:	e7db      	b.n	802bb6c <scalbnf+0x5c>
 802bbb4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802bbe8 <scalbnf+0xd8>
 802bbb8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802bbec <scalbnf+0xdc>
 802bbbc:	eef0 7a40 	vmov.f32	s15, s0
 802bbc0:	2b00      	cmp	r3, #0
 802bbc2:	e7f3      	b.n	802bbac <scalbnf+0x9c>
 802bbc4:	3219      	adds	r2, #25
 802bbc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802bbca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802bbce:	eddf 7a08 	vldr	s15, [pc, #32]	; 802bbf0 <scalbnf+0xe0>
 802bbd2:	ee07 3a10 	vmov	s14, r3
 802bbd6:	e7c4      	b.n	802bb62 <scalbnf+0x52>
 802bbd8:	ffff3cb0 	.word	0xffff3cb0
 802bbdc:	4c000000 	.word	0x4c000000
 802bbe0:	7149f2ca 	.word	0x7149f2ca
 802bbe4:	f149f2ca 	.word	0xf149f2ca
 802bbe8:	0da24260 	.word	0x0da24260
 802bbec:	8da24260 	.word	0x8da24260
 802bbf0:	33000000 	.word	0x33000000

0802bbf4 <_init>:
 802bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bbf6:	bf00      	nop
 802bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bbfa:	bc08      	pop	{r3}
 802bbfc:	469e      	mov	lr, r3
 802bbfe:	4770      	bx	lr

0802bc00 <_fini>:
 802bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bc02:	bf00      	nop
 802bc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bc06:	bc08      	pop	{r3}
 802bc08:	469e      	mov	lr, r3
 802bc0a:	4770      	bx	lr
